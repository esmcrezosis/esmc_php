<?php
class SouscriptionbonController extends Zend_Controller_Action {

    public function init() {
        /* Initialize action controller here */
        include("Url.php");   
    }

    
    
	public  function inscriptioncapsAction()  {
	    $sessionmcnp = new Zend_Session_Namespace('mcnp');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');

		$t_canton = new Application_Model_DbTable_EuCanton();
        $t_region = new Application_Model_DbTable_EuRegion();
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $t_pays = new Application_Model_DbTable_EuPays();
        $t_zone = new Application_Model_DbTable_EuZone();
		
		$cantons = $t_canton->fetchAll();
		$prefectures = $t_prefecture->fetchAll();
        $regions = $t_region->fetchAll();
        $pays = $t_pays->fetchAll();
        $zones = $t_zone->fetchAll();
        
        $this->view->cantons = $cantons;
        $this->view->regions = $regions;
        $this->view->zones = $zones;
        $this->view->pays = $pays;
        $this->view->prefectures = $prefectures;
		
		$request = $this->getRequest();
	    if($request->isPost()) {
		    if(isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
		    && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
		    && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
		    && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
		    && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
		    && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
		    && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
		    && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
		    && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
		    && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
		    && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
		    && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
		    && isset($_POST['id_pays']) && $_POST['id_pays']!=""
		    && isset($_POST['code_agence']) && $_POST['code_agence']!="") {
		
		        $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
		        try {
                    $membre  = new Application_Model_EuMembre();
	                $m_map   = new Application_Model_EuMembreMapper();
					$membremoral = new Application_Model_EuMembreMorale();
	                $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
					$mstiersliste = new Application_Model_EuMstiersListecm();
		            $m_mstiersliste = new Application_Model_EuMstiersListecmMapper();
					$mstiers   = new Application_Model_EuMstiers();
		            $m_mstiers = new Application_Model_EuMstiersMapper();

                    $code_agence = $request->getParam("code_agence");
				    $code_zone = $request->getParam("code_zone");
					$date_nais = new Zend_Date($request->getParam("date_nais_membre"));
					
					$date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;

                    $liste = "abcdefghjkmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWXYZ";
                    $codesecret = "";
                    while(strlen($codesecret) != 8) {
                       $codesecret .= $liste[rand(0,strlen($liste)-1)]; 
                    }
					
					///////////////// controle nom prenom dans mstiers_listecm ////////////////////////////
					$prenom_membre = $request->getParam("prenom_membre");
					//$pos1 = stripos($prenom_membre, "'");
					$prenom_membre = str_replace("'", " ", $prenom_membre);
					$tabprenom = explode(" ",$prenom_membre);
					
					$nom_membre = $request->getParam("nom_membre");
					//$pos2 = stripos($nom_membre, "'");
					$nom_membre = str_replace("'", " ", $nom_membre);
					
					$euliste = new Application_Model_DbTable_EuMstiersListecm();
					$selection = $euliste->select();
					$selection->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));
					
                    foreach($tabprenom as $value) {
	                  $selection->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				    }
					
					$selection->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	                $selection->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	                $selection->limit(1);
	                $rowseuliste = $euliste->fetchRow($selection);
					
					
					if(count($rowseuliste) > 0) {
					   $this->view->error = "Vous êtes déjà inscrit !!!";
                       $db->rollback();
                       $this->view->nom_membre = $request->getParam("nom_membre");
                       $this->view->prenom_membre = $request->getParam("prenom_membre");
                       $this->view->sexe = $request->getParam("sexe_membre");
                       $this->view->sitfam = $request->getParam("sitfam_membre");
                       $this->view->datnais = $request->getParam("date_nais_membre");
                       $this->view->nation = $request->getParam("nationalite_membre");
                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                       $this->view->formation = $request->getParam("formation");
                       $this->view->profession = $request->getParam("profession_membre");
                       $this->view->religion = $request->getParam("religion_membre");
                       $this->view->pere = $request->getParam("pere_membre");
                       $this->view->mere = $request->getParam("mere_membre");
                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                       $this->view->ville_membre = $request->getParam("ville_membre");
                       $this->view->bp = $request->getParam("bp_membre");
                       $this->view->email = $request->getParam("email_membre");
                       return;
			        }
					
					///////////////// controle nom prenom dans membre ////////////////////////////////////
					$eupreinscription = new Application_Model_DbTable_EuMembre();
					$select = $eupreinscription->select();
					$select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

				    foreach($tabprenom as $value) {
	                  $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
				    }

	                $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$date_nais->toString('yyyy-MM-dd'))));
	                $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
	                $select->limit(1);
	                $rowseupreinscription = $eupreinscription->fetchRow($select);
					
					if(count($rowseupreinscription) > 0) {
					  $this->view->error = "Vous êtes déjà membre !!!";
                      $db->rollback();
                      $this->view->nom_membre = $request->getParam("nom_membre");
                      $this->view->prenom_membre = $request->getParam("prenom_membre");
                      $this->view->sexe = $request->getParam("sexe_membre");
                      $this->view->sitfam = $request->getParam("sitfam_membre");
                      $this->view->datnais = $request->getParam("date_nais_membre");
                      $this->view->nation = $request->getParam("nationalite_membre");
                      $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                      $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                      $this->view->formation = $request->getParam("formation");
                      $this->view->profession = $request->getParam("profession_membre");
                      $this->view->religion = $request->getParam("religion_membre");
                      $this->view->pere = $request->getParam("pere_membre");
                      $this->view->mere = $request->getParam("mere_membre");
                      $this->view->quartier_membre = $request->getParam("quartier_membre");
                      $this->view->ville_membre = $request->getParam("ville_membre");
                      $this->view->bp = $request->getParam("bp_membre");
                      $this->view->email = $request->getParam("email_membre");
                      return;
			        }
					
					//insertion dans la table eu_mstiers_listecm
                    $mstierslistecm_mapper = new Application_Model_EuMstiersListecmMapper();
                    //$compteur_mstiers = $mstierslistecm_mapper->findConuter() + 1;
					
					//$mstiersliste->setId_mstiers_listecm($compteur_mstiers)
					
					$mstiersliste->setCode_membre_apporteur(null)
						         ->setCode_membre_beneficiaire(NULL)
						         ->setNom_membre($nom_membre)
						         ->setPrenom_membre($prenom_membre)
						         ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
						         ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
						         ->setPere_membre($request->getParam("pere_membre"))
                                 ->setMere_membre($request->getParam("mere_membre"))
						         ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
						         ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
						         ->setBp_membre($request->getParam("bp_membre"))
						         ->setCodesecret($codesecret)
						         ->setEmail_membre($request->getParam("email_membre"))
						         ->setFormation($request->getParam("formation"))
							     ->setProfession_membre($request->getParam("profession_membre"))
						         ->setQuartier_membre($request->getParam("quartier_membre"))
						         ->setSexe_membre($request->getParam("sexe_membre"))
						         ->setSitfam_membre($request->getParam("sitfam_membre"))
						         ->setVille_membre($request->getParam("ville_membre"))
						         ->setCode_zone($request->getParam("code_zone"))
						         ->setId_pays($request->getParam("nationalite_membre"))
						         ->setId_canton($request->getParam("id_canton"))
						         ->setId_religion_membre($request->getParam("religion_membre"))
						         ->setCode_agence($code_agence)
						         ->setDate_listecm($date_id->toString('yyyy-MM-dd HH:mm:ss'))
						         ->setCode_caps(null)
						         ->setUtilisateur(1)
						         ->setStatut(0)
                                                         ->setDoublon(0)
						         ->setType_liste("SansListe");
					$m_mstiersliste->save($mstiersliste);
					$compteur_mstiers = $db->lastInsertId();
					
					//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
						
					    $compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
                        $numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
					
					    if($compagnie == 1)  {
                            $this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct. !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            return;
							 
                        } else {
						    $date_id = new Zend_Date(Zend_Date::ISO_8601);
				            $telephone = new Application_Model_EuTelephone();
				            $m_telephone = new Application_Model_EuTelephoneMapper();
							 
					        //$compteur = $m_telephone->findConuter() + 1;
					        //$telephone->setId_telephone($compteur);
							
					        $telephone->setNumero_telephone($numero_telephone);
					        $telephone->setCompagnie_telephone($compagnie);
					        $telephone->setCode_membre(null);
							$telephone->setId_mstiers_listecm($compteur_mstiers);
					        $m_telephone->save($telephone); 
						}
					//}
					
					$db->commit();
                    $sessionmcnp->error = "Operation d'enrolement reussie pour ce membre";										
					$this->_redirect('/souscriptionbon/inscriptioncaps');

                } catch (Exception $exc) {
			        $db->rollback();
		            $error = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
                    $this->view->error = $error;
			        $this->view->nom_membre = $request->getParam("nom_membre");
                    $this->view->prenom_membre = $request->getParam("prenom_membre");
                    $this->view->sexe = $request->getParam("sexe_membre");
                    $this->view->sitfam = $request->getParam("sitfam_membre");
                    $this->view->datnais = $request->getParam("date_nais_membre");
                    $this->view->nation = $request->getParam("nationalite_membre");
                    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                    $this->view->formation = $request->getParam("formation");
                    $this->view->profession = $request->getParam("profession_membre");
                    $this->view->religion = $request->getParam("religion_membre");
                    $this->view->pere = $request->getParam("pere_membre");
                    $this->view->mere = $request->getParam("mere_membre");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
			        $this->view->email = $request->getParam("email_membre");
		            return;
	            }

		    } else {
			    $this->view->error = "Champs * obligatoire ...";
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->email = $request->getParam("email_membre");
			}
		
		}		
		
    }


    
	public  function inscriptionbcAction()  {
		$sessionmcnp = new Zend_Session_Namespace('mcnp');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
		
		$request = $this->getRequest();
	    if($request->isPost()) {
		    $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
		        $mstiersliste = new Application_Model_EuMstiersListebc();
		        $m_mstiersliste = new Application_Model_EuMstiersListebcMapper();
                $membre  = new Application_Model_EuMembre();
	            $m_map   = new Application_Model_EuMembreMapper();
			 
			    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;
			 
			    $apporteur = NULL;
			    $beneficiaire = $request->getParam("code_membre_beneficiaire");  
				
				$findbeneficiaire = $m_map->find($beneficiaire,$membre);
			    if($findbeneficiaire == false) {
			       $this->view->error = "Le code membre du beneficiaire saisi  ".$beneficiaire."  est introuvable ...";
                   $db->rollback();
                   return;      
			    }
				
				$findbenef  = $m_mstiersliste->fetchAllByBeneficiaire($beneficiaire);
				if($findbenef !== NULL) {
			      $this->view->error = "Vous etes déjà inscrits sur le fichier ODD ...";
                  $db->rollback();
                  return;      
			    }
				
				//insertion dans la table eu_mstiers_listebc
                $mstierslistebc_mapper = new Application_Model_EuMstiersListebcMapper();
                $compteur_mstiers = $mstierslistebc_mapper->findConuter() + 1;
					
			    $mstiersliste->setId_mstiers_listebc($compteur_mstiers)
					         ->setCode_membre_apporteur($apporteur)
						     ->setCode_membre_beneficiaire($beneficiaire)
						     ->setCode_bnp(null)
						     ->setDate_listebc($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
							 ->setStatut(0);
			    $m_mstiersliste->save($mstiersliste);
				
				$db->commit();
			    $sessionmcnp->error = "Operation bien effectuee ...";
			    $this->_redirect('/souscriptionbon/inscriptionbc');
				
		    } catch (Exception $exc) {
		       $db->rollback();
			   $error = "Erreur d\'éxécution : " . $exc->getMessage() . $exc->getTraceAsString();
               $this->view->error = $error;
			   return;
		    }
        
		}
		
		
		
    }



    public function conventionAction(){
            $this->_helper->layout()->setLayout('layoutpublicesmc');
    $dbcv = new Application_Model_DbTable_EuConvention();
    $cv = new Application_Model_EuConvention();
    $mpcv = new Application_Model_EuConventionMapper();
    $request = $this->getRequest();
    $validationerrors = array();
    $validationemailerrors = array();
    $validationperteerrors = array();
    $validationpertesuccess = array();
    $convention_array = array();
    $created = Zend_Date::now();

    if($request->isPost()){
      if(!array_key_exists('renseignement_check_name', $_POST)){
        $validationerrors['error_demandeur'] = "Erreur 404: de ce ticket n'existe pas";
      }
      if($_POST['renseignement_check_name'] == "Personne_physique"){
         if(!array_key_exists('civilite_name', $_POST)){
            $validationerrors['error_demandeur'] = "Erreur 404:Le Nom et Prenoms du demandeur de ce ticket n'existe pas";
         }
         if(empty($_POST['civilite_name'])){
            $validationerrors['empty_civilite_name'] = "Vos Nom et Prenoms ne doivent pas être vide";
         }

         if(!array_key_exists('civilite_type_demeure', $_POST)){
            $validationerrors['error_civilite_type_demeure'] = "Erreur 404:Le Type demeur n'existe pas";
         }
         if(empty($_POST['civilite_type_demeure']) || $_POST['civilite_type_demeure'] == ""){
            $validationerrors['empty_civilite_type_demeure'] = "Le lieu ne doivent pas être vide";
         }

        if(!array_key_exists('civilite_quartier', $_POST)){
            $validationerrors['error_civilite_quartier'] = "Erreur 404:le quartier n'existe pas";
         }
         if(empty($_POST['civilite_quartier'])){
            $validationerrors['empty_civilite_quartier'] = "Le quartier n'est pas rempli";
         }

        if(!array_key_exists('civilite_bp', $_POST)){
            $validationerrors['error_civilite_bp'] = "Erreur 404:La boîte postale n'est pas précisé";
        }

        if(!array_key_exists('civilite_phone', $_POST)){
            $validationerrors['error_civilite_phone'] = "Erreur 404:Le champs numero de telephone n'est pas précisé";
        }
        if(empty($_POST['civilite_phone'])){
            $validationerrors['empty_civilite_phone'] = "Le numero de telephone n'est pas rempli";
        }
        if($_POST['civilite_phone'] !== ""){
          if(filter_var($_POST['civilite_phone'], FILTER_VALIDATE_REGEXP,
             array("options"=>array("regexp"=>"#[^0-9]#")))){
             $validationerrors['verif_civilite_phone'] = "Le Numero de telephone doit être numérique";
           }
        }
        

         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["civilite_name"],
           "demeure"=>$_POST["civilite_type_demeure"],
           "libelle_demeure"=>$_POST["civilite_domicile"],
           "quartier"=>$_POST["civilite_quartier"],
           "boite_postale"=>$_POST["civilite_bp"],
           "telephone"=>$_POST["civilite_phone"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

       if($_POST['renseignement_check_name'] == "Etablissement"){
         if(!array_key_exists('etablissement_name', $_POST)){
            $validationerrors['error_demandeur'] = "Erreur 404:Le Nom de l'établissement n'existe pas";
         }
         if(empty($_POST['etablissement_name'])){
            $validationerrors['empty_etablissement_name'] = "Le nom de l'établissement pas être vide";
         }

         if(!array_key_exists('etablissement_residence', $_POST)){
            $validationerrors['error_etablissement_residence'] = "Erreur 404:Le Lieu de l'établissement n'existe pas";
         }
         if(empty($_POST['etablissement_residence'])){
            $validationerrors['empty_etablissement_residence'] = "Le Lieu de l'établissement ne doit pas être vide";
         }

        if(!array_key_exists('etablissement_quartier', $_POST)){
            $validationerrors['error_etablissement_quartier'] = "Erreur 404:le quartier de l'établissement n'existe pas";
         }
         if(empty($_POST['etablissement_quartier'])){
            $validationerrors['empty_etablissement_quartier'] = "Le quartier de l'établissement n'est pas rempli";
         }

        if(!array_key_exists('etablissement_representant_bp', $_POST)){
            $validationerrors['error_etablissement_representant_bp'] = "Erreur 404:La boîte postale du représentant l'établissemnt est invalide";
        }

        if(empty($_POST['etablissement_representant_bp'])){
            $validationerrors['empty_etablissement_representant_bp'] = "La boîte postale du représentant de l'établissement n'est pas rempli";
         }

        if(!array_key_exists('etablissement_representant_phone', $_POST)){
            $validationerrors['error_etablissement_representant_phone'] = "Erreur 404:Le champs numero de telephone n'est pas précisé";
        }
        if(empty($_POST['etablissement_representant_phone'])){
            $validationerrors['empty_etablissement_representant_phone'] = "Le numero de telephone n'est pas rempli";
        }
        if($_POST['etablissement_representant_phone'] !== ""){
          if(filter_var($_POST['etablissement_representant_phone'], FILTER_VALIDATE_REGEXP,
             array("options"=>array("regexp"=>"#[^0-9]#")))){
             $validationerrors['verif_etablissement_representant_phone'] = "Le Numero de telephone doit être numérique";
           }
        }

        if(!array_key_exists('etablissement_rue', $_POST)){
            $validationerrors['error_etablissement_rue'] = "Erreur 404:La Rue de l'établissemnt est invalide:Impossible de faire une quelconque sauvegarde";
        }

        if(empty($_POST['etablissement_rue'])){
            $validationerrors['empty_etablissement_rue'] = "Le Nom du représentant de l'établissement n'est pas rempli";
         }

        if(!array_key_exists('etablissement_representant_name', $_POST)){
            $validationerrors['error_etablissement_representant_name'] = "Erreur 404:Le Nom du représentant de l'établissemnt est invalide:Impossible de faire une quelconque sauvegarde";
        }

        if(empty($_POST['etablissement_representant_name'])){
            $validationerrors['empty_etablissement_representant_name'] = "Le Nom du représentant de l'établissement n'est pas rempli";
         }

        if(!array_key_exists('etablissement_representant_operateur', $_POST)){
            $validationerrors['error_etablissement_representant_operateur'] = "Erreur 404:Le Numero d'opérateur du représentant de l'établissemnt est invalide:Impossible de faire une quelconque sauvegarde";
        }

        if(empty($_POST['etablissement_representant_operateur'])){
            $validationerrors['empty_etablissement_representant_operateur'] = "Le Numero d'opérateur du représentant de l'établissement n'est pas rempli";
         }

        $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["etablissement_name"],
           "libelle_situation"=>$_POST["etablissement_residence"],
           "quartier"=>$_POST["etablissement_quartier"],
           "boite_postale"=>$_POST["etablissement_representant_bp"],
           "telephone"=>$_POST["etablissement_representant_phone"],
           "rue"=>$_POST["etablissement_rue"],
           "civilite_representant"=>$_POST["etablissement_representant"],
           "nom_representant"=>$_POST["etablissement_representant_name"],
           "carte_operateur"=>$_POST["etablissement_representant_operateur"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

       if($_POST['renseignement_check_name'] == "MVI"){
         if(!array_key_exists('residence_name', $_POST)){
            $validationerrors['error_residence_name'] = "Erreur 404:Le Nom de la maison/Villa/Immeuble n'existe pas";
         }
         if(empty($_POST['residence_name'])){
            $validationerrors['empty_residence_name'] = "Le nom de la maison/Villa/Immeuble ne doit pas être vide";
         }

         if(!array_key_exists('residence_situation', $_POST)){
            $validationerrors['error_residence_situation'] = "Erreur 404:Le lieu de la maison/Villa/Immeuble n'existe pas";
         }
         if(empty($_POST['residence_situation'])){
            $validationerrors['empty_residence_situation'] = "Le lieu de la maison/Villa/Immeuble ne doit pas être vide";
         }

         if(!array_key_exists('residence_representant_demeure', $_POST)){
            $validationerrors['error_residence_representant_demeure'] = "Erreur 404:Le Lieu de residence du représentant de la maison/Villa/Immeuble n'existe pas";
         }
         if(empty($_POST['residence_representant_demeure'])){
            $validationerrors['empty_residence_representant_demeure'] = "Le Lieu de residence du représentant de la maison/Villa/Immeuble ne doit pas être vide";
         }

        if(!array_key_exists('residence_quartier', $_POST)){
            $validationerrors['error_residence_quartier'] = "Erreur 404:le quartier de la maison/Villa/Immeuble n'existe pas";
         }
         if(empty($_POST['residence_quartier'])){
            $validationerrors['empty_residence_quartier'] = "Le quartier de la maison/Villa/Immeuble n'est pas rempli";
         }

        if(!array_key_exists('residence_representant_bp', $_POST)){
            $validationerrors['error_etablissement_representant_bp'] = "Erreur 404:La boîte postale du représentant la résidence est invalide";
        }

        if(empty($_POST['residence_representant_bp'])){
            $validationerrors['empty_residence_representant_bp'] = "La boîte postale du représentant de la maison/Villa/Immeuble n'est pas rempli";
         }

        if(!array_key_exists('residence_representant_phone', $_POST)){
            $validationerrors['error_residence_representant_phone'] = "Erreur 404:Le champs numero de la maison/Villa/Immeuble n'est pas précisé";
        }
        if(empty($_POST['residence_representant_phone'])){
            $validationerrors['empty_residence_representant_phone'] = "Le numero de telephone du represésentant de la maison/Villa/Immeuble n'est pas rempli";
        }
        if($_POST['residence_representant_phone'] !== ""){
          if(filter_var($_POST['residence_representant_phone'], FILTER_VALIDATE_REGEXP,
             array("options"=>array("regexp"=>"#[^0-9]#")))){
             $validationerrors['verif_residence_representant_phone'] = "Le Numero de telephone du represésentant de la maison/Villa/Immeuble doit être numérique";
           }
        }

        if(!array_key_exists('residence_rue', $_POST)){
            $validationerrors['error_residence_rue'] = "Erreur 404:La Rue de la maison/Villa/Immeuble est invalide:Impossible de faire une quelconque sauvegarde";
        }

        if(empty($_POST['residence_rue'])){
            $validationerrors['empty_residence_rue'] = "Le Nom du représentant de la maison/Villa/Immeuble n'est pas rempli";
         }

        if(!array_key_exists('residence_representant', $_POST)){
            $validationerrors['error_residence_representant'] = "Erreur 404:Le Nom du représentant de la maison/Villa/Immeuble est invalide:Impossible de faire une quelconque sauvegarde";
        }

        if(empty($_POST['residence_representant'])){
            $validationerrors['empty_residence_representant'] = "Le Nom du représentant de la maison/Villa/Immeuble n'est pas rempli";
         }


         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "type_maison"=>$_POST["residence_name"],
           "demeure"=>$_POST["residence_representant_demeure"],
           "libelle_situation"=>$_POST["residence_situation"],
           "quartier"=>$_POST["residence_quartier"],
           "boite_postale"=>$_POST["residence_representant_bp"],
           "telephone"=>$_POST["residence_representant_phone"],
           "rue"=>$_POST["residence_rue"],
           "nom_representant"=>$_POST["residence_representant"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }


       if($_POST['renseignement_check_name'] == "Collectivité"){
        if(!array_key_exists('collectivite_name', $_POST)){
            $validationerrors['error_collectivite_name'] = "Erreur 404:Le Nom de la collectivité n'existe pas";
         }
         if(empty($_POST['collectivite_name'])){
            $validationerrors['empty_collectivite_name'] = "Le nom de la collectivité ne doit pas être vide";
         }

         if(!array_key_exists('collectivite_domicile', $_POST)){
            $validationerrors['error_collectivite_domicile'] = "Erreur 404:Le Lieu de residence du représentant de la collectivité n'existe pas";
         }
         if(empty($_POST['collectivite_domicile'])){
            $validationerrors['empty_collectivite_domicile'] = "Le Lieu de residence du représentant de la collectivité ne doit pas être vide";
         }

        if(!array_key_exists('collectivite_quartier', $_POST)){
            $validationerrors['error_collectivite_quartier'] = "Erreur 404:le quartier de la collectivité n'existe pas";
         }
         if(empty($_POST['collectivite_quartier'])){
            $validationerrors['empty_collectivite_quartier'] = "Le quartier de la collectivité n'est pas rempli";
         }

        if(!array_key_exists('collectivite_bp', $_POST)){
            $validationerrors['error_collectivite_bp'] = "Erreur 404:La boîte postale du représentant de la collectivité est invalide";
        }

        if(empty($_POST['collectivite_bp'])){
            $validationerrors['empty_collectivite_bp'] = "La boîte postale du représentant de la collectivité n'est pas rempli";
         }

        if(!array_key_exists('collectivite_tel', $_POST)){
            $validationerrors['error_collectivite_tel'] = "Erreur 404:Le champs numero de telephone du representant de la collectivité n'est pas précisé";
        }
        if(empty($_POST['residence_collectivite_tel'])){
            $validationerrors['empty_collectivite_tel'] = "Le numero de telephone du represésentant de la collectivité n'est pas rempli";
        }
        if($_POST['collectivite_tel'] !== ""){
          if(filter_var($_POST['collectivite_tel'], FILTER_VALIDATE_REGEXP,
             array("options"=>array("regexp"=>"#[^0-9]#")))){
             $validationerrors['verif_collectivite_tel'] = "Le Numero de telephone du represésentant de la collectivité doit être numérique";
           }
        }

        if(!array_key_exists('collectivite_representant', $_POST)){
            $validationerrors['error_collectivite_representant'] = "Erreur 404:Le Nom du représentant de la collectivité est invalide:Impossible de faire une quelconque sauvegarde";
        }

        if(empty($_POST['collectivite_representant'])){
            $validationerrors['empty_collectivite_representant'] = "Le Nom du représentant de la collectivité n'est pas rempli";
         }
          $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["collectivite_name"],
           "demeure"=>$_POST["collectivite_domicile"],
           "quartier"=>$_POST["collectivite_quartier"],
           "boite_postale"=>$_POST["collectivite_bp"],
           "telephone"=>$_POST["collectivite_tel"],
           "nom_representant"=>$_POST["collectivite_representant"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

       if($_POST['renseignement_check_name'] == "Association"){
        if(!array_key_exists('association_name', $_POST)){
            $validationerrors['error_association_name'] = "Erreur 404:Le Nom de l'Association est invalide:Impossible de faire une quelconque sauvegarde";
        }

        if(empty($_POST['association_name'])){
            $validationerrors['empty_association_name'] = "Le Nom de l'Association n'est pas rempli";
         }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["ong_association_name"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

        if($_POST['renseignement_check_name'] == "Groupement"){
          if(!array_key_exists('groupement_name', $_POST)){
            $validationerrors['error_groupement_name'] = "Erreur 404:Le Nom du groupement est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['groupement_name'])){
            $validationerrors['empty_groupement_name'] = "Le Nom du groupement n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["groupement_name"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

       if($_POST['renseignement_check_name'] == "Coopérative"){
          if(!array_key_exists('cooperative_name', $_POST)){
            $validationerrors['error_cooperative_name'] = "Erreur 404:Le Nom de la coopérative est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['cooperative_name'])){
            $validationerrors['empty_cooperative_name'] = "Le Nom de la coopérative n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["cooperative_name"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

      if($_POST['renseignement_check_name'] == "Union"){
          if(!array_key_exists('union_name', $_POST)){
            $validationerrors['error_union_name'] = "Erreur 404:Le Nom de l'Union est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['union_name'])){
            $validationerrors['empty_union_name'] = "Le Nom de l'Union n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["union_name"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
         
       }

       
      if($_POST['renseignement_check_name'] == "ONG"){
          if(!array_key_exists('ong_name', $_POST)){
            $validationerrors['error_ong_name'] = "Erreur 404:Le Nom de l'ONG est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['ong_name'])){
            $validationerrors['empty_ong_name'] = "Le Nom de l'ONG n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["ong_name"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }
       
       
      if($_POST['renseignement_check_name'] == "Confédération"){
          if(!array_key_exists('confédération_name', $_POST)){
            $validationerrors['error_confédération_name'] = "Erreur 404:Le Nom de la confédération est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['confédération_name'])){
            $validationerrors['empty_confédération_name'] = "Le Nom de la confédération n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["confédération_name"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }
      
      if($_POST['renseignement_check_name'] == "Réseau"){
          if(!array_key_exists('reseau_name', $_POST)){
            $validationerrors['error_reseau_name'] = "Erreur 404:Le Nom du réseau est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['reseau_name'])){
            $validationerrors['empty_confédération_name'] = "Le Nom du réseau n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["reseau_name"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

      if($_POST['renseignement_check_name'] == "Faitière"){
          if(!array_key_exists('faitiere_name', $_POST)){
            $validationerrors['error_faitiere_name'] = "Erreur 404:Le Nom du faitière est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['faitiere_name'])){
            $validationerrors['empty_faitiere_name'] = "Le Nom du faitière n'est pas rempli";
          }

          if(!array_key_exists('numero_recipice', $_POST)){
            $validationerrors['error_numero_recipice'] = "Erreur 404:Le Numéro de recipice du faitière est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['numero_recipice'])){
            $validationerrors['empty_numero_recipice'] = "Le Numéro de recipice du faitière n'est pas rempli";
          }

          if(!array_key_exists('faitiere_representant', $_POST)){
            $validationerrors['error_faitiere_representant'] = "Erreur 404:Le Représentant du faitière est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['faitiere_representant'])){
            $validationerrors['empty_faitiere_representant'] = "Le Représentant du faitière n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["faitiere_name"],
           "numero_recipice"=>$_POST["faitiere_numero"],
           "nom_representant"=>$_POST["faitiere_representant"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

      if($_POST['renseignement_check_name'] == "Confession_réligieuse"){
          if(!array_key_exists('confession_religieuse_name', $_POST)){
            $validationerrors['error_confession_religieuse_name'] = "Erreur 404:Le Nom de la confession réligieuse est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['confession_religieuse_representant'])){
            $validationerrors['empty_confession_religieuse_representant'] = "Le Nom de la confession réligieuse n'est pas rempli";
          }
          if(!array_key_exists('confession_religieuse_quartier_name', $_POST)){
            $validationerrors['error_confession_religieuse_quartier_name'] = "Erreur 404:Le Nom du quartier de la confession réligieuse est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['confession_religieuse_quartier_name'])){
            $validationerrors['empty_confession_religieuse_quartier_name'] = "Le Nom du quartier de la confession réligieuse n'est pas rempli";
          }

          if(!array_key_exists('confession_religieuse_representant', $_POST)){
            $validationerrors['error_confession_religieuse_representant'] = "Erreur 404:Le Représentant de la confession réligieuse est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['confession_religieuse_representant'])){
            $validationerrors['empty_confession_religieuse_representant'] = "Le Représentant de la confession réligieuse n'est pas rempli";
          }

          if(!array_key_exists('confession_religieuse_demeure', $_POST)){
            $validationerrors['error_confession_religieuse_demeure'] = "Erreur 404:Le domicile du représentant de la confession réligieuse est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['confession_religieuse_demeure'])){
            $validationerrors['empty_confession_religieuse_demeure'] = "Le domicile du représentant de la confession réligieuse n'est pas rempli";
          }

          if(!array_key_exists('confession_religieuse_bp', $_POST)){
            $validationerrors['error_confession_religieuse_bp'] = "Erreur 404:La boîte postale du représentant de la confession réligieuse est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['confession_religieuse_bp'])){
            $validationerrors['empty_confession_religieuse_bp'] = "Le domicile du représentant de la confession réligieuse n'est pas rempli";
          }

          if(!array_key_exists('confession_religieuse_phone', $_POST)){
            $validationerrors['error_confession_religieuse_phone'] = "Erreur 404:Le numéro de telephone du représentant de la confession réligieuse est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['confession_religieuse_phone'])){
            $validationerrors['empty_confession_religieuse_phone'] = "Le numéro de telephone du représentant de la confession réligieuse n'est pas rempli";
          }

         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["confession_religieuse_name"],
           "quartier"=>$_POST["confession_religieuse_quartier_name"],
           "demeure"=>$_POST["confession_religieuse_demeure"],
           "nom_representant"=>$_POST["confession_religieuse_representant"],
           "boite_postale"=>$_POST["confession_religieuse_bp"],
           "telephone"=>$_POST["confession_religieuse_phone"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

      if($_POST['renseignement_check_name'] == "EPA"){
          if(!array_key_exists('etablissement_administratif_name', $_POST)){
            $validationerrors['error_etablissement_administratif_name'] = "Erreur 404:Le Nom de l'établissement public administratif est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['etablissement_administratif_name'])){
            $validationerrors['empty_etablissement_administratif_name'] = "Le Nom de l'établissement public administratif n'est pas rempli";
          }

          if(!array_key_exists('etablissement_administratif_bp', $_POST)){
            $validationerrors['error_etablissement_administratif_bp'] = "Erreur 404:La boîte postale l'établissement public administratif est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['etablissement_administratif_bp'])){
            $validationerrors['empty_etablissement_administratif_bp'] = "Le boîte postale de l'établissement public administratif n'est pas rempli";
          }

          if(!array_key_exists('etablissement_administratif_telephone', $_POST)){
            $validationerrors['error_etablissement_administratif_telephone'] = "Erreur 404:Le numéro de telephone de l'établissement public administratif est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['etablissement_administratif_telephone'])){
            $validationerrors['empty_etablissement_administratif_telephone'] = "Le numéro de telephone de l'établissement public administratif n'est pas rempli";
          }

         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["etablissement_administratif_name"],
           "boite_postale"=>$_POST["etablissement_administratif_bp"],
           "telephone"=>$_POST["etablissement_administratif_telephone"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

       if($_POST['renseignement_check_name'] == "EPIC"){
          if(!array_key_exists('etablissement_industriel_commercial_name', $_POST)){
            $validationerrors['error_etablissement_industriel_commercial_name'] = "Erreur 404:Le Nom de l'établissement industriel commercial est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['etablissement_industriel_commercial_name'])){
            $validationerrors['empty_etablissement_industriel_commercial_name'] = "Le Nom de l'établissement industriel commercial n'est pas rempli";
          }

          if(!array_key_exists('etablissement_industriel_commercial_bp', $_POST)){
            $validationerrors['error_etablissement_industriel_commercial_bp'] = "Erreur 404:La boîte postale  de l'établissement industriel commercial est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['etablissement_industriel_commercial_bp'])){
            $validationerrors['empty_etablissement_industriel_commercial_bp'] = "Le boîte postale du représentant de l'établissement industriel commercial n'est pas rempli";
          }

          if(!array_key_exists('etablissement_industriel_commercial_phone', $_POST)){
            $validationerrors['error_etablissement_industriel_commercial_phone'] = "Erreur 404:Le numéro de telephone de l'établissement industriel commercial est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['etablissement_industriel_commercial_phone'])){
            $validationerrors['empty_etablissement_industriel_commercial_phone'] = "Le numéro de telephone de l'établissement industriel commercial n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["etablissement_industriel_commercial_name"],
           "boite_postale"=>$_POST["etablissement_industriel_commercial_bp"],
           "telephone"=>$_POST["etablissement_industriel_commercial_phone"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

      if($_POST['renseignement_check_name'] == "OI"){
          if(!array_key_exists('organisation_internationale_name', $_POST)){
            $validationerrors['error_organisation_internationale_name'] = "Erreur 404:Le Nom de l'organisation internationale est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['organisation_internationale_name'])){
            $validationerrors['empty_organisation_internationale_name'] = "Le Nom de l'organisation internationale n'est pas rempli";
          }

          if(!array_key_exists('organisation_internationale_bp', $_POST)){
            $validationerrors['error_organisation_internationale_bp'] = "Erreur 404:La boîte postale  de l'organisation internationale est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['organisation_internationale_bp'])){
            $validationerrors['empty_organisation_internationale_bp'] = "Le boîte postale de l'organisation internationale n'est pas rempli";
          }

          if(!array_key_exists('organisation_internationale_phone', $_POST)){
            $validationerrors['error_organisation_internationale_phone'] = "Erreur 404:Le numéro de téléphone de l'organisation internationale est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['organisation_internationale_phone'])){
            $validationerrors['empty_organisation_internationale_phone'] = "Le numéro de téléphone de l'organisation internationale n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["organisation_internationale_name"],
           "boite_postale"=>$_POST["organisation_internationale_bp"],
           "telephone"=>$_POST["organisation_internationale_phone"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }

      if($_POST['renseignement_check_name'] == "Société"){
          if(!array_key_exists('societe_name', $_POST)){
            $validationerrors['error_societe_name'] = "Erreur 404:Le Nom de l'organisation internationale commercial est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['societe_name'])){
            $validationerrors['empty_societe_name'] = "Le Nom de l'organisation internationale commercial n'est pas rempli";
          }

          if(!array_key_exists('societe_imatriculation_numero', $_POST)){
            $validationerrors['error_societe_imatriculation_numero'] = "Erreur 404:Le numéro d'imatriculation de la société est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['societe_imatriculation_numero'])){
            $validationerrors['empty_societe_imatriculation_numero'] = "Le numéro d'imatriculation de la société n'est pas rempli";
          }

          if(!array_key_exists('societe_siege', $_POST)){
            $validationerrors['error_societe_siege'] = "Erreur 404:Le siege de la société est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['societe_siege'])){
            $validationerrors['empty_societe_siege'] = "Le siege de la société n'est pas rempli";
          }

          if(!array_key_exists('societe_representant_name', $_POST)){
            $validationerrors['error_societe_representant_name'] = "Erreur 404:Le nom du représentant de la société est invalide:Impossible de faire une quelconque sauvegarde";
          }
          if(empty($_POST['societe_representant_name'])){
            $validationerrors['empty_societe_representant_name'] = "Le nom du représentant de la société n'est pas rempli";
          }
         $convention_array = array(
           "civilite"=>$_POST["renseignement_check_name"],
           "nom"=>$_POST["societe_name"],
           "numero_recipice"=>$_POST["societe_imatriculation_numero"],
           "siege"=>$_POST["societe_siege"],
           "nom_representant"=>$_POST["societe_representant_name"],
           "date_convention"=>$created->toString('yyyy-MM-dd HH:mm:ss'),
           "biens"=>$_POST["biens"],
           "producteur"=>$_POST["producteur"],
           "fournisseur_specifique"=>$_POST["fournisseur_specifique"],
           "fournisseur_utilisateur"=>$_POST["fournisseur_utilisateur"],
           "fournisseur_externe"=>$_POST["fournisseur_externe"],
           "services"=>$_POST["services"],
           "transformateur"=>$_POST["transformateur"],           
           "vendeur"=>$_POST["vendeur"],
           "produits"=>$_POST["produit"]
         );
       }
    
       

          if(!empty($validationerrors)){
             $_SESSION['validationerrors'] = $validationerrors;
           }
         if(!empty($convention_array) && empty($validationerrors)){
              $_SESSION['information_convention'] = $convention_array;
              $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/1');
         }
    }
  }


    public function loadcantonAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
        $prefecture = $request->getParam("id_prefecture");
        $t_canton = new Application_Model_DbTable_EuCanton();
        if (!empty($prefecture)) {
            $select = $t_canton->select()->where('id_prefecture = ?', $prefecture);
            $this->view->cantons = $t_canton->fetchAll($select);
        } else {
            $this->view->cantons = $t_canton->fetchAll();
        }
    }

    public function prefectureAction() {
        $this->_helper->layout->disableLayout();
        $request = $this->getRequest();
        $region = $request->getParam("id_region");
        $entries = array();
        $t_prefect = new Application_Model_DbTable_EuPrefecture();
        if (!empty($region)) {
            $select = $t_prefect->select()->where('id_region = ?', $region);
            $entries = $t_prefect->fetchAll($select);
            $this->view->prefectures = $entries;
        } else {
            $this->view->prefectures = $t_prefect->fetchAll();
        }
    }


    public function loadregionAction() {
        $this->_helper->layout()->disableLayout();
        $request = $this->getRequest();
        $pays = $request->getParam("id_pays");
        $t_region = new Application_Model_DbTable_EuRegion();
        if (!empty($pays)) {
            $select = $t_region->select()->where('id_pays = ?', $pays);
            $this->view->regions = $t_region->fetchAll($select);
        } else {
            $this->view->regions = $t_region->fetchAll();
        }
    }

    public function loadpaysAction() {
        $this->_helper->layout()->disableLayout();
        $request = $this->getRequest();
        $zone = $request->getParam("code_zone");
        $t_pays = new Application_Model_DbTable_EuPays();
        if (!empty($zone)) {
            $select = $t_pays->select()->where('code_zone = ?', $zone);
            $this->view->pays = $t_pays->fetchAll($select);
        } else {
            $this->view->pays = $t_pays->fetchAll();
        }
    }

    
    public function codetelephoniqueAction() {
        $id_pays = $_GET["id_pays"];
        if ($id_pays != '') {
            $tpays = new Application_Model_DbTable_EuPays();
            $result = $tpays->find($id_pays);
            if (count($result) > 0) {
               $data = $result->current()->code_telephonique;
            }
        }
        $this->view->data = $data;
    }
	
	
	public  function  addsouscriptionbcAction()  {
	   $sessionmcnp = new Zend_Session_Namespace('mcnp');
	    //$this->_helper->layout->disableLayout();
 	    $this->_helper->layout()->setLayout('layoutpublicesmc');
	
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
		$t_ville = new Application_Model_DbTable_EuVille();
		$selection = $t_ville->select();
		$selection->order('lib_ville asc');
		$villes = $t_ville->fetchAll($selection);
		$this->view->villes = $villes;
		
		$caps = Util_Utils::getParametre('CAPS','valeur');
	    $this->view->caps = $caps;
		
		$date_id = Zend_Date::now();
		$request = $this->getRequest();
		if($request->isPost()) {
	       if(isset($_POST['code_membre']) && $_POST['code_membre'] !="" 
			&& isset($_POST['montant_souscription']) && $_POST['montant_souscription']!=""
            && $_POST['montant_souscription'] > 0			
			&& isset($_POST['msbc_attestation']) && $_POST['msbc_attestation'] == 1)  {
	            $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction(); 
                try {
				     $membre = new Application_Model_EuMembre();
	            $m_map  = new Application_Model_EuMembreMapper();
			    $membremoral = new Application_Model_EuMembreMorale();
	            $m_mapmoral  = new Application_Model_EuMembreMoraleMapper();
				$eucompte = new Application_Model_EuCompte();
				$m_compte = new Application_Model_EuCompteMapper();
				
				$date_id = Zend_Date::now();
				$id_utilisateur_acnev = 1;
                $id_utilisateur_filiere = 2;
                $id_utilisateur_technopole = 3;
								
				$bon_neutre = new Application_Model_EuBonNeutre();
                $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
				
				$code_membre  = $request->getParam("code_membre");
				$montant_souscription  = $request->getParam("montant_souscription");
				$code_te  = $request->getParam("code_te");
				$type_souscription  = $request->getParam("type_souscription");
				$code_banque  = $request->getParam("code_banque");
				$num_compte  = $request->getParam("num_compte");
				$statut  = $request->getParam("liste");
				
				$num_compte = 'NB-TPAGCP-'.$code_membre;
				$res = $m_compte->find($num_compte,$eucompte);
				
				if(substr($code_membre,19,1) == 'P')  {
				   $findmembre = $m_map->find($code_membre,$membre);
				   if($findmembre == false) {
					  $db->rollback();
					  $this->view->code_membre = $request->getParam("code_membre");
					  $this->view->nom_membre = $request->getParam("design_membre");
					  $this->view->montant_souscription = $request->getParam("montant_souscription");
		              $this->view->error = "Le numéro membre du souscripteur saisi  ".$code_membre."  est introuvable ...";
					  return;
				   }
						
			    } else {
				    $findmembre = $m_mapmoral->find($code_membre,$membremoral);
				    if($findmembre == false) {
					   $db->rollback();
					   $this->view->code_membre = $request->getParam("code_membre");
					   $this->view->nom_membre = $request->getParam("design_membre");
					   $this->view->montant_souscription = $request->getParam("montant_souscription");
		               $this->view->error = "Le numéro membre du souscripteur saisi  ".$code_membre."  est introuvable ...";
					   return;
				    }
			    }
				
				if(!$res) {
				   $db->rollback();
				   $this->view->code_membre = $request->getParam("code_membre");
				   $this->view->nom_membre = $request->getParam("design_membre");
				   $this->view->montant_souscription = $request->getParam("montant_souscription");
		           $this->view->error = "Ce membre ne dispose pas de terminal d'Echange (TE) ...";
				   return;
				}
				
				$bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
				if(count($bon_neutre) == 0) {
				  $db->rollback();
				  $this->view->code_membre = $request->getParam("code_membre");
				  $this->view->nom_membre = $request->getParam("design_membre");
				  $this->view->montant_souscription = $request->getParam("montant_souscription");
                  $this->view->error = "Votre Code BAn  incorrect ...";
                  return; 
			    }
				
				if(($bon_neutre->bon_neutre_montant_solde <  $montant_souscription)) {
				  $db->rollback();
			      $this->view->code_membre = $request->getParam("code_membre");
				  $this->view->nom_membre = $request->getParam("design_membre");
				  $this->view->montant_souscription = $request->getParam("montant_souscription");
                  $this->view->error = "Montant restant du BAn est insuffisant ...";
                  return; 
			    }
				
				$bon_neutre2 = new Application_Model_EuBonNeutre();
				$bon_neutre2M = new Application_Model_EuBonNeutreMapper();
				$bon_neutre2M->find($bon_neutre->bon_neutre_id,$bon_neutre2);
						 
				$code_membre_souscripteur = $bon_neutre2->bon_neutre_code_membre;
					   
				$bon_neutre_detail  = new Application_Model_EuBonNeutreDetail();
				$bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
						 
			    $lignesdetbon = $bon_neutre_detailM->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
			    $cumulbon = $bon_neutre_detailM->getSumByBonNeutre($bon_neutre->bon_neutre_id);
				
				
				if(($lignesdetbon == NULL) || ($bon_neutre->bon_neutre_montant_solde <  $montant_souscription) || ($cumulbon < $montant_souscription)) {
				   $db->rollback();
				   $this->view->code_membre   = $request->getParam("code_membre");
				   $this->view->nom_membre = $request->getParam("design_membre");
				   $this->view->montant_souscription = $request->getParam("montant_souscription");
                   $this->view->error = "Montant restant du BAn est insuffisant ...";
                   return; 
				}
				
				if($code_membre != $code_membre_souscripteur) {
				   $db->rollback();
				   $this->view->code_membre   = $request->getParam("code_membre");
				   $this->view->nom_membre = $request->getParam("design_membre");
				   $this->view->montant_souscription = $request->getParam("montant_souscription");
                   $this->view->error = "Le code membre du souscripteur doit être celui du bon neutre ...";
                   return;   
				}
				
				////////////////////////////////////////////////////////////////////////////////////////////////////////////
				$i = 0;
			    $reste = $montant_souscription;
			    $nbre_lignesdetbon = count($lignesdetbon);
				while($reste > 0 && $i < $nbre_lignesdetbon) {
                     $lignedetbon = $lignesdetbon[$i];
                     $id = $lignedetbon->getBon_neutre_detail_id();
				     $finddetbon = $bon_neutre_detailM->find($id,$bon_neutre_detail);
					 if($reste >= $lignedetbon->getBon_neutre_detail_montant_solde()) {
						   $reste = $reste - $lignedetbon->getBon_neutre_detail_montant_solde();
						   if($bon_neutre_detail->bon_neutre_appro_id > 0) {
								$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                $appro_montant_solde = $bon_neutre_detail->getBon_neutre_detail_montant_solde();	  
								foreach($appro_detail as $appro) {
								   $bnad = new Application_Model_EuBonNeutreApproDetail();
                                   $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                   $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id,$bnad);

                                   if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                      $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                      $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                      $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                      $bnad_M->update($bnad);
                                   } else {
                                      $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                      $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                      $bnad_M->update($bnad);
                                      break;
                                   }
										 
                                 }
								  
						     }
						     //Mise à jour  des lignes d'enrégistrement
						     $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $lignedetbon->getBon_neutre_detail_montant_solde())
		                                 ->setBon_neutre_detail_montant_solde(0);
                             $bon_neutre_detailM->update($lignedetbon);
								 
						  
				  $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
				  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
				  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
				  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
				  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
				  if(substr($code_membre,19,1) == 'P')  {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
				  } else {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
				  }
				  
				  $bon_neutre_utilise->setBon_neutre_utilise_libelle("MSBC");
				  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $bon_neutre_utilise->setBon_neutre_utilise_montant($lignedetbon->getBon_neutre_detail_montant_solde());
				  $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
				  $bon_neutre_utiliseM->save($bon_neutre_utilise);
				  
                         } else {
							    if($bon_neutre_detail->bon_neutre_appro_id > 0) {
                                      $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                      $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail->bon_neutre_appro_id);
                                      $appro_montant_solde = $reste;
                                      foreach ($appro_detail as $appro) {
                                         $bnad = new Application_Model_EuBonNeutreApproDetail();
                                         $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                                         if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                           $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                           $bnad_M->update($bnad);
                                         } else {
                                           $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                           $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                           $bnad_M->update($bnad);
                                           break;
                                         }
                                       }								   
                                  }
							   
                                  //Mise à jour  des lignes d'enrégistrement
								  $lignedetbon->setBon_neutre_detail_montant_solde($lignedetbon->getBon_neutre_detail_montant_solde() - $reste);
						          $lignedetbon->setBon_neutre_detail_montant_utilise($lignedetbon->getBon_neutre_detail_montant_utilise() + $reste);
                                  $bon_neutre_detailM->update($lignedetbon);
						  
				  $bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
				  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
				  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
				  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
				  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
				  if(substr($code_membre,19,1) == 'P')  {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
				  } else {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
				  }
				  
				  $bon_neutre_utilise->setBon_neutre_utilise_libelle("MSBC");
				  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $bon_neutre_utilise->setBon_neutre_utilise_montant($reste);
				  $bon_neutre_utilise->setBon_neutre_detail_id($lignedetbon->bon_neutre_detail_id);
              		   	$bon_neutre_utilise->setUsertable("utilisateur");
              		   	$bon_neutre_utilise->setUser_id(1);
				  $bon_neutre_utiliseM->save($bon_neutre_utilise);
				  
						          $reste = 0;
                               }							   
                               $i++;
                  }
				  
				  
				  ////////////////////////////////////////////////////////////////////////////////////////////////////////////
				  $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_souscription);
				  $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_souscription);
				  $bon_neutre2M->update($bon_neutre2);
						  
				  /*$bon_neutre_utilise = new Application_Model_EuBonNeutreUtilise();
				  $bon_neutre_utiliseM = new Application_Model_EuBonNeutreUtiliseMapper();
						  
				  $compteur_bon_neutre_utilise = $bon_neutre_utiliseM->findConuter() + 1;
				  $bon_neutre_utilise->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
				  $bon_neutre_utilise->setBon_neutre_id($bon_neutre->bon_neutre_id);
				  if(substr($code_membre,19,1) == 'P')  {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PP");
				  } else {
				     $bon_neutre_utilise->setBon_neutre_utilise_type("PM");
				  }
				  
				  $bon_neutre_utilise->setBon_neutre_utilise_libelle("MSBC");
				  $bon_neutre_utilise->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $bon_neutre_utilise->setBon_neutre_utilise_montant($montant_souscription);
				  $bon_neutre_utiliseM->save($bon_neutre_utilise);*/
				  
				  $m_mstiers = new Application_Model_EuMstiersMapper();
				  $mstiers = new Application_Model_EuMstiers();
				  
				  $eusouscription = new Application_Model_DbTable_EuSouscription();
				  $select = $eusouscription->select();
				  if(substr($membre_integrateur,19,1) == 'P')  {
					 $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ",    strtolower(str_replace(" ", "",$membre->nom_membre)));
	                 $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membre->prenom_membre)));
				  } else {
					 $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$membremoral->raison_sociale)));
				  }
						
				  $select->order(array("souscription_id ASC"));
	              $select->limit(1);
	              $rowseusouscription = $eusouscription->fetchRow($select);
		          if(count($rowseusouscription) > 0) {
			        $souscription_ok = 1;
			        $souscription_first = $rowseusouscription->souscription_id;
			      } else {
			        $souscription_ok = 0;
			      }
				  
				  $date_id = Zend_Date::now();
				  $souscription = new Application_Model_EuSouscription();
                  $souscription_mapper = new Application_Model_EuSouscriptionMapper();
						
				  $compteur_souscription = $souscription_mapper->findConuter() + 1;
				  $souscription->setSouscription_id($compteur_souscription);
				  
				  if(substr($membre_integrateur,19,1) == 'P')  {
                     $souscription->setSouscription_nom($membre->nom_membre);
                     $souscription->setSouscription_prenom($membre->prenom_membre);
				     $souscription->setSouscription_mobile($membre->portable_membre);
				     $souscription->setSouscription_personne("PP");
					 $souscription->setSouscription_quartier($membre->quartier_membre);     
                     $souscription->setSouscription_email($membre->email_membre);
				  } else {
					 $souscription->setSouscription_raison($membremoral->raison_sociale);
                     $souscription->setCode_type_acteur($membremoral->code_type_acteur);
                     $souscription->setCode_statut($membremoral->code_statut);
					 $souscription->setSouscription_mobile($membremoral->portable_membre);
					 $souscription->setSouscription_personne("PM");
					 $souscription->setSouscription_quartier($membremoral->quartier_membre);     
                     $souscription->setSouscription_email($membremoral->email_membre);
				  }
				  
				  $souscription->setSouscription_membreasso(1);	
				  $souscription->setSouscription_type("BAn");
                  $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                  $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);      
                  $souscription->setSouscription_banque(null);	
				  $souscription->setSouscription_montant($request->getParam("montant_souscription"));
                  $souscription->setSouscription_nombre(NULL);
                  $souscription->setSouscription_programme("MSBC");
                  $souscription->setSouscription_type_candidat(NULL);
				  $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                  $souscription->setSouscription_vignette(null);
                  $souscription->setCode_activite(null);
                  $souscription->setId_metier(null);
                  $souscription->setId_competence(null);		      
                  $souscription->setSouscription_login(null);
                  $souscription->setSouscription_passe(null);
                        						          
			      if($souscription_ok == 1)  {
                    $souscription->setSouscription_souscription($souscription_first);
				  } else {
                    $souscription->setSouscription_souscription($compteur_souscription);
				  }	
				  $souscription->setSouscription_autonome(0);
			      $souscription->setPublier(0);
				  $souscription->setErreur(0);
				  $souscription->setId_canton($request->getParam("id_canton"));
                  $souscription_mapper->save($souscription);
				  
				  ///////////////////////////////////////////// validation acnev //////////////////////////////////	
				  $souscription = new Application_Model_EuSouscription();
				  $souscriptionM = new Application_Model_EuSouscriptionMapper();
				  $souscriptionM->find($compteur_souscription,$souscription);
								
				  $souscription->setPublier(1);
				  $souscriptionM->update($souscription);
				  
				  $validation_quittance = new Application_Model_EuValidationQuittance();
				  $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				  $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				  $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				  $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
				  $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				  $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $validation_quittance->setPublier(1);
				  $validation_quittance_mapper->save($validation_quittance);
						
						
				  ///////////////////////////////////////////// validation filiere //////////////////////////////////
				  $souscription = new Application_Model_EuSouscription();
				  $souscriptionM = new Application_Model_EuSouscriptionMapper();
				  $souscriptionM->find($compteur_souscription, $souscription);
								
				  $souscription->setPublier(2);
				  $souscriptionM->update($souscription);
						
				  $validation_quittance = new Application_Model_EuValidationQuittance();
				  $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				  $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				  $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				  $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
				  $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				  $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $validation_quittance->setPublier(1);
				  $validation_quittance_mapper->save($validation_quittance);
						
				  ///////////////////////////////////////////// validation technopole //////////////////////////////////
						
				  $souscription = new Application_Model_EuSouscription();
				  $souscriptionM = new Application_Model_EuSouscriptionMapper();
				  $souscriptionM->find($compteur_souscription, $souscription);
								
				  $souscription->setPublier(3);
				  $souscriptionM->update($souscription);

				  $validation_quittance = new Application_Model_EuValidationQuittance();
				  $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();
												
				  $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
				  $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
				  $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
				  $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
				  $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				  $validation_quittance->setPublier(1);
				  $validation_quittance_mapper->save($validation_quittance);
						
							
				   //insertion dans les tables eu_mstiers
				   $id_souscription = $compteur_souscription;
                   $montant_bc = "";			  
				   $code_ban = $request->getParam("code_BAn");
				   
                   if($type_souscription == "CMIT") {
				   
                      $id_mstiers = $m_mstiers->findConuter() + 1;				   
                      $mstiers->setId_mstiers($id_mstiers);
				      $mstiers->setCode_membre($code_membre);
				      $mstiers->setMontant_souscris($montant_souscription);
				      $mstiers->setMontant_utilise(0);
				      $mstiers->setMontant_restant($montant_souscription);
				      $mstiers->setType_souscription("CMIT");
				      $mstiers->setId_souscription($id_souscription);
				      $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				      $mstiers->setBon_neutre_code($code_ban);
					  $mstiers->setStatut_mstiers($statut);
                      $m_mstiers->save($mstiers);
					  
                   }  else if($type_souscription == "CAPU") {
                      $id_mstiers = $m_mstiers->findConuter() + 1;				   
                      $mstiers->setId_mstiers($id_mstiers);
				      $mstiers->setCode_membre($code_membre);
				      $mstiers->setMontant_souscris($montant_souscription);
				      $mstiers->setMontant_utilise(0);
				      $mstiers->setMontant_restant($montant_souscription);
				      $mstiers->setType_souscription("CAPU");
				      $mstiers->setId_souscription($id_souscription);
				      $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				      $mstiers->setBon_neutre_code($code_ban);
					  $mstiers->setStatut_mstiers($statut);
                      $m_mstiers->save($mstiers);
					  
                   }  elseif($type_souscription == "CAIPC") {
                      $id_mstiers = $m_mstiers->findConuter() + 1;				   
                      $mstiers->setId_mstiers($id_mstiers);
				      $mstiers->setCode_membre($code_membre);
				      $mstiers->setMontant_souscris($montant_souscription);
				      $mstiers->setMontant_utilise(0);
				      $mstiers->setMontant_restant($montant_souscription);
				      $mstiers->setType_souscription("CAIPC");
				      $mstiers->setId_souscription($id_souscription);
				      $mstiers->setDate_mstiers($date_id->toString('yyyy-MM-dd HH:mm:ss'));
				      $mstiers->setBon_neutre_code($code_ban);
					  $mstiers->setStatut_mstiers($statut);
                      $m_mstiers->save($mstiers);
					  
                   } 

                   $code  = $request->getParam("code_membre");
				   $montant  = $request->getParam("montant_souscription");
				   $code_tegc  = $request->getParam("code_te");
				   $type_bnp  = $request->getParam("type_souscription");
				   $code_banque  = $request->getParam("code_banque");
				   $referencepaie  = $request->getParam("num_compte");
                   $souscription_id = $id_souscription;
                   $typeOpi = "BNP";
				   
				   
				   $url = curl_init();
                   $resultjson = array();
				   curl_setopt_array(
					   $url,
					   array(
                            CURLOPT_URL => "http://tom.gacsource.net/jmcnpApi/souscriptionOpi/emission",
                            CURLOPT_RETURNTRANSFER => true,
                            CURLOPT_ENCODING => "",
                            CURLOPT_MAXREDIRS => 10,
                            CURLOPT_TIMEOUT => 30,
                            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                            CURLOPT_CUSTOMREQUEST => "POST",
							CURLOPT_POSTFIELDS => "{
							  \n\t\"codeMembre\":\"$code\",
							  \n\t\"modePaiement\":\"$code_banque\",
							  \n\t\"referencePaiement\":\"$referencepaie\",
							  \n\t\"montant\":\"$montant\",
							  \n\t\"codeTegc\":\"$code_tegc\",
						      \n\t\"typeOpi\":\"$typeOpi\",
							  \n\t\"souscriptionId\":\"$souscription_id\",
							  \n\t\"typeBnp\":\"$type_bnp\"
							}",
						    CURLOPT_HTTPHEADER => array(
                               "authorization: Basic bWFub3U6a2F0YWJhbGU=",
                               "content-type: application/json",
                            ),
						)
					);
							
					$response = json_decode(curl_exec($url));
					$error = curl_error($url);
					
                  	if(($error === '') && ($reponse->resultat == 0)) {			  
                       $db->commit();
				       $sessionmcnp->error = "Operation bien effectuee ...";
				       $this->_redirect('/souscriptionbon/addsouscriptionbc');
					} else {
					   $db->rollback();
					   $this->view->code_membre   = $request->getParam("code_membre");
			           $this->view->nom_membre = $request->getParam("design_membre");
			           $this->view->montant_souscription = $request->getParam("montant_souscription");
			           $this->view->error = "Echec operation ...".$error; 
                       return;
					}
				
				} catch (Exception $exc) {
			       $db->rollback();
			       $this->view->code_membre   = $request->getParam("code_membre");
			       $this->view->nom_membre = $request->getParam("design_membre");
			       $this->view->montant_souscription = $request->getParam("montant_souscription");
			       $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString(); 
                   return;
			   }
	
	        } else {
		       $this->view->code_membre   = $request->getParam("code_membre");
			   $this->view->nom_membre = $request->getParam("design_membre");
			   $this->view->montant_souscription = $request->getParam("montant_souscription");
               $this->view->error = "Veuillez renseigner les champs obligatoires (*)";
			   return;
		   }
	    }
	}
	
	
	
    

    public function addsouscriptionbanAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        $dbcv = new Application_Model_DbTable_EuConvention();
        $cv = new Application_Model_EuConvention();
        $mpcv = new Application_Model_EuConventionMapper();
/*
        if(empty($_SESSION['information_convention'])){
            $this->_redirect('/ticketsupport/convention');
        }*/
    

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if (
  (
  (isset($_POST['bon_neutre_nom']) && $_POST['bon_neutre_nom']!="" && isset($_POST['bon_neutre_prenom']) && $_POST['bon_neutre_prenom']!="") ||
  (isset($_POST['bon_neutre_raison']) && $_POST['bon_neutre_raison']!="")
  ) &&
  isset($_POST['bon_neutre_autonome']) &&
  isset($_POST['bon_neutre_mobile']) && $_POST['bon_neutre_mobile']>0 &&
  isset($_POST['bon_neutre_email']) && $_POST['bon_neutre_email']!="" &&
  isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']!="" &&
  isset($_POST['id_canton']) && $_POST['id_canton']!="" &&
  isset($_POST['bon_neutre_banque']) && $_POST['bon_neutre_banque']!="" &&
  isset($_POST['bon_neutre_numero']) && $_POST['bon_neutre_numero']!="" && $_POST['bon_neutre_numero']!=NULL &&
  isset($_POST['bon_neutre_date_numero']) && $_POST['bon_neutre_date_numero']!="" &&
  isset($_POST['bon_neutre_montant']) && $_POST['bon_neutre_montant']!="") {

                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();

                        /////////////////controle nom prenom
                        /*$eubon_neutre = new Application_Model_DbTable_EuBonNeutre();
                        $select = $eubon_neutre->select();
                        $select->where("LOWER(REPLACE(bon_neutre_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_nom"))));
                        $select->where("LOWER(REPLACE(bon_neutre_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_prenom"))));
                        $select->order(array("bon_neutre_id ASC"));
                        $select->limit(1);
                        $rowseubon_neutre = $eubon_neutre->fetchRow($select);
                        if(count($rowseubon_neutre) > 0) {
                          $bon_neutre_ok = 1;
                          $bon_neutre_first = $rowseubon_neutre->bon_neutre_id;
                        } else {
                          $bon_neutre_ok = 0;
                        }*/

                        /////////////////controle numero de banque
                        $eubon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
                        $select = $eubon_neutre_detail->select()
                                                ->where('bon_neutre_detail_banque = ?',$request->getParam("bon_neutre_banque"))
                                                ->where('bon_neutre_detail_numero = ?',$request->getParam("bon_neutre_numero"))
                                                ->where('bon_neutre_detail_date_numero = ?',$request->getParam("bon_neutre_date_numero"))
                                                ;
                        if ($rowseubon_neutre_detail = $eubon_neutre_detail->fetchRow($select)) {
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($rowseubon_neutre_detail->bon_neutre_id, $bon_neutre);

                                $code_BAn = $bon_neutre->bon_neutre_code;

                            $db->rollback();
                            $sessionmcnp->error = "Numéro de banque déjà utilisé ...";
                            $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            return;
                        }else{


                        /////////////////controle email
                        if(!filter_var($request->getParam("bon_neutre_email"), FILTER_VALIDATE_EMAIL)){
                            $db->rollback();
                            $sessionmcnp->error = "E-mail non valable ...";
                            $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            return;
                        }

                    //////////////////////////bon_neutre_code_ban
                    if(isset($_POST['bon_neutre_code_ban']) && $_POST['bon_neutre_code_ban']!=""){
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByCode($request->getParam("bon_neutre_code_ban"));
                    if(count($bon_neutre2) > 0){
                    	if((str_replace(" ", "", $_POST['bon_neutre_nom']) == str_replace(" ", "", $bon_neutre2->bon_neutre_nom) && str_replace(" ", "", $_POST['bon_neutre_prenom']) == str_replace(" ", "", $bon_neutre2->bon_neutre_prenom)) || (str_replace(" ", "", $_POST['bon_neutre_raison']) == str_replace(" ", "", $bon_neutre2->bon_neutre_raison))){

                    	}else{
                        $db->rollback();
                            $sessionmcnp->error = "Le nom du recu de versement ne correspond pas à ce Code BAn ...";
                            $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            return;
                    }

                    }else{
                        $db->rollback();
                            $sessionmcnp->error = "Ancien Code BAn erroné ...";
                            $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            return;
                    }
                    }


                        /////////////////controle montant
                        if($request->getParam("bon_neutre_banque") == "BOA" || $request->getParam("bon_neutre_banque") == "UTB" || $request->getParam("bon_neutre_banque") == "BAT"  || $request->getParam("bon_neutre_banque") == "DBANK"  || $request->getParam("bon_neutre_banque") == "ECOBANK" || $request->getParam("bon_neutre_banque") == "ORABANK" || $request->getParam("bon_neutre_banque") == "WARI" || $request->getParam("bon_neutre_banque") == "BPEC" || $request->getParam("bon_neutre_banque") == "CCP" || $request->getParam("bon_neutre_banque") == "BTCI" || $request->getParam("bon_neutre_banque") == "FAIP" || $request->getParam("bon_neutre_banque") == "CECL" || $request->getParam("bon_neutre_banque") == "MECIT" || $request->getParam("bon_neutre_banque") == "MUTUAL" || $request->getParam("bon_neutre_banque") == "MECI" || $request->getParam("bon_neutre_banque") == "ASMA") {

                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                            $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                            $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate7($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                            
                            if(count($relevebancairedetail) > 0) {
                                if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                $db->rollback();
                                $sessionmcnp->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                return;
                                }
                            }else{

                                if($request->getParam("bon_neutre_banque") == "BAT" || $request->getParam("bon_neutre_banque") == "DBANK") {
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmcnp->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmcnp->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                    }

                                } else if($request->getParam("bon_neutre_banque") == "ECOBANK"){
                                    $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                    $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate6($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmcnp->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmcnp->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                    }

                                } else if($request->getParam("bon_neutre_banque") == "ORABANK"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmcnp->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmcnp->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                    }

                                }else if($request->getParam("bon_neutre_banque") == "UTB"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmcnp->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmcnp->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                    }

                                }else{
                                        $db->rollback();
                                        $sessionmcnp->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        return;
                                }
                            }
                        } else {

                                    $db->rollback();
                                    $sessionmcnp->error = "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ...";
                                    $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                        }





//$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);


/////////////////////////////////////controle code membre
if(isset($_POST['bon_neutre_code_membre']) && $_POST['bon_neutre_code_membre']!=""){
if(strlen($_POST['bon_neutre_code_membre']) != 20) {
                                    $db->rollback();
                                    $sessionmcnp->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
}else{
if(substr($_POST['bon_neutre_code_membre'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($_POST['bon_neutre_code_membre'], $membre);
                                if(count($membre) == 0){
                                    $db->rollback();
                                    $sessionmcnp->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                                }
                                if($_POST['bon_neutre_nom'] == "" || $_POST['bon_neutre_nom'] == NULL){
                                    $db->rollback();
                                    $sessionmcnp->error = "Veuillez bien saisir le nom et prénom(s)";
                                    $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                                }
                                $nom_membre = $membre->nom_membre;
                                $prenom_membre = $membre->prenom_membre;
                                $raison_sociale = "";
    }
if(substr($_POST['bon_neutre_code_membre'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($_POST['bon_neutre_code_membre'], $membremorale);
                                if(count($membremorale) == 0){
                                    $db->rollback();
                                    $sessionmcnp->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                                }
                                if($_POST['bon_neutre_raison'] == "" || $_POST['bon_neutre_raison'] == NULL){
                                    $db->rollback();
                                    $sessionmcnp->error = "Veuillez bien saisir la raison sociale";
                                    $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    return;
                                }
                                $nom_membre = "";
                                $prenom_membre = "";
                                $raison_sociale = $membremorale->raison_sociale;
    }

if((str_replace(" ", "", $_POST['bon_neutre_nom']) == str_replace(" ", "", $nom_membre) && str_replace(" ", "", $_POST['bon_neutre_prenom']) == str_replace(" ", "", $prenom_membre)) || (str_replace(" ", "", $_POST['bon_neutre_raison']) == str_replace(" ", "", $raison_sociale))){

                    	}else{
                        $db->rollback();
                            $sessionmcnp->error = "Le nom du recu de versement ne correspond pas à ce Code Membre ...";
                            $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            return;
                    }    
}


                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($request->getParam("bon_neutre_code_membre"));
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $request->getParam("bon_neutre_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($request->getParam("bon_neutre_code_membre"));
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);

}else if(isset($_POST['bon_neutre_code_ban']) && $_POST['bon_neutre_code_ban']!=""){



                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByCode($request->getParam("bon_neutre_code_ban"));
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $request->getParam("bon_neutre_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre(NULL);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


}else{


                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre(NULL);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);




                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


    }



                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($relevebancairedetail->relevebancairedetail_id, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);

                            ///////////////////////////////////////////////////////////////////////////////////////
                        }
/**Enregistrement des données de la convention**/
/*if(array_key_exists('information_convention', $_SESSION) && !empty($_SESSION['information_convention'])){
        if($dbcv->insert($_SESSION['information_convention'])){
           $db_cv_select = $dbcv->select();
           $db_cv_select->from('eu_convention',array('MAX(id_convention) as count'));
           $cv_id = $dbcv->fetchAll($db_cv_select);
           $dbcv->update(array('code_activation'=>$code_BAn),array('id_convention = ?'=>$cv_id[0]['count']));
        }
}*/
                            $db->commit();

                            $montant_BAn = $request->getParam("bon_neutre_montant");
                            $sessionmcnp->code_BAn = $code_BAn;
                            $sessionmcnp->montantban = $montant_BAn;
                            $sessionmcnp->membre_code = $bon_neutre->bon_neutre_code_membre;
							$sessionmcnp->bon_neutre_detail_id = $compteur_bon_neutre_detail;

                            $sessionmcnp->error = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn). <br />
Utilisez ce BAn pour : <br />
- votre propre Activation Personne Physique et/ou Personne Morale <br />
- la souscription pour tiers (CMFH) de votre choix <br />
<br />
";
if($sessionmcnp->membre_code != "" && $sessionmcnp->membre_code != NULL){
    $sessionmcnp->error .= "Le code du Bon d'Achat neutre (BAn) se trouve dans le compte marchand du membre <strong>".$sessionmcnp->membre_code."</strong><br />";
    $sessionmcnp->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}else{
    $sessionmcnp->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}
    $sessionmcnp->error .= "<strong>Veuillez bien noter votre code BAn. Il est très important.</strong>Le cas échéant, en cas de perte, reprenez l'opération.";

        /*$_SESSION['information_convention'] = [] ;*/

                            $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                            
                            return;

                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                        return;
                    }


            }   else {  $sessionmcnp->error = "Champs * obligatoire ..."; }


        }


    }



  public function recupnomAction() {
       $code_membre = $_GET['code_membre'];
	   if(substr($code_membre,19,1) == 'P') {
          $membre_db = new Application_Model_DbTable_EuMembre();
          $membre_find = $membre_db->find($code_membre);
          if(count($membre_find) == 1) {
            $result = $membre_find->current();
            $data[1] = strtoupper($result->nom_membre) . ' ' . ucfirst($result->prenom_membre);
          } else {
             $data = '';
          }
		  
      } else {
		  $membre_db = new Application_Model_DbTable_EuMembreMorale();
          $membre_find = $membre_db->find($code_membre);
          if(count($membre_find) == 1) {
            $result = $membre_find->current();
            $data[1] = strtoupper($result->raison_sociale) ;
          } else {
            $data = '';
          }
	   }
       $this->view->data = $data;
    }



   public function enrolementsms2oldAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');


        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                            $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
              //&& isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
              && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
              && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
              && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
              //&& isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
              && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
              && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
              && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
              && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
              && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
              && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
              && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
              && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
              && isset($_POST['id_pays']) && $_POST['id_pays']!=""
              && isset($_POST['code_agence']) && $_POST['code_agence']!=""
              && isset($_POST['code_activite']) && $_POST['code_activite']!=""
              && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                        /////////////////controle Code BAn
                    if(count($bon_neutre) == 0){
                            $sessionmcnp->error = "Code BAn incorrect ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",addslashes($bon_neutre->bon_neutre_nom))));

                        $tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
                        foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",addslashes($value)))."%' ");
                        }

                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }





                    if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < 5000){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                            }

                        /////////////////souscription KACM PP

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PP");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile($request->getParam("portable_membre"));
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(5000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 5000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 5000);
                                $bon_neutre2M->update($bon_neutre2);

                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 5000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
               		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                               $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }

                        }
                            }


                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);



                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                            return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfs = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfs)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                       ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("ESMC");
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                    $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                    $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;


                        if($code_fs != "") {
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            if ($sms_fs == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if ($date_nais >= $date_idd) {
                                $sessionmcnp->error = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


///////////////////////////////preinscription

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            $preinscription->setId_preinscription($compteur_preinscription)
                           ->setNom_membre($bon_neutre->bon_neutre_nom)
                           ->setPrenom_membre($bon_neutre->bon_neutre_prenom)
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre($request->getParam("tel_membre"))
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre($request->getParam("portable_membre"))
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"))
                           ;
                $preinscription->setPublier(1);

                $preinsc_mapper->save($preinscription);


///////////////////////////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(2);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $validation_quittance->setPublier(1);
                                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(3);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////


                            $membre->setCode_membre($code)
                                   ->setNom_membre($bon_neutre->bon_neutre_nom)
                                   ->setPrenom_membre($bon_neutre->bon_neutre_prenom)
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre($request->getParam("tel_membre"))
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre($request->getParam("portable_membre"))
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
                                   ->setEtat_membre(null)
                                   ->setId_canton($request->getParam("id_canton"))
                                   ;
                                $mapper->save($membre);


                                /////////////
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setCode_membre($code);
                                $preinscriptionM->update($preinscription);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();


                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            //$id_souscription = $findcode->souscription_id;
                            //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
                            //if($findsouscrip != FALSE) {
                            //}
                            $souscription_mapper->find($findcode->souscription_id,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
                        }
                        else {
                            $sessionmcnp->error = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune souscription !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $_POST["nom_membre"];
                            //$this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
                        }

                            $mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
                            $findmem = $mem_mapper->find($code,$mem);

                            if(($ancien_code == '') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                            } else {
                              if(substr($ancien_code,-1,1) == 'M') {
                                 $sessionmcnp->error = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 //$this->view->nom_membre = $_POST["nom_membre"];
                                 //$this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 $this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 $this->view->portable = $_POST["portable_membre"];
                                 return;
                              }

                              $mem->setEtat_membre('A');
                              //Mise à jour de la table physique
                              $p_mapper = new Application_Model_PhysiqueMapper();
                              $p = new Application_Model_Physique();
                              $rep = $p_mapper->find($ancien_code,$p);
                              if ($rep == true) {
                                 $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                 $p_mapper->update($p);
                              }
                              // Mise à jour de la table eu_ancien_membre
                              $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                              $pmcnp = new Application_Model_EuAncienMembre();
                              $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                              if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                              }
                            }
                            $mem_mapper->update($mem);

                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            	if($_POST['num_compte'][$i]!=""){
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
                                }
                                }

                                $mapper_op = new Application_Model_EuOperationMapper();
                                $compteurfs = $mapper_op->findConuter() + 1;
                                $lib_op = 'Auto-enrôlement';
                                $type_op = 'AERL';
                                Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                                $tab_fs = new Application_Model_DbTable_EuFs();
                                $fs_model = new Application_Model_EuFs();
                                $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
                                if(($ancien_code =='') || ($ancien_code == NULL)) {
                                   $fs_model->setOrigine_fs('N');
                                } else {
                                   $fs_model->setOrigine_fs('A');
                                }
                                $tab_fs->insert($fs_model->toArray());

                                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);

                                $userin = new Application_Model_EuUtilisateur();
                                $mapper = new Application_Model_EuUtilisateurMapper();
                                $id_user = $mapper->findConuter() + 1;
                                $userin->setId_utilisateur($id_user)
                                       ->setId_utilisateur_parent(NULL)
                                       ->setPrenom_utilisateur($bon_neutre->bon_neutre_prenom)
                                       ->setNom_utilisateur($bon_neutre->bon_neutre_nom)
                                       ->setLogin($code)
                                       ->setPwd(md5($codesecret))
                                       ->setDescription(NULL)
                                       ->setUlock(0)
                                       ->setCh_pwd_flog(0)
                                       ->setCode_groupe('personne_physique')
                                       ->setCode_groupe_create('personne_physique')
                                       ->setConnecte(0)
                                       ->setCode_agence($code_agence)
                                       ->setCode_secteur(NULL)
                                       ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                       ->setId_pays($id_pays)
                                       ->setCode_acteur($code_acteur)
                                       ->setCode_membre($code)
                                       ->setId_canton($request->getParam("id_canton"))
                                       ;
                                $mapper->save($userin);

                                // Mise à jour de la table eu_contrat
                                $contrat = new Application_Model_EuContrat();
                                $mapper_contrat = new Application_Model_EuContratMapper();
                                $id_contrat = $mapper->findConuter() + 1;
                                $contrat->setId_contrat($id_contrat);
                                $contrat->setCode_membre($code);
                                $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                                $contrat->setNature_contrat('numeraire');
                                $contrat->setId_type_contrat(NULL);
                                $contrat->setId_type_creneau(NULL);
                                $contrat->setId_type_acteur(NULL);
                                $contrat->setId_pays(NULL);
                                $contrat->setId_utilisateur(NULL);
                                $contrat->setFiliere(NULL);
                                $mapper_contrat->save($contrat);
                        } else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                        }
                        }
                        if($code_fl != "") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

                             if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fl->setOrigine_fl('N');
                             } else {
                                $fl->setOrigine_fl('A');
                             }
                             $tfl->insert($fl->toArray());

                            //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

                            for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

                            for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                        }  else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                        }


                        if($code_fkps != "") {
                            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                            if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                               $carte->setOrigine_fkps('N');
                            } else {
                               $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
                            $compteurcps = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
                        }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);
                                }



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(5000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
                            ///////////////////////////////////////////////////////////////////////////////////////


                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
            $sessionmcnp->codesecret = $codesecret;
                        
                            $this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);

                    }
                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
            }
        }
    }


	
	
	
	public function deploiementgacAction()  {
      $sessionmcnp = new Zend_Session_Namespace('mcnp');
	  //$this->_helper->layout->disableLayout();
 	  $this->_helper->layout()->setLayout('layoutpublicesmc');
	  
	  $t_zone = new Application_Model_DbTable_EuZone();
      $zones = $t_zone->fetchAll();
      $this->view->zones = $zones;
      $t_pays = new Application_Model_DbTable_EuPays();
      $pays = $t_pays->fetchAll();
      $this->view->pays = $pays;
      $t_region = new Application_Model_DbTable_EuRegion();
      $regions = $t_region->fetchAll();
      $this->view->regions = $regions;
      $t_prefecture = new Application_Model_DbTable_EuPrefecture();
      $prefectures = $t_prefecture->fetchAll();
      $this->view->prefectures = $prefectures;
      $t_canton = new Application_Model_DbTable_EuCanton();
      $cantons = $t_canton->fetchAll();
      $this->view->cantons = $cantons;
   
      $request = $this->getRequest();
	  if($request->isPost()) {
	     $db = Zend_Db_Table::getDefaultAdapter();
         $db->beginTransaction();
		 try {  
	         $utilisateur = NULL;
			 $nom_gac = $request->getParam("designation_gac");
			 $code_membre = $request->getParam("code_membre");
			 $type_gac = $request->getParam("type_gac");
			 $appartenance = $request->getParam("niveau_gac");
             $code_agence = $request->getParam("code_agence");
			 $login = $request->getParam("gac_login");
			 $pwd = $request->getParam("gac_passe");
			 $confirme = $request->getParam("confirme");
             //$code_zone = substr($code_agence, 0, 3);
			 $code_zone = $request->getParam("code_zone");
			 $id_pays = $request->getParam("id_pays");
			 $id_region = $request->getParam("id_region");
			 $id_prefecture = $request->getParam("id_prefecture");
			 $id_canton = $request->getParam("id_canton");
             $groupe = NULL;
			 
			 $date_id = new Zend_Date(Zend_Date::ISO_8601);
             $date_idd = clone $date_id;
			 
			 $membre = new Application_Model_EuMembre();
	         $m_map  = new Application_Model_EuMembreMapper();
			 
			 $representation = new Application_Model_EuRepresentation();
	         $m_representation  = new Application_Model_EuRepresentationMapper();
			 
			 //$findrep  = $m_representation->findbyrep($code_membre);
			 
			 $membremorale    = new Application_Model_EuMembreMorale();
	         $m_membremorale  = new Application_Model_EuMembreMapper();
			 
			 $gac_mapper = new Application_Model_EuGacMapper();
             $gac = new Application_Model_EuGac();
			 
			 
			 /*if(substr($code_membre,19,1) == 'M')  {
			   $findmembre = $m_membremorale->find($code_membre,$membremorale);
			   if($findmembre == false) {
			      $db->rollback();
			      $sessionmcnp->error = "Le code membre de la gac est introuvable ...";
		          return;
			   }
			 }*/
			 
			 
			 if($appartenance == 'SOURCE' || $appartenance == 'MONDE') {
			    $findgac =  $gac_mapper->findgacsourcemonde($appartenance,$type_gac);  
			 } elseif($appartenance == 'ZONE') {
			    $findgac =  $gac_mapper->findgaczone($code_zone,$appartenance,$type_gac);
			 } elseif($appartenance == 'PAYS') {
			    $findgac =  $gac_mapper->findgacpays($id_pays,$appartenance,$type_gac);
			 } elseif($appartenance == 'REGION') {
			    $findgac =  $gac_mapper->findgacregion($id_region,$appartenance,$type_gac);
			 } elseif($appartenance == 'PREFECTURE') {
			    $findgac =  $gac_mapper->findgacsecteur($id_prefecture,$appartenance,$type_gac);
			 } elseif($appartenance == 'CANTON') {
                $findgac =  $gac_mapper->findgacagence($id_canton,$appartenance,$type_gac);
             }			 
			 
			 $findmembre = $m_map->find($code_membre,$membre);
			 if($findmembre == false) {
			   $db->rollback();
			   $sessionmcnp->error = "Le code membre personne physique representant de la gac est introuvable ...";
		       return;
			 }
			 
			 if($findgac != false) {
			   $db->rollback();
			   $sessionmcnp->error = "Le type de gac est déja créé !!! ";
		       return;
			 }
			 
			 $utilisateur = new Application_Model_EuUtilisateur();
             $m_utilisateur = new Application_Model_EuUtilisateurMapper();
			 $find_user = $m_utilisateur->findLogin($login);

             if($find_user != false) {
			   $db->rollback();
               $error = 'Ce login existe déjà.';
               $sessionmcnp->error = $error;
			   return;      
             } elseif($pwd != $confirme) {
			   $db->rollback();
               $error = 'Erreur de confirmation du mot de passe.';
               $sessionmcnp->error = $error;
               return;
             }
			 
			 elseif (stripos($login, " ") !== false) {
			   $db->rollback();
               $error = "Le Login ne doit pas contenir d'espace";
               $sessionmcnp->error = $error;
               return;
             }
			 
			 // Controle sur la table eu_acteur
			 $mapper_acteur = new Application_Model_EuActeurMapper();
			 $findacteur = $mapper_acteur->findByActeur($code_membre);
			 
			 if($findacteur != false) {
			   $db->rollback();
               $error = "Ce membre represente deja une gestion d'action commune ...";
               $sessionmcnp->error = $error;
               return;
			 }
			 
			 //insertion dans la table eu_gac
			
			 $code_recup = $gac_mapper->getLastGacByZone($code_zone);
             if($code_recup == null) {
               $code_gac = 'G' . $code_zone . '0001';
             } else {
               $num_ordre = substr($code_recup, -4);
               $num_ordre++;
               $code_gac = 'G' . $code_zone . str_pad($num_ordre,4,0,STR_PAD_LEFT);
             }
			
			 $gac->setCode_gac($code_gac);
             $gac->setCode_membre(null);
             $gac->setNom_gac($nom_gac);
             $gac->setCode_type_gac($type_gac);
             $gac->setCode_zone($code_zone);
             $gac->setCode_membre_gestionnaire($request->getParam("code_membre"));
             $gac->setDate_creation($date_idd->toString('yyyy-MM-dd'));
             $gac->setId_utilisateur(NULL);
			 $gac->setType_gac($appartenance);
			 $gac->setZone($code_zone);
			 $gac->setId_pays($id_pays);
			 $gac->setId_region($id_region);
			 $gac->setId_prefecture($id_prefecture);
			 $gac->setId_canton($id_canton);
             $gac->setGroupe('GAC');
			 $gac->setCode_secteur(null);
			 $gac->setCode_agence($code_agence);
             $gac->setCode_gac_create(null);
             $gac->setCode_gac_chaine(null);
             $gac_mapper->save($gac);
			
			 //insertion dans la table eu_acteur
			 $t_acteur = new Application_Model_DbTable_EuActeur();
             $c_acteur = new Application_Model_EuActeur();
			 $tetedivision = "";
			 if($type_gac == "GAC_DETENTRICE") {
			   $tetedivision = "TECHNOPOLE"; 
			 } elseif($type_gac == "GAC_SURVEILLANCE") {
			   $tetedivision = "FILIERE";
			 } elseif($type_gac == "GAC_EXECUTANTE") {
			   $tetedivision = "ACNEV";
			 }
						  
			 $count = $c_acteur->findConuter() + 1;
			 $c_acteur->setId_acteur($count)
                     ->setCode_acteur($code_gac)
			         ->setCode_division(NULL)
                     ->setCode_membre($code_membre)
                     ->setType_acteur($tetedivision)
                     ->setId_utilisateur(NULL)
                     ->setDate_creation($date_idd->toString('yyyy-MM-dd'));
					 
			 if($appartenance == 'SOURCE') {
			   $c_acteur->setCode_activite('SOURCE');
			   $c_acteur->setCode_source_create('SOURCE');
			   $c_acteur->setCode_monde_create('MONDE');
			   $c_acteur->setCode_zone_create($code_zone);
			   $c_acteur->setId_pays($id_pays);
			   $c_acteur->setId_region($id_region);
			   $c_acteur->setId_prefecture($id_prefecture);
			   $c_acteur->setId_canton($id_canton);
			   $c_acteur->setCode_secteur_create(NULL);
			   $c_acteur->setCode_agence_create(NULL);
			   
			 } else if($appartenance == 'MONDE') {
			   $c_acteur->setCode_activite('MONDE');
			   $c_acteur->setCode_source_create('SOURCE');
			   $c_acteur->setCode_monde_create('MONDE');
			   $c_acteur->setCode_zone_create($code_zone);
			   $c_acteur->setId_pays($id_pays);
			   $c_acteur->setId_region($id_region);
			   $c_acteur->setId_prefecture($id_prefecture);
			   $c_acteur->setId_canton($id_canton);
			   $c_acteur->setCode_secteur_create(NULL);
			   $c_acteur->setCode_agence_create(NULL);
							 
			 } else if($appartenance == 'ZONE') {
			   $c_acteur->setCode_activite('ZONE');
			   $c_acteur->setCode_source_create('SOURCE');
			   $c_acteur->setCode_monde_create('MONDE');
			   $c_acteur->setCode_zone_create($code_zone);
			   $c_acteur->setId_pays($id_pays);
			   $c_acteur->setId_region($id_region);
			   $c_acteur->setId_prefecture($id_prefecture);
			   $c_acteur->setId_canton($id_canton);
			   $c_acteur->setCode_secteur_create(NULL);
			   $c_acteur->setCode_agence_create(NULL);
			   
			 } else if($appartenance == 'PAYS') {
			   $c_acteur->setCode_activite('PAYS');
			   $c_acteur->setCode_source_create('SOURCE');
			   $c_acteur->setCode_monde_create('MONDE');
			   $c_acteur->setCode_zone_create($code_zone);
			   $c_acteur->setId_pays($id_pays);
			   $c_acteur->setId_region($id_region);
			   $c_acteur->setId_prefecture($id_prefecture);
			   $c_acteur->setId_canton($id_canton);
			   $c_acteur->setCode_secteur_create(NULL);
			   $c_acteur->setCode_agence_create(NULL);
							 
			 } else if($appartenance == 'REGION') {
			   $c_acteur->setCode_activite('REGION');
			   $c_acteur->setCode_source_create('SOURCE');
			   $c_acteur->setCode_monde_create('MONDE');
			   $c_acteur->setCode_zone_create($code_zone);
			   $c_acteur->setId_pays($id_pays);
			   $c_acteur->setId_region($id_region);
			   $c_acteur->setId_prefecture($id_prefecture);
			   $c_acteur->setId_canton($id_canton);
			   $c_acteur->setCode_secteur_create(NULL);
			   $c_acteur->setCode_agence_create(NULL);
			   
			 } else if($appartenance == 'PREFECTURE') {
			   $c_acteur->setCode_activite('PREFECTURE');
			   $c_acteur->setCode_source_create('SOURCE');
			   $c_acteur->setCode_monde_create('MONDE');
			   $c_acteur->setCode_zone_create($code_zone);
			   $c_acteur->setId_pays($id_pays);
			   $c_acteur->setId_region($id_region);
			   $c_acteur->setId_prefecture($id_prefecture);
			   $c_acteur->setId_canton($id_canton);
			   $c_acteur->setCode_secteur_create(NULL);
			   $c_acteur->setCode_agence_create(NULL);
						  
			 } else if($appartenance == 'CANTON')   { 
				$c_acteur->setCode_activite('CANTON');
				$c_acteur->setCode_source_create('SOURCE');
				$c_acteur->setCode_monde_create('MONDE');
				$c_acteur->setCode_zone_create($code_zone);
				$c_acteur->setId_pays($id_pays);
				$c_acteur->setId_region($id_region);
				$c_acteur->setId_prefecture($id_prefecture);
				$c_acteur->setId_canton($id_canton);
				$c_acteur->setCode_secteur_create(NULL);
				$c_acteur->setCode_agence_create(NULL);
			  }
						  
			   $c_acteur->setCode_gac_chaine(null);
			   $t_acteur->insert($c_acteur->toArray());
			   
			   //////// insertion dans la table eu_utilisateur ///////////////////////////////
			   $user_mapper = new Application_Model_EuUtilisateurMapper();
               $userin = new Application_Model_EuUtilisateur();
               $membre_mapper = new Application_Model_EuMembreMapper();
               $membrein = new Application_Model_EuMembre();
               $find_membre = $membre_mapper->find($code_membre,$membrein);
               $id_user = $user_mapper->findConuter() + 1;
						  
			   $userin->setId_utilisateur($id_user);
               $userin->setId_utilisateur_parent(Null); 
               $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
               $userin->setNom_utilisateur($membrein->getNom_membre());
               $userin->setLogin($login);
               $userin->setPwd(md5($pwd));
               $userin->setDescription(null);
               $userin->setUlock(0);
               $userin->setCh_pwd_flog(0);
						  
			   if($appartenance == 'SOURCE' && $type_gac == "GAC_DETENTRICE") {
                 $userin->setCode_groupe('detentrice');
			     $userin->setCode_groupe_create('detentrice');			 
			   } elseif($appartenance == 'MONDE' && $type_gac == "GAC_DETENTRICE") {
                 $userin->setCode_groupe('detentrice_monde');
			     $userin->setCode_groupe_create('detentrice_monde');			 
               } elseif($appartenance == 'ZONE' && $type_gac == "GAC_DETENTRICE") {
                 $userin->setCode_groupe('detentrice_zone');
			     $userin->setCode_groupe_create('detentrice_zone');			 
               } elseif($appartenance == 'PAYS' && $type_gac == "GAC_DETENTRICE") {
                 $userin->setCode_groupe('detentrice_pays');
				 $userin->setCode_groupe_create('detentrice_pays');			 
               } elseif($appartenance == 'REGION' && $type_gac == "GAC_DETENTRICE") {
                 $userin->setCode_groupe('detentrice_region');
			     $userin->setCode_groupe_create('detentrice_region');			 
               } elseif($appartenance == 'PREFECTURE' && $type_gac == "GAC_DETENTRICE") {
                 $userin->setCode_groupe('detentrice_secteur');
			     $userin->setCode_groupe_create('detentrice_secteur');			 
               } elseif($appartenance == 'CANTON' && $type_gac == "GAC_DETENTRICE") {
                 $userin->setCode_groupe('detentrice_agence');
				 $userin->setCode_groupe_create('detentrice_agence');			 
               } else if($appartenance == 'SOURCE' && $type_gac == "GAC_SURVEILLANCE") {
                 $userin->setCode_groupe('surveillance');
				 $userin->setCode_groupe_create('surveillance');			 
			   } elseif($appartenance == 'MONDE' && $type_gac == "GAC_SURVEILLANCE") {
                 $userin->setCode_groupe('surveillance_monde');
			     $userin->setCode_groupe_create('surveillance_monde');			 
               } elseif($appartenance == 'ZONE' && $type_gac == "GAC_SURVEILLANCE") {
                 $userin->setCode_groupe('surveillance_zone');
				 $userin->setCode_groupe_create('surveillance_zone');			 
               } elseif($appartenance == 'PAYS' && $type_gac == "GAC_SURVEILLANCE") {
                 $userin->setCode_groupe('surveillance_pays');
			     $userin->setCode_groupe_create('surveillance_pays');			 
               } elseif($appartenance == 'REGION' && $type_gac == "GAC_SURVEILLANCE") {
                 $userin->setCode_groupe('surveillance_region');
			     $userin->setCode_groupe_create('surveillance_region');			 
               } elseif($appartenance == 'PREFECTURE' && $type_gac == "GAC_SURVEILLANCE") {
                 $userin->setCode_groupe('surveillance_secteur');
			     $userin->setCode_groupe_create('surveillance_secteur');			 
               } elseif($appartenance == 'CANTON' && $type_gac == "GAC_SURVEILLANCE") {
                 $userin->setCode_groupe('surveillance_agence');
			     $userin->setCode_groupe_create('surveillance_agence');		 
               } else if($appartenance == 'SOURCE' && $type_gac == "GAC_EXECUTANTE") {
                 $userin->setCode_groupe('executante');
				 $userin->setCode_groupe_create('executante');			 
			   } elseif($appartenance == 'MONDE' && $type_gac == "GAC_EXECUTANTE") {
                 $userin->setCode_groupe('executante_monde');
				 $userin->setCode_groupe_create('executante_monde');			 
               } elseif($appartenance == 'ZONE' && $type_gac == "GAC_EXECUTANTE") {
                 $userin->setCode_groupe('executante_zone');
			     $userin->setCode_groupe_create('executante_zone');			 
               } elseif($appartenance == 'PAYS' && $type_gac == "GAC_EXECUTANTE") {
                 $userin->setCode_groupe('executante_pays');
				 $userin->setCode_groupe_create('executante_pays');			 
               } elseif($appartenance == 'REGION' && $type_gac == "GAC_EXECUTANTE") {
                 $userin->setCode_groupe('executante_region');
				 $userin->setCode_groupe_create('executante_region');			 
               } elseif($appartenance == 'PREFECTURE' && $type_gac == "GAC_EXECUTANTE") {
                 $userin->setCode_groupe('executante_secteur');
			     $userin->setCode_groupe_create('executante_secteur');			 
               } elseif($appartenance == 'CANTON' && $type_gac == "GAC_EXECUTANTE") {
                 $userin->setCode_groupe('executante_agence');
			     $userin->setCode_groupe_create('executante_agence');			 
               }
						  
			   $userin->setConnecte(0);
               $userin->setCode_agence($code_agence);
               $userin->setCode_secteur(NULL);
               $userin->setCode_zone($code_zone);
               $userin->setId_filiere(NULL);
               $userin->setCode_acteur($code_gac);
                   
               $userin->setCode_membre($code_membre);
               $userin->setId_pays($id_pays);
               $userin->setId_canton($id_canton);						  
               $user_mapper->save($userin);
			   
			   $db->commit();
               $sessionmcnp->error = "Operation bien effectuee";
			   $this->_redirect('/souscriptionbon/deploiementgac');
   
         }  catch (Exception $exc) {
		     $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
             $db->rollback();
		     return;
		 }
   
   
      }
   
   }








   public function enrolementpmsms2oldAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');


        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                            $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
            && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
            //&& isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
            && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
            && isset($_POST['code_statut']) && $_POST['code_statut']!=""
            && isset($_POST['code_rep']) && $_POST['code_rep']!=""
            && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
            && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
            && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
            && isset($_POST['email_membre']) && $_POST['email_membre']!=""
            && isset($_POST['id_pays']) && $_POST['id_pays']!=""
            && isset($_POST['code_agence']) && $_POST['code_agence']!=""
            && isset($_POST['code_activite']) && $_POST['code_activite']!=""
            && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                        /////////////////controle Code BAn
                    if(count($bon_neutre) == 0){
                            $sessionmcnp->error = "Code BAn incorrect ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));

                        /*$tabraison = explode(" ", $bon_neutre->bon_neutre_raison);
                        foreach ($tabraison as $value) {
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }*/

                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }


                        /////////////////controle codemembre
                        if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($_POST['code_rep'], $membre)){
                                //count($membre) == 0;
                            $sessionmcnp->error = "Le Code Membre est erroné ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                            }
                        }




                    if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < 70000){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                            }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile($request->getParam("portable_membre"));
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(70000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 70000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 70000);
                                $bon_neutre2M->update($bon_neutre2);

                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 70000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }

                        }
                            }


                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);



                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfs = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfs)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                       ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("ESMC");
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;

                $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                $mapper_op = new Application_Model_EuOperationMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


                    if($code_fs !="") {
                        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($bon_neutre->bon_neutre_raison)
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre($request->getParam("tel_membre"))
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre($request->getParam("portable_membre"))
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"))
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/


//////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(2);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(3);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
                        $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($bon_neutre->bon_neutre_raison);
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre($request->getParam("tel_membre"));
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre($request->getParam("portable_membre"));
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);




                        /////////////
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                        $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                        $preinscriptionmorale->setCode_membre_morale($code);
                        $preinscriptionmoraleM->update($preinscriptionmorale);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();

                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            $id_souscription = $findcode->souscription_id;
                            $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

                        } else {
                            $this->view->message = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }

                        $mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                        $findmem = $mem_mapper->find($code,$mem);

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                        } else {
                              if(substr($ancien_code,-1,1) == 'P') {
                                 $this->view->message = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 $this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                              }
                              $mem->setEtat_membre('A');
                              //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

                             // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
                         $mem_mapper->update($mem);




                        // eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

                        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);

                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        for($i = 0; $i < count($_POST['code_banque']); $i++) {
                        	if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
                        }


                        //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        $id_user = $user_mapper->findConuter() + 1;

                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;

                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fs_model->setOrigine_fs('N');
                        } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                    } else {
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }





                    if($code_fl !="") {

                        $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fl->setOrigine_fl('N');
                        } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

                        //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

                        //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }

                                                //$tcartes[0]="TPAGCP";
                                                $tcartes[1]="TSCNCSEI";
                                                $tcartes[2]="TSGCI";
                                                $tcartes[3]="TSIR";
                                                $tcartes[4]="TR";
                                                $tcartes[5]="TPaNu";
                                                $tcartes[6]="TSPaR";
                                                $tcartes[7]="TSFS";
                                                $tcartes[8]="TSPN";
                                                $tcartes[9]="TSIB";
                                                $tcartes[10]="TSPaNu";
                                                $tcartes[11]="TSIN";
                                                $tcartes[12]="TSCAPA";
                                                $tcartes[13]="TSMARGE";
                                                //$tcartes[14]="TSRE";


                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fkps !="") {
                        $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $carte->setOrigine_fkps('N');
                        } else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());

                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
                    }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);
                                }



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(70000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
                            ///////////////////////////////////////////////////////////////////////////////////////



                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
            $sessionmcnp->codesecret = $codesecret;
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);

                    }

                    }
                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
            }
        }
    }





   

	public function enrolementsms2Action() {
		
	   $sessionmcnp = new Zend_Session_Namespace('mcnp');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmc');
	   
	   $paramban = (int) $this->_request->getParam('paramban');
       $this->view->paramban = $paramban;
	   
	   $t_zone = new Application_Model_DbTable_EuZone();
       $zones = $t_zone->fetchAll();
       $this->view->zones = $zones;
       $t_pays = new Application_Model_DbTable_EuPays();
       $pays = $t_pays->fetchAll();
       $this->view->pays = $pays;
       $t_region = new Application_Model_DbTable_EuRegion();
       $regions = $t_region->fetchAll();
       $this->view->regions = $regions;
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $prefectures = $t_prefecture->fetchAll();
       $this->view->prefectures = $prefectures;
       $t_canton = new Application_Model_DbTable_EuCanton();
       $cantons = $t_canton->fetchAll();
       $this->view->cantons = $cantons;

       $date_id = Zend_Date::now();
	   
	   $request = $this->getRequest ();
	   if($request->isPost())  {
           if(isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
               && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
               && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
               && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
               && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
               && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
               && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
               && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
               && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
               && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
               && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
               && isset($_POST['id_pays']) && $_POST['id_pays']!=""
               && isset($_POST['code_agence']) && $_POST['code_agence']!=""
               && isset($_POST['code_activite']) && $_POST['code_activite']!=""
               && isset($_POST['id_canton']) && $_POST['id_canton']!="")  {
				   
				   $db = Zend_Db_Table::getDefaultAdapter();
                   $db->beginTransaction();
                   try {
                       $id_utilisateur_acnev = 1;
                       $id_utilisateur_filiere = 2;
                       $id_utilisateur_technopole = 3;
					   
					   
					   $mont_caps = Util_Utils::getParametre('CAPS','valeur');
                       $mont_fs = Util_Utils::getParametre('FS','valeur');
                       $mont_fl = Util_Utils::getParametre('FL','valeur');
                       $mont_fkps = Util_Utils::getParametre('FKPS','valeur');
					   
					   $date_id = new Zend_Date(Zend_Date::ISO_8601);
                       $date_idd = clone $date_id;

                       $codesecret = Util_Utils::genererCodeSMS(8);
					   
					   $mstiersbc = new Application_Model_EuMstiersListebc();
					   $m_mstiersbc = new Application_Model_EuMstiersListebcMapper();
					   
					   $telephone = new Application_Model_EuTelephone();
                       $m_telephone = new Application_Model_EuTelephoneMapper();
					   
					   $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                       $codeactivation = new Application_Model_EuCodeActivation();
					   
					   $place = new Application_Model_EuOperation();
					   $m_place = new Application_Model_EuOperationMapper();
					   
					   $membre   = new Application_Model_EuMembre();
					   $m_membre    = new Application_Model_EuMembreMapper();
					   
					   $membremorale = new Application_Model_EuMembreMorale();
                       $m_membremorale = new Application_Model_EuMembreMoraleMapper();
					   
					   $caps   = new Application_Model_EuCaps();
                       $m_caps = new Application_Model_EuCapsMapper();
					   
					   $activation   = new Application_Model_EuActivation();
                       $m_activation = new Application_Model_EuActivationMapper();
					   
					   $souscription = new Application_Model_EuSouscription();
                       $m_souscription = new Application_Model_EuSouscriptionMapper();
					   
					   $m_compte = new Application_Model_EuCompteMapper();
                       $compte      = new Application_Model_EuCompte();
                       $sms_money   = new Application_Model_EuSmsmoney();
                       $money_map   = new Application_Model_EuSmsmoneyMapper();
      
                       $det_sms   = new Application_Model_EuDetailSmsmoney();
                       $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();
      
                       $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                       $det_vtesms  = new Application_Model_EuDetailVentesms();
               
                       $telephone = new Application_Model_EuTelephone();
                       $m_telephone = new Application_Model_EuTelephoneMapper();

                       $date = new Zend_Date(Zend_Date::ISO_8601);
					   
					   $type_bnp  = 'CAPS';
                       $type_caps = 'CAPSFLFCPS';
					   $apporteur = NULL;
					   
					   $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                       $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn")); 

                       ///////////////// controle Code BAn ///////////////////////////////////////////////
                       if(count($bon_neutre) == 0) {
                          $sessionmcnp->error = "Code BAn incorrect ...";
					      $this->view->sexe = $request->getParam("sexe_membre");
                          $this->view->sitfam = $request->getParam("sitfam_membre");
                          $this->view->datnais = $request->getParam("date_nais_membre");
                          $this->view->nation = $request->getParam("nationalite_membre");
                          $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                          $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                          $this->view->formation = $request->getParam("formation");
                          $this->view->profession = $request->getParam("profession_membre");
                          $this->view->religion = $request->getParam("religion_membre");
                          $this->view->pere = $request->getParam("pere_membre");
                          $this->view->mere = $request->getParam("mere_membre");
                          $this->view->quartier_membre = $request->getParam("quartier_membre");
                          $this->view->ville_membre = $request->getParam("ville_membre");
                          $this->view->bp = $request->getParam("bp_membre");
                          $this->view->email = $request->getParam("email_membre");
                          $db->rollback();
                          return;
                        }
						
						///////////////// controle nom prenom ////////////////////////////////
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $prenom_membre = $bon_neutre->bon_neutre_prenom;
	                    $prenom_membre = str_replace("'", " ", $prenom_membre);
	                    $tabprenom = explode(" ",$prenom_membre);
					
	                    $nom_membre = $bon_neutre->bon_neutre_nom;
	                    $nom_membre = str_replace("'", " ", $nom_membre);
						
						$select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

                        //$tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
                        foreach ($tabprenom as $value) {
                           $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }
						
                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = $nom_membre." ".$prenom_membre." est déjà membre ...";
							$this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $db->rollback();
							return;
                         }
						 
						 ///////////////// controle email //////////////////////////////////////
                         if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))) {
                            $sessionmcnp->error = "E-mail non valable ...";
							$this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $db->rollback();
							return;
                         }

                         if(count($bon_neutre) > 0)  {						 
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
			                $mont = 5000;
			                $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
			                $montant_cm = 5000;
							$findmstiersbc = $m_mstiersbc->fetchByBanBeneficiaire($bon_neutre->bon_neutre_id);
							
							/////////////// controle sur Intégrité du compte BAn  //////////////////////////////
							if($bon_neutre->bon_neutre_montant_solde != $bon_neutre_detail_somme)  {
							     $sessionmcnp->error = " Compte BAn non intègre ...";
							     $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $db->rollback();
						         return;
							 }
							 
							  ///////////////// controle solde BAn //////////////////////////////
                              if($bon_neutre->bon_neutre_montant_solde < $montant_cm) {
                                 $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
							     $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $db->rollback();
						         return;
                              }
							  
							  if($bon_neutre_detail_somme < $mont) {
                                 $sessionmcnp->error = "Montant Total restant du BAn est insuffisant ...";
						         $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $db->rollback();
						         return;
                              }
							  
							  $eusouscription = new Application_Model_DbTable_EuSouscription();
                               $select = $eusouscription->select();
                               $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
                               $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
                               $select->order(array("souscription_id ASC"));
                               $select->limit(1);
                               $rowseusouscription = $eusouscription->fetchRow($select);
                               if(count($rowseusouscription) > 0) {
                                 $souscription_ok = 1;
                                 $souscription_first = $rowseusouscription->souscription_id;
                               } else {
                                 $souscription_ok = 0;
                               }
							  
							   /////////////////souscription KACM PP ////////////////////////////////////////////
							   $souscription->setSouscription_personne("PP");
                               $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                               $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                               $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                               $souscription->setSouscription_email($request->getParam("email_membre"));
                               $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                               $souscription->setSouscription_membreasso(1);
                               $souscription->setSouscription_type("BAn");
                               $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                               $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                               $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                               $souscription->setSouscription_montant($montant_cm);
                               $souscription->setSouscription_nombre(1);
                               $souscription->setSouscription_programme("KACM");
                               $souscription->setSouscription_type_candidat(0);
                               $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                               $souscription->setCode_activite($request->getParam("code_activite"));
                               $souscription->setId_metier($request->getParam("id_metier"));
                               $souscription->setId_competence($request->getParam("id_competence"));
                               $souscription->setSouscription_ville($request->getParam("ville_membre"));
                               $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                               if($souscription_ok == 1) {
                                  $souscription->setSouscription_souscription($souscription_first);
                               } else {
                                  $souscription->setSouscription_souscription($compteur_souscription);
                               }
                               $souscription->setSouscription_ordre(NULL);
							   if($findmstiersbc == NULL) {
                                 $souscription->setSouscription_autonome(1);
							   } else {
							     $souscription->setSouscription_autonome(0);
							   }
                               $souscription->setPublier(0);
                               $souscription->setErreur(0);
                               $souscription->setId_canton($request->getParam("id_canton"));
                               $m_souscription->save($souscription);
							  
							   $compteur_souscription = $db->lastInsertId();
							   
							   //////// Mise à jour du bon_neutre ////////////////////////////////////
							   $bon_neutre2 = new Application_Model_EuBonNeutre();
                               $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                               $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                               $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_cm);
                               $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_cm);
                               $bon_neutre2M->update($bon_neutre2);
							   
							   // Mise à jour du bon_neutre_detail
							   $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
							   foreach($bon_neutre_detail as $detail)  {
							       $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                   $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                   $bon_neutre_detail2M->find($detail->bon_neutre_detail_id,$bon_neutre_detail2);
								   
								   if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont)  {
								      $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
								      if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                                         $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                         $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                         $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                         foreach($appro_detail as $appro) {
                                            $bnad = new Application_Model_EuBonNeutreApproDetail();
                                            $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id, $bnad);

                                            if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                 $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                 $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                 $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                 $bnad_M->update($bnad);
                                            } else {
                                                 $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                 $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                 $bnad_M->update($bnad);
                                                 break;
                                            }
                                          }
                                      }
									  
									  $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                      $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                      $bon_neutre_detail2M->update($bon_neutre_detail2);
									  
									  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                      $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                      //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                      //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                      $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                      $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
									  if($findmstiersbc == NULL) {
                                         $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
									  } else {
										 $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation Tiers PP"); 
									  }
                                      $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                      $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                      $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	              $bon_neutre_utilise2->setUsertable("utilisateur");
              		   	              $bon_neutre_utilise2->setUser_id(1);
                                      $bon_neutre_utilise2M->save($bon_neutre_utilise2);
									  
							  
							       } else {
                                       if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
										    $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                                            $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                                            $appro_montant_solde = $mont;
                                            foreach($appro_detail as $appro) {
                                               $bnad = new Application_Model_EuBonNeutreApproDetail();
                                               $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                                               $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);
                                               if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                                                    $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                                                    $bnad_M->update($bnad);
                                               } else {
                                                    $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                                                    $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                                                    $bnad_M->update($bnad);
                                                    break;
                                                }

                                            }   
									   }
									   
									   $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                       $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                       $bon_neutre_detail2M->update($bon_neutre_detail2);

                                       $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                       $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                       //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                       //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                       $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                       $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                       if($findmstiersbc == NULL) {
                                         $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
									   } else {
										 $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation Tiers PP"); 
									   }
                                       $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                       $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                       $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	               $bon_neutre_utilise2->setUsertable("utilisateur");
              		   	               $bon_neutre_utilise2->setUser_id(1);
                                       $bon_neutre_utilise2M->save($bon_neutre_utilise2);
                                       break;
                                   }
					           }
							   
							   ////////  operation de transfert  /////////////////////////
							   $souscription = new Application_Model_EuSouscription();
                               $souscriptionM = new Application_Model_EuSouscriptionMapper();
                               $souscriptionM->find($compteur_souscription, $souscription);
                               $date = new Zend_Date();
							   $mobile = $souscription->souscription_mobile;
							   
							   $codefs   = '';
                               $codefl   = '';
                               $codefkps = '';
							   $codecaps = '';
							   
							   $membre_pbf = '0000000000000000001M';
                               $code_compte_pbf = "NN-TR-".$membre_pbf;
                               $ret = $m_compte->find($code_compte_pbf,$compte);
							   
							   $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						       $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						       $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
							   $cumulfcaps = $det_sms_m->getSumByProduit($membre_pbf,'CAPS');
						       $cumuls = $cumulfs + $cumulfl + $cumulfcps;
							   
							   // Traitement des produits FS
                               $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                               // Traitement des produits FL
                               $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                               // Traitement des produits FCPS
                               $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS'); 
							   // Traitement des produits FCAPS
							   $lignesdetfcaps = $det_sms_m->findSMSByCompte($membre_pbf,'CAPS');
							 

                               if($findmstiersbc == NULL) {
							       if(!$ret && ($cumuls < ($mont_fs + $mont_fl + $mont_fkps))) {
							           $db->rollback();
                                       $sessionmcnp->error = 'Le compte est introuvable ou le solde du compte insuffisant';
						               $this->view->sexe = $request->getParam("sexe_membre");
                                       $this->view->sitfam = $request->getParam("sitfam_membre");
                                       $this->view->datnais = $request->getParam("date_nais_membre");
                                       $this->view->nation = $request->getParam("nationalite_membre");
                                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                       $this->view->formation = $request->getParam("formation");
                                       $this->view->profession = $request->getParam("profession_membre");
                                       $this->view->religion = $request->getParam("religion_membre");
                                       $this->view->pere = $request->getParam("pere_membre");
                                       $this->view->mere = $request->getParam("mere_membre");
                                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                                       $this->view->ville_membre = $request->getParam("ville_membre");
                                       $this->view->bp = $request->getParam("bp_membre");
                                       $this->view->email = $request->getParam("email_membre");
                                       return;   
							       }
								   
								   if($lignesdetfs == null || $lignesdetfl ==  null || $lignesdetfkps == null) {
								       $db->rollback();
                                       $sessionmcnp->error = 'Le compte des unités est insuffisant';
						               $this->view->sexe = $request->getParam("sexe_membre");
                                       $this->view->sitfam = $request->getParam("sitfam_membre");
                                       $this->view->datnais = $request->getParam("date_nais_membre");
                                       $this->view->nation = $request->getParam("nationalite_membre");
                                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                       $this->view->formation = $request->getParam("formation");
                                       $this->view->profession = $request->getParam("profession_membre");
                                       $this->view->religion = $request->getParam("religion_membre");
                                       $this->view->pere = $request->getParam("pere_membre");
                                       $this->view->mere = $request->getParam("mere_membre");
                                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                                       $this->view->ville_membre = $request->getParam("ville_membre");
                                       $this->view->bp = $request->getParam("bp_membre");
                                       $this->view->email = $request->getParam("email_membre");
                                       return;
								   }
								   
							   }  else {
								   if(!$ret && ($cumulfcaps < $mont_caps)) {
									   $db->rollback();
                                       $sessionmcnp->error = 'Le compte est introuvable ou le solde du compte insuffisant';
						               $this->view->sexe = $request->getParam("sexe_membre");
                                       $this->view->sitfam = $request->getParam("sitfam_membre");
                                       $this->view->datnais = $request->getParam("date_nais_membre");
                                       $this->view->nation = $request->getParam("nationalite_membre");
                                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                       $this->view->formation = $request->getParam("formation");
                                       $this->view->profession = $request->getParam("profession_membre");
                                       $this->view->religion = $request->getParam("religion_membre");
                                       $this->view->pere = $request->getParam("pere_membre");
                                       $this->view->mere = $request->getParam("mere_membre");
                                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                                       $this->view->ville_membre = $request->getParam("ville_membre");
                                       $this->view->bp = $request->getParam("bp_membre");
                                       $this->view->email = $request->getParam("email_membre");
                                       return;
								   }
								   
								   if($lignesdetfcaps == null) {
								       $db->rollback();
                                       $sessionmcnp->error = 'Le compte des unités est insuffisant';
						               $this->view->sexe = $request->getParam("sexe_membre");
                                       $this->view->sitfam = $request->getParam("sitfam_membre");
                                       $this->view->datnais = $request->getParam("date_nais_membre");
                                       $this->view->nation = $request->getParam("nationalite_membre");
                                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                       $this->view->formation = $request->getParam("formation");
                                       $this->view->profession = $request->getParam("profession_membre");
                                       $this->view->religion = $request->getParam("religion_membre");
                                       $this->view->pere = $request->getParam("pere_membre");
                                       $this->view->mere = $request->getParam("mere_membre");
                                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                                       $this->view->ville_membre = $request->getParam("ville_membre");
                                       $this->view->bp = $request->getParam("bp_membre");
                                       $this->view->email = $request->getParam("email_membre");
                                       return;
								   }
							   }
							   
							   //Mise à jour du compte de transfert
							   if($findmstiersbc == NULL) {
                                  $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_fkps));
                                  $m_compte->update($compte);
								  
								  $codefs = strtoupper(Util_Utils::genererCodeSMS(8));
								  $sms_money->setCode_Agence(null)
                                            ->setCreditAmount($mont_fs)
                                            ->setSentTo($mobile)
                                            ->setMotif('FS')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefs)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
								  
								  $i = 0;
                                  $reste = $mont_fs;
                                  $nbre_lignesdetfs = count($lignesdetfs);
                                  while($reste > 0 && $i < $nbre_lignesdetfs) {
									 $lignedetfs = $lignesdetfs[$i];
                                     $id = $lignedetfs->getId_detail_smsmoney();
                                     $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                     if($reste >= $lignedetfs->getSolde_sms()) {									 
									     //Mise à jour  des lignes d'enrégistrement
                                         //insertion dans la table eu_detailventesms
                                         //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                         //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
										 
										 $det_vtesms->setId_detail_smsmoney($id)
                                                    ->setCode_membre_dist($membre_pbf)
                                                    ->setCode_membre(null)
                                                    ->setType_tansfert('FS')
                                                    ->setCreditcode($codefs)
                                                    ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                    ->setMont_vente($lignedetfs->getSolde_sms())
                                                    ->setId_utilisateur(null)
                                                    ->setCode_produit('FS');
                                         $det_vte_sms->insert($det_vtesms->toArray());
										 
										 $reste = $reste - $lignedetfs->getSolde_sms();
                                         $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                    ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                    ->setSolde_sms(0);
                                         $det_sms_m->update($lignedetfs);
										 
                                      } else  {
										  //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                          //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                          $det_vtesms->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FS')
                                                     ->setCreditcode($codefs)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FS');
                                           $det_vte_sms->insert($det_vtesms->toArray());
																
                                           $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                           $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                           $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                           $det_sms_m->update($lignedetfs);
                                           $reste = 0;
                                      }								  
									  $i++;  
								  }
								  
								  $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
								  $sms_money->setCode_Agence(null)
                                            ->setCreditAmount($mont_fl)
                                            ->setSentTo($mobile)
                                            ->setMotif('FL')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codefl)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(0)
                                            ->setDestAccount_Consumed(null)
                                            ->setDatetimeConsumed(null)
                                            ->setNum_recu(null);
                                  $money_map->save($sms_money);
								  
								  $j = 0;
                                  $reste = $mont_fl;
                                  $nbre_lignesdetfl = count($lignesdetfl);
                                  while($reste > 0 && $j < $nbre_lignesdetfl) {
                                     $lignedetfl = $lignesdetfl[$j];
                                     $id = $lignedetfl->getId_detail_smsmoney();
                                     $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                     if($reste >= $lignedetfl->getSolde_sms()) {
                                          //Mise à jour  des lignes d'enrégistrement
                                          $reste = $reste - $lignedetfl->getSolde_sms();
                                          //insertion dans la table eu_detailventesms
                                          //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                          //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                          $det_vtesms->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FL')
                                                     ->setCreditcode($codefl)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($lignedetfl->getSolde_sms())
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FL');
                                          $det_vte_sms->insert($det_vtesms->toArray());
															
                                          $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                     ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                     ->setSolde_sms(0);
                                          $det_sms_m->update($lignedetfl);
										  
                                       } else  {
                                          //Mise à jour  des lignes d'enrégistrement
                                          //insertion dans la table eu_detailventesms
                                          //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                          //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                          $det_vtesms->setId_detail_smsmoney($id)
                                                     ->setCode_membre_dist($membre_pbf)
                                                     ->setCode_membre(null)
                                                     ->setType_tansfert('FL')
                                                     ->setCreditcode($codefl)
                                                     ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                     ->setMont_vente($reste)
                                                     ->setId_utilisateur(null)
                                                     ->setCode_produit('FL');
                                          $det_vte_sms->insert($det_vtesms->toArray());
                                          $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                          $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                          $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                          $det_sms_m->update($lignedetfl);
                                          $reste = 0;
                                        }
                                        $j++;
                                     }
									 
									 $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
									 $sms_money->setCode_Agence(null)
                                               ->setCreditAmount($mont_kps)
                                               ->setSentTo($mobile)
                                               ->setMotif('FCPS')
                                               ->setId_Utilisateur(null)
                                               ->setCurrencyCode('XOF')
                                               ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setFromAccount($code_compte_pbf)
                                               ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                               ->setCreditCode($codefkps)
                                               ->setDestAccount(null)
                                               ->setIDDatetimeConsumed(0)
                                               ->setDestAccount_Consumed(null)
                                               ->setDatetimeConsumed(null)
                                               ->setNum_recu(null);
                                      $money_map->save($sms_money);

                                      $k = 0;
                                      $reste = $mont_fkps;
                                      $nbre_lignesdetfkps = count($lignesdetfkps);
									  while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                          $lignedetfkps = $lignesdetfkps[$k];
                                          $id = $lignedetfkps->getId_detail_smsmoney();
                                          $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                          if($reste >= $lignedetfkps->getSolde_sms()) {
                                               //Mise à jour  des lignes d'enrégistrement
                                               //insertion dans la table eu_detailventesms
                                               //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                               //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               $det_vtesms->setId_detail_smsmoney($id)
                                                          ->setCode_membre_dist($membre_pbf)
                                                          ->setCode_membre(null)
                                                          ->setType_tansfert('FCPS')
                                                          ->setCreditcode($codefl)
                                                          ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setMont_vente($lignedetfkps->getSolde_sms())
                                                          ->setId_utilisateur(null)
                                                          ->setCode_produit('FCPS');
                                               $det_vte_sms->insert($det_vtesms->toArray());
                                               $reste = $reste - $lignedetfkps->getSolde_sms();
                                               $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                            ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                            ->setSolde_sms(0);
                                               $det_sms_m->update($lignedetfkps);
											   
                                            } else  {
                                               //Mise à jour  des lignes d'enrégistrement
                                               //insertion dans la table eu_detailventesms
                                               //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                               //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)			
                                               $det_vtesms->setId_detail_smsmoney($id)
                                                          ->setCode_membre_dist($membre_pbf)
                                                          ->setCode_membre(null)
                                                          ->setType_tansfert('FCPS')
                                                          ->setCreditcode($codefl)
                                                          ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                          ->setMont_vente($reste)
                                                          ->setId_utilisateur(null)
                                                          ->setCode_produit('FCPS');
                                               $det_vte_sms->insert($det_vtesms->toArray());
															
                                               $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                               $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                               $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                               $det_sms_m->update($lignedetfkps);
                                               $reste = 0;
                                              }
                                              $k++;
                                           }
								  
							       } else {
								  $compte->setSolde($compte->getSolde() - $mont_caps);
                                  $m_compte->update($compte);

								  $codecaps = strtoupper(Util_Utils::genererCodeSMS(8));
                                  $sms_money->setCode_Agence(null)
                                            ->setCreditAmount($mont_caps)
                                            ->setSentTo($mobile)
                                            ->setMotif('CAPS')
                                            ->setId_Utilisateur(null)
                                            ->setCurrencyCode('XOF')
                                            ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                            ->setFromAccount($code_compte_pbf)
                                            ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                            ->setCreditCode($codecaps)
                                            ->setDestAccount(null)
                                            ->setIDDatetimeConsumed(Util_Utils::getIDDate($date->toString('dd/MM/yyyy')))
                                            ->setDestAccount_Consumed($compteur_souscription)
                                            ->setDatetimeConsumed($date->toString('yyyy-MM-dd HH:mm:ss'))
                                            ->setNum_recu(null);
                                   $money_map->save($sms_money);
				                   $nengfcaps = $db->lastInsertId();
								   
								   
								   $l = 0;
                                   $reste = $mont_caps;
                                   $nbre_lignesdetfcaps = count($lignesdetfcaps);
                                   while($reste > 0 && $l < $nbre_lignesdetfcaps) {
								       $lignedetfcaps = $lignesdetfcaps[$l];
                                       $id = $lignedetfcaps->getId_detail_smsmoney();
                                       $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
								       if($reste >= $lignedetfcaps->getSolde_sms())  {
                                            //Mise à jour  des lignes d'enrégistrement
                                            $reste = $reste - $lignedetfcaps->getSolde_sms();
                                            //insertion dans la table eu_detailventesms
                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                            $det_vtesms->setId_detail_smsmoney($id)
                                                       ->setCode_membre_dist($membre_pbf)
                                                       ->setCode_membre(null)
                                                       ->setType_tansfert('CAPS')
                                                       ->setCreditcode($codecaps)
                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                       ->setMont_vente($lignedetfcaps->getSolde_sms())
                                                       ->setId_utilisateur(null)
                                                       ->setCode_produit('CAPS');
                                             $det_vte_sms->insert($det_vtesms->toArray());
							                 $id_detail_vtsms = $db->lastInsertId();
                              
                                             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $lignedetfcaps->getSolde_sms())
                                                           ->setMont_regle($lignedetfcaps->getMont_regle() + $lignedetfcaps->getSolde_sms())
                                                           ->setSolde_sms(0);
                                             $det_sms_m->update($lignedetfcaps);
                         
                                         } else {
										     //Mise à jour  des lignes d'enrégistrement
                                             //insertion dans la table eu_detailventesms
                                             //$id_detail_vtsms = $det_vtesms->findConuter() + 1;  
                                             //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                             $det_vtesms->setId_detail_smsmoney($id)
                                                   ->setCode_membre_dist($membre_pbf)
                                                   ->setCode_membre(null)
                                                   ->setType_tansfert('CAPS')
                                                   ->setCreditcode($codecaps)
                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                   ->setMont_vente($reste)
                                                   ->setId_utilisateur(null)
                                                   ->setCode_produit('CAPS');
                                             $det_vte_sms->insert($det_vtesms->toArray());
								             $id_detail_vtsms = $db->lastInsertId();
                              
                                             $lignedetfcaps->setSolde_sms($lignedetfcaps->getSolde_sms() - $reste);
                                             $lignedetfcaps->setMont_vendu($lignedetfcaps->getMont_vendu() + $reste);
                                             $lignedetfcaps->setMont_regle($lignedetfcaps->getMont_regle() + $reste);
                                             $det_sms_m->update($lignedetfcaps);
                                             $reste = 0;	  
									     }
										 $l++;
								   }
							  }
							  
							  
							  /////////////////////////////// preinscription ///////////////////////////////////////////////
							  $sms_mapper = new Application_Model_EuSmsmoneyMapper();
                              $code_agence = $request->getParam("code_agence");
							  $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
							  $code_zone = substr($request->getParam("code_agence"), 0, 3);
                              $id_pays = $request->getParam("id_pays");
                              $table = new Application_Model_DbTable_EuActeur();
                              $selection = $table->select();
                              $selection->where('code_membre like ?',$code_agence.'%');
                              $selection->where('type_acteur like ?','gac_surveillance');
                              $resultat = $table->fetchAll($selection);
                              $trouvacteursur = $resultat->current();
                              $code_acteur = $trouvacteursur->code_acteur;
							  
							  $tcartes = array();
                              $tscartes = array();
							  
							  $code_fs = NULL;
                              $code_fl = NULL;
                              $code_fkps = NULL;
							  $code_caps = NULL;
							  
							  if($date_nais >= $date_idd) {
                                 $sessionmcnp->error = "La date de naissance doit être antérieure à la date actuelle !!!";
                                 $db->rollback();
                                 $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 return;
                              }
							  
							  $compagnie = telephonecompagnie($_POST['code_telephonique'],$_POST['numero_telephone']);
                              $numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
							  if($compagnie == 1) {
                                 $sessionmcnp->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
								 $this->view->sexe = $request->getParam("sexe_membre");
                                 $this->view->sitfam = $request->getParam("sitfam_membre");
                                 $this->view->datnais = $request->getParam("date_nais_membre");
                                 $this->view->nation = $request->getParam("nationalite_membre");
                                 $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                 $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                 $this->view->formation = $request->getParam("formation");
                                 $this->view->profession = $request->getParam("profession_membre");
                                 $this->view->religion = $request->getParam("religion_membre");
                                 $this->view->pere = $request->getParam("pere_membre");
                                 $this->view->mere = $request->getParam("mere_membre");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $db->rollback();
                                 return;	
                              }
							  
							  if($findmstiersbc == NULL) { 
								 $code_fs = $codefs;
                                 $code_fl = $codefl;
                                 $code_fkps = $codefkps;
							  } else {
								 $code_caps = $codecaps;  
							  }
							  
							  $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
							  $preinscription = new Application_Model_EuPreinscription();
							  
							  $preinscription->setNom_membre($nom_membre)
                                             ->setPrenom_membre($prenom_membre)
                                             ->setSexe_membre($request->getParam("sexe_membre"))
                                             ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                             ->setId_pays($request->getParam("id_pays"))
                                             ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                             ->setPere_membre($request->getParam("pere_membre"))
                                             ->setMere_membre($request->getParam("mere_membre"))
                                             ->setSitfam_membre($request->getParam("sitfam_membre"))
                                             ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                             ->setProfession_membre($request->getParam("profession_membre"))
                                             ->setFormation($request->getParam("formation"))
                                             ->setId_religion_membre($request->getParam("religion_membre"))
                                             ->setQuartier_membre($request->getParam("quartier_membre"))
                                             ->setVille_membre($request->getParam("ville_membre"))
                                             ->setBp_membre($request->getParam("bp_membre"))
                                             ->setTel_membre(NULL)
                                             ->setEmail_membre($request->getParam("email_membre"))
                                             ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                                             ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                                             ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                                             ->setCode_membre(NULL)
                                             ->setCode_agence($code_agence)
                                             ->setCode_fs($code_fs)
                                             ->setCode_fl($code_fl)
                                             ->setCode_fkps($code_fkps)
                                             ->setId_canton($request->getParam("id_canton"));
                             $preinscription->setPublier(1);
                             $preinsc_mapper->save($preinscription);
				
				             $compteur_preinscription = $db->lastInsertId();
							 /////////////////////////// validation acnev ////////////////////////////////////////
                             $validation_quittance = new Application_Model_EuValidationQuittance();
                             $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                             //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                             //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                             $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                             $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                             $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $validation_quittance->setPublier(1);
                             $validation_quittance_mapper->save($validation_quittance);
							 
							 //////   validation filere ////////////////////////////////////////////////////////////
                             $preinscription = new Application_Model_EuPreinscription();
                             $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                             $preinscriptionM->find($compteur_preinscription, $preinscription);

                             $preinscription->setPublier(2);
                             $preinscriptionM->update($preinscription);


                             $validation_quittance = new Application_Model_EuValidationQuittance();
                             $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                             //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                             //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                             $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                             $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                             $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $validation_quittance->setPublier(1);
                             $validation_quittance_mapper->save($validation_quittance);
							 
							 //////  validation technopole ///////////////////////////////////////////////////////////////////
                             $preinscription = new Application_Model_EuPreinscription();
                             $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                             $preinscriptionM->find($compteur_preinscription, $preinscription);

                             $preinscription->setPublier(3);
                             $preinscriptionM->update($preinscription);


                             $validation_quittance = new Application_Model_EuValidationQuittance();
                             $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                             //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                             //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                             $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                             $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                             $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                             $validation_quittance->setPublier(1);
                             $validation_quittance_mapper->save($validation_quittance);
							 
							 
							 // insertion dans eu_membre //
							 $code = $m_membre->getLastCodeMembreByAgence($code_agence);
                             if($code == NULL) {
                                $code = $code_agence . '0000001' . 'P';
                             } else {
                                $num_ordre = substr($code, 12, 7);
                                $num_ordre++;
                                $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                                $code = $code_agence . $num_ordre_bis . 'P';
                             }
							 
							 $membre->setCode_membre($code);
                             $membre->setNom_membre($nom_membre);
                             $membre->setPrenom_membre($prenom_membre);
                             $membre->setSexe_membre($request->getParam("sexe_membre"));
                             $membre->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'));
                             $membre->setId_pays($request->getParam("nationalite_membre"));
                             $membre->setLieu_nais_membre($request->getParam("lieu_nais_membre"));
                             $membre->setPere_membre($request->getParam("pere_membre"));
                             $membre->setMere_membre($request->getParam("mere_membre"));
                             $membre->setSitfam_membre($request->getParam("sitfam_membre"));
                             $membre->setNbr_enf_membre($request->getParam("nbr_enf_membre"));
                             $membre->setProfession_membre($request->getParam("profession_membre"));
                             $membre->setFormation($request->getParam("formation"));
                             $membre->setId_religion_membre($request->getParam("religion_membre"));
                             $membre->setQuartier_membre($request->getParam("quartier_membre"));
                             $membre->setVille_membre($request->getParam("ville_membre"));
                             $membre->setBp_membre($request->getParam("bp_membre"));
                             $membre->setTel_membre(NULL);
                             $membre->setEmail_membre($request->getParam("email_membre"));
                             $membre->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                             $membre->setId_utilisateur(NULL);
                             $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                             $membre->setDate_identification($date_id->toString('yyyy-MM-dd'));
                             $membre->setCode_agence($code_agence);
                             $membre->setCodesecret(md5($codesecret));
							 if($findmstiersbc == NULL) {	   
                               $membre->setAuto_enroler('O');
							 } else {
                               $membre->setAuto_enroler('N');
                             }							 
                             $membre->setEtat_membre('N');
						     $membre->setDesactiver(2);
                             $membre->setId_canton($request->getParam("id_canton"));
                             $m_membre->save($membre);
							 
							 /////////////////////////////////////////////////////////////////
                             $preinscription = new Application_Model_EuPreinscription();
                             $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                             $preinscriptionM->find($compteur_preinscription, $preinscription);

                             $preinscription->setCode_membre($code);
                             $preinscriptionM->update($preinscription);
							 
							 if($findmstiersbc == NULL) {
							    $codeactivation->setDate_generer($date_idd->toString('yyyy-MM-dd HH:mm:ss'));
                                $codeactivation->setCode_membre($code);
                                $codeactivation->setCode_fs($code_fs);
                                $codeactivation->setCode_fl($code_fl);
                                $codeactivation->setCode_fkps($code_fkps);
                                $codeactivation->setOrigine_code("ESMC");
								$codeactivation->setMontant_souscrit($montant_cm);
                                $codeactivation->setSouscription_id($compteur_souscription);
                                $m_codeactivation->save($codeactivation);

                                $sms_fs = $sms_mapper->findByCreditCode($code_fs);
								$sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);
								
								$sms_fl = $sms_mapper->findByCreditCode($code_fl);
								$sms_fl->setDestAccount_Consumed('FL-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fl);
								
								$sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
								$sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                         ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                         ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fkps);
                                                                
							 } else  {
								$apporteur = $findmstiersbc->code_membre_apporteur;
                                $id_mstiersbc =	$findmstiersbc->id_mstiers_listebc;
                                $m_mstiersbc->find($id_mstiersbc,$mstiersbc);

                                $mstiersbc->setCode_membre_beneficiaire($code);
                                $m_mstiersbc->update($mstiersbc);								
								 
								$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                                $place->setId_utilisateur(null);

                                if(substr($apporteur,19,1)=='P') {
                                   $place->setCode_membre($apporteur);
                                   $place->setCode_membre_morale(null);
                                } else  {
                                   $place->setCode_membre(null);
                                   $place->setCode_membre_morale($apporteur);
                                }

                                $place->setMontant_op($mont_caps);
                                $place->setCode_produit('CAPS');
                                $place->setLib_op('Enrolement');
                                $place->setType_op($type_bnp);
                                $place->setCode_cat('TCAPS');
                                $m_place->save($place);
					
					            $count = $db->lastInsertId();
								 
								$activation->setId_depot(NULL)
                                           ->setDate_activation($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
                                           ->setCode_activation($code_caps)
                                           ->setCode_membre($code)
                                           ->setMembreasso_id(1);
                                $m_activation->save($activation);
								
								$idcaps = $type_bnp . $apporteur . $date_idd->toString('yyyyMMddHHmmss');
                                $caps->setCode_caps($idcaps)
                                     ->setCode_membre_benef($code)
                                     ->setMont_caps($mont_caps)
                                     ->setMont_fs(0)
                                     ->setPeriode(0)
                                     ->setId_operation($count)
                                     ->setRembourser('N')
                                     ->setId_credit(null)
                                     ->setIndexer(1)
                                     ->setType_caps($type_caps)
                                     ->setCode_type_bnp($type_bnp)
                                     ->setFs_utiliser(1)
                                     ->setFl_utiliser(1)
                                     ->setCps_utiliser(1)
                                     ->setMont_panu_fs(0)
                                     ->setReconst_fs(0)
                                     ->setPanu(0)
                                     ->setDate_caps($date_idd->toString('yyyy-MM-dd'))
                                     ->setId_utilisateur(null);

                                 if(substr($apporteur,19,1)=='P') {
                                    $caps->setCode_membre_app($apporteur)
                                         ->setCode_membre_morale_app(null);
                                 } else  {
                                    $caps->setCode_membre_app(null)
                                         ->setCode_membre_morale_app($apporteur);
                                 }
                                 $m_caps->save($caps);
								
                                 $sms_caps = $sms_mapper->findByCreditCode($code_caps);
								 $sms_caps->setDestAccount_Consumed('NB-TCAPS-'.$code)
                                          ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                          ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                 $sms_mapper->update($sms_caps);								
							 }
							 
							 // insertion dans eu_telephone //
                             $telephone->setNumero_telephone($numero_telephone);
                             $telephone->setCompagnie_telephone($compagnie);
                             $telephone->setCode_membre($code);
                             $m_telephone->save($telephone);
							 
							 // insertion dans eu_compte_bancaire
							 $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                             $cb = new Application_Model_EuCompteBancaire();
                             for($i = 0; $i < count($_POST['code_banque']); $i++) {
							    if($_POST['num_compte'][$i]!="") {
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
								}	
                              }
							 
							  $lib_op = NULL;
                              $type_op = NULL;
							  $mapper_op = new Application_Model_EuOperationMapper();
							  $place = new Application_Model_EuOperation();
                              $compteurfs = $mapper_op->findConuter() + 1;
							  if($findmstiersbc == NULL) {
                                 $lib_op = 'Auto-enrolement';
                                 $type_op = 'AERL';
                              } else {
                                 $lib_op = 'Enrolement';
                                 $type_op = 'ERL';
                              }
							  
							  
							  $place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                              $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                              $place->setId_utilisateur(null);
                              $place->setCode_membre($code);
                              $place->setCode_membre_morale(null);
                              $place->setMontant_op($mont_fs);
                              $place->setCode_produit('FS');
                              $place->setLib_op($lib_op);
                              $place->setType_op($type_op);
                              $place->setCode_cat('TFS');
                              $mapper_op->save($place);	

                              $tab_fs = new Application_Model_DbTable_EuFs();
                              $fs_model = new Application_Model_EuFs();
                              $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($mont_fs);
                              $fs_model->setOrigine_fs('N');
							  if($findmstiersbc == NULL) {
							     $fs_model->setCreditcode($code_fs);
							  } else {
								 $fs_model->setCreditcode($code_caps); 
							  }
                              $tab_fs->insert($fs_model->toArray());

                              $userin = new Application_Model_EuUtilisateur();
                              $m_userin = new Application_Model_EuUtilisateurMapper();
							
                              $userin->setId_utilisateur_parent(NULL)
                                     ->setPrenom_utilisateur($prenom_membre)
                                     ->setNom_utilisateur($nom_membre)
                                     ->setLogin($code)
                                     ->setPwd(md5($codesecret))
                                     ->setDescription(NULL)
                                     ->setUlock(0)
                                     ->setCh_pwd_flog(0)
                                     ->setCode_groupe('personne_physique')
                                     ->setCode_groupe_create('personne_physique')
                                     ->setConnecte(0)
                                     ->setCode_agence($code_agence)
                                     ->setCode_secteur(NULL)
                                     ->setCode_zone($request->getParam("code_zone"))
                                     ->setId_pays($request->getParam("id_pays"))
                                     ->setCode_acteur($code_acteur)
                                     ->setCode_membre($code)
                                     ->setId_canton($request->getParam("id_canton"));
                               $m_userin->save($userin);

                               // Mise à jour de la table eu_contrat
                               $contrat = new Application_Model_EuContrat();
                               $mapper_contrat = new Application_Model_EuContratMapper();
							   
                               //$id_contrat = $mapper->findConuter() + 1;
                               //$contrat->setId_contrat($id_contrat);
                               $contrat->setCode_membre($code);
                               $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                               $contrat->setNature_contrat('numeraire');
                               $contrat->setId_type_contrat(NULL);
                               $contrat->setId_type_creneau(NULL);
                               $contrat->setId_type_acteur(NULL);
                               $contrat->setId_pays(NULL);
                               $contrat->setId_utilisateur(NULL);
                               $contrat->setFiliere(NULL);
                               $mapper_contrat->save($contrat);

                               $tfl = new Application_Model_DbTable_EuFl();
                               $fl = new Application_Model_EuFl();
                               $code_fl = 'FL-' . $code;

                               $fl->setCode_fl($code_fl)
                                  ->setCode_membre($code)
                                  ->setCode_membre_morale(NULL)
                                  ->setMont_fl($mont_fl)
                                  ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                                  ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                                  ->setId_utilisateur(NULL);

                               if($findmstiersbc == NULL) {
                                   $fl->setCreditcode($code_fl);
                               } else {
                                   $fl->setCreditcode($code_caps);
                               }
                               $tfl->insert($fl->toArray());

                               //Mise à jour du compte general FGFL
                               $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                               $cg_fgfn = new Application_Model_EuCompteGeneral();
                               $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                               if($result3) {
                                  $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                  $cg_mapper->update($cg_fgfn);
                               } else {
                                  $cg_fgfn->setCode_compte('FL')
                                          ->setIntitule('Frais de licence')
                                          ->setService('E')
                                          ->setCode_type_compte('NN')
                                          ->setSolde($mont_fl);
                                   $cg_mapper->save($cg_fgfn);
                               }

                               $place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                               $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                               $place->setId_utilisateur(null);
                               $place->setCode_membre($code);
                               $place->setCode_membre_morale(null);
                               $place->setMontant_op($mont_fl);
                               $place->setCode_produit('FL');
                               $place->setLib_op('Frais de licences');
                               $place->setType_op(null);
                               $place->setCode_cat(null);
                               $mapper_op->save($place);
							   
							   
							   $tcartes[0]="TPAGCRPG";
                               $tcartes[1]="TCNCS";
                               $tcartes[2]="TPaNu";
                               $tcartes[3]="TPaR";
                               $tcartes[4]="TR";
                               $tcartes[5]="CAPA";

                               $tscartes[0]="TSRPG";
                               $tscartes[1]="TSCNCS";
                               $tscartes[2]="TSPaNu";
                               $tscartes[3]="TSPaR";
                               $tscartes[4]="TSCAPA";

                               for($i = 0; $i < count($tcartes); $i++) {
                                  if($tcartes[$i] == "TCNCS") {
                                      $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                      $type_carte = 'NR';
                                      $res = $m_compte->find($code_compte,$compte);
                                  } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                      $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                      $type_carte = 'NN';
                                      $res = $m_compte->find($code_compte,$compte);
                                  } else  {
                                      $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                      $type_carte = 'NB';
                                      $res = $m_compte->find($code_compte,$compte);
                                  }

                                  if(!$res) {
                                      $compte->setCode_cat($tcartes[$i])
                                             ->setCode_compte($code_compte)
                                             ->setCode_membre($code)
                                             ->setCode_membre_morale(NULL)
                                             ->setCode_type_compte($type_carte)
                                             ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                             ->setDesactiver(0)
                                             ->setLib_compte($tcartes[$i])
                                             ->setSolde(0);
                                      $m_compte->save($compte);
                                   }
                               }

                               for($j = 0; $j < count($tscartes); $j++) {
                                   if($tscartes[$j] == "TSCNCS") {
                                       $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                       $type_carte = 'NR';
                                       $res = $m_compte->find($code_comptets,$compte);
                                   } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                       $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                       $type_carte = 'NN';
                                       $res = $m_compte->find($code_comptets,$compte);
                                   } else {
                                       $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                       $type_carte = 'NB';
                                       $res = $m_compte->find($code_comptets,$compte);
                                   }
                                   if(!$res) {
                                      $compte->setCode_cat($tscartes[$j])
                                             ->setCode_compte($code_comptets)
                                             ->setCode_membre($code)
                                             ->setCode_membre_morale(NULL)
                                             ->setCode_type_compte($type_carte)
                                             ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                             ->setDesactiver(0)
                                             ->setLib_compte($tscartes[$j])
                                             ->setSolde(0);
                                       $m_compte->save($compte);
                                    }
                                 }

                                 $carte = new Application_Model_EuCartes();
                                 $t_carte = new Application_Model_DbTable_EuCartes();
                                 $id_demande = $carte->findConuter() + 1;
                                 $carte->setId_demande($id_demande)
                                       ->setCode_cat($tcartes[0])
                                       ->setCode_membre($code)
                                       ->setMont_carte($mont_fkps)
                                       ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                       ->setLivrer(0)
                                       ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                       ->setImprimer(0)
                                       ->setCardPrintedDate('')
                                       ->setCardPrintedIDDate(0)
                                       ->setId_utilisateur(NULL);
                                 $carte->setOrigine_fkps('N');
                                 $t_carte->insert($carte->toArray());

                                 $place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                                 $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                                 $place->setId_utilisateur(null);
                                 $place->setCode_membre($code);
                                 $place->setCode_membre_morale(null);
                                 $place->setMontant_op($mont_fkps);
                                 $place->setCode_produit('CPS');
                                 $place->setLib_op('Frais de CPS');
                                 $place->setType_op(null);
                                 $place->setCode_cat(null);
                                 $mapper_op->save($place);
								 
								 //////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)) {
                                     $bon_neutre2->setBon_neutre_code_membre($code);
                                     $bon_neutre2M->update($bon_neutre2);

                                     $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                     $bon_neutre_detail2 = $bon_neutre_detail2M->fetchAllByCode($bon_neutre->bon_neutre_code);

                                     if($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                               	          $bon_neutre_appro2 = new Application_Model_EuBonNeutreAppro();
                                          $bon_neutre_appro2M = new Application_Model_EuBonNeutreApproMapper();
                                          $bon_neutre_appro2M->find($bon_neutre_detail2->bon_neutre_appro_id, $bon_neutre_appro2);

                                          $bon_neutre_appro2->setBon_neutre_appro_beneficiaire($code);
                                          $bon_neutre_appro2M->update($bon_neutre_appro2);
                            	     }
                                }
								
								$convention = new Application_Model_DbTable_EuConvention();
                                $select2 = $convention->select();
                                $select2->where("code_activation = ?", $_POST['code_BAn']);
                                $select2->orwhere("(code_membre IS NULL");
                                $select2->where("code_membre = '')");
                                $select2->limit(1);

                                if($convention_rows = $convention->fetchRow($select2)) {
                                   $convention2 = new Application_Model_DbTable_EuConvention();
                                   $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
                                }
								
								$compteur = Util_Utils::findConuter() + 1;
                                Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                                $db->commit();

                                $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                                Code Membre (Login) : <strong>".$code."</strong><br />
                                Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                                $sessionmcnp->membre = $code;
                                $sessionmcnp->codesecret = $codesecret;
								$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                                //$this->_redirect('/souscriptionbon/enrolementsms2');
							 
				         }
				   
				   } catch(Exception $exc) {
					   $db->rollback();
                       $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                       $this->view->sexe = $request->getParam("sexe_membre");
                       $this->view->sitfam = $request->getParam("sitfam_membre");
                       $this->view->datnais = $request->getParam("date_nais_membre");
                       $this->view->nation = $request->getParam("nationalite_membre");
                       $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                       $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                       $this->view->formation = $request->getParam("formation");
                       $this->view->profession = $request->getParam("profession_membre");
                       $this->view->religion = $request->getParam("religion_membre");
                       $this->view->pere = $request->getParam("pere_membre");
                       $this->view->mere = $request->getParam("mere_membre");
                       $this->view->quartier_membre = $request->getParam("quartier_membre");
                       $this->view->ville_membre = $request->getParam("ville_membre");
                       $this->view->bp = $request->getParam("bp_membre");
                       $this->view->email = $request->getParam("email_membre");
                       return;
                    }
				   
		   }  else {
              $sessionmcnp->error = "Champs * obligatoire ...";
              $this->view->sexe = $request->getParam("sexe_membre");
              $this->view->sitfam = $request->getParam("sitfam_membre");
              $this->view->datnais = $request->getParam("date_nais_membre");
              $this->view->nation = $request->getParam("nationalite_membre");
              $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
              $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
              $this->view->formation = $request->getParam("formation");
              $this->view->profession = $request->getParam("profession_membre");
              $this->view->religion = $request->getParam("religion_membre");
              $this->view->pere = $request->getParam("pere_membre");
              $this->view->mere = $request->getParam("mere_membre");
              $this->view->quartier_membre = $request->getParam("quartier_membre");
              $this->view->ville_membre = $request->getParam("ville_membre");
              $this->view->bp = $request->getParam("bp_membre");
              $this->view->email = $request->getParam("email_membre");
           }
    

       }
	   
    }







   public function enrolementsms2amodifierAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
            if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
              //&& isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
              && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
              && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
              && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
              //&& isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
              && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
              && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
              && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
              && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
              && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
              //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
              && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
              && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
              && isset($_POST['id_pays']) && $_POST['id_pays']!=""
              && isset($_POST['code_agence']) && $_POST['code_agence']!=""
              && isset($_POST['code_activite']) && $_POST['code_activite']!=""
              && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              ) {


                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);

                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));

                    /////////////////controle Code BAn
                    if(count($bon_neutre) == 0) {
                       $sessionmcnp->error = "Code BAn incorrect ...";
					   $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                       $db->rollback();
                       //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                       return;
                    }

                    /////////////////controle nom prenom
                    $eupreinscription = new Application_Model_DbTable_EuMembre();
                    $prenom_membre = $bon_neutre->bon_neutre_prenom;
	                $prenom_membre = str_replace("'", " ", $prenom_membre);
	                $tabprenom = explode(" ",$prenom_membre);
					
	                $nom_membre = $bon_neutre->bon_neutre_nom;
	                $nom_membre = str_replace("'", " ", $nom_membre);

                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

                        //$tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
                        foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }

                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = $nom_membre." ".$prenom_membre." est déjà membre ...";
							$this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                            $db->rollback();
							return;
                            //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban); 
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
							$this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                            $db->rollback();
							return;
                            //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban); 
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_nom)));
                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_prenom)));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }

            if(count($bon_neutre) > 0) {
						
			   $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
			   $mont = 5000;
			   $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
			   $montant_cm = 5000;
			   
			  //$cumulbon = trim($bon_neutre_detail_mapper->getSumByBonNeutreold($bon_neutre->bon_neutre_id)) + trim($bon_neutre_detail_mapper->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id));
              /*
			  if($cumulbon >= 5000) {
			    $mont = 5000;
			    $montant_cm = 5000;
			    $bon_neutre_detail_somme = trim($bon_neutre_detail_mapper->getSumByBonNeutreold($bon_neutre->bon_neutre_id)) + trim($bon_neutre_detail_mapper->getSumByBonNeutreAppro($bon_neutre->bon_neutre_id));	
              } 
			  else if(trim($bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id)) >= 70000) {
			    $mont = 70000;
			    $montant_cm = 70000;
			    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
			  }*/
			
			
                        
                        /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < $montant_cm) {
                          $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                          $db->rollback();
						  return;
                          //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                        }

                        /////////////////souscription KACM PP

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            //$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PP");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant($montant_cm);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);
							$compteur_souscription = $db->lastInsertId();

                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + $montant_cm);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - $montant_cm);
                                $bon_neutre2M->update($bon_neutre2);

                            ///////////////////////////////////////////////////////////////////////////////////////
                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    //$mont = 5000;
                    //$bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    //$bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    
					if($bon_neutre_detail_somme < $mont) {
                        $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
						$this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                        $db->rollback();
						return;
                        //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                        
                    } else {
                        $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                        foreach($bon_neutre_detail as $detail) {
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);


                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

                if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                   $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                   $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                   $appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                   foreach ($appro_detail as $appro) {
                      $bnad = new Application_Model_EuBonNeutreApproDetail();
                      $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                      $bnad_M->findByApproDetail($appro->bon_neutre_appro_id,$appro->bon_neutre_detail_id, $bnad);

                      if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                         $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                         $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                         $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                         $bnad_M->update($bnad);
                      } else {
                         $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                         $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                         $bnad_M->update($bnad);
                         break;
                      }

                    }

                 }

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

               } else {
                 if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {
                     $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                     $appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
                     $appro_montant_solde = $mont;
                     foreach ($appro_detail as $appro) {
                       $bnad = new Application_Model_EuBonNeutreApproDetail();
                       $bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
                       $bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

                       if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde) {
                          $appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
                          $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
                          $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
                          $bnad_M->update($bnad);
                       } else {
                          $bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
                          $bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
                          $bnad_M->update($bnad);
                          break;
                       }

                      }

                      }

                      $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                      $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                      $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                      break;
                 }

                        }
                            }


                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($compteur_souscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($compteur_souscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($compteur_souscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);

                                        $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						                $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						                $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
						 
						                $cumuls = $cumulfs + $cumulfl + $cumulfcps;

                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                        $souscription2->setSouscription_autonome(1);
                                        $souscription2->setSouscription_programme('KACM');
                                        $souscription2M->update($souscription2);


                                                    if($ret && ($cumuls >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Le compte est introuvable ou le solde du compte insuffisant';
														$this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                                                        //$this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);
                                                        //return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfs = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfs)
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
																
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
																
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfl = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfl)
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($reste)
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    //$nengfkps = $money_map->findConuter() + 1;
                                                    //$sms_money->setNEng($nengfkps)
                                                    $sms_money->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    //insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    //$codeactivation->setId_code_activation($countcode)
                                                    $codeactivation->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("ESMC");
													$codeactivation->setMontant_souscrit($montant_cm);
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                    $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                    $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;


                        if($code_fs != "") {
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            if ($sms_fs == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if ($date_nais >= $date_idd) {
                                $sessionmcnp->error = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


///////////////////////////////preinscription

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            //$compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            //$preinscription->setId_preinscription($compteur_preinscription)
			
            $preinscription->setNom_membre($nom_membre)
                           ->setPrenom_membre($prenom_membre)
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre(NULL)
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"));
                $preinscription->setPublier(1);
                $preinsc_mapper->save($preinscription);
				
				$compteur_preinscription = $db->lastInsertId();


///////////////////////////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(2);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $validation_quittance->setPublier(1);
                                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(3);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////


                            $membre->setCode_membre($code)
                                   ->setNom_membre($nom_membre)
                                   ->setPrenom_membre($prenom_membre)
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre(NULL)
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
                                   ->setEtat_membre(null)
								   ->setDesactiver(2)
                                   ->setId_canton($request->getParam("id_canton"));
                            $mapper->save($membre);


                                /////////////////////////////////////////////////////////////////
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setCode_membre($code);
                                $preinscriptionM->update($preinscription);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();


                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            //$id_souscription = $findcode->souscription_id;
                            //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
                            //if($findsouscrip != FALSE) {
                            //}
                            $souscription_mapper->find($findcode->souscription_id,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
                        }
                        else {
                            $sessionmcnp->error = "Erreur d'éxecution: Les codes d'activation ne sont liés à aucune souscription !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $_POST["nom_membre"];
                            //$this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            //$this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            //$this->view->portable = $_POST["portable_membre"];
                            return;
                        }

                            $mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
                            $findmem = $mem_mapper->find($code,$mem);

                            if(($ancien_code == '') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                            } else {
                              if(substr($ancien_code,-1,1) == 'M') {
                                 $sessionmcnp->error = "Erreur d'éxecution: Ce membre n'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 //$this->view->nom_membre = $_POST["nom_membre"];
                                 //$this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 //$this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 //$this->view->portable = $_POST["portable_membre"];
                                 return;
                            }

                            $mem->setEtat_membre('A');
                            //Mise à jour de la table physique
                            $p_mapper = new Application_Model_PhysiqueMapper();
                            $p = new Application_Model_Physique();
                            $rep = $p_mapper->find($ancien_code,$p);
                            if ($rep == true) {
                                $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                $p_mapper->update($p);
                            }
                            
                            // Mise à jour de la table eu_ancien_membre
                            $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                            $pmcnp = new Application_Model_EuAncienMembre();
                            $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                            if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                            }
                            }
                            $mem_mapper->update($mem);



//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
$compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
if($compagnie == 1) {
    $sessionmcnp->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
    $db->rollback();
    return;	
} else {
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    //$telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}


                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
							    if($_POST['num_compte'][$i]!=""){
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
								}	
                            }

                            $mapper_op = new Application_Model_EuOperationMapper();
							$place = new Application_Model_EuOperation();
                            $compteurfs = $mapper_op->findConuter() + 1;
                            $lib_op = 'Auto-enrolement';
                            $type_op = 'AERL';
                            //Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                            
							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($fs);
                            $place->setCode_produit('FS');
                            $place->setLib_op($lib_op);
                            $place->setType_op($type_op);
                            $place->setCode_cat('TFS');
                            $mapper_op->save($place);
							
							
							$tab_fs = new Application_Model_DbTable_EuFs();
                            $fs_model = new Application_Model_EuFs();
                            $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fs_model->setOrigine_fs('N');
                            } else {
                                $fs_model->setOrigine_fs('A');
                            }
                            $tab_fs->insert($fs_model->toArray());

                            $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fs);

                            $userin = new Application_Model_EuUtilisateur();
                            $mapper = new Application_Model_EuUtilisateurMapper();
                            //$id_user = $mapper->findConuter() + 1;
                            //$userin->setId_utilisateur($id_user)
							
                            $userin->setId_utilisateur_parent(NULL)
                                   ->setPrenom_utilisateur($prenom_membre)
                                   ->setNom_utilisateur($nom_membre)
                                   ->setLogin($code)
                                   ->setPwd(md5($codesecret))
                                   ->setDescription(NULL)
                                   ->setUlock(0)
                                   ->setCh_pwd_flog(0)
                                   ->setCode_groupe('personne_physique')
                                   ->setCode_groupe_create('personne_physique')
                                   ->setConnecte(0)
                                   ->setCode_agence($code_agence)
                                   ->setCode_secteur(NULL)
                                   ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                   ->setId_pays($id_pays)
                                   ->setCode_acteur($code_acteur)
                                   ->setCode_membre($code)
                                   ->setId_canton($request->getParam("id_canton"));
                            $mapper->save($userin);

                            // Mise à jour de la table eu_contrat
                            $contrat = new Application_Model_EuContrat();
                            $mapper_contrat = new Application_Model_EuContratMapper();
                            //$id_contrat = $mapper->findConuter() + 1;
                            //$contrat->setId_contrat($id_contrat);
                            $contrat->setCode_membre($code);
                            $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                            $contrat->setNature_contrat('numeraire');
                            $contrat->setId_type_contrat(NULL);
                            $contrat->setId_type_creneau(NULL);
                            $contrat->setId_type_acteur(NULL);
                            $contrat->setId_pays(NULL);
                            $contrat->setId_utilisateur(NULL);
                            $contrat->setFiliere(NULL);
                            $mapper_contrat->save($contrat);
                            
                        } else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                        }
                        
                        }
                        if($code_fl != "") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fl->setOrigine_fl('N');
                            } else {
                                $fl->setOrigine_fl('A');
                            }
                            $tfl->insert($fl->toArray());

                            //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
							
                            $compteurfl = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                $place->setId_utilisateur(null);
                $place->setCode_membre($code);
                $place->setCode_membre_morale(null);
                $place->setMontant_op($mont_fl);
                $place->setCode_produit('FL');
                $place->setLib_op('Frais de licences');
                $place->setType_op(null);
                $place->setCode_cat(null);
                $mapper_op->save($place);
				
							
							
                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

                            for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

                            for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                        }  else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                            $db->rollback();
                            //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                            //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                        }


                        if($code_fkps != "") {
                            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                            if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $carte->setOrigine_fkps('N');
                            } else {
                              $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
							
                            //$compteurcps = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            
							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                $place->setId_utilisateur(null);
                $place->setCode_membre($code);
                $place->setCode_membre_morale(null);
                $place->setMontant_op($fkps);
                $place->setCode_produit('CPS');
                $place->setLib_op('Frais de CPS');
                $place->setType_op(null);
                $place->setCode_cat(null);
                $mapper_op->save($place);
							
							
							$sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
                        }
						
						
				 // script de creation de TE de prestation
				 /*
                 $eucompte = new Application_Model_EuCompte();
				 $m_compte = new Application_Model_EuCompteMapper();

                 $te   = new Application_Model_EuTegc();
				 $m_te = new Application_Model_EuTegcMapper();
				 $code_te = "";
				 $nom_tegc = "";				 
						
				 $nom_tegc = $bon_neutre->bon_neutre_nom." ".$bon_neutre->bon_neutre_prenom;

                 $code_zone = $request->getParam("code_zone");
			     $id_pays =   $request->getParam("id_pays");
			     $id_region = $request->getParam("id_region");
			     $id_prefecture =  $request->getParam("id_prefecture");
			     $id_canton = $request->getParam("id_canton");

                 $num_compte = 'NB-TPAGCP-'.$code;
				 $res = $m_compte->find($num_compte,$eucompte);
									
				 if(!$res) {
					$eucompte->setCode_cat('TPAGCP')
                             ->setCode_compte($num_compte)
			                 ->setCode_type_compte('NB')
                             ->setDate_alloc($date->toString('yyyy-MM-dd'))
                             ->setDesactiver(0)
                             ->setLib_compte('TPAGCP')
                             ->setSolde(0);
												 				 
                     $eucompte->setCode_membre($code)
                              ->setCode_membre_morale(NULL);
																				         
                     $m_compte->save($eucompte);
										
			         $code_te = $m_te->getLastTegcByMembre($code);
					 if($code_te == NULL) {
			            $code_te = 'TEGCP'.$code. '00001';         
			         } else {
			            $num_ordre = substr($code_te, -5);
                        $num_ordre++;
                        $code_te = 'TEGCP'.$code.str_pad($num_ordre,5,0,STR_PAD_LEFT);    
			         }
										
										$te->setCode_tegc($code_te);
			                            $te->setId_filiere(NULL);
			                            $te->setMdv(12);
			                            $te->setTranche_payement(1);
                                        $te->setCode_membre_physique($code);										
			                            $te->setMontant(0);
			                            $te->setMontant_utilise(0);
			                            $te->setSolde_tegc(0);
			                            $te->setId_utilisateur(NULL);
			                            $te->setNom_tegc($nom_tegc);
			                            $te->setNom_produit("Prestation");
			                            $te->setDate_tegc($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					                    $te->setType_tegc("PRESTATAIRE");
										$te->setRecurrent_illimite(0);
										$te->setRecurrent_limite(0);
										$te->setNonrecurrent(1);
										$te->setPeriode1(0);
										$te->setPeriode2(0);
										$te->setPeriode3(0);
										$te->setFormel(0);
										$te->setRegime_tva(0);
										$te->setSpecial(1);
										$te->setOrdinaire(0);
										$te->setSubvention(0);
										
										$te->setCode_zone($code_zone);
				                        $te->setId_pays($id_pays);
				                        $te->setId_region($id_region);
				                        $te->setId_prefecture($id_prefecture);
				                        $te->setId_canton($id_canton);

                                        $m_te->save($te);

						}
                        */						

                                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && ($bon_neutre2->bon_neutre_nom != "" && $bon_neutre2->bon_neutre_nom != NULL)){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);

                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2 = $bon_neutre_detail2M->fetchAllByCode($bon_neutre->bon_neutre_code);

                                if($bon_neutre_detail2->bon_neutre_appro_id > 0){
                               	$bon_neutre_appro2 = new Application_Model_EuBonNeutreAppro();
                                $bon_neutre_appro2M = new Application_Model_EuBonNeutreApproMapper();
                                $bon_neutre_appro2M->find($bon_neutre_detail2->bon_neutre_appro_id, $bon_neutre_appro2);

                                $bon_neutre_appro2->setBon_neutre_appro_beneficiaire($code);
                                $bon_neutre_appro2M->update($bon_neutre_appro2);
                            	}

                                }

                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PP");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($montant_cm);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
              ///////////////////////////////////////////////////////////////////////////////////////



        $convention = new Application_Model_DbTable_EuConvention();
        $select2 = $convention->select();
        $select2->where("code_activation = ?", $_POST['code_BAn']);
        $select2->orwhere("(code_membre IS NULL");
        $select2->where("code_membre = '')");
        $select2->limit(1);

        if($convention_rows = $convention->fetchRow($select2)){
        $convention2 = new Application_Model_DbTable_EuConvention();
        $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
        }


                        ///////////////////////////////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                        $this->_redirect('/souscriptionbon/enrolementsms2/paramban/'.$paramban);

                    }
                    }  catch (Exception $exc) {
						$db->rollback();
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                       //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                       $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                //$this->view->nom_membre = $bon_neutre->bon_neutre_nom;
                //$this->view->prenom_membre = $bon_neutre->bon_neutre_prenom;
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
            }
        }
    }




   public function enrolementpmmaisonAction()   { 
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        
        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
        $date_id = Zend_Date::now();
        $request = $this->getRequest ();
        
        if ($request->isPost ()) {
           if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
               && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
               && isset($_POST['design']) && $_POST['design']!=""
               && isset($_POST['code_statut']) && $_POST['code_statut']!=""
               && isset($_POST['code_rep']) && $_POST['code_rep']!=""
               && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
               && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
               //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
               && isset($_POST['email_membre']) && $_POST['email_membre']!=""
               && isset($_POST['id_pays']) && $_POST['id_pays']!=""
               && isset($_POST['code_agence']) && $_POST['code_agence']!=""
               && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              )  {
                  
                 $db = Zend_Db_Table::getDefaultAdapter();
                 $db->beginTransaction();
                 try {
                     $id_utilisateur_acnev = 1;
                     $id_utilisateur_filiere = 2;
                     $id_utilisateur_technopole = 3;

                     $codesecret = Util_Utils::genererCodeSMS(8);
                     $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                     $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));

                     /////////////////controle Code BAn /////////////////////////////////////////////
                     if(count($bon_neutre) == 0) {
                       $sessionmcnp->error = "Code BAn incorrect ...";
                       $db->rollback();
                       $this->_redirect('/souscriptionbon/enrolementpmmaison/paramban/'.$paramban);
                       return;
                     }
                     
                     /////////////////controle raison sociale
                     $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                     $select = $eupreinscription->select();
                     $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                     
                     $select->limit(1);
                     $rowseupreinscription = $eupreinscription->fetchRow($select);
                     if(count($rowseupreinscription) > 0) {
                       $sessionmcnp->error = "Vous êtes déjà membre ...";
                       $db->rollback();
                       $this->_redirect('/souscriptionbon/enrolementpmmaison/paramban/'.$paramban);
                       return;
                     }

                     /////////////////controle email
                     if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))) {
                       $sessionmcnp->error = "E-mail non valable ...";
                       $db->rollback();
                       $this->_redirect('/souscriptionbon/enrolementpmmaison/paramban/'.$paramban);
                       return;
                     }
                     
                     /////////////////controle raison sociale
                     $eusouscription = new Application_Model_DbTable_EuSouscription();
                     $select = $eusouscription->select();
                     $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                     $select->order(array("souscription_id ASC"));
                     $select->limit(1);
                     $rowseusouscription = $eusouscription->fetchRow($select);
                     if(count($rowseusouscription) > 0) {
                       $souscription_ok = 1;
                       $souscription_first = $rowseusouscription->souscription_id;
                     } else {
                       $souscription_ok = 0;
                     }
                     
                     /////////////////controle codemembre
                     if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                        $membre = new Application_Model_EuMembre();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        if(!$membre_mapper->find($_POST['code_rep'], $membre)) {
                          $sessionmcnp->error = "Le Code Membre est erroné ...";
                          $db->rollback();
                          $this->_redirect('/souscriptionbon/enrolementpmmaison/paramban/'.$paramban);
                          return;
                         } 
                      }
                      
                      if(count($bon_neutre) > 0) {
                         /////////////////controle nom prenom
                         if($bon_neutre->bon_neutre_montant_solde < 70000) {
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmmaison/paramban/'.$paramban);
                            return;
                         }


                         /////////////////souscription KACM PM

                         $souscription = new Application_Model_EuSouscription();
                         $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                         $compteur_souscription = $souscription_mapper->findConuter() + 1;
                         $souscription->setSouscription_id($compteur_souscription);
                         $souscription->setSouscription_personne("PM");
                         $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                         $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                         $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                         $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                         $souscription->setCode_statut($request->getParam("code_statut"));
                         $souscription->setSouscription_email($request->getParam("email_membre"));
                         $souscription->setSouscription_mobile(intval($_POST['code_telephonique'][0]).$_POST['numero_telephone'][0]);
                         $souscription->setSouscription_membreasso(1);
                         $souscription->setSouscription_type("BAn");
                         $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                         $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                         $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                         $souscription->setSouscription_montant(70000);
                         $souscription->setSouscription_nombre(1);
                         $souscription->setSouscription_programme("KACM");
                         $souscription->setSouscription_type_candidat(0);
                         $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                         $souscription->setCode_activite($request->getParam("code_activite"));
                         $souscription->setId_metier($request->getParam("id_metier"));
                         $souscription->setId_competence($request->getParam("id_competence"));
                         $souscription->setSouscription_ville($request->getParam("ville_membre"));
                         $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                         
                         if($souscription_ok == 1) {
                           $souscription->setSouscription_souscription($souscription_first);
                         } else {
                           $souscription->setSouscription_souscription($compteur_souscription);
                         }
                         
                         $souscription->setSouscription_ordre(NULL);
                         $souscription->setSouscription_autonome(1);
                         $souscription->setPublier(0);
                         $souscription->setErreur(0);
                         $souscription->setId_canton($request->getParam("id_canton"));
                         $souscription_mapper->save($souscription);

                         //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                         $bon_neutre2 = new Application_Model_EuBonNeutre();
                         $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                         $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                         
                         $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 70000);
                         $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 70000);
                         $bon_neutre2M->update($bon_neutre2);

                         ///////////////////////////////////////////////////////////////////////////////////////
                         ////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                         $mont = 70000;
                         $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                         $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                         if($bon_neutre_detail_somme < $mont){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmmaison/paramban/'.$paramban);
                            return;
                         } else {
                            $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                            foreach ($bon_neutre_detail as $detail) {
                               $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                               $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                               $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                               
                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                }else{


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $mont;
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                break;
                                }
                              
                            }
                            
                        }

                        ///////////////////////////////////////////////////////////////////////////////////////
                        //////validation acnev
                        
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(1);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);


                        //////validation filere
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(2);
                        $souscriptionM->update($souscription);

                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

                        //////validation technopole
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);

                        $souscription->setPublier(3);
                        $souscriptionM->update($souscription);


                        $validation_quittance = new Application_Model_EuValidationQuittance();
                        $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                        $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                        $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                        $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                        $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                        $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $validation_quittance->setPublier(1);
                        $validation_quittance_mapper->save($validation_quittance);

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                      
                      
                        // operation de transfert
                        $souscription = new Application_Model_EuSouscription();
                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                        $souscriptionM->find($compteur_souscription, $souscription);
                        $date = new Zend_Date();
                        $compte_map = new Application_Model_EuCompteMapper();
                        $compte     = new Application_Model_EuCompte();
                        $sms_money   = new Application_Model_EuSmsmoney();
                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                        $mobile = $souscription->souscription_mobile;
                        //$nbre_compte = $souscription->souscription_nombre;
                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                        //$montant = $nbre_compte * $fcaps;
                        $membre_pbf = '0000000000000000001M';
                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                        $ret = $compte_map->find($code_compte_pbf,$compte);


                        $souscription2 = new Application_Model_EuSouscription();
                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                        $souscription2M->find($compteur_souscription, $souscription2);

                        $souscription2->setSouscription_autonome(1);
                        $souscription2->setSouscription_programme('KACM');
                        $souscription2M->update($souscription2);
                        
                        if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                           // Mise à jour du compte de transfert
                           $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                           $compte_map->update($compte);
                        } else {
                           $db->rollback();
                           $sessionmcnp->error = 'Le compte est introuvable ou le solde du compte insuffisant';
                           $db->rollback();
                           $this->_redirect('/souscriptionbon/enrolementpmmaison/paramban/'.$paramban);
                           return;
                        }
                      
                        $codefs   = '';
                        $codefl   = '';
                        $codefkps = '';

                        // Traitement des produits FS
                        // insertion dans la table eu_smsmoney
                        $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                        // Traitement des produits FL
                        // insertion dans la table eu_smsmoney
                        $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                        // Traitement des produits FCPS
                        $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');
                        
                        if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
                            $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                            $nengfs = $money_map->findConuter() + 1;
                            $sms_money->setNEng($nengfs)
                                      ->setCode_Agence(null)
                                      ->setCreditAmount($mont_fs)
                                      ->setSentTo($mobile)
                                      ->setMotif('FS')
                                      ->setId_Utilisateur(null)
                                      ->setCurrencyCode('XOF')
                                      ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                      ->setFromAccount($code_compte_pbf)
                                      ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                      ->setCreditCode($codefs)
                                      ->setDestAccount(null)
                                      ->setIDDatetimeConsumed(0)
                                      ->setDestAccount_Consumed(null)
                                      ->setDatetimeConsumed(null)
                                      ->setNum_recu(null);
                            $money_map->save($sms_money);
                            
                            $i = 0;
                            $reste = $mont_fs;
                            $nbre_lignesdetfs = count($lignesdetfs);
                            
                            while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                  $lignedetfs = $lignesdetfs[$i];
                                  $id = $lignedetfs->getId_detail_smsmoney();
                                  $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                  if ($reste >= $lignedetfs->getSolde_sms()) {
                                     //Mise à jour  des lignes d'enrégistrement
                                    //insertion dans la table eu_detailventesms
                                    $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                    $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                               ->setId_detail_smsmoney($id)
                                               ->setCode_membre_dist($membre_pbf)
                                               ->setCode_membre(null)
                                               ->setType_tansfert('FS')
                                               ->setCreditcode($codefs)
                                               ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                               ->setMont_vente($lignedetfs->getSolde_sms())
                                               ->setId_utilisateur(null)
                                               ->setCode_produit('FS');
                                    $det_vte_sms->insert($det_vtesms->toArray());
                                    $reste = $reste - $lignedetfs->getSolde_sms();
                                    $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                               ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                               ->setSolde_sms(0);
                                    $det_sms_m->update($lignedetfs);
                                    
                                    } else  {
                                    //Mise à jour  des lignes d'enrégistrement
                                     //insertion dans la table eu_detailventesms
                                     $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                     $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                ->setId_detail_smsmoney($id)
                                                ->setCode_membre_dist($membre_pbf)
                                                ->setCode_membre(null)
                                                ->setType_tansfert('FS')
                                                ->setCreditcode($codefs)
                                                ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                ->setMont_vente($reste)
                                                ->setId_utilisateur(null)
                                                ->setCode_produit('FS');
                                      $det_vte_sms->insert($det_vtesms->toArray());
                                      $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                      $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                      $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                      $det_sms_m->update($lignedetfs);
                                      $reste = 0;
                                    }
                                    $i++;
                           }
                           
                           
                           
                           
                           
                           
                           
                           
                        
                        } else {
                            $db->rollback();
                            $sessionmcnp->error = 'Le solde du compte de transfert est vide';
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementpmmaison/paramban/'.$paramban);
                            return;
                        }                       
                      
                      }


                  } catch (Exception $exc) {
                    $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    $db->rollback();
                    $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                    $this->view->code_statut = $request->getParam("code_statut");
                    $this->view->site_web = $request->getParam("site_web");
                    $this->view->quartier_membre = $request->getParam("quartier_membre");
                    $this->view->ville_membre = $request->getParam("ville_membre");
                    $this->view->bp = $request->getParam("bp_membre");
                    //$this->view->tel = $request->getParam("tel_membre");
                    $this->view->email = $request->getParam("email_membre");
                    $this->view->id_pays = $request->getParam("id_pays");
                    //$this->view->portable = $request->getParam("portable_membre");
                    return;
                  }               
                                 
            }
        }
   
   }





   public function enrolementpmsms2Action() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');


        $paramban = (int)$this->_request->getParam('paramban');
        $this->view->paramban = $paramban;

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
            && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
            //&& isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
            && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
            && isset($_POST['code_statut']) && $_POST['code_statut']!=""
            && isset($_POST['code_rep']) && $_POST['code_rep']!=""
            && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
            && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
            //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
            && isset($_POST['email_membre']) && $_POST['email_membre']!=""
            && isset($_POST['id_pays']) && $_POST['id_pays']!=""
            && isset($_POST['code_agence']) && $_POST['code_agence']!=""
            && isset($_POST['code_activite']) && $_POST['code_activite']!=""
            && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              ) {
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                    /////////////////controle Code BAn
                    if(count($bon_neutre) == 0){
                            $sessionmcnp->error = "Code BAn incorrect ...";
							$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));

                        /*$tabraison = explode(" ", $bon_neutre->bon_neutre_raison);
                        foreach ($tabraison as $value) {
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }*/

                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = $bon_neutre->bon_neutre_raison." est déjà membre ...";
							$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }
						

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
							$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$bon_neutre->bon_neutre_raison)));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }


                        /////////////////controle codemembre
                        if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($_POST['code_rep'], $membre)){
                                //count($membre) == 0;
                            $sessionmcnp->error = "Le Code Membre est erroné ...";
							$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                            }
                        }




                    if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < 70000){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
							$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                            }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            //$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_nom($bon_neutre->bon_neutre_nom);
                            $souscription->setSouscription_prenom($bon_neutre->bon_neutre_prenom);
                            $souscription->setSouscription_raison($bon_neutre->bon_neutre_raison);
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(70000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription_mapper->save($souscription);
							$compteur_souscription = $db->lastInsertId();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 70000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 70000);
                                $bon_neutre2M->update($bon_neutre2);

                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 70000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
							$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);
/*
                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                }else{
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                break;
                                }

                        }*/


                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $mont;
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   	$bon_neutre_utilise2->setUsertable("utilisateur");
              		   	$bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }

                        }
                            




                            }


                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);

                                        $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						                $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						                $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
						 
						                $cumuls = $cumulfs + $cumulfl + $cumulfcps;

                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($cumuls >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'le compte est introuvable ou le solde du compte insuffisant';
														$this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
														return;
                                                        //$db->rollback();
                                                        //$this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);
                                                        //return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfs = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfs)
														
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
																
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
																
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
																
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfl = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfl)
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
															
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    //$nengfkps = $money_map->findConuter() + 1;
                                                    //$sms_money->setNEng($nengfkps)
													
                                                    $sms_money->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
															
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    //$countcode = $m_codeactivation->findConuter() + 1;

                                                    //$codeactivation->setId_code_activation($countcode)
                                                    $codeactivation->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("ESMC");
													$codeactivation->setMontant_souscrit(70000);
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;

                $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                $mapper_op = new Application_Model_EuOperationMapper();
				$place = new Application_Model_EuOperation();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


                    if($code_fs !="") {
                        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
//$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        //$preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                        $preinscriptionmorale->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($bon_neutre->bon_neutre_raison)
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre(NULL)
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"));
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/
						$compteur_preinscriptionmorale = $db->lastInsertId();


//////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(2);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(3);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
                        $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($bon_neutre->bon_neutre_raison);
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre(NULL);
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
						$membre->setDesactiver(2);
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);

                        ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                        $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                        $preinscriptionmorale->setCode_membre_morale($code);
                        $preinscriptionmoraleM->update($preinscriptionmorale);


                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();

                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            $id_souscription = $findcode->souscription_id;
                            $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

                        } else {
                            $this->view->message = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            //$this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }

                        $mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                        $findmem = $mem_mapper->find($code,$mem);

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                        } else {
                              if(substr($ancien_code,-1,1) == 'P') {
                                 $this->view->message = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                              }
                              $mem->setEtat_membre('A');
                              //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

                             // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
                         $mem_mapper->update($mem);

                        // eu_operation
                        //Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($fs);
                        $place->setCode_produit('FS');
                        $place->setLib_op('Auto-enrôlement');
                        $place->setType_op('AERL');
                        $place->setCode_cat('TFS');
                        $mapper_op->save($place);
						
						
						
                        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);



//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
$compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
if($compagnie == 1){
    $sessionmcnp->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
    $db->rollback();
    return;	
}else{
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteurt = $m_telephone->findConuter() + 1;

                    //$telephone->setId_telephone($compteurt);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}


                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        for($i = 0; $i < count($_POST['code_banque']); $i++) {
						    if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
							}
                        }


                        //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        //$id_user = $user_mapper->findConuter() + 1;

                        //$userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        //$id_contrat = $mapper_contrat->findConuter() + 1;

                        //$contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('yyyy-MM-dd HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fs_model->setOrigine_fs('N');
                        } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                    } else {
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }





                    if($code_fl !="") {

                        $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fl->setOrigine_fl('N');
                        } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

                        //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        //Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($mont_fl);
                        $place->setCode_produit('FL');
                        $place->setLib_op('Frais de licences');
                        $place->setType_op(NULL);
                        $place->setCode_cat(NULL);
                        $mapper_op->save($place);
						
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

                                    //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }

                        //$tcartes[0]="TPAGCP";
                        $tscartes[1]="TSCNCSEI";
                        $tscartes[2]="TSGCI";
                        $tscartes[3]="TSIR";
                        $tscartes[4]="TSPaR";
                        $tscartes[5]="TSFS";
                        $tscartes[6]="TSPN";
                        $tscartes[7]="TSIB";
                        $tscartes[8]="TSPaNu";
                        $tscartes[9]="TSIN";
                        $tscartes[10]="TSCAPA";
                        $tscartes[11]="TSMARGE";
                        //$tcartes[14]="TSRE";

                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fkps !="") {
                        $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
						
                        //$id_demande = $carte->findConuter() + 1;
                        //$carte->setId_demande($id_demande)
						
                        $carte->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $carte->setOrigine_fkps('N');
                        } else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                $place->setId_utilisateur(null);
                $place->setCode_membre(null);
                $place->setCode_membre_morale($code);
                $place->setMontant_op($fkps);
                $place->setCode_produit('CPS');
                $place->setLib_op('Frais de CPS');
                $place->setType_op(null);
                $place->setCode_cat(null);
                $mapper_op->save($place);
						
						
                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
                    }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);

                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2 = $bon_neutre_detail2M->fetchAllByCode($bon_neutre->bon_neutre_code);

                                if($bon_neutre_detail2->bon_neutre_appro_id > 0){
                               	$bon_neutre_appro2 = new Application_Model_EuBonNeutreAppro();
                                $bon_neutre_appro2M = new Application_Model_EuBonNeutreApproMapper();
                                $bon_neutre_appro2M->find($bon_neutre_detail2->bon_neutre_appro_id, $bon_neutre_appro2);

                                $bon_neutre_appro2->setBon_neutre_appro_beneficiaire($code);
                                $bon_neutre_appro2M->update($bon_neutre_appro2);
                            	}


                                }



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(70000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
              ///////////////////////////////////////////////////////////////////////////////////////



        $convention = new Application_Model_DbTable_EuConvention();
        $select2 = $convention->select();
        $select2->where("code_activation = ?", $_POST['code_BAn']);
        $select2->orwhere("(code_membre IS NULL");
        $select2->where("code_membre = '')");
        $select2->limit(1);

        if($convention_rows = $convention->fetchRow($select2)){
        $convention2 = new Application_Model_DbTable_EuConvention();
        $convention2->update(array('code_membre' => $code), array('id_convention = ?' => $convention_rows->id_convention));
        }





                            ///////////////////////////////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur, intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                            $this->_redirect('/souscriptionbon/enrolementpmsms2/paramban/'.$paramban);

                    }

                    }
                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        //$this->view->raison_sociale = $bon_neutre->bon_neutre_raison;
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
            }
        }
    }








    public function certificatpdfAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        $membre = (string)$this->_request->getParam('membre');
        $this->view->membre = $membre;

        //Util_Utils::genererPdfCertificatPP($membre);

$this->_redirect(Util_Utils::genererPdfCertificatPP($membre));

    }



    public function certificatpdfqrcodeAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        $membre = (string)$this->_request->getParam('membre');
        $this->view->membre = $membre;

        //Util_Utils::genererPdfCertificatPPQRCODE($membre);

$this->_redirect(Util_Utils::genererPdfCertificatPPQRCODE($membre));

    }



    public function bonachatneutrepdfAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        $id = (int)$this->_request->getParam('id');
        $this->view->id = $id;
        $code = (string)$this->_request->getParam('code');
        $this->view->code = $code;


        //Util_Utils::genererPdfBAn($id, $code);
        $this->_redirect(Util_Utils::genererPdfBAn($id, $code));

    }

    public function recudepayementdebanpdfAction () {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        $id = (int)$this->_request->getParam('id');
        $this->view->id = $id;

        //Util_Utils::genererPdfBAn($id, $code);
        $this->_redirect(Util_Utils::genererPdfBAn($id));
    }











    public function ancienppAction() {
        /* page index/ancienpp - Retrouve ancienne personne physique GIE/ReDeMaRe */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_Physique();
                $membres = new Application_Model_DbTable_EuAncienMembre();
                $select=$tabela->select();
                $select->from($tabela)
                       ->where('numidentp like ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $souscription = new Application_Model_DbTable_EuSouscription();
                    $selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->numidentp);
                    $sous = $souscription->fetchAll($selection);
                    if(count($sous) == 0) {
                        $this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$trouvmembre->numidentp);
                    } else {
                       $this->view->message = "Réactivation déjà effectuée ...";
                    }
                } else {
                    $this->view->message = "Pas de resultat ... ";//Déjà Activé
                }
            } else {
                $this->view->message = "Champs * obligatoire ...";
            }

        }
    }





    public function ancienpmAction() {
        /* page index/ancienpm - Retrouve ancienne personne morale GIE/ReDeMaRe */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_Morale();
                $select=$tabela->select();
                $select->from($tabela)
                       ->where('numidentm like ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
                       ->order('nomm ASC');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $souscription = new Application_Model_DbTable_EuSouscription();
                    $selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->numidentm);
                    $sous = $souscription->fetchAll($selection);
                    if(count($sous) == 0) {
                      $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$trouvmembre->numidentm);
                    } else {
                      $this->view->message = "Réactivation déjà effectuée ...";
                    }
                } else {  $this->view->message = "Pas de resultat ... ";}//Déjà Activé
            } else {  $this->view->message = "Champs * obligatoire ...";}

        }
    }






    public function ancienppmcnpAction() {
        /* page index/ancienppmcnp - Retrouve ancienne personne physique MCNP */

        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');


        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_EuAncienMembre();
                $select = $tabela->select();
                $select->where('ancien_code_membre like ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $souscription = new Application_Model_DbTable_EuSouscription();
                    $selection = $souscription->select();
                    $selection->from($souscription)
                              ->where('souscription_ancien_membre like ?',$trouvmembre->ancien_code_membre);
                    $sous = $souscription->fetchAll($selection);
                    if(count($sous) == 0) {
                        $_SESSION['ancien_membre'] = $trouvmembre->ancien_code_membre;

                        $this->_redirect('/convention/conventionreactivation');
                     /* $this->_redirect('/souscriptionbon/enrolementmcnppp/id/'.$trouvmembre->ancien_code_membre);*/
                    } else {
                       $this->view->message = "Réactivation déjà effectuée ...";
                    }
                } else {  $this->view->message = "Pas de resultat ... ";}//Déjà Activé
            } else {  $this->view->message = "Champs * obligatoire ...";}

        }
    }








    public function ancienpmmcnpAction() {
        /* page index/ancienpmmcnp - Retrouve ancienne personne morale MCNP */
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        if (isset($_POST['ok']) && $_POST['ok']=="ok") {
            if (isset($_POST['code_membre']) && $_POST['code_membre']!="") {
                $tabela = new Application_Model_DbTable_EuAncienMembre();
                $select = $tabela->select();
                $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                       ->where('ancien_code_membre LIKE ?', '%'.$_POST['code_membre'].'%')
                       ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
                $memb = $tabela->fetchAll($select);
                if(count($memb) > 0) {
                    $trouvmembre = $memb->current();
                    $table  = new Application_Model_DbTable_EuSouscription();
                    $selection = $table->select();
                    $selection->from($table)
                              ->where('souscription_ancien_membre like ?',$_POST['code_membre']);
                    $sous = $table->fetchAll($selection);
                    if(count($sous) == 0) {
                        $_SESSION['ancien_membre'] = $trouvmembre->ancien_code_membre;

                        $this->_redirect('/convention/conventionreactivationpm');   
                       /*$this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$trouvmembre->ancien_code_membre);*/
                    } else {
                       $this->view->message = "Réactivation déjà effectuée ...";
                    }
                } else {  $this->view->message = "Pas de resultat ... ";}//Déjà Activé
                } else {  $this->view->message = "Champs * obligatoire ...";}

        }
    }









   public function enrolementgieppoldAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');



        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                            $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
              && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
              && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
              && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
              && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
              && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
              && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
              && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
              && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
              && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
              && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
              && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
              && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
              && isset($_POST['id_pays']) && $_POST['id_pays']!=""
              && isset($_POST['code_agence']) && $_POST['code_agence']!=""
              && isset($_POST['code_activite']) && $_POST['code_activite']!=""
              && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              && isset($_POST['numident']) && $_POST['numident']!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", addslashes(strtolower(str_replace(" ", "",addslashes($request->getParam("nom_membre"))))));

                        $tabprenom = explode(" ", addslashes($request->getParam("prenom_membre")));
                        foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",addslashes($value)))."%' ");
                        }

                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$_POST['numident']);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$_POST['numident']);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));
                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("prenom_membre"))));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }



                        /////////////////souscription KACM PP

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PP");
                            $souscription->setSouscription_nom($request->getParam("nom_membre"));
                            $souscription->setSouscription_prenom($request->getParam("prenom_membre"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile($request->getParam("portable_membre"));
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type(NULL);
                            $souscription->setSouscription_numero(NULL);
                            $souscription->setSouscription_date_numero(NULL);
                            $souscription->setSouscription_banque(NULL);
                            $souscription->setSouscription_montant(0);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette(NULL);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription->setSouscription_ancien_membre($_POST['numident']);
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);



                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$_POST['numident']);
                            return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfs = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfs)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                       ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("GIE");
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                    $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                    $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;


                        if($code_fs != "") {
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            if ($sms_fs == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if ($date_nais >= $date_idd) {
                                $sessionmcnp->error = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


///////////////////////////////preinscription

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            $preinscription->setId_preinscription($compteur_preinscription)
                           ->setNom_membre($request->getParam("nom_membre"))
                           ->setPrenom_membre($request->getParam("prenom_membre"))
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre($request->getParam("tel_membre"))
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre($request->getParam("portable_membre"))
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"))
                           ;
                $preinscription->setPublier(1);

                $preinsc_mapper->save($preinscription);


///////////////////////////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(2);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $validation_quittance->setPublier(1);
                                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(3);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////


                            $membre->setCode_membre($code)
                                   ->setNom_membre($request->getParam("nom_membre"))
                                   ->setPrenom_membre($request->getParam("prenom_membre"))
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre($request->getParam("tel_membre"))
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre($request->getParam("portable_membre"))
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
                                   ->setEtat_membre(null)
                                   ->setId_canton($request->getParam("id_canton"))
                                   ;
                                $mapper->save($membre);


                                /////////////
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setCode_membre($code);
                                $preinscriptionM->update($preinscription);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();


                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            //$id_souscription = $findcode->souscription_id;
                            //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
                            //if($findsouscrip != FALSE) {
                            //}
                            $souscription_mapper->find($findcode->souscription_id,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
                        }
                        else {
                            $sessionmcnp->error = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune souscription !!!";
                            $db->rollback();
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
                        }

                            $mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
                            $findmem = $mem_mapper->find($code,$mem);

                            if(($ancien_code == '') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                            } else {
                              if(substr($ancien_code,-1,1) == 'M') {
                                 $sessionmcnp->error = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->nom_membre = $_POST["nom_membre"];
                                 $this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 $this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 $this->view->portable = $_POST["portable_membre"];
                                 return;
                              }

                              $mem->setEtat_membre('A');
                              //Mise à jour de la table physique
                              $p_mapper = new Application_Model_PhysiqueMapper();
                              $p = new Application_Model_Physique();
                              $rep = $p_mapper->find($ancien_code,$p);
                              if ($rep == true) {
                                 $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                 $p_mapper->update($p);
                              }
                              // Mise à jour de la table eu_ancien_membre
                              $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                              $pmcnp = new Application_Model_EuAncienMembre();
                              $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                              if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                              }
                            }
                            $mem_mapper->update($mem);

                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            	if($_POST['num_compte'][$i]!=""){
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
                                }
                                }

                                $mapper_op = new Application_Model_EuOperationMapper();
                                $compteurfs = $mapper_op->findConuter() + 1;
                                $lib_op = 'Auto-enrôlement';
                                $type_op = 'AERL';
                                Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                                $tab_fs = new Application_Model_DbTable_EuFs();
                                $fs_model = new Application_Model_EuFs();
                                $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
                                if(($ancien_code =='') || ($ancien_code == NULL)) {
                                   $fs_model->setOrigine_fs('N');
                                } else {
                                   $fs_model->setOrigine_fs('A');
                                }
                                $tab_fs->insert($fs_model->toArray());

                                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);

                                $userin = new Application_Model_EuUtilisateur();
                                $mapper = new Application_Model_EuUtilisateurMapper();
                                $id_user = $mapper->findConuter() + 1;
                                $userin->setId_utilisateur($id_user)
                                       ->setId_utilisateur_parent(NULL)
                                       ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                                       ->setNom_utilisateur($request->getParam("nom_membre"))
                                       ->setLogin($code)
                                       ->setPwd(md5($codesecret))
                                       ->setDescription(NULL)
                                       ->setUlock(0)
                                       ->setCh_pwd_flog(0)
                                       ->setCode_groupe('personne_physique')
                                       ->setCode_groupe_create('personne_physique')
                                       ->setConnecte(0)
                                       ->setCode_agence($code_agence)
                                       ->setCode_secteur(NULL)
                                       ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                       ->setId_pays($id_pays)
                                       ->setCode_acteur($code_acteur)
                                       ->setCode_membre($code)
                                       ->setId_canton($request->getParam("id_canton"))
                                       ;
                                $mapper->save($userin);

                                // Mise à jour de la table eu_contrat
                                $contrat = new Application_Model_EuContrat();
                                $mapper_contrat = new Application_Model_EuContratMapper();
                                $id_contrat = $mapper->findConuter() + 1;
                                $contrat->setId_contrat($id_contrat);
                                $contrat->setCode_membre($code);
                                $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                                $contrat->setNature_contrat('numeraire');
                                $contrat->setId_type_contrat(NULL);
                                $contrat->setId_type_creneau(NULL);
                                $contrat->setId_type_acteur(NULL);
                                $contrat->setId_pays(NULL);
                                $contrat->setId_utilisateur(NULL);
                                $contrat->setFiliere(NULL);
                                $mapper_contrat->save($contrat);
                        } else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                        }
                        }
                        if($code_fl != "") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");

                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

                             if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fl->setOrigine_fl('N');
                             } else {
                                $fl->setOrigine_fl('A');
                             }
                             $tfl->insert($fl->toArray());

                            //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

                            for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

                            for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                        }  else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                        }


                        if($code_fkps != "") {
                            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                            if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                               $carte->setOrigine_fkps('N');
                            } else {
                               $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
                            $compteurcps = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
                        }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            ///////////////////////////////////////////////////////////////////////////////////////


                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
            $sessionmcnp->codesecret = $codesecret;
                            $this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$_POST['numident']);

                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
            }
        }else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Physique();
            $membres = new Application_Model_DbTable_EuAncienMembre();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentp like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();

            $this->view->numident = $trouvmembre->numidentp;
            $this->view->nom_membre = $trouvmembre->nom;
            $this->view->prenom_membre = $trouvmembre->prenom;
            $this->view->sexe = $trouvmembre->sexe;
            $this->view->profession = $trouvmembre->prof;
            $this->view->tel = $trouvmembre->tel;
            $this->view->ville_membre = $trouvmembre->ville;
            $this->view->pere = $trouvmembre->pere;
            $this->view->mere = $trouvmembre->mere;
            $this->view->quartier_membre = $trouvmembre->qartresid;
            $this->view->bp = $trouvmembre->bp;
            $this->view->nbre_enf = $trouvmembre->nbrenf;
            $this->view->email = $trouvmembre->email;
            $this->view->portable = $trouvmembre->portable;
            $this->view->formation = $trouvmembre->formation;
            $this->view->lieu_nais = $trouvmembre->lieunais;
        }
    }










   public function enrolementmcnpppoldAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');


        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                            $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
              && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
              && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
              && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
              && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
              && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
              && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
              && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
              && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
              && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
              && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
              && isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
              && isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
              && isset($_POST['id_pays']) && $_POST['id_pays']!=""
              && isset($_POST['code_agence']) && $_POST['code_agence']!=""
              && isset($_POST['code_activite']) && $_POST['code_activite']!=""
              && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              && isset($_POST['ancien_code_membre']) && $_POST['ancien_code_membre']!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",addslashes($request->getParam("nom_membre")))));

                        $tabprenom = explode(" ", $request->getParam("prenom_membre"));
                        foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",addslashes($value)))."%' ");
                        }

                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppp/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppp/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));
                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("prenom_membre"))));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }



                        /////////////////souscription KACM PP

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PP");
                            $souscription->setSouscription_nom($request->getParam("nom_membre"));
                            $souscription->setSouscription_prenom($request->getParam("prenom_membre"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile($request->getParam("portable_membre"));
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type(NULL);
                            $souscription->setSouscription_numero(NULL);
                            $souscription->setSouscription_date_numero(NULL);
                            $souscription->setSouscription_banque(NULL);
                            $souscription->setSouscription_montant(0);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette(NULL);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription->setSouscription_ancien_membre($_POST['ancien_code_membre']);
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);



                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppp/id/'.$_POST['ancien_code_membre']);
                            return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfs = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfs)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                       ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("MCNP");
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                    $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                    $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;


                        if($code_fs != "") {
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            if ($sms_fs == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if ($date_nais >= $date_idd) {
                                $sessionmcnp->error = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


///////////////////////////////preinscription

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            $compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            $preinscription->setId_preinscription($compteur_preinscription)
                           ->setNom_membre($request->getParam("nom_membre"))
                           ->setPrenom_membre($request->getParam("prenom_membre"))
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre($request->getParam("tel_membre"))
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre($request->getParam("portable_membre"))
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"))
                           ;
                $preinscription->setPublier(1);

                $preinsc_mapper->save($preinscription);


///////////////////////////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(2);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $validation_quittance->setPublier(1);
                                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(3);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////


                            $membre->setCode_membre($code)
                                   ->setNom_membre($request->getParam("nom_membre"))
                                   ->setPrenom_membre($request->getParam("prenom_membre"))
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre($request->getParam("tel_membre"))
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre($request->getParam("portable_membre"))
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
                                   ->setEtat_membre(null)
                                   ->setId_canton($request->getParam("id_canton"))
                                   ;
                                $mapper->save($membre);


                                /////////////
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setCode_membre($code);
                                $preinscriptionM->update($preinscription);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();


                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            //$id_souscription = $findcode->souscription_id;
                            //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
                            //if($findsouscrip != FALSE) {
                            //}
                            $souscription_mapper->find($findcode->souscription_id,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
                        }
                        else {
                            $sessionmcnp->error = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune souscription !!!";
                            $db->rollback();
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            $this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            $this->view->portable = $_POST["portable_membre"];
                            return;
                        }

                            $mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
                            $findmem = $mem_mapper->find($code,$mem);

                            if(($ancien_code == '') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                            } else {
                              if(substr($ancien_code,-1,1) == 'M') {
                                 $sessionmcnp->error = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->nom_membre = $_POST["nom_membre"];
                                 $this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 $this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 $this->view->portable = $_POST["portable_membre"];
                                 return;
                              }

                              $mem->setEtat_membre('A');
                              //Mise à jour de la table physique
                              $p_mapper = new Application_Model_PhysiqueMapper();
                              $p = new Application_Model_Physique();
                              $rep = $p_mapper->find($ancien_code,$p);
                              if ($rep == true) {
                                 $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                 $p_mapper->update($p);
                              }
                              // Mise à jour de la table eu_ancien_membre
                              $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                              $pmcnp = new Application_Model_EuAncienMembre();
                              $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                              if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                              }
                            }
                            $mem_mapper->update($mem);

                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
                            	if($_POST['num_compte'][$i]!=""){
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
                                }
                                }

                                $mapper_op = new Application_Model_EuOperationMapper();
                                $compteurfs = $mapper_op->findConuter() + 1;
                                $lib_op = 'Auto-enrôlement';
                                $type_op = 'AERL';
                                Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                                $tab_fs = new Application_Model_DbTable_EuFs();
                                $fs_model = new Application_Model_EuFs();
                                $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
                                if(($ancien_code =='') || ($ancien_code == NULL)) {
                                   $fs_model->setOrigine_fs('N');
                                } else {
                                   $fs_model->setOrigine_fs('A');
                                }
                                $tab_fs->insert($fs_model->toArray());

                                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);

                                $userin = new Application_Model_EuUtilisateur();
                                $mapper = new Application_Model_EuUtilisateurMapper();
                                $id_user = $mapper->findConuter() + 1;
                                $userin->setId_utilisateur($id_user)
                                       ->setId_utilisateur_parent(NULL)
                                       ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                                       ->setNom_utilisateur($request->getParam("nom_membre"))
                                       ->setLogin($code)
                                       ->setPwd(md5($codesecret))
                                       ->setDescription(NULL)
                                       ->setUlock(0)
                                       ->setCh_pwd_flog(0)
                                       ->setCode_groupe('personne_physique')
                                       ->setCode_groupe_create('personne_physique')
                                       ->setConnecte(0)
                                       ->setCode_agence($code_agence)
                                       ->setCode_secteur(NULL)
                                       ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                       ->setId_pays($id_pays)
                                       ->setCode_acteur($code_acteur)
                                       ->setCode_membre($code)
                                       ->setId_canton($request->getParam("id_canton"))
                                       ;
                                $mapper->save($userin);

                                // Mise à jour de la table eu_contrat
                                $contrat = new Application_Model_EuContrat();
                                $mapper_contrat = new Application_Model_EuContratMapper();
                                $id_contrat = $mapper->findConuter() + 1;
                                $contrat->setId_contrat($id_contrat);
                                $contrat->setCode_membre($code);
                                $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                                $contrat->setNature_contrat('numeraire');
                                $contrat->setId_type_contrat(NULL);
                                $contrat->setId_type_creneau(NULL);
                                $contrat->setId_type_acteur(NULL);
                                $contrat->setId_pays(NULL);
                                $contrat->setId_utilisateur(NULL);
                                $contrat->setFiliere(NULL);
                                $mapper_contrat->save($contrat);
                        } else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                        }
                        }
                        if($code_fl != "") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");

                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

                             if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fl->setOrigine_fl('N');
                             } else {
                                $fl->setOrigine_fl('A');
                             }
                             $tfl->insert($fl->toArray());

                            //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

                            for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

                            for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                        }  else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->portable = $request->getParam("portable_membre");
                            return;
                        }


                        if($code_fkps != "") {
                            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                            if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                $this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                $this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                               $carte->setOrigine_fkps('N');
                            } else {
                               $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
                            $compteurcps = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            $sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
                        }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                            ///////////////////////////////////////////////////////////////////////////////////////


                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
            $sessionmcnp->codesecret = $codesecret;
                            $this->_redirect('/souscriptionbon/enrolementmcnppp/id/'.$_POST['ancien_code_membre']);

                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                $this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->portable = $request->getParam("portable_membre");
            }
        }else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_nais_membre as datenaismembre"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->nom_membre = $trouvmembre->nom_membre;
            $this->view->prenom_membre = $trouvmembre->prenom_membre;
            $this->view->sexe = $trouvmembre->sexe_membre;
            $this->view->profession = $trouvmembre->profession_membre;
            $this->view->tel = $trouvmembre->tel_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre;
            $this->view->pere = $trouvmembre->pere_membre;
            $this->view->mere = $trouvmembre->mere_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            $this->view->bp = $trouvmembre->bp_membre;
            $this->view->nbre_enf = $trouvmembre->nbr_enf_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->portable = $trouvmembre->portable_membre;
            $this->view->formation = $trouvmembre->formation;
            $this->view->lieu_nais = $trouvmembre->lieu_nais_membre;
            $this->view->datnais = $trouvmembre->datenaismembre;
            $this->view->sitfam = $trouvmembre->sitfam_membre;
            $this->view->nation = $trouvmembre->id_pays;
            $this->view->religion = $trouvmembre->id_religion_membre;
        }
    }











   public function enrolementgiepmoldAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');



        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                            $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
            && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
            && isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
            && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
            && isset($_POST['code_statut']) && $_POST['code_statut']!=""
            && isset($_POST['code_rep']) && $_POST['code_rep']!=""
            && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
            && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
            && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
            && isset($_POST['email_membre']) && $_POST['email_membre']!=""
            && isset($_POST['id_pays']) && $_POST['id_pays']!=""
            && isset($_POST['code_agence']) && $_POST['code_agence']!=""
            && isset($_POST['code_activite']) && $_POST['code_activite']!=""
            && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              && isset($_POST['numidentm']) && $_POST['numidentm']!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                        /////////////////controle Code BAn
                    if(count($bon_neutre) == 0){
                            $sessionmcnp->error = "Code BAn incorrect ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$_POST['raison_sociale'])));

                        /*$tabraison = explode(" ", $request->getParam("raison_sociale"));
                        foreach ($tabraison as $value) {
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }*/

                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("raison_sociale"))));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }


                        /////////////////controle codemembre
                        if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($_POST['code_rep'], $membre)){
                                //count($membre) == 0;
                            $sessionmcnp->error = "Le Code Membre est erroné ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                            }
                        }




                    if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < 20000){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                            }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_raison($request->getParam("raison_sociale"));
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile($request->getParam("portable_membre"));
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(20000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription->setSouscription_ancien_membre($_POST['numidentm']);
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 20000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 20000);
                                $bon_neutre2M->update($bon_neutre2);

                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 20000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);



                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);



                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }

                        }
                            }


                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);



                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfs = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfs)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                       ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("GIE");
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;

                $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                $mapper_op = new Application_Model_EuOperationMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


                    if($code_fs !="") {
                        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($request->getParam("raison_sociale"))
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre($request->getParam("tel_membre"))
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre($request->getParam("portable_membre"))
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"))
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/


//////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(2);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(3);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
                        $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($request->getParam("raison_sociale"));
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre($request->getParam("tel_membre"));
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre($request->getParam("portable_membre"));
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);




                        /////////////
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                        $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                        $preinscriptionmorale->setCode_membre_morale($code);
                        $preinscriptionmoraleM->update($preinscriptionmorale);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();

                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            $id_souscription = $findcode->souscription_id;
                            $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

                        } else {
                            $this->view->message = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->raison_sociale = $request->getParam("raison_sociale");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }

                        $mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                        $findmem = $mem_mapper->find($code,$mem);

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                        } else {
                              if(substr($ancien_code,-1,1) == 'P') {
                                 $this->view->message = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 $this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                              }
                              $mem->setEtat_membre('A');
                              //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

                             // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
                         $mem_mapper->update($mem);




                        // eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

                        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);

                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        for($i = 0; $i < count($_POST['code_banque']); $i++) {
                        	if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
                        }


                        //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        $id_user = $user_mapper->findConuter() + 1;

                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;

                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fs_model->setOrigine_fs('N');
                        } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                    } else {
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }





                    if($code_fl !="") {

                        $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fl->setOrigine_fl('N');
                        } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

                        //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

                        //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }

                                                //$tcartes[0]="TPAGCP";
                                                $tcartes[1]="TSCNCSEI";
                                                $tcartes[2]="TSGCI";
                                                $tcartes[3]="TSIR";
                                                $tcartes[4]="TR";
                                                $tcartes[5]="TPaNu";
                                                $tcartes[6]="TSPaR";
                                                $tcartes[7]="TSFS";
                                                $tcartes[8]="TSPN";
                                                $tcartes[9]="TSIB";
                                                $tcartes[10]="TSPaNu";
                                                $tcartes[11]="TSIN";
                                                $tcartes[12]="TSCAPA";
                                                $tcartes[13]="TSMARGE";
                                                //$tcartes[14]="TSRE";


                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fkps !="") {
                        $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $carte->setOrigine_fkps('N');
                        } else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());

                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
                    }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);
                                }



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(20000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
                            ///////////////////////////////////////////////////////////////////////////////////////



                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
            $sessionmcnp->codesecret = $codesecret;
                            $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);

                    }

                    }
                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
            }
        } else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Morale();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentm like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
                   ->order('nomm ASC');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->numidentm = $trouvmembre->numidentm;
            $this->view->raison = $trouvmembre->nomm;
            $this->view->code_rep = $trouvmembre->representant;
            $this->view->quartier_membre = $trouvmembre->qart;
            $this->view->ville_membre = $trouvmembre->ville;
            $this->view->bp = $trouvmembre->bp;
            $this->view->tel = $trouvmembre->tel;
            $this->view->portable = $trouvmembre->portable;
            $this->view->email = $trouvmembre->email;
            $this->view->site_web = $trouvmembre->site;
        }
    }









   public function enrolementmcnppmoldAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');



        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                            $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
            && isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
            && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
            && isset($_POST['code_statut']) && $_POST['code_statut']!=""
            && isset($_POST['code_rep']) && $_POST['code_rep']!=""
            && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
            && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
            && isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
            && isset($_POST['email_membre']) && $_POST['email_membre']!=""
            && isset($_POST['id_pays']) && $_POST['id_pays']!=""
            && isset($_POST['code_agence']) && $_POST['code_agence']!=""
            && isset($_POST['code_activite']) && $_POST['code_activite']!=""
            && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              && isset($_POST['ancien_code_membre']) && $_POST['ancien_code_membre']!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $tafl = new Application_Model_DbTable_EuAncienFl();
                    $afl = new Application_Model_EuAncienFl();
                    $code_fl = 'FL-'.$_POST['ancien_code_membre'];
                    if(!$result = $tafl->find($code_fl))  {

                    //count($result) == 0;

                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
                    }

                        /////////////////controle Code BAn
                    if(isset($bon_neutre) && count($bon_neutre) == 0){
                            $sessionmcnp->error = "Code BAn incorrect ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$_POST['raison_sociale'])));

                        /*$tabraison = explode(" ", $request->getParam("raison_sociale"));
                        foreach ($tabraison as $value) {
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }*/

                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("raison_sociale"))));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }


                        /////////////////controle codemembre
                        if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($_POST['code_rep'], $membre)){
                                //count($membre) == 0;
                            $sessionmcnp->error = "Le Code Membre est erroné ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                            }
                        }




                    //if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
                        if(isset($bon_neutre) && $bon_neutre->bon_neutre_montant_solde < 10000){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                            }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            $compteur_souscription = $souscription_mapper->findConuter() + 1;
                            $souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_raison($request->getParam("raison_sociale"));
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile($request->getParam("portable_membre"));
                            $souscription->setSouscription_membreasso(1);
                        if(isset($bon_neutre)){
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(10000);
                        }else{
                            $souscription->setSouscription_type(NULL);
                            $souscription->setSouscription_numero(NULL);
                            $souscription->setSouscription_date_numero(NULL);
                            $souscription->setSouscription_banque(NULL);
                            $souscription->setSouscription_montant(0);
                        }
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription->setSouscription_ancien_membre($_POST['ancien_code_membre']);
                            $souscription_mapper->save($souscription);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        if(isset($bon_neutre)){
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 10000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 10000);
                                $bon_neutre2M->update($bon_neutre2);
                        }
                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 10000;
                    if(isset($bon_neutre)){
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                            }else{
                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }

                        }
                            }
                        }

                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);



                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($compte->getSolde() >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Erreur de traitement : le compte est introuvable ou le solde du compte insuffisant';
                            $db->rollback();
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfs = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfs)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                           ->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        $nengfl = $money_map->findConuter() + 1;
                                                        $sms_money->setNEng($nengfl)
                                                                  ->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                       ->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    $nengfkps = $money_map->findConuter() + 1;
                                                    $sms_money->setNEng($nengfkps)
                                                              ->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            $id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            $det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                   ->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    $countcode = $m_codeactivation->findConuter() + 1;

                                                    $codeactivation->setId_code_activation($countcode)
                                                                  ->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("MCNP");
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;

                $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                $mapper_op = new Application_Model_EuOperationMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


                    if($code_fs !="") {
                        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        $preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                               ->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($request->getParam("raison_sociale"))
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre($request->getParam("tel_membre"))
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre($request->getParam("portable_membre"))
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"))
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/


//////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(2);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(3);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
                        $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($request->getParam("raison_sociale"));
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre($request->getParam("tel_membre"));
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre($request->getParam("portable_membre"));
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);




                        /////////////
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                        $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                        $preinscriptionmorale->setCode_membre_morale($code);
                        $preinscriptionmoraleM->update($preinscriptionmorale);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();

                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            $id_souscription = $findcode->souscription_id;
                            $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

                        } else {
                            $this->view->message = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->raison_sociale = $request->getParam("raison_sociale");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            $this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            $this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }

                        $mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                        $findmem = $mem_mapper->find($code,$mem);

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                        } else {
                              if(substr($ancien_code,-1,1) == 'P') {
                                 $this->view->message = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 $this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 $this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                              }
                              $mem->setEtat_membre('A');
                              //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

                             // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
                         $mem_mapper->update($mem);




                        // eu_operation
                        Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

                        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);

                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        for($i = 0; $i < count($_POST['code_banque']); $i++) {
                        	if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
                        }


                        //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        $id_user = $user_mapper->findConuter() + 1;

                        $userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        $id_contrat = $mapper_contrat->findConuter() + 1;

                        $contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fs_model->setOrigine_fs('N');
                        } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                    } else {
                        $this->view->message = "Erreur d'éxecution: Le code FS est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }





                    if($code_fl !="") {

                        $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fl->setOrigine_fl('N');
                        } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

                        //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

                        //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }

                                                //$tcartes[0]="TPAGCP";
                                                $tcartes[1]="TSCNCSEI";
                                                $tcartes[2]="TSGCI";
                                                $tcartes[3]="TSIR";
                                                $tcartes[4]="TR";
                                                $tcartes[5]="TPaNu";
                                                $tcartes[6]="TSPaR";
                                                $tcartes[7]="TSFS";
                                                $tcartes[8]="TSPN";
                                                $tcartes[9]="TSIB";
                                                $tcartes[10]="TSPaNu";
                                                $tcartes[11]="TSIN";
                                                $tcartes[12]="TSCAPA";
                                                $tcartes[13]="TSMARGE";
                                                //$tcartes[14]="TSRE";


                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fkps !="") {
                        $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        $id_demande = $carte->findConuter() + 1;
                        $carte->setId_demande($id_demande)
                              ->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $carte->setOrigine_fkps('N');
                        } else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());

                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
                    }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        if(isset($bon_neutre)){
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);
                                }


                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(10000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
                        }
                            ///////////////////////////////////////////////////////////////////////////////////////



                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2($compteur,$_POST["portable_membre"],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
            $sessionmcnp->codesecret = $codesecret;
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);


                    }
                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        $this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        $this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
            }
        } else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();

            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->raison = $trouvmembre->raison_sociale;
            $this->view->code_rep = $trouvmembre->nom_membre." ".$trouvmembre->prenom_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre;
            $this->view->bp = $trouvmembre->bp_membre;
            $this->view->tel = $trouvmembre->tel_membre;
            $this->view->portable = $trouvmembre->portable_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->site_web = $trouvmembre->site_web;
            $this->view->statut_juridique = $trouvmembre->code_statut;
            $this->view->type_acteur = $trouvmembre->code_type_acteur;
        }
    }



    public function enrolementgieppAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');
        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if($request->isPost ()) {
            if(isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
              //&& isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
              //&& isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
              //&& isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
              //&& isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
              //&& isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
              //&& isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
              //&& isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
              //&& isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
              //&& isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
              //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
              //&& isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
              //&& isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
              //&& isset($_POST['id_pays']) && $_POST['id_pays']!=""
              //&& isset($_POST['code_agence']) && $_POST['code_agence']!=""
              //&& isset($_POST['code_activite']) && $_POST['code_activite']!=""
              //&& isset($_POST['id_canton']) && $_POST['id_canton']!=""
              && isset($_POST['numident']) && $_POST['numident']!=""
            )   {
                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                        $id_utilisateur_acnev = 1;
                        $id_utilisateur_filiere = 2;
                        $id_utilisateur_technopole = 3;

                        $codesecret = Util_Utils::genererCodeSMS(8);

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",addslashes($request->getParam("nom_membre")))));

                        $tabprenom = explode(" ", $request->getParam("prenom_membre"));
                        foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",addslashes($value)))."%' ");
                        }

                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
							$this->view->numident = $request->getParam("numident");
                                                        $this->view->nom_membre = $request->getParam("nom_membre");
                                                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                                                        $this->view->sexe = $request->getParam("sexe_membre");
                                                        $this->view->sitfam = $request->getParam("sitfam_membre");
                                                        $this->view->datnais = $request->getParam("date_nais_membre");
                                                        $this->view->nation = $request->getParam("nationalite_membre");
                                                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                                        $this->view->formation = $request->getParam("formation");
                                                        $this->view->profession = $request->getParam("profession_membre");
                                                        $this->view->religion = $request->getParam("religion_membre");
                                                        $this->view->pere = $request->getParam("pere_membre");
                                                        $this->view->mere = $request->getParam("mere_membre");
                                                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                                                        $this->view->ville_membre = $request->getParam("ville_membre");
                                                        $this->view->bp = $request->getParam("bp_membre");
                                                        //$this->view->tel = $request->getParam("tel_membre");
                                                        $this->view->email = $request->getParam("email_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$_POST['numident']);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
							$this->view->numident = $request->getParam("numident");
                                                        $this->view->nom_membre = $request->getParam("nom_membre");
                                                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                                                        $this->view->sexe = $request->getParam("sexe_membre");
                                                        $this->view->sitfam = $request->getParam("sitfam_membre");
                                                        $this->view->datnais = $request->getParam("date_nais_membre");
                                                        $this->view->nation = $request->getParam("nationalite_membre");
                                                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                                        $this->view->formation = $request->getParam("formation");
                                                        $this->view->profession = $request->getParam("profession_membre");
                                                        $this->view->religion = $request->getParam("religion_membre");
                                                        $this->view->pere = $request->getParam("pere_membre");
                                                        $this->view->mere = $request->getParam("mere_membre");
                                                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                                                        $this->view->ville_membre = $request->getParam("ville_membre");
                                                        $this->view->bp = $request->getParam("bp_membre");
                                                        //$this->view->tel = $request->getParam("tel_membre");
                                                        $this->view->email = $request->getParam("email_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$_POST['numident']);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));
                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("prenom_membre"))));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }



                        /////////////////souscription KACM PP

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            //$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
							
                            $souscription->setSouscription_personne("PP");
                            $souscription->setSouscription_nom($request->getParam("nom_membre"));
                            $souscription->setSouscription_prenom($request->getParam("prenom_membre"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type(NULL);
                            $souscription->setSouscription_numero(NULL);
                            $souscription->setSouscription_date_numero(NULL);
                            $souscription->setSouscription_banque(NULL);
                            $souscription->setSouscription_montant(0);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette(NULL);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription->setSouscription_ancien_membre($_POST['numident']);
                            $souscription_mapper->save($souscription);
							
							$compteur_souscription = $db->lastInsertId();

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                        ///////////////////////////////////////////////////////////////////////////////////////
                        //////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




                        //////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $validation_quittance->setPublier(1);
                                $validation_quittance_mapper->save($validation_quittance);

								
                        //////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);

                                        $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						                $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						                $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
						 
						                $cumuls = $cumulfs + $cumulfl + $cumulfcps;

                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($cumuls >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'le compte est introuvable ou le solde du compte insuffisant';
                                                        $this->view->numident = $request->getParam("numident");
                                                        $this->view->nom_membre = $request->getParam("nom_membre");
                                                        $this->view->prenom_membre = $request->getParam("prenom_membre");
                                                        $this->view->sexe = $request->getParam("sexe_membre");
                                                        $this->view->sitfam = $request->getParam("sitfam_membre");
                                                        $this->view->datnais = $request->getParam("date_nais_membre");
                                                        $this->view->nation = $request->getParam("nationalite_membre");
                                                        $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                                        $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                                        $this->view->formation = $request->getParam("formation");
                                                        $this->view->profession = $request->getParam("profession_membre");
                                                        $this->view->religion = $request->getParam("religion_membre");
                                                        $this->view->pere = $request->getParam("pere_membre");
                                                        $this->view->mere = $request->getParam("mere_membre");
                                                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                                                        $this->view->ville_membre = $request->getParam("ville_membre");
                                                        $this->view->bp = $request->getParam("bp_membre");
                                                        //$this->view->tel = $request->getParam("tel_membre");
                                                        $this->view->email = $request->getParam("email_membre");
                                                        //$this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$_POST['numident']);
                                                        //return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfs = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfs)
														
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
																
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfl = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfl)
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    //$nengfkps = $money_map->findConuter() + 1;
                                                    //$sms_money->setNEng($nengfkps)
													
                                                    $sms_money->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    
													$k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FCPS')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
															
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
															
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FCPS')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($reste)
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
															
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    //$countcode = $m_codeactivation->findConuter() + 1;
                                                    //$codeactivation->setId_code_activation($countcode)
													
                                                    $codeactivation->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("GIE");
													$codeactivation->setMontant_souscrit(0);
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                    $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                    $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                    $code_fs = $codefs;
                    $code_fl = $codefl;
                    $code_fkps = $codefkps;


                        if($code_fs != "") {
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            if($sms_fs == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
                                $this->view->numident = $request->getParam("numident");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
							
							

                            if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                $this->view->numident = $request->getParam("numident");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
							
							

                            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if($date_nais >= $date_idd) {
                                $sessionmcnp->error = "Erreur d'éxecution: La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                $this->view->numident = $request->getParam("numident");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


            /////////////////////////////// preinscription ////////////////////////////////////////////////////////
            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            //$compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            //$preinscription->setId_preinscription($compteur_preinscription)
            $preinscription->setNom_membre($request->getParam("nom_membre"))
                           ->setPrenom_membre($request->getParam("prenom_membre"))
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre(NULL)
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"));
            $preinscription->setPublier(1);
            $preinsc_mapper->save($preinscription);
			
			$compteur_preinscription = $db->lastInsertId();


            /////////////////////////// validation acnev ///////////////////////////////////////////////////////
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(2);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $validation_quittance->setPublier(1);
                                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(3);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////
                            $membre->setCode_membre($code)
                                   ->setNom_membre($request->getParam("nom_membre"))
                                   ->setPrenom_membre($request->getParam("prenom_membre"))
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre(NULL)
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
                                   ->setEtat_membre(null)
								   ->setDesactiver(2)
                                   ->setId_canton($request->getParam("id_canton"));
                            $mapper->save($membre);


                                /////////////
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setCode_membre($code);
                                $preinscriptionM->update($preinscription);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();


                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            //$id_souscription = $findcode->souscription_id;
                            //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
                            //if($findsouscrip != FALSE) {
                            //}
                            $souscription_mapper->find($findcode->souscription_id,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
                        }
                        else {
                            $sessionmcnp->error = "Erreur d'éxecution: Les codes d\'activation ne sont liés à aucune souscription !!!";
                            $db->rollback();
                            $this->view->numident = $request->getParam("numident");
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            //$this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            //$this->view->portable = $_POST["portable_membre"];
                            return;
                        }

                            $mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
                            $findmem = $mem_mapper->find($code,$mem);

                            if(($ancien_code == '') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                            } else {
                              if(substr($ancien_code,-1,1) == 'M') {
                                 $sessionmcnp->error = "Erreur d'éxecution: Ce membre n\'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->numident = $request->getParam("numident");
                                 $this->view->nom_membre = $_POST["nom_membre"];
                                 $this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 //$this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 //$this->view->portable = $_POST["portable_membre"];
                                 return;
                              }

                              $mem->setEtat_membre('A');
                              //Mise à jour de la table physique
                              $p_mapper = new Application_Model_PhysiqueMapper();
                              $p = new Application_Model_Physique();
                              $rep = $p_mapper->find($ancien_code,$p);
                              if ($rep == true) {
                                 $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                 $p_mapper->update($p);
                              }
                              // Mise à jour de la table eu_ancien_membre
                              $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                              $pmcnp = new Application_Model_EuAncienMembre();
                              $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                              if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                              }
                            }
                            $mem_mapper->update($mem);



//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
	
$compagnie = telephonecompagnie($_POST['code_telephonique'],$_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];

if($compagnie == 1){
    $sessionmcnp->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
    $this->view->numident = $request->getParam("numident");
    $this->view->nom_membre = $request->getParam("nom_membre");
    $this->view->prenom_membre = $request->getParam("prenom_membre");
    $this->view->sexe = $request->getParam("sexe_membre");
    $this->view->sitfam = $request->getParam("sitfam_membre");
    $this->view->datnais = $request->getParam("date_nais_membre");
    $this->view->nation = $request->getParam("nationalite_membre");
    $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
    $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
    $db->rollback();
    return;	
}else{
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    //$compteur = $m_telephone->findConuter() + 1;

                    //$telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}


                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
							    if($_POST['num_compte'][$i]!=""){
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
								}	
                            }

							    $place = new Application_Model_EuOperation();
                                $mapper_op = new Application_Model_EuOperationMapper();
                                $compteurfs = $mapper_op->findConuter() + 1;
                                $lib_op = 'Auto-enrôlement';
                                $type_op = 'AERL';
                                
								//Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                                
								$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                                $place->setId_utilisateur(null);
                                $place->setCode_membre($code);
                                $place->setCode_membre_morale(null);
                                $place->setMontant_op($fs);
                                $place->setCode_produit('FS');
                                $place->setLib_op($lib_op);
                                $place->setType_op($type_op);
                                $place->setCode_cat('TFS');
                                $mapper_op->save($place);
								
								
								$tab_fs = new Application_Model_DbTable_EuFs();
                                $fs_model = new Application_Model_EuFs();
                                $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
                                if(($ancien_code =='') || ($ancien_code == NULL)) {
                                   $fs_model->setOrigine_fs('N');
                                } else {
                                   $fs_model->setOrigine_fs('A');
                                }
                                $tab_fs->insert($fs_model->toArray());

                                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);

                                $userin = new Application_Model_EuUtilisateur();
                                $mapper = new Application_Model_EuUtilisateurMapper();
                                //$id_user = $mapper->findConuter() + 1;
                                //$userin->setId_utilisateur($id_user)
                                $userin->setId_utilisateur_parent(NULL)
                                       ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                                       ->setNom_utilisateur($request->getParam("nom_membre"))
                                       ->setLogin($code)
                                       ->setPwd(md5($codesecret))
                                       ->setDescription(NULL)
                                       ->setUlock(0)
                                       ->setCh_pwd_flog(0)
                                       ->setCode_groupe('personne_physique')
                                       ->setCode_groupe_create('personne_physique')
                                       ->setConnecte(0)
                                       ->setCode_agence($code_agence)
                                       ->setCode_secteur(NULL)
                                       ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                       ->setId_pays($id_pays)
                                       ->setCode_acteur($code_acteur)
                                       ->setCode_membre($code)
                                       ->setId_canton($request->getParam("id_canton"))
                                       ;
                                $mapper->save($userin);

                                // Mise à jour de la table eu_contrat
                                $contrat = new Application_Model_EuContrat();
                                $mapper_contrat = new Application_Model_EuContratMapper();
                                //$id_contrat = $mapper->findConuter() + 1;
                                //$contrat->setId_contrat($id_contrat);
                                $contrat->setCode_membre($code);
                                $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                                $contrat->setNature_contrat('numeraire');
                                $contrat->setId_type_contrat(NULL);
                                $contrat->setId_type_creneau(NULL);
                                $contrat->setId_type_acteur(NULL);
                                $contrat->setId_pays(NULL);
                                $contrat->setId_utilisateur(NULL);
                                $contrat->setFiliere(NULL);
                                $mapper_contrat->save($contrat);
                        } else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                            $db->rollback();
                            $this->view->numident = $request->getParam("numident");
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                        }
                        }
                        if($code_fl != "") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                            $this->view->numident = $request->getParam("numident");
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                $this->view->numident = $request->getParam("numident");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");

                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

                             if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fl->setOrigine_fl('N');
                             } else {
                                $fl->setOrigine_fl('A');
                             }
                             $tfl->insert($fl->toArray());

                            //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_fl);
                            $place->setCode_produit('FL');
                            $place->setLib_op('Frais de licences');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
							
                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

                            for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

                            for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                        }  else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                            $db->rollback();
                            $this->view->numident = $request->getParam("numident");
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                        }


                        if($code_fkps != "") {
                            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                            if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                $this->view->numident = $request->getParam("numident");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                $this->view->numident = $request->getParam("numident");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            $id_demande = $carte->findConuter() + 1;
                            $carte->setId_demande($id_demande)
                                  ->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                               $carte->setOrigine_fkps('N');
                            } else {
                               $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
                            //$compteurcps = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            
							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_cps);
                            $place->setCode_produit('CPS');
                            $place->setLib_op('Frais de CPS');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
							
							$sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
                        }

                        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        ///////////////////////////////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                        $this->_redirect('/souscriptionbon/enrolementgiepp/id/'.$_POST['numident']);

                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                $this->view->numident = $request->getParam("numident");
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                $this->view->numident = $request->getParam("numident");
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
            }
        }else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Physique();
            $membres = new Application_Model_DbTable_EuAncienMembre();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentp like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();

            $this->view->numident = $trouvmembre->numidentp;
            $this->view->nom_membre = $trouvmembre->nom;
            $this->view->prenom_membre = $trouvmembre->prenom;
            $this->view->sexe = $trouvmembre->sexe;
            $this->view->profession = $trouvmembre->prof;
            $this->view->tel = $trouvmembre->tel;
            $this->view->ville_membre = $trouvmembre->ville;
            $this->view->pere = $trouvmembre->pere;
            $this->view->mere = $trouvmembre->mere;
            $this->view->quartier_membre = $trouvmembre->qartresid;
            $this->view->bp = $trouvmembre->bp;
            $this->view->nbre_enf = $trouvmembre->nbrenf;
            $this->view->email = $trouvmembre->email;
            $this->view->portable = $trouvmembre->portable;
            $this->view->formation = $trouvmembre->formation;
            $this->view->lieu_nais = $trouvmembre->lieunais;
        }
    }



    public function enrolementmcnpppAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');


        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['nom_membre']) && $_POST['nom_membre']!=""
              && isset($_POST['sexe_membre']) && $_POST['sexe_membre']!=""
              && isset($_POST['nationalite_membre']) && $_POST['nationalite_membre']!=""
              && isset($_POST['sitfam_membre']) && $_POST['sitfam_membre']!=""
              && isset($_POST['prenom_membre']) && $_POST['prenom_membre']!=""
              && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!=""
              && isset($_POST['lieu_nais_membre']) && $_POST['lieu_nais_membre']!=""
              && isset($_POST['nbr_enf_membre']) && $_POST['nbr_enf_membre']!=""
              && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
              && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
              //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
              //&& isset($_POST['profession_membre']) && $_POST['profession_membre']!=""
              //&& isset($_POST['religion_membre']) && $_POST['religion_membre']!=""
              //&& isset($_POST['id_pays']) && $_POST['id_pays']!=""
              && isset($_POST['code_agence']) && $_POST['code_agence']!=""
              && isset($_POST['code_activite']) && $_POST['code_activite']!=""
              && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              && isset($_POST['ancien_code_membre']) && $_POST['ancien_code_membre']!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",addslashes($request->getParam("nom_membre")))));

                        $tabprenom = explode(" ", $request->getParam("prenom_membre"));
                        foreach ($tabprenom as $value) {
                        $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",addslashes($value)))."%' ");
                        }

                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
                            $db->rollback();
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                            //$this->_redirect('/souscriptionbon/enrolementmcnppp/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
                            $db->rollback();
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                            //$this->_redirect('/souscriptionbon/enrolementmcnppp/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("nom_membre"))));
                        $select->where("LOWER(REPLACE(souscription_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("prenom_membre"))));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }



                        /////////////////souscription KACM PP

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            //$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PP");
                            $souscription->setSouscription_nom($request->getParam("nom_membre"));
                            $souscription->setSouscription_prenom($request->getParam("prenom_membre"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type(NULL);
                            $souscription->setSouscription_numero(NULL);
                            $souscription->setSouscription_date_numero(NULL);
                            $souscription->setSouscription_banque(NULL);
                            $souscription->setSouscription_montant(0);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette(NULL);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription->setSouscription_ancien_membre($_POST['ancien_code_membre']);
                            $souscription_mapper->save($souscription);
							
							$compteur_souscription = $db->lastInsertId();

                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                            ///////////////////////////////////////////////////////////////////////////////////////
                            ////// validation acnev //////////////////////////////////////////////////////////////
                            $souscription = new Application_Model_EuSouscription();
                            $souscriptionM = new Application_Model_EuSouscriptionMapper();
                            $souscriptionM->find($compteur_souscription, $souscription);

                            $souscription->setPublier(1);
                            $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);

                                        $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						                $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						                $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
						 
						                $cumuls = $cumulfs + $cumulfl + $cumulfcps;

                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($cumuls >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Le compte est introuvable ou le solde du compte insuffisant';
														$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfs = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfs)
														
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                 ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
																
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfl = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfl)
														
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
															
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($reste)
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    //$nengfkps = $money_map->findConuter() + 1;
                                                    //$sms_money->setNEng($nengfkps)
                                                    $sms_money->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FCPS')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    //$countcode = $m_codeactivation->findConuter() + 1;

                                                    //$codeactivation->setId_code_activation($countcode)
                                                    $codeactivation->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("MCNP");
													$codeactivation->setMontant_souscrit(0);
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $smsmoneyM = new Application_Model_EuSmsmoneyMapper();
                    $code_agence = $request->getParam("code_agence");
                    $code_zone = substr($request->getParam("code_agence"), 0, 3);
                    $id_pays = $request->getParam("id_pays");
                    $table = new Application_Model_DbTable_EuActeur();
                    $selection = $table->select();
                    $selection->where('code_membre like ?',$code_agence.'%');
                    $selection->where('type_acteur like ?','gac_surveillance');
                    $resultat = $table->fetchAll($selection);
                    $trouvacteursur = $resultat->current();
                    $code_acteur = $trouvacteursur->code_acteur;

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $date_idd = clone $date_id;
                    $membre = new Application_Model_EuMembre();
                    $mapper = new Application_Model_EuMembreMapper();
                    $compte = new Application_Model_EuCompte();
                    $map_compte = new Application_Model_EuCompteMapper();
                    $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                    $souscription = new Application_Model_EuSouscription();
                    $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                    $code_activationM = new Application_Model_EuCodeActivationMapper();

                    $fs = Util_Utils::getParametre('FS','valeur');
                    $mont_fl = Util_Utils::getParametre('FL','valeur');
                    $mont_cps = Util_Utils::getParametre('FKPS','valeur');
                    $ancien_code = '';
                    $tcartes = array();
                    $tscartes = array();


                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;


                        if($code_fs != "") {
                            $code = $mapper->getLastCodeMembreByAgence($code_agence);
                            if ($code == NULL) {
                               $code = $code_agence . '0000001' . 'P';
                            }
                            else {
                               $num_ordre = substr($code, 12, 7);
                               $num_ordre++;
                               $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                               $code = $code_agence . $num_ordre_bis . 'P';
                            }

                            $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                            if ($sms_fs == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FS [' . $code_fs . ']  est  invalide !!!';
								$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            if($sms_fs->getMotif() != 'FS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $date_nais = new Zend_Date($request->getParam("date_nais_membre"));
                            if ($date_nais >= $date_idd) {
                                $sessionmcnp->error = "La date de naissance doit être antérieure à la date actuelle !!!";
                                $db->rollback();
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }


///////////////////////////////preinscription

            $preinsc_mapper = new Application_Model_EuPreinscriptionMapper();
            //$compteur_preinscription = $preinsc_mapper->findConuter() + 1;

            $preinscription = new Application_Model_EuPreinscription();
            //$mapper_preins = new Application_Model_EuPreinscriptionMapper();

            //$preinscription->setId_preinscription($compteur_preinscription)
            $preinscription->setNom_membre($request->getParam("nom_membre"))
                           ->setPrenom_membre($request->getParam("prenom_membre"))
                           ->setSexe_membre($request->getParam("sexe_membre"))
                           ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                           ->setId_pays($request->getParam("id_pays"))
                           ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                           ->setPere_membre($request->getParam("pere_membre"))
                           ->setMere_membre($request->getParam("mere_membre"))
                           ->setSitfam_membre($request->getParam("sitfam_membre"))
                           ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                           ->setProfession_membre($request->getParam("profession_membre"))
                           ->setFormation($request->getParam("formation"))
                           ->setId_religion_membre($request->getParam("religion_membre"))
                           ->setQuartier_membre($request->getParam("quartier_membre"))
                           ->setVille_membre($request->getParam("ville_membre"))
                           ->setBp_membre($request->getParam("bp_membre"))
                           ->setTel_membre(NULL)
                           ->setEmail_membre($request->getParam("email_membre"))
                           ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                           ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                           ->setDate_inscription($date_id->toString('yyyy-MM-dd'))
                           ->setCode_membre(NULL)
                           ->setCode_agence($code_agence)
                           ->setCode_fs($code_fs)
                           ->setCode_fl($code_fl)
                           ->setCode_fkps($code_fkps)
                           ->setId_canton($request->getParam("id_canton"))
                           ;
                $preinscription->setPublier(1);

                $preinsc_mapper->save($preinscription);
				$compteur_preinscription = $db->lastInsertId();


///////////////////////////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(2);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $validation_quittance->setPublier(1);
                                $validation_quittance_mapper->save($validation_quittance);

                                //////validation technopole
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setPublier(3);
                                $preinscriptionM->update($preinscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription($compteur_preinscription);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////


                            $membre->setCode_membre($code)
                                   ->setNom_membre($request->getParam("nom_membre"))
                                   ->setPrenom_membre($request->getParam("prenom_membre"))
                                   ->setSexe_membre($request->getParam("sexe_membre"))
                                   ->setDate_nais_membre($date_nais->toString('yyyy-MM-dd'))
                                   ->setId_pays($request->getParam("nationalite_membre"))
                                   ->setLieu_nais_membre($request->getParam("lieu_nais_membre"))
                                   ->setPere_membre($request->getParam("pere_membre"))
                                   ->setMere_membre($request->getParam("mere_membre"))
                                   ->setSitfam_membre($request->getParam("sitfam_membre"))
                                   ->setNbr_enf_membre($request->getParam("nbr_enf_membre"))
                                   ->setProfession_membre($request->getParam("profession_membre"))
                                   ->setFormation($request->getParam("formation"))
                                   ->setId_religion_membre($request->getParam("religion_membre"))
                                   ->setQuartier_membre($request->getParam("quartier_membre"))
                                   ->setVille_membre($request->getParam("ville_membre"))
                                   ->setBp_membre($request->getParam("bp_membre"))
                                   ->setTel_membre(NULL)
                                   ->setEmail_membre($request->getParam("email_membre"))
                                   ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                                   ->setId_utilisateur(NULL)
                                   ->setHeure_identification($date_idd->toString('HH:mm:ss'))
                                   ->setDate_identification($date_id->toString('yyyy-MM-dd'))
                                   ->setCode_agence($code_agence)
                                   ->setCodesecret(md5($codesecret))
                                   ->setAuto_enroler('O')
								   ->setDesactiver(2)
                                   ->setEtat_membre(null)
                                   ->setId_canton($request->getParam("id_canton"))
                                   ;
                                $mapper->save($membre);


                                /////////////
                                $preinscription = new Application_Model_EuPreinscription();
                                $preinscriptionM = new Application_Model_EuPreinscriptionMapper();
                                $preinscriptionM->find($compteur_preinscription, $preinscription);

                                $preinscription->setCode_membre($code);
                                $preinscriptionM->update($preinscription);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();


                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            //$id_souscription = $findcode->souscription_id;
                            //$findsouscrip = $souscription_mapper->find($id_souscription,$souscription);
                            //if($findsouscrip != FALSE) {
                            //}
                            $souscription_mapper->find($findcode->souscription_id,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);
                        }
                        else {
                            $sessionmcnp->error = "Les codes d'activation ne sont liés à aucune souscription !!!";
                            $db->rollback();
                            $this->view->nom_membre = $_POST["nom_membre"];
                            $this->view->prenom_membre = $_POST["prenom_membre"];
                            $this->view->sexe = $_POST["sexe_membre"];
                            $this->view->sitfam = $_POST["sitfam_membre"];
                            $this->view->datnais = $_POST["date_nais_membre"];
                            $this->view->nation = $_POST["nationalite_membre"];
                            $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                            $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                            $this->view->formation = $_POST["formation"];
                            $this->view->profession = $_POST["profession_membre"];
                            $this->view->religion = $_POST["religion_membre"];
                            $this->view->pere = $_POST["pere_membre"];
                            $this->view->mere = $_POST["mere_membre"];
                            $this->view->quartier_membre = $_POST["quartier_membre"];
                            $this->view->ville_membre = $_POST["ville_membre"];
                            $this->view->bp = $_POST["bp_membre"];
                            //$this->view->tel = $_POST["tel_membre"];
                            $this->view->email = $_POST["email_membre"];
                            //$this->view->portable = $_POST["portable_membre"];
                            return;
                        }

                            $mem = new Application_Model_EuMembre();
                            $mem_mapper = new Application_Model_EuMembreMapper();
                            $findmem = $mem_mapper->find($code,$mem);

                            if(($ancien_code == '') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                            } else {
                              if(substr($ancien_code,-1,1) == 'M') {
                                 $sessionmcnp->error = "Ce membre n'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->nom_membre = $_POST["nom_membre"];
                                 $this->view->prenom_membre = $_POST["prenom_membre"];
                                 $this->view->sexe = $_POST["sexe_membre"];
                                 $this->view->sitfam = $_POST["sitfam_membre"];
                                 $this->view->datnais = $_POST["date_nais_membre"];
                                 $this->view->nation = $_POST["nationalite_membre"];
                                 $this->view->lieu_nais = $_POST["lieu_nais_membre"];
                                 $this->view->nbre_enf = $_POST["nbr_enf_membre"];
                                 $this->view->formation = $_POST["formation"];
                                 $this->view->profession = $_POST["profession_membre"];
                                 $this->view->religion = $_POST["religion_membre"];
                                 $this->view->pere = $_POST["pere_membre"];
                                 $this->view->mere = $_POST["mere_membre"];
                                 $this->view->quartier_membre = $_POST["quartier_membre"];
                                 $this->view->ville_membre = $_POST["ville_membre"];
                                 $this->view->bp = $_POST["bp_membre"];
                                 //$this->view->tel = $_POST["tel_membre"];
                                 $this->view->email = $_POST["email_membre"];
                                 //$this->view->portable = $_POST["portable_membre"];
                                 return;
                              }

                              $mem->setEtat_membre('A');
                              //Mise à jour de la table physique
                              $p_mapper = new Application_Model_PhysiqueMapper();
                              $p = new Application_Model_Physique();
                              $rep = $p_mapper->find($ancien_code,$p);
                              if ($rep == true) {
                                 $p->setEtat_contrat(1)
                                   ->setCode_membre($code);
                                 $p_mapper->update($p);
                              }
                              // Mise à jour de la table eu_ancien_membre
                              $pmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                              $pmcnp = new Application_Model_EuAncienMembre();
                              $repmcnp = $pmcnp_mapper->find($ancien_code,$pmcnp);
                              if ($repmcnp == true) {
                                 $pmcnp->setEtat_contrat(1)
                                       ->setCode_membre($code);
                                 $pmcnp_mapper->update($pmcnp);
                              }
                            }
                            $mem_mapper->update($mem);



//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
$compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
if($compagnie == 1) {
    $sessionmcnp->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
	$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
    $db->rollback();
    return;	
}else{
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    //$telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}


                            $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                            $cb = new Application_Model_EuCompteBancaire();
                            for($i = 0; $i < count($_POST['code_banque']); $i++) {
							    if($_POST['num_compte'][$i]!=""){
                                    $cb_compteur = $cb_mapper->findConuter() + 1;
                                    $cb->setCode_banque($_POST['code_banque'][$i])
                                       ->setId_compte($cb_compteur)
                                       ->setCode_membre($code)
                                       ->setCode_membre_morale(NULL)
                                       ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                                    $cb_mapper->save($cb);
								}	
                            }

							    $place = new Application_Model_EuOperation();
                                $mapper_op = new Application_Model_EuOperationMapper();
                                $compteurfs = $mapper_op->findConuter() + 1;
                                $lib_op = 'Auto-enrolement';
                                $type_op = 'AERL';
                                //Util_Utils::addOperation($compteurfs,$code,NULL,'TFS',$fs,'FS',$lib_op,$type_op,$date_idd->toString('yyyy-MM-dd'), $date_id->toString('HH:mm:ss'), NULL);
                                
								$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                                $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                                $place->setId_utilisateur(null);
                                $place->setCode_membre($code);
                                $place->setCode_membre_morale(null);
                                $place->setMontant_op($fs);
                                $place->setCode_produit('FS');
                                $place->setLib_op($lib_op);
                                $place->setType_op($type_op);
                                $place->setCode_cat('TFS');
                                $mapper_op->save($place);
				
								
								$tab_fs = new Application_Model_DbTable_EuFs();
                                $fs_model = new Application_Model_EuFs();
                                $fs_model->setCode_membre($code)
                                         ->setCode_membre_morale(NULL)
                                         ->setCode_fs('FS-' . $code)
                                         ->setCreditcode($sms_fs->getCreditCode())
                                         ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                         ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                         ->setId_utilisateur(NULL)
                                         ->setMont_fs($fs);
                                if(($ancien_code =='') || ($ancien_code == NULL)) {
                                   $fs_model->setOrigine_fs('N');
                                } else {
                                   $fs_model->setOrigine_fs('A');
                                }
                                $tab_fs->insert($fs_model->toArray());

                                $sms_fs->setDestAccount_Consumed('NB-TFS-'.$code)
                                       ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                       ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                                $sms_mapper->update($sms_fs);

                                $userin = new Application_Model_EuUtilisateur();
                                $mapper = new Application_Model_EuUtilisateurMapper();
                                //$id_user = $mapper->findConuter() + 1;
                                //$userin->setId_utilisateur($id_user)
								
                                $userin->setId_utilisateur_parent(NULL)
                                       ->setPrenom_utilisateur($request->getParam("prenom_membre"))
                                       ->setNom_utilisateur($request->getParam("nom_membre"))
                                       ->setLogin($code)
                                       ->setPwd(md5($codesecret))
                                       ->setDescription(NULL)
                                       ->setUlock(0)
                                       ->setCh_pwd_flog(0)
                                       ->setCode_groupe('personne_physique')
                                       ->setCode_groupe_create('personne_physique')
                                       ->setConnecte(0)
                                       ->setCode_agence($code_agence)
                                       ->setCode_secteur(NULL)
                                       ->setCode_zone($code_zone)
                                      //->setCode_gac_filiere(NULL)
                                       ->setId_pays($id_pays)
                                       ->setCode_acteur($code_acteur)
                                       ->setCode_membre($code)
                                       ->setId_canton($request->getParam("id_canton"));
                                $mapper->save($userin);

                                // Mise à jour de la table eu_contrat
                                $contrat = new Application_Model_EuContrat();
                                $mapper_contrat = new Application_Model_EuContratMapper();
                                //$id_contrat = $mapper->findConuter() + 1;
                                //$contrat->setId_contrat($id_contrat);
                                $contrat->setCode_membre($code);
                                $contrat->setDate_contrat($date_id->toString('yyyy-MM-dd'));
                                $contrat->setNature_contrat('numeraire');
                                $contrat->setId_type_contrat(NULL);
                                $contrat->setId_type_creneau(NULL);
                                $contrat->setId_type_acteur(NULL);
                                $contrat->setId_pays(NULL);
                                $contrat->setId_utilisateur(NULL);
                                $contrat->setFiliere(NULL);
                                $mapper_contrat->save($contrat);
                        } else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FS est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                        }
                        }
                        if($code_fl != "") {
                            $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                            if ($sms_fl == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FL [' . $code_fl . ']  est  invalide !!!';
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
                            if($sms_fl->getMotif() != 'FL') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FL est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");

                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $tfl = new Application_Model_DbTable_EuFl();
                            $fl = new Application_Model_EuFl();
                            $code_fl = 'FL-' . $code;

                            $fl->setCode_fl($code_fl)
                               ->setCode_membre($code)
                               ->setCode_membre_morale(NULL)
                               ->setMont_fl($mont_fl)
                               ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                               ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                               ->setId_utilisateur(NULL)
                               ->setCreditcode($sms_fl->getCreditCode());

                             if(($ancien_code =='') || ($ancien_code == NULL)) {
                                $fl->setOrigine_fl('N');
                             } else {
                                $fl->setOrigine_fl('A');
                             }
                             $tfl->insert($fl->toArray());

                            //Mise à jour du compte general FGFL
                            $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                            $cg_fgfn = new Application_Model_EuCompteGeneral();
                            $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                            if ($result3) {
                                $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                                $cg_mapper->update($cg_fgfn);
                            } else {
                                $cg_fgfn->setCode_compte('FL')
                                        ->setIntitule('Frais de licence')
                                        ->setService('E')
                                        ->setCode_type_compte('NN')
                                        ->setSolde($mont_fl);
                                $cg_mapper->save($cg_fgfn);
                            }
                            $compteurfl = $mapper_op->findConuter() + 1;
                            Util_Utils::addOperation($compteurfl,$code,NULL, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_fl);
                            $place->setCode_produit('FL');
                            $place->setLib_op('Frais de licences');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
				
							
                            $sms_fl->setDestAccount_Consumed('FL-'.$code)
                                   ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                   ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fl);

                            $tcartes[0]="TPAGCRPG";
                            $tcartes[1]="TCNCS";
                            $tcartes[2]="TPaNu";
                            $tcartes[3]="TPaR";
                            $tcartes[4]="TR";
                            $tcartes[5]="CAPA";

                            $tscartes[0]="TSRPG";
                            $tscartes[1]="TSCNCS";
                            $tscartes[2]="TSPaNu";
                            $tscartes[3]="TSPaR";
                            $tscartes[4]="TSCAPA";

                            for($i = 0; $i < count($tcartes); $i++) {
                                if($tcartes[$i] == "TCNCS") {
                                    $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_compte,$compte);
                                } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA") {
                                    $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_compte,$compte);
                                } else  {
                                    $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_compte,$compte);
                                }

                                if(!$res) {
                                    $compte->setCode_cat($tcartes[$i])
                                           ->setCode_compte($code_compte)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tcartes[$i])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }

                            for($j = 0; $j < count($tscartes); $j++) {
                                if($tscartes[$j] == "TSCNCS") {
                                    $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NR';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } elseif($tscartes[$j] == "TR" || $tscartes[$j] == "TSCAPA") {
                                    $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NN';
                                    $res = $map_compte->find($code_comptets,$compte);
                                } else {
                                    $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                    $type_carte = 'NB';
                                    $res = $map_compte->find($code_comptets,$compte);
                                }
                                if(!$res) {
                                    $compte->setCode_cat($tscartes[$j])
                                           ->setCode_compte($code_comptets)
                                           ->setCode_membre($code)
                                           ->setCode_membre_morale(NULL)
                                           ->setCode_type_compte($type_carte)
                                           ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                           ->setDesactiver(0)
                                           ->setLib_compte($tscartes[$j])
                                           ->setSolde(0);
                                    $map_compte->save($compte);
                                }
                            }
                        }  else {
                            $sessionmcnp->error = "Erreur d'éxecution: Le code FL est inexistant !!!";
                            $db->rollback();
                            $this->view->nom_membre = $request->getParam("nom_membre");
                            $this->view->prenom_membre = $request->getParam("prenom_membre");
                            $this->view->sexe = $request->getParam("sexe_membre");
                            $this->view->sitfam = $request->getParam("sitfam_membre");
                            $this->view->datnais = $request->getParam("date_nais_membre");
                            $this->view->nation = $request->getParam("nationalite_membre");
                            $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                            $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                            $this->view->formation = $request->getParam("formation");
                            $this->view->profession = $request->getParam("profession_membre");
                            $this->view->religion = $request->getParam("religion_membre");
                            $this->view->pere = $request->getParam("pere_membre");
                            $this->view->mere = $request->getParam("mere_membre");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            //$this->view->portable = $request->getParam("portable_membre");
                            return;
                        }


                        if($code_fkps != "") {
                            $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                            if ($sms_fkps == NULL) {
                                $db->rollback();
                                $sessionmcnp->error = 'Le code FKPS [' . $code_fkps . ']  est  invalide !!!';
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }
							
                            if($sms_fkps->getMotif() != 'FCPS') {
                                $db->rollBack();
                                $sessionmcnp->error = " Le motif pour lequel ce code FKPS est émis ne correspond pas pour ce type d'operation";
                                $this->view->nom_membre = $request->getParam("nom_membre");
                                $this->view->prenom_membre = $request->getParam("prenom_membre");
                                $this->view->sexe = $request->getParam("sexe_membre");
                                $this->view->sitfam = $request->getParam("sitfam_membre");
                                $this->view->datnais = $request->getParam("date_nais_membre");
                                $this->view->nation = $request->getParam("nationalite_membre");
                                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                                $this->view->formation = $request->getParam("formation");
                                $this->view->profession = $request->getParam("profession_membre");
                                $this->view->religion = $request->getParam("religion_membre");
                                $this->view->pere = $request->getParam("pere_membre");
                                $this->view->mere = $request->getParam("mere_membre");
                                $this->view->quartier_membre = $request->getParam("quartier_membre");
                                $this->view->ville_membre = $request->getParam("ville_membre");
                                $this->view->bp = $request->getParam("bp_membre");
                                //$this->view->tel = $request->getParam("tel_membre");
                                $this->view->email = $request->getParam("email_membre");
                                //$this->view->portable = $request->getParam("portable_membre");
                                return;
                            }

                            $carte = new Application_Model_EuCartes();
                            $t_carte = new Application_Model_DbTable_EuCartes();
                            //$id_demande = $carte->findConuter() + 1;
                            //$carte->setId_demande($id_demande)
                            $carte->setCode_cat($tcartes[0])
                                  ->setCode_membre($code)
                                  ->setMont_carte($mont_cps)
                                  ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                                  ->setLivrer(0)
                                  ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                                  ->setImprimer(0)
                                  ->setCardPrintedDate('')
                                  ->setCardPrintedIDDate(0)
                                  ->setId_utilisateur(NULL);
                            if(($ancien_code =='') || ($ancien_code == NULL)) {
                               $carte->setOrigine_fkps('N');
                            } else {
                               $carte->setOrigine_fkps('A');
                            }
                            $t_carte->insert($carte->toArray());
							
                            //$compteurcps = $mapper_op->findConuter() + 1;
                            //Util_Utils::addOperation($compteurcps, $code,NULL, NULL, $mont_cps, NULL, 'Frais de CPS', 'CPS', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                            
							$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                            $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                            $place->setId_utilisateur(null);
                            $place->setCode_membre($code);
                            $place->setCode_membre_morale(null);
                            $place->setMontant_op($mont_cps);
                            $place->setCode_produit('CPS');
                            $place->setLib_op('Frais de CPS');
                            $place->setType_op(null);
                            $place->setCode_cat(null);
                            $mapper_op->save($place);
				
							
							$sms_fkps->setDestAccount_Consumed('CPS-'.$code)
                                     ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                                     ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                            $sms_mapper->update($sms_fkps);
                        }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();

                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                        $this->_redirect('/souscriptionbon/enrolementmcnppp/id/'.$_POST['ancien_code_membre']);

                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
						$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                        $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                //$this->view->portable = $request->getParam("portable_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
                $this->view->nom_membre = $request->getParam("nom_membre");
                $this->view->prenom_membre = $request->getParam("prenom_membre");
                $this->view->sexe = $request->getParam("sexe_membre");
                $this->view->sitfam = $request->getParam("sitfam_membre");
                $this->view->datnais = $request->getParam("date_nais_membre");
                $this->view->nation = $request->getParam("nationalite_membre");
                $this->view->lieu_nais = $request->getParam("lieu_nais_membre");
                $this->view->nbre_enf = $request->getParam("nbr_enf_membre");
                $this->view->formation = $request->getParam("formation");
                $this->view->profession = $request->getParam("profession_membre");
                $this->view->religion = $request->getParam("religion_membre");
                $this->view->pere = $request->getParam("pere_membre");
                $this->view->mere = $request->getParam("mere_membre");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
				$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                //$this->view->portable = $request->getParam("portable_membre");
            }
        }else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_nais_membre as datenaismembre"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->nom_membre = $trouvmembre->nom_membre;
            $this->view->prenom_membre = $trouvmembre->prenom_membre;
            $this->view->sexe = $trouvmembre->sexe_membre;
            $this->view->profession = $trouvmembre->profession_membre;
            //$this->view->tel = $trouvmembre->tel_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre;
            $this->view->pere = $trouvmembre->pere_membre;
            $this->view->mere = $trouvmembre->mere_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            $this->view->bp = $trouvmembre->bp_membre;
            $this->view->nbre_enf = $trouvmembre->nbr_enf_membre;
            $this->view->email = $trouvmembre->email_membre;
            //$this->view->portable = $trouvmembre->portable_membre;
            $this->view->formation = $trouvmembre->formation;
            $this->view->lieu_nais = $trouvmembre->lieu_nais_membre;
            $this->view->datnais = $trouvmembre->datenaismembre;
            $this->view->sitfam = $trouvmembre->sitfam_membre;
            $this->view->nation = $trouvmembre->id_pays;
            $this->view->religion = $trouvmembre->id_religion_membre;
        }
    }



    public function enrolementgiepmAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['code_BAn']) && $_POST['code_BAn']!=""
            && isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
            && isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
            && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
            && isset($_POST['code_statut']) && $_POST['code_statut']!=""
            && isset($_POST['code_rep']) && $_POST['code_rep']!=""
            && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
            && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
            //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
            && isset($_POST['email_membre']) && $_POST['email_membre']!=""
            && isset($_POST['id_pays']) && $_POST['id_pays']!=""
            && isset($_POST['code_agence']) && $_POST['code_agence']!=""
            && isset($_POST['code_activite']) && $_POST['code_activite']!=""
            && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              && isset($_POST['numidentm']) && $_POST['numidentm']!=""
              ) {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));


                        /////////////////controle Code BAn
                    if(count($bon_neutre) == 0){
                            $sessionmcnp->error = "Code BAn incorrect ...";
							$this->view->numidentm = $request->getParam("numidentm");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$_POST['raison_sociale'])));

                        /*$tabraison = explode(" ", $request->getParam("raison_sociale"));
                        foreach ($tabraison as $value) {
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }*/

                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
							$this->view->numidentm = $request->getParam("numidentm");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
							$this->view->numidentm = $request->getParam("numidentm");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("raison_sociale"))));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }


                        /////////////////controle codemembre
                        if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($_POST['code_rep'], $membre)) {
                                //count($membre) == 0;
                            $sessionmcnp->error = "Le Code Membre est erroné ...";
							$this->view->numidentm = $request->getParam("numidentm");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                            }
                        }




                    if(count($bon_neutre) > 0){

                        /////////////////controle nom prenom
                        if($bon_neutre->bon_neutre_montant_solde < 20000){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
							$this->view->numidentm = $request->getParam("numidentm");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                            }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            //$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_raison($request->getParam("raison_sociale"));
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                            $souscription->setSouscription_membreasso(1);
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(20000);
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription->setSouscription_ancien_membre($_POST['numidentm']);
                            $souscription_mapper->save($souscription);
							
							$compteur_souscription = $db->lastInsertId();

                            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 20000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 20000);
                                $bon_neutre2M->update($bon_neutre2);

                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 20000;
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                        
                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $mont;
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }

                        }
                            }


                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);

                                        $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						                $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						                $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
						 
						                $cumuls = $cumulfs + $cumulfl + $cumulfcps;

                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($cumuls >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'le compte est introuvable ou le solde du compte insuffisant';
														$this->view->numidentm = $request->getParam("numidentm");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                            //$db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);
                            //return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if ($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {

                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfs = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfs)
														
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfl = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfl)
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
															
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
															
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($reste)
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    //$nengfkps = $money_map->findConuter() + 1;
                                                    //$sms_money->setNEng($nengfkps)
													
                                                    $sms_money->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while ($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    //$countcode = $m_codeactivation->findConuter() + 1;
                                                    //$codeactivation->setId_code_activation($countcode)
													
                                                    $codeactivation->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("GIE");
													$codeactivation->setMontant_souscrit(20000);
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;

                $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

                $mapper_op = new Application_Model_EuOperationMapper();
				$place = new Application_Model_EuOperation();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


                    if($code_fs !="") {
                        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
//$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        //$preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                        $preinscriptionmorale->setCode_type_acteur($request->getParam("code_type_acteur"))
                                             ->setCode_statut($request->getParam("code_statut"))
                                             ->setRaison_sociale($request->getParam("raison_sociale"))
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre(NULL)
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"))
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/
						$compteur_preinscriptionmorale = $db->lastInsertId();


//////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(2);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(3);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


                        ////////////////////////////////////////////

                        $compteur = $mapper_op->findConuter() + 1;
                        $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($request->getParam("raison_sociale"));
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre(NULL);
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
                        $membre->setEtat_membre(NULL);
						$membre->setDesactiver(2);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);

                        /////////////////////////////////////////////////////////////////////
						
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                        $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                        $preinscriptionmorale->setCode_membre_morale($code);
                        $preinscriptionmoraleM->update($preinscriptionmorale);


                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();

                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            $id_souscription = $findcode->souscription_id;
                            $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

                        } else {
                            $this->view->message = "Erreur d'éxecution: Les codes d'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->raison_sociale = $request->getParam("raison_sociale");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            //$this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }

                        $mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                        $findmem = $mem_mapper->find($code,$mem);

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                        } else {
                              if(substr($ancien_code,-1,1) == 'P') {
                                 $this->view->message = "Erreur d'éxecution: Ce membre n'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                              }
                              $mem->setEtat_membre('A');
                              //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

                             // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                        }
                        $mem_mapper->update($mem);

                        // eu_operation
                        //Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);
                        
						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($fs);
                        $place->setCode_produit('FS');
                        $place->setLib_op('Auto-enrolement');
                        $place->setType_op('AERL');
                        $place->setCode_cat('TFS');
                        $mapper_op->save($place);
						
                        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);



//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
$compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
if($compagnie == 1){
    $sessionmcnp->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
    $db->rollback();
    return;	
}else{
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteurt = $m_telephone->findConuter() + 1;

                    //$telephone->setId_telephone($compteurt);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}


                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        for($i = 0; $i < count($_POST['code_banque']); $i++) {
                        	if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
                        }


                        //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        //$id_user = $user_mapper->findConuter() + 1;
                        //$userin->setId_utilisateur($id_user);
						
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        //$id_contrat = $mapper_contrat->findConuter() + 1;

                        //$contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fs_model->setOrigine_fs('N');
                        } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                    } else {
                        $this->view->message = "Le code FS est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fl !="") {
                        $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fl->setOrigine_fl('N');
                        } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

                        //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        //Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($mont_fl);
                        $place->setCode_produit('FL');
                        $place->setLib_op('Frais de licences');
                        $place->setType_op(null);
                        $place->setCode_cat(null);
                        $mapper_op->save($place);
						
						
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

                        //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
						
						
						//$tcartes[0]="TPAGCP";
                        $tscartes[1]="TSCNCSEI";
                        $tscartes[2]="TSGCI";
                        $tscartes[3]="TSIR";
                        $tscartes[4]="TSPaR";
                        $tscartes[5]="TSFS";
                        $tscartes[6]="TSPN";
                        $tscartes[7]="TSIB";
                        $tscartes[8]="TSPaNu";
                        $tscartes[9]="TSIN";
                        $tscartes[10]="TSCAPA";
                        $tscartes[11]="TSMARGE";
                        //$tcartes[14]="TSRE";

                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fkps !="") {
                        $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        //$id_demande = $carte->findConuter() + 1;
                        //$carte->setId_demande($id_demande)
                        $carte->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $carte->setOrigine_fkps('N');
                        } else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($fkps);
                        $place->setCode_produit('CPS');
                        $place->setLib_op('Frais de CPS');
                        $place->setType_op(null);
                        $place->setCode_cat(null);
                        $mapper_op->save($place);
						
						
                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
                    }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);
                                }



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(20000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
                            ///////////////////////////////////////////////////////////////////////////////////////

                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                        $this->_redirect('/souscriptionbon/enrolementgiepm/id/'.$_POST['numidentm']);

                    }

                    }
                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
						$this->view->numidentm = $request->getParam("numidentm");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
				$this->view->numidentm = $request->getParam("numidentm");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
            }
        } else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_Morale();
            $select=$tabela->select();
            $select->from($tabela)
                   ->where('numidentm like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)')
                   ->order('nomm ASC');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();
            $this->view->numidentm = $trouvmembre->numidentm;
            $this->view->raison = $trouvmembre->nomm;
            $this->view->code_rep = $trouvmembre->representant;
            $this->view->quartier_membre = $trouvmembre->qart;
            $this->view->ville_membre = $trouvmembre->ville;
            $this->view->bp = $trouvmembre->bp;
            $this->view->tel = $trouvmembre->tel;
            $this->view->portable = $trouvmembre->portable;
            $this->view->email = $trouvmembre->email;
            $this->view->site_web = $trouvmembre->site;
        }
    }









   public function enrolementmcnppmAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


                            $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {
           if (isset($_POST['code_type_acteur']) && $_POST['code_type_acteur']!=""
            && isset($_POST['raison_sociale']) && $_POST['raison_sociale']!=""
            && isset($_POST['num_registre_membre']) && $_POST['num_registre_membre']!=""
            && isset($_POST['code_statut']) && $_POST['code_statut']!=""
            && isset($_POST['code_rep']) && $_POST['code_rep']!=""
            && isset($_POST['quartier_membre']) && $_POST['quartier_membre']!=""
            && isset($_POST['ville_membre']) && $_POST['ville_membre']!=""
            //&& isset($_POST['portable_membre']) && $_POST['portable_membre']!=""
            && isset($_POST['email_membre']) && $_POST['email_membre']!=""
            && isset($_POST['id_pays']) && $_POST['id_pays']!=""
            && isset($_POST['code_agence']) && $_POST['code_agence']!=""
            && isset($_POST['code_activite']) && $_POST['code_activite']!=""
            && isset($_POST['id_canton']) && $_POST['id_canton']!=""
              && isset($_POST['ancien_code_membre']) && $_POST['ancien_code_membre']!=""
              ) {


                $db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {

                    $id_utilisateur_acnev = 1;
                    $id_utilisateur_filiere = 2;
                    $id_utilisateur_technopole = 3;

                    $codesecret = Util_Utils::genererCodeSMS(8);


                    $tafl = new Application_Model_DbTable_EuAncienFl();
                    $afl = new Application_Model_EuAncienFl();
                    $code_fl = 'FL-'.$_POST['ancien_code_membre'];
                    if(!$result = $tafl->find($code_fl))  {

                    //count($result) == 0;

                    $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre = $bon_neutre_mapper->fetchAllByCode($request->getParam("code_BAn"));
                    }

                        /////////////////controle Code BAn
                    if(isset($bon_neutre) && count($bon_neutre) == 0) {
                            $sessionmcnp->error = "Code BAn incorrect ...";
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                    }

                        /////////////////controle nom prenom
                        $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$_POST['raison_sociale'])));

                        /*$tabraison = explode(" ", $request->getParam("raison_sociale"));
                        foreach ($tabraison as $value) {
                        $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }*/

                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                            $sessionmcnp->error = "Vous êtes déjà membre ...";
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////controle email
                        if(isset($_POST['email_membre']) && $_POST['email_membre'] != "" && !(filter_var($request->getParam("email_membre"), FILTER_VALIDATE_EMAIL))){
                            $sessionmcnp->error = "E-mail non valable ...";
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////controle nom prenom
                        $eusouscription = new Application_Model_DbTable_EuSouscription();
                        $select = $eusouscription->select();
                        $select->where("LOWER(REPLACE(souscription_raison, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("raison_sociale"))));
                        $select->order(array("souscription_id ASC"));
                        $select->limit(1);
                        $rowseusouscription = $eusouscription->fetchRow($select);
                        if(count($rowseusouscription) > 0) {
                          $souscription_ok = 1;
                          $souscription_first = $rowseusouscription->souscription_id;
                        } else {
                          $souscription_ok = 0;
                        }


                        /////////////////controle codemembre
                        if(isset($_POST['code_rep']) && $_POST['code_rep'] != "") {
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if(!$membre_mapper->find($_POST['code_rep'], $membre)){
                                //count($membre) == 0;
                            $sessionmcnp->error = "Le Code Membre est erroné ...";
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                            }
                        }

                        //if(count($bon_neutre) > 0){
                        /////////////////controle nom prenom
                        if(isset($bon_neutre) && $bon_neutre->bon_neutre_montant_solde < 10000) {
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                        }

                        /////////////////souscription KACM PM

                            $souscription = new Application_Model_EuSouscription();
                            $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                            //$compteur_souscription = $souscription_mapper->findConuter() + 1;
                            //$souscription->setSouscription_id($compteur_souscription);
                            $souscription->setSouscription_personne("PM");
                            $souscription->setSouscription_raison($request->getParam("raison_sociale"));
                            $souscription->setCode_type_acteur($request->getParam("code_type_acteur"));
                            $souscription->setCode_statut($request->getParam("code_statut"));
                            $souscription->setSouscription_email($request->getParam("email_membre"));
                            $souscription->setSouscription_mobile(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                            $souscription->setSouscription_membreasso(1);
                            if(isset($bon_neutre)) {
                            $souscription->setSouscription_type("BAn");
                            $souscription->setSouscription_numero($bon_neutre->bon_neutre_code);
                            $souscription->setSouscription_date_numero($bon_neutre->bon_neutre_date);
                            $souscription->setSouscription_banque($bon_neutre->bon_neutre_id);
                            $souscription->setSouscription_montant(10000);
                            } else {
                            $souscription->setSouscription_type(NULL);
                            $souscription->setSouscription_numero(NULL);
                            $souscription->setSouscription_date_numero(NULL);
                            $souscription->setSouscription_banque(NULL);
                            $souscription->setSouscription_montant(0);
                        }
                            $souscription->setSouscription_nombre(1);
                            $souscription->setSouscription_programme("KACM");
                            $souscription->setSouscription_type_candidat(0);
                            $souscription->setSouscription_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            //$souscription->setSouscription_vignette($bon_neutre->bon_neutre_vignette);
                            $souscription->setCode_activite($request->getParam("code_activite"));
                            $souscription->setId_metier($request->getParam("id_metier"));
                            $souscription->setId_competence($request->getParam("id_competence"));
                            $souscription->setSouscription_ville($request->getParam("ville_membre"));
                            $souscription->setSouscription_quartier($request->getParam("quartier_membre"));
                            if($souscription_ok == 1) {
                                $souscription->setSouscription_souscription($souscription_first);
                            } else {
                                $souscription->setSouscription_souscription($compteur_souscription);
                            }
                            $souscription->setSouscription_ordre(NULL);
                            $souscription->setSouscription_autonome(1);
                            $souscription->setPublier(0);
                            $souscription->setErreur(0);
                            $souscription->setId_canton($request->getParam("id_canton"));
                            $souscription->setSouscription_ancien_membre($_POST['ancien_code_membre']);
                            $souscription_mapper->save($souscription);
							
							$compteur_souscription = $db->lastInsertId();

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        if(isset($bon_neutre)){
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                $bon_neutre2->setBon_neutre_montant_utilise($bon_neutre->bon_neutre_montant_utilise + 10000);
                                $bon_neutre2->setBon_neutre_montant_solde($bon_neutre->bon_neutre_montant_solde - 10000);
                                $bon_neutre2M->update($bon_neutre2);
                        }
                            ///////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    $mont = 10000;
                    if(isset($bon_neutre)){
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutre($bon_neutre->bon_neutre_id);
                    if($bon_neutre_detail_somme < $mont){
                            $sessionmcnp->error = "Montant restant du BAn est insuffisant ...";
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            return;
                        }else{
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                        
                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
                $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{


if ($bon_neutre_detail2->bon_neutre_appro_id > 0) {

$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByAppro($bon_neutre_detail2->bon_neutre_appro_id);
$appro_montant_solde = $mont;
foreach ($appro_detail as $appro){

$bnad = new Application_Model_EuBonNeutreApproDetail();
$bnad_M = new Application_Model_EuBonNeutreApproDetailMapper();
$bnad_M->findByApproDetail($appro->bon_neutre_appro_id, $appro->bon_neutre_detail_id, $bnad);

if($bnad->getBon_neutre_appro_detail_solde() < $appro_montant_solde){
$appro_montant_solde = $appro_montant_solde - $bnad->getBon_neutre_appro_detail_solde();
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $bnad->getBon_neutre_appro_detail_solde());
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $bnad->getBon_neutre_appro_detail_solde());
$bnad_M->update($bnad);
}else{
$bnad->setBon_neutre_appro_detail_mont_utilise($bnad->getBon_neutre_appro_detail_mont_utilise() + $appro_montant_solde);
$bnad->setBon_neutre_appro_detail_solde($bnad->getBon_neutre_appro_detail_solde() - $appro_montant_solde);
$bnad_M->update($bnad);
break;
}

}

}

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);



                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }

                        }
                            }

                        }
                            ///////////////////////////////////////////////////////////////////////////////////////
//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($compteur_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                                        // operation de transfert
                                        $souscription = new Application_Model_EuSouscription();
                                        $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                        $souscriptionM->find($compteur_souscription, $souscription);
                                        $date = new Zend_Date();
                                        $compte_map = new Application_Model_EuCompteMapper();
                                        $compte      = new Application_Model_EuCompte();
                                        $sms_money   = new Application_Model_EuSmsmoney();
                                        $money_map   = new Application_Model_EuSmsmoneyMapper();

                                        $det_sms   = new Application_Model_EuDetailSmsmoney();
                                        $det_sms_m = new Application_Model_EuDetailSmsmoneyMapper();

                                        $det_vte_sms = new Application_Model_DbTable_EuDetailVentesms();
                                        $det_vtesms  = new Application_Model_EuDetailVentesms();

                                        $mobile = $souscription->souscription_mobile;
                                        //$nbre_compte = $souscription->souscription_nombre;
                                        $fcaps = Util_Utils::getParametre('CAPS','valeur');

                                        $mont_fs = Util_Utils::getParametre('FS','valeur');
                                        $mont_fl = Util_Utils::getParametre('FL','valeur');
                                        $mont_kps = Util_Utils::getParametre('FKPS','valeur');

                                        //$montant = $nbre_compte * $fcaps;
                                        $membre_pbf = '0000000000000000001M';
                                        $code_compte_pbf = "NN-TR-".$membre_pbf;
                                        $ret = $compte_map->find($code_compte_pbf,$compte);

                                        $cumulfs = $det_sms_m->getSumByProduit($membre_pbf,'FS');
						                $cumulfl = $det_sms_m->getSumByProduit($membre_pbf,'FL');
						                $cumulfcps = $det_sms_m->getSumByProduit($membre_pbf,'FCPS');
						 
						                $cumuls = $cumulfs + $cumulfl + $cumulfcps;

                                        $souscription2 = new Application_Model_EuSouscription();
                                        $souscription2M = new Application_Model_EuSouscriptionMapper();
                                        $souscription2M->find($compteur_souscription, $souscription2);

                                         $souscription2->setSouscription_autonome(1);
                                         $souscription2->setSouscription_programme('KACM');
                                         $souscription2M->update($souscription2);


                                                    if($ret && ($cumuls >= ($mont_fs + $mont_fl + $mont_kps))) {
                                                        // Mise à jour du compte de transfert
                                                        $compte->setSolde($compte->getSolde() - ($mont_fs + $mont_fl + $mont_kps));
                                                        $compte_map->update($compte);
                                                    } else {
                                                        $db->rollback();
                                                        $sessionmcnp->error = 'Le compte est introuvable ou le solde du compte insuffisant';
														$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                            //$db->rollback();
                            //$this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);
                            //return;
                                                        return;
                                                    }

                                                    $codefs   = '';
                                                    $codefl   = '';
                                                    $codefkps = '';

                                                    // Traitement des produits FS
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfs = $det_sms_m->findSMSByCompte($membre_pbf,'FS');
                                                    // Traitement des produits FL
                                                    // insertion dans la table eu_smsmoney
                                                    $lignesdetfl = $det_sms_m->findSMSByCompte($membre_pbf,'FL');
                                                    // Traitement des produits FCPS
                                                    $lignesdetfkps = $det_sms_m->findSMSByCompte($membre_pbf,'FCPS');

                                                    if($lignesdetfs != null && $lignesdetfl !=  null && $lignesdetfkps != null) {
                                                        $codefs   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfs = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfs)
														
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fs)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FS')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefs)
                                                                 ->setDestAccount(null)
                                                                 ->setIDDatetimeConsumed(0)
                                                                 ->setDestAccount_Consumed(null)
                                                                 ->setDatetimeConsumed(null)
                                                                ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                        $i = 0;
                                                        $reste = $mont_fs;
                                                        $nbre_lignesdetfs = count($lignesdetfs);
                                                        while ($reste > 0 && $i < $nbre_lignesdetfs) {
                                                            $lignedetfs = $lignesdetfs[$i];
                                                            $id = $lignedetfs->getId_detail_smsmoney();
                                                            $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                            if ($reste >= $lignedetfs->getSolde_sms()) {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
																
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($lignedetfs->getSolde_sms())
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $reste = $reste - $lignedetfs->getSolde_sms();
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $lignedetfs->getSolde_sms())
                                                                           ->setMont_regle($lignedetfs->getMont_regle() + $lignedetfs->getSolde_sms())
                                                                           ->setSolde_sms(0);
                                                                $det_sms_m->update($lignedetfs);
                                                            } else  {
                                                                //Mise à jour  des lignes d'enrégistrement
                                                                //insertion dans la table eu_detailventesms
                                                                //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                                //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                                $det_vtesms->setId_detail_smsmoney($id)
                                                                           ->setCode_membre_dist($membre_pbf)
                                                                           ->setCode_membre(null)
                                                                           ->setType_tansfert('FS')
                                                                           ->setCreditcode($codefs)
                                                                           ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                           ->setMont_vente($reste)
                                                                           ->setId_utilisateur(null)
                                                                           ->setCode_produit('FS');
                                                                $det_vte_sms->insert($det_vtesms->toArray());
                                                                $lignedetfs->setSolde_sms($lignedetfs->getSolde_sms() - $reste);
                                                                $lignedetfs->setMont_vendu($lignedetfs->getMont_vendu() + $reste);
                                                                $lignedetfs->setMont_regle($lignedetfs->getMont_regle() + $reste);
                                                                $det_sms_m->update($lignedetfs);
                                                                $reste = 0;
                                                            }
                                                            $i++;
                                                        }

                                                        $codefl   = strtoupper(Util_Utils::genererCodeSMS(8));
                                                        //$nengfl = $money_map->findConuter() + 1;
                                                        //$sms_money->setNEng($nengfl)
                                                        $sms_money->setCode_Agence(null)
                                                                  ->setCreditAmount($mont_fl)
                                                                  ->setSentTo($mobile)
                                                                  ->setMotif('FL')
                                                                  ->setId_Utilisateur(null)
                                                                  ->setCurrencyCode('XOF')
                                                                  ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                  ->setFromAccount($code_compte_pbf)
                                                                  ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                                  ->setCreditCode($codefl)
                                                                  ->setDestAccount(null)
                                                                  ->setIDDatetimeConsumed(0)
                                                                  ->setDestAccount_Consumed(null)
                                                                  ->setDatetimeConsumed(null)
                                                                  ->setNum_recu(null);
                                                        $money_map->save($sms_money);

                                                    $j = 0;
                                                    $reste = $mont_fl;
                                                    $nbre_lignesdetfl = count($lignesdetfl);
                                                    while ($reste > 0 && $j < $nbre_lignesdetfl) {
                                                        $lignedetfl = $lignesdetfl[$j];
                                                        $id = $lignedetfl->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfl->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            $reste = $reste - $lignedetfl->getSolde_sms();
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                       ->setCode_membre_dist($membre_pbf)
                                                                       ->setCode_membre(null)
                                                                       ->setType_tansfert('FL')
                                                                       ->setCreditcode($codefl)
                                                                       ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                       ->setMont_vente($lignedetfl->getSolde_sms())
                                                                       ->setId_utilisateur(null)
                                                                       ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $lignedetfl->getSolde_sms())
                                                                       ->setMont_regle($lignedetfl->getMont_regle() + $lignedetfl->getSolde_sms())
                                                                       ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfl);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FL')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FL');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfl->setSolde_sms($lignedetfl->getSolde_sms() - $reste);

                                                            $lignedetfl->setMont_vendu($lignedetfl->getMont_vendu() + $reste);
                                                            $lignedetfl->setMont_regle($lignedetfl->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfl);
                                                            $reste = 0;
                                                        }
                                                        $j++;
                                                    }

                                                    $codefkps = strtoupper(Util_Utils::genererCodeSMS(8));
                                                    //$nengfkps = $money_map->findConuter() + 1;
                                                    //$sms_money->setNEng($nengfkps)
                                                    $sms_money->setCode_Agence(null)
                                                              ->setCreditAmount($mont_kps)
                                                              ->setSentTo($mobile)
                                                              ->setMotif('FCPS')
                                                              ->setId_Utilisateur(null)
                                                              ->setCurrencyCode('XOF')
                                                              ->setDatetime($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                              ->setFromAccount($code_compte_pbf)
                                                              ->setIDDatetime(Util_Utils::getIDDate($date->toString('dd/mm/yyyy')))
                                                              ->setCreditCode($codefkps)
                                                              ->setDestAccount(null)
                                                              ->setIDDatetimeConsumed(0)
                                                              ->setDestAccount_Consumed(null)
                                                              ->setDatetimeConsumed(null)
                                                              ->setNum_recu(null);
                                                    $money_map->save($sms_money);

                                                    $k = 0;
                                                    $reste = $mont_kps;
                                                    $nbre_lignesdetfkps = count($lignesdetfkps);
                                                    while($reste > 0 && $k < $nbre_lignesdetfkps) {
                                                        $lignedetfkps = $lignesdetfkps[$k];
                                                        $id = $lignedetfkps->getId_detail_smsmoney();
                                                        $finddetsmsmoney = $det_sms_m->find($id,$det_sms);
                                                        if ($reste >= $lignedetfkps->getSolde_sms()) {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;

                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($lignedetfkps->getSolde_sms())
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $reste = $reste - $lignedetfkps->getSolde_sms();
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $lignedetfkps->getSolde_sms())
                                                                         ->setMont_regle($lignedetfkps->getMont_regle() + $lignedetfkps->getSolde_sms())
                                                                         ->setSolde_sms(0);
                                                            $det_sms_m->update($lignedetfkps);
                                                        } else  {
                                                            //Mise à jour  des lignes d'enrégistrement
                                                            //insertion dans la table eu_detailventesms
                                                            //$id_detail_vtsms = $det_vtesms->findConuter() + 1;
                                                            //$det_vtesms->setId_detail_vtsms($id_detail_vtsms)
															
                                                            $det_vtesms->setId_detail_smsmoney($id)
                                                                   ->setCode_membre_dist($membre_pbf)
                                                                   ->setCode_membre(null)
                                                                   ->setType_tansfert('FCPS')
                                                                   ->setCreditcode($codefl)
                                                                   ->setDate_vente($date->toString('yyyy-MM-dd hh:mm:ss'))
                                                                   ->setMont_vente($reste)
                                                                   ->setId_utilisateur(null)
                                                                   ->setCode_produit('FCPS');
                                                            $det_vte_sms->insert($det_vtesms->toArray());
                                                            $lignedetfkps->setSolde_sms($lignedetfkps->getSolde_sms() - $reste);
                                                            $lignedetfkps->setMont_vendu($lignedetfkps->getMont_vendu() + $reste);
                                                            $lignedetfkps->setMont_regle($lignedetfkps->getMont_regle() + $reste);
                                                            $det_sms_m->update($lignedetfkps);
                                                            $reste = 0;
                                                        }
                                                        $k++;
                                                    }

                                                    // insertion dans la table eu_code_activation
                                                    $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                                                    $codeactivation = new Application_Model_EuCodeActivation();
                                                    //$countcode = $m_codeactivation->findConuter() + 1;

                                                    //$codeactivation->setId_code_activation($countcode)
                                                    $codeactivation->setDate_generer($date->toString('yyyy-MM-dd HH:mm:ss'));
                                                    $codeactivation->setCode_membre(NULL);
                                                    $codeactivation->setCode_fs($codefs);
                                                    $codeactivation->setCode_fl($codefl);
                                                    $codeactivation->setCode_fkps($codefkps);
                                                    $codeactivation->setOrigine_code("MCNP");
													if(isset($bon_neutre)) {
													   $codeactivation->setMontant_souscrit(10000);
													} else {
													   $codeactivation->setMontant_souscrit(0);
													}
													
                                                    $codeactivation->setSouscription_id($compteur_souscription);
                                                    $m_codeactivation->save($codeactivation);


                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                $utilisateur = NULL;
                //$groupe = $user->code_groupe;
                $code_agence = $request->getParam("code_agence");
                $code_zone = substr($_POST['code_agence'], 0, 3);
                $id_pays = $_POST['id_pays'];
                $groupe = NULL;

                $table = new Application_Model_DbTable_EuActeur();
                $selection = $table->select();
                $selection->where('code_membre like ?',$code_agence.'%');
                $selection->where('type_acteur like ?','gac_surveillance');
                $resultat = $table->fetchAll($selection);
                $trouvacteursur = $resultat->current();
                $code_acteur = $trouvacteursur->code_acteur;
                $acteur      =  $code_acteur;

                $fs = Util_Utils::getParametre('FS','valeur');
                $mont_fl = Util_Utils::getParametre('FL','valeur');
                $fcps = Util_Utils::getParametre('FKPS','valeur');

                $date_id = new Zend_Date(Zend_Date::ISO_8601);
                $date_idd = clone $date_id;

                        $code_fs = $codefs;
                        $code_fl = $codefl;
                        $code_fkps = $codefkps;

                $ancien_code = '';

                $membre = new Application_Model_EuMembreMorale();
                $mapper = new Application_Model_EuMembreMoraleMapper();
                $sms_mapper = new Application_Model_EuSmsmoneyMapper();

				
				$place = new Application_Model_EuOperation();
                $mapper_op = new Application_Model_EuOperationMapper();
                $compte = new Application_Model_EuCompte();
                $map_compte = new Application_Model_EuCompteMapper();

                $souscription = new Application_Model_EuSouscription();
                $souscription_mapper = new Application_Model_EuSouscriptionMapper();

                $tcartes = array();
                $tscartes = array();


                    if($code_fs !="") {
                        $sms_fs = $sms_mapper->findByCreditCode($code_fs);
                        $code = $mapper->getLastCodeMembreByAgence($code_agence);
                        if ($code == NULL) {
                            $code = $code_agence . '0000001' . 'M';
                        } else {
                            $num_ordre = substr($code, 12, 7);
                            $num_ordre++;
                            $num_ordre_bis = str_pad($num_ordre, 7, 0, STR_PAD_LEFT);
                            $code = $code_agence . $num_ordre_bis . 'M';
                        }

///////////////////////////////preinscription morale
$preinsc_mapper = new Application_Model_EuPreinscriptionMoraleMapper();
$compteur_preinscriptionmorale = $preinsc_mapper->findConuter() + 1;

                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $mapper_preinscriptionmorale = new Application_Model_EuPreinscriptionMoraleMapper();

                        //$preinscriptionmorale->setId_preinscription_morale($compteur_preinscriptionmorale)
                        $preinscriptionmorale->setCode_type_acteur($request->getParam("code_type_acteur"))
                               ->setCode_statut($request->getParam("code_statut"))
                               ->setRaison_sociale($request->getParam("raison_sociale"))
                               ->setId_pays($request->getParam("id_pays"))
                               ->setNum_registre_membre($request->getParam("num_registre_membre"))
                               ->setDomaine_activite($request->getParam("domaine_activite"))
                               ->setSite_web($request->getParam("site_web"))
                               ->setQuartier_membre($request->getParam("quartier_membre"))
                               ->setVille_membre($request->getParam("ville_membre"))
                               ->setCategorie_membre($request->getParam("categorie_membre"))
                               ->setBp_membre($request->getParam("bp_membre"))
                               ->setTel_membre(NULL)
                               ->setEmail_membre($request->getParam("email_membre"))
                               ->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone'])
                               ->setHeure_inscription($date_idd->toString('HH:mm:ss'))
                               ->setDate_inscription($date_idd->toString('yyyy-MM-dd'))
                               ->setCode_rep($request->getParam("code_rep"))
                               ->setCode_membre_morale(NULL)
                               ->setNumero_contrat(null)
                               ->setNumero_agrement_filiere(null)
                               ->setNumero_agrement_acnev(null)
                               ->setNumero_agrement_technopole(null)
                               ->setCode_fs($code_fs)
                               ->setCode_fl($code_fl)
                               ->setCode_fkps($code_fkps)
                               ->setCode_agence($code_agence)
                               ->setPublier(1)
                               ->setId_canton($request->getParam("id_canton"))
                ;
                        $mapper_preinscriptionmorale->save($preinscriptionmorale);/**/
						
						$compteur_preinscriptionmorale = $db->lastInsertId();


//////validation acnev
                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


//////validation filere
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(2);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);

//////validation technopole
                                $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                                $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                                $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                                $preinscriptionmorale->setPublier(3);
                                $preinscriptionmoraleM->update($preinscriptionmorale);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                //$compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                //$validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_preinscription_morale($compteur_preinscriptionmorale);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);


////////////////////////////////////////////



                        $compteur = $mapper_op->findConuter() + 1;
                        $membre->setId_filiere(null);
                        $membre->setCode_membre_morale($code);
                        $membre->setCode_type_acteur($request->getParam("code_type_acteur"));
                        $membre->setCode_statut($request->getParam("code_statut"));
                        $membre->setRaison_sociale($request->getParam("raison_sociale"));
                        $membre->setId_pays($request->getParam("id_pays"));
                        $membre->setNum_registre_membre($request->getParam("num_registre_membre"));
                        $membre->setDomaine_activite($request->getParam("domaine_activite"));
                        $membre->setSite_web($request->getParam("site_web"));
                        $membre->setQuartier_membre($request->getParam("quartier_membre"));
                        $membre->setVille_membre($request->getParam("ville_membre"));
                        $membre->setBp_membre($request->getParam("bp_membre"));
                        $membre->setTel_membre(NULL);
                        $membre->setEmail_membre($request->getParam("email_membre"));
                        $membre->setPortable_membre(intval($_POST['code_telephonique']).$_POST['numero_telephone']);
                        $membre->setId_utilisateur(NULL);
                        $membre->setHeure_identification($date_idd->toString('HH:mm:ss'));
                        $membre->setDate_identification($date_idd->toString('yyyy-MM-dd'));
                        $membre->setCode_agence($code_agence);
                        $membre->setCodesecret(md5($codesecret));
                        $membre->setAuto_enroler('O');
						$membre->setDesactiver(2);
                        $membre->setEtat_membre(NULL);
                        $membre->setId_canton($request->getParam("id_canton"));
                        $mapper->save($membre);

                        /////////////
                        $preinscriptionmorale = new Application_Model_EuPreinscriptionMorale();
                        $preinscriptionmoraleM = new Application_Model_EuPreinscriptionMoraleMapper();
                        $preinscriptionmoraleM->find($compteur_preinscriptionmorale, $preinscriptionmorale);

                        $preinscriptionmorale->setCode_membre_morale($code);
                        $preinscriptionmoraleM->update($preinscriptionmorale);



                        // insertion dans la table eu_code_activation
                        $m_codeactivation = new Application_Model_EuCodeActivationMapper();
                        $codeactivation = new Application_Model_EuCodeActivation();

                        $m_dvente = new Application_Model_EuDepotVenteMapper();
                        $dvente = new Application_Model_EuDepotVente();

                        $findcode = $m_codeactivation->findbycode($code_fs,$code_fl,$code_fkps);
                        if($findcode != NULL)  {
                            $findcode = $findcode[0];
                            $id_souscription = $findcode->souscription_id;
                            $findsouscription = $souscription_mapper->find($id_souscription,$souscription);
                            $ancien_code = $souscription->souscription_ancien_membre;
                            //$findsousdv = $m_dvente->findbysouscriptionmembre($id_souscription);
                            //$id_depot = $findsousdv->id_depot;
                            //$trouvedepot = $m_dvente->find($id_depot,$dvente);
                            $trouvecode = $m_codeactivation->find($findcode->id_code_activation,$codeactivation);
                            $codeactivation->setCode_membre($code);
                            $m_codeactivation->update($codeactivation);
                            //$dvente->setCode_membre($code);
                            //$m_dvente->update($dvente);

                        } else {
                            $this->view->message = "Les codes d'activation ne sont liés à aucune quittance de souscription !!!";
                            $db->rollback();
							$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                            $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                            $this->view->code_statut = $request->getParam("code_statut");
                            $this->view->raison_sociale = $request->getParam("raison_sociale");
                            $this->view->domaine_activite = $request->getParam("domaine_activite");
                            $this->view->site_web = $request->getParam("site_web");
                            $this->view->quartier_membre = $request->getParam("quartier_membre");
                            $this->view->ville_membre = $request->getParam("ville_membre");
                            $this->view->bp = $request->getParam("bp_membre");
                            //$this->view->tel = $request->getParam("tel_membre");
                            $this->view->email = $request->getParam("email_membre");
                            $this->view->id_pays = $request->getParam("id_pays");
                            //$this->view->portable = $request->getParam("portable_membre");
                            $this->view->registre = $request->getParam("num_registre_membre");
                            return;
                        }

                        $mem = new Application_Model_EuMembreMorale();
                        $mem_mapper = new Application_Model_EuMembreMoraleMapper();
                        $findmem = $mem_mapper->find($code,$mem);

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                              $mem->setEtat_membre('N');
                        } else {
                              if(substr($ancien_code,-1,1) == 'P') {
                                 $this->view->message = "Ce membre n'est pas autorisé à effectuer cette opération !!!";
                                 $db->rollback();
								 $this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                                 $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                                 $this->view->code_statut = $request->getParam("code_statut");
                                 $this->view->raison_sociale = $request->getParam("raison_sociale");
                                 $this->view->domaine_activite = $request->getParam("domaine_activite");
                                 $this->view->site_web = $request->getParam("site_web");
                                 $this->view->quartier_membre = $request->getParam("quartier_membre");
                                 $this->view->ville_membre = $request->getParam("ville_membre");
                                 $this->view->bp = $request->getParam("bp_membre");
                                 //$this->view->tel = $request->getParam("tel_membre");
                                 $this->view->email = $request->getParam("email_membre");
                                 $this->view->id_pays = $request->getParam("id_pays");
                                 //$this->view->portable = $request->getParam("portable_membre");
                                 $this->view->registre = $request->getParam("num_registre_membre");
                                 return;
                              }
                              $mem->setEtat_membre('A');
                              //Mise à jour de la table morale
                              $m_mapper = new Application_Model_MoraleMapper();
                              $m = new Application_Model_Morale();
                              $rep = $m_mapper->find($ancien_code,$m);
                              if ($rep == true) {
                                $m->setEtat_contrat(1)
                                  ->setCode_membre($code);
                                $m_mapper->update($m);
                              }

                             // Mise à jour de la table eu_ancien_membre
                             $mmcnp_mapper = new Application_Model_EuAncienMembreMapper();
                             $mmcnp = new Application_Model_EuAncienMembre();
                             $repmcnp = $mmcnp_mapper->find($ancien_code,$mmcnp);
                             if ($repmcnp == true) {
                                $mmcnp->setEtat_contrat(1)
                                      ->setCode_membre($code);
                                $mmcnp_mapper->update($mmcnp);
                             }
                         }
                         $mem_mapper->update($mem);

                        // eu_operation
                        //Util_Utils::addOperation($compteur,NULL,$code,'TFS', $fs, 'FS', 'Auto-enrôlement', 'AERL', $date_idd->toString('yyyy-MM-dd'), $date_idd->toString('HH:mm:ss'), NULL);

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($fs);
                        $place->setCode_produit('FS');
                        $place->setLib_op('Auto-enrolement');
                        $place->setType_op('AERL');
                        $place->setCode_cat('TFS');
                        $mapper_op->save($place);
						
						
						
                        //insertion dans la table eu_representation
                        $rep_mapper = new Application_Model_EuRepresentationMapper();
                        $rep = new Application_Model_EuRepresentation();
                        $rep->setCode_membre_morale($code)
                            ->setCode_membre($_POST['code_rep'])
                            ->setTitre("Representant")
                            ->setDate_creation($date_idd->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(NULL)
                            ->setEtat('inside');
                        $rep_mapper->save($rep);



//for($i = 0; $i < count($_POST['numero_telephone']); $i++) {
$compagnie = telephonecompagnie($_POST['code_telephonique'], $_POST['numero_telephone']);
$numero_telephone = intval($_POST['code_telephonique']).$_POST['numero_telephone'];
if($compagnie == 1){
    $sessionmcnp->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
    $db->rollback();
    return;	
}else{
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteurt = $m_telephone->findConuter() + 1;

                    //$telephone->setId_telephone($compteurt);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($code);
                    $m_telephone->save($telephone);
}
//}


                        $cb_mapper = new Application_Model_EuCompteBancaireMapper();
                        $cb = new Application_Model_EuCompteBancaire();
                        for($i = 0; $i < count($_POST['code_banque']); $i++) {
                        	if($_POST['num_compte'][$i]!=""){
                            $cb_compteur = $cb_mapper->findConuter() + 1;
                            $cb->setCode_banque($_POST['code_banque'][$i])
                               ->setId_compte($cb_compteur)
                               ->setCode_membre(NULL)
                               ->setCode_membre_morale($code)
                               ->setNum_compte_bancaire($_POST['num_compte'][$i]);
                            $cb_mapper->save($cb);
                        }
                        }


                        //insertion dans la table eu_utilisateur
                        $user_mapper = new Application_Model_EuUtilisateurMapper();
                        $userin = new Application_Model_EuUtilisateur();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        $membrein = new Application_Model_EuMembre();
                        $find_membre = $membre_mapper->find($_POST['code_rep'],$membrein);
                        //$id_user = $user_mapper->findConuter() + 1;

                        //$userin->setId_utilisateur($id_user);
                        $userin->setId_utilisateur_parent($utilisateur);
                        $userin->setPrenom_utilisateur($membrein->getPrenom_membre());
                        $userin->setNom_utilisateur($membrein->getNom_membre());
                        $userin->setLogin($code);
                        $userin->setPwd(md5($codesecret));
                        $userin->setDescription(NULL);
                        $userin->setUlock(0);
                        $userin->setCh_pwd_flog(0);
                        $code_type_acteur = $_POST["code_type_acteur"];
                        $userin->setCode_groupe('personne_morale');
                        $userin->setCode_gac_filiere(null);
                        $userin->setCode_groupe_create('personne_morale');
                        $userin->setConnecte(0);
                        $userin->setCode_agence($code_agence);
                        $userin->setCode_secteur(NULL);
                        $userin->setCode_zone($code_zone);
                        $userin->setId_filiere(null);
                        $userin->setCode_acteur($acteur);
                        $userin->setCode_membre($code);
                        $userin->setId_pays($id_pays);
                        $userin->setId_canton($request->getParam("id_canton"));
                        $user_mapper->save($userin);

                        // Mise à jour de la table eu_contrat
                        $contrat = new Application_Model_EuContrat();
                        $mapper_contrat = new Application_Model_EuContratMapper();
                        //$id_contrat = $mapper_contrat->findConuter() + 1;

                        //$contrat->setId_contrat($id_contrat);
                        $contrat->setCode_membre($code);
                        $contrat->setDate_contrat($date_idd->toString('yyyy-MM-dd'));
                        $contrat->setNature_contrat('numeraire');
                        $contrat->setId_type_contrat(7);
                        $contrat->setId_type_creneau(null);
                        $contrat->setId_type_acteur(NULL);
                        $contrat->setId_pays($_POST['id_pays']);
                        $contrat->setId_utilisateur(NULL);
                        $contrat->setFiliere('');
                        $mapper_contrat->save($contrat);

                        $tab_fs = new Application_Model_DbTable_EuFs();
                        $fs_model = new Application_Model_EuFs();
                        $fs_model->setCode_membre_morale($code)
                                 ->setCode_membre(NULL)
                                 ->setCode_fs('FS-' . $code)
                                 ->setCreditcode($sms_fs->getCreditCode())
                                 ->setDate_fs($date_idd->toString('yyyy-MM-dd'))
                                 ->setHeure_fs($date_idd->toString('HH:mm:ss'))
                                 ->setId_utilisateur($utilisateur)
                                 ->setMont_fs($fs);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fs_model->setOrigine_fs('N');
                        } else {
                           $fs_model->setOrigine_fs('A');
                        }
                        $tab_fs->insert($fs_model->toArray());


                        $sms_fs->setDestAccount_Consumed('NB-TFS-' . $code)
                               ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_id->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fs);

                    } else {
                        $this->view->message = " Le code FS est inexistant !!!";
                        $db->rollback();
						$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fl !="") {

                        $sms_fl = $sms_mapper->findByCreditCode($code_fl);
                        $tfl = new Application_Model_DbTable_EuFl();
                        $fl = new Application_Model_EuFl();
                        $code_fl = 'FL-' . $code;

                        $fl->setCode_fl($code_fl)
                           ->setCode_membre(NULL)
                           ->setCode_membre_morale($code)
                           ->setMont_fl($mont_fl)
                           ->setDate_fl($date_idd->toString('yyyy-MM-dd'))
                           ->setHeure_fl($date_idd->toString('HH:mm:ss'))
                           ->setId_utilisateur(NULL)
                           ->setCreditcode($sms_fl->getCreditCode());

                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $fl->setOrigine_fl('N');
                        } else {
                           $fl->setOrigine_fl('A');
                        }

                        $tfl->insert($fl->toArray());

                        //Mise e jour du compte general FGFL
                        $cg_mapper = new Application_Model_EuCompteGeneralMapper();
                        $cg_fgfn = new Application_Model_EuCompteGeneral();
                        $result3 = $cg_mapper->find('FL', 'NN', 'E', $cg_fgfn);
                        if ($result3) {
                            $cg_fgfn->setSolde($cg_fgfn->getSolde() + $mont_fl);
                            $cg_mapper->update($cg_fgfn);
                        } else  {
                            $cg_fgfn->setCode_compte('FL')
                                    ->setIntitule('Frais de licence')
                                    ->setService('E')
                                    ->setCode_type_compte('NN')
                                    ->setSolde($mont_fl);
                            $cg_mapper->save($cg_fgfn);
                        }

                        $compteurfl = $mapper_op->findConuter() + 1;
                        //Util_Utils::addOperation($compteurfl,NULL,$code, NULL, $mont_fl, NULL, 'Frais de licences', 'FL',$date_idd->toString('yyyy-MM-dd'),$date_idd->toString('HH:mm:ss'), NULL);

						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($mont_fl);
                        $place->setCode_produit('FL');
                        $place->setLib_op('Frais de licences');
                        $place->setType_op(null);
                        $place->setCode_cat(null);
                        $mapper_op->save($place);
						
						
                        $sms_fl->setDestAccount_Consumed('FL-'.$code)
                               ->setDateTimeconsumed($date_idd->toString('dd/MM/yyyy HH:mm:ss'))
                               ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fl);

                        //$tcartes[0]="TPAGCP";
                        $tcartes[1]="TCNCSEI";
                        $tcartes[2]="TPAGCI";
                        $tcartes[3]="TIR";
                        $tcartes[4]="TR";
                        $tcartes[5]="TPaNu";
                        $tcartes[6]="TPaR";
                        $tcartes[7]="TFS";
                        $tcartes[8]="TPN";
                        $tcartes[9]="TIB";
                        $tcartes[10]="TPaNu";
                        $tcartes[11]="TIN";
                        $tcartes[12]="CAPA";
                        $tcartes[13]="TMARGE";
                        //$tcartes[14]="TRE";

                        for($i = 1; $i < count($tcartes); $i++) {
                            if($tcartes[$i] == "TCNCSEI" || $tcartes[$i] == "TPN") {
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TR" || $tcartes[$i] == "CAPA" || $tcartes[$i] == "TRE" || $tcartes[$i] == "TMARGE") {
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TPAGCP" || $tcartes[$i] == "TPAGCI" || $tcartes[$i] == "TPaNu" || $tcartes[$i] == "TPaR" || $tcartes[$i] == "TFS") {
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIN") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NN' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIR") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NR' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_compte,$compte);
                            } elseif($tcartes[$i] == "TIB") {
                                $tcartes[$i] = "TI";
                                $code_compte = 'NB' . '-' . $tcartes[$i] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_compte,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tcartes[$i])
                                       ->setCode_compte($code_compte)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tcartes[$i])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
						
						
						
						//$tcartes[0]="TPAGCP";
                        $tscartes[1]="TSCNCSEI";
                        $tscartes[2]="TSGCI";
                        $tscartes[3]="TSIR";
                        $tscartes[4]="TSPaR";
                        $tscartes[5]="TSFS";
                        $tscartes[6]="TSPN";
                        $tscartes[7]="TSIB";
                        $tscartes[8]="TSPaNu";
                        $tscartes[9]="TSIN";
                        $tscartes[10]="TSCAPA";
                        $tscartes[11]="TSMARGE";
                        //$tcartes[14]="TSRE";
						
						
						
						

                        for($j = 1; $j < count($tscartes); $j++) {
                            if($tscartes[$j] == "TSCNCSEI" || $tscartes[$j] == "TSPN") {
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSCAPA" || $tscartes[$j] == "TSMARGE" || $tscartes[$j] == "TSRE") {
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSGCP" || $tscartes[$j] == "TSGCI" || $tscartes[$j] == "TSPaNu" || $tscartes[$j] == "TSPaR" || $tscartes[$j] == "TSFS") {
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIN") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NN' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NN';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIR") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NR' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NR';
                                $res = $map_compte->find($code_comptets,$compte);
                            } elseif($tscartes[$j] == "TSIB") {
                                $tscartes[$j] = "TSI";
                                $code_comptets = 'NB' . '-' . $tscartes[$j] . '-' . $code;
                                $type_carte = 'NB';
                                $res = $map_compte->find($code_comptets,$compte);
                            }
                            if(!$res) {
                                $compte->setCode_cat($tscartes[$j])
                                       ->setCode_compte($code_comptets)
                                       ->setCode_membre(NULL)
                                       ->setCode_membre_morale($code)
                                       ->setCode_type_compte($type_carte)
                                       ->setDate_alloc($date_idd->toString('yyyy-MM-dd'))
                                       ->setDesactiver(0)
                                       ->setLib_compte($tscartes[$j])
                                       ->setSolde(0);
                                $map_compte->save($compte);
                            }

                        }
                    }  else {
                        $this->view->message = "Erreur d'éxecution: Le code FL est inexistant !!!";
                        $db->rollback();
						$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }

                    if($code_fkps !="") {
                        $sms_fkps = $sms_mapper->findByCreditCode($code_fkps);
                        $carte = new Application_Model_EuCartes();
                        $t_carte = new Application_Model_DbTable_EuCartes();
                        //$id_demande = $carte->findConuter() + 1;
                        //$carte->setId_demande($id_demande)
                        $carte->setCode_cat($tcartes[0])
                              ->setCode_membre($code)
                              ->setMont_carte($fkps)
                              ->setDate_demande($date_idd->toString('yyyy-MM-dd'))
                              ->setLivrer(0)
                              ->setCode_Compte("NB-".$tcartes[0]."-".$code)
                              ->setImprimer(0)
                              ->setCardPrintedDate('')
                              ->setCardPrintedIDDate(0)
                              ->setId_utilisateur(NULL);
                        if(($ancien_code =='') || ($ancien_code == NULL)) {
                           $carte->setOrigine_fkps('N');
                        } else {
                           $carte->setOrigine_fkps('A');
                        }
                        $t_carte->insert($carte->toArray());

						
						$place->setDate_op($date_idd->toString('yyyy-MM-dd'));
                        $place->setHeure_op($date_idd->toString('HH:mm:ss'));
                        $place->setId_utilisateur(null);
                        $place->setCode_membre(null);
                        $place->setCode_membre_morale($code);
                        $place->setMontant_op($fkps);
                        $place->setCode_produit('CPS');
                        $place->setLib_op('Frais de CPS');
                        $place->setType_op(null);
                        $place->setCode_cat(null);
                        $mapper_op->save($place);
						
						
                        $sms_fkps->setDestAccount_Consumed('CPS-' . $code)
                                 ->setDateTimeconsumed($date_id->toString('dd/MM/yyyy HH:mm:ss'))
                                 ->setIDDatetimeConsumed(Util_Utils::getIDDate($date_idd->toString('dd/MM/yyyy')));
                        $sms_mapper->update($sms_fkps);
                    }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                        if(isset($bon_neutre)){
                                $bon_neutre2 = new Application_Model_EuBonNeutre();
                                $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre2M->find($bon_neutre->bon_neutre_id, $bon_neutre2);

                                if(($bon_neutre2->bon_neutre_code_membre == "" || $bon_neutre2->bon_neutre_code_membre == NULL) && (($bon_neutre2->bon_neutre_raison != "" && $bon_neutre2->bon_neutre_raison != NULL))){
                                $bon_neutre2->setBon_neutre_code_membre($code);
                                $bon_neutre2M->update($bon_neutre2);
                                }


                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                //$compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                //$bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Re-activation PM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant(10000);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
                        }
                            ///////////////////////////////////////////////////////////////////////////////////////



                        $compteur = Util_Utils::findConuter() + 1;
                        Util_Utils::addSms2new(intval($_POST['code_telephonique']).$_POST['numero_telephone'],"Bienvenue dans le reseau ESMC ! Votre numero de membre est: " . $code ."  Votre Code Secret est : " .$codesecret);
                        $db->commit();
                        $sessionmcnp->error = "Ouverture de compte marchand bien effectuée ...<br /><br />
                        Code Membre (Login) : <strong>".$code."</strong><br />
                        Code Secret (Mot de passe) : <strong>".$codesecret."</strong>";
                        $sessionmcnp->membre = $code;
                        $sessionmcnp->codesecret = $codesecret;
                            $this->_redirect('/souscriptionbon/enrolementmcnppm/id/'.$_POST['ancien_code_membre']);


                    }
                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
						$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                        $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                        $this->view->code_statut = $request->getParam("code_statut");
                        $this->view->raison_sociale = $request->getParam("raison_sociale");
                        $this->view->domaine_activite = $request->getParam("domaine_activite");
                        $this->view->site_web = $request->getParam("site_web");
                        $this->view->quartier_membre = $request->getParam("quartier_membre");
                        $this->view->ville_membre = $request->getParam("ville_membre");
                        $this->view->bp = $request->getParam("bp_membre");
                        //$this->view->tel = $request->getParam("tel_membre");
                        $this->view->email = $request->getParam("email_membre");
                        $this->view->id_pays = $request->getParam("id_pays");
                        //$this->view->portable = $request->getParam("portable_membre");
                        $this->view->registre = $request->getParam("num_registre_membre");
                        return;
                    }
            } else {
                $sessionmcnp->error = "Champs * obligatoire ...";
				$this->view->ancien_code_membre = $request->getParam("ancien_code_membre");
                $this->view->code_type_acteur = $request->getParam("code_type_acteur");
                $this->view->code_statut = $request->getParam("code_statut");
                $this->view->raison_sociale = $request->getParam("raison_sociale");
                $this->view->domaine_activite = $request->getParam("domaine_activite");
                $this->view->site_web = $request->getParam("site_web");
                $this->view->quartier_membre = $request->getParam("quartier_membre");
                $this->view->ville_membre = $request->getParam("ville_membre");
                $this->view->bp = $request->getParam("bp_membre");
                //$this->view->tel = $request->getParam("tel_membre");
                $this->view->email = $request->getParam("email_membre");
                $this->view->id_pays = $request->getParam("id_pays");
                //$this->view->portable = $request->getParam("portable_membre");
                $this->view->registre = $request->getParam("num_registre_membre");
            }
        } else {
            $id = (string)$this->_request->getParam('id');
            $tabela = new Application_Model_DbTable_EuAncienMembre();
            $select = $tabela->select();
            $select->from($tabela,array('eu_ancien_membre.*',"date_identification as dateidentif"))
                   ->where('ancien_code_membre like ?', '%'.$id.'%')
                   ->where('(etat_contrat = 0')->orwhere('etat_contrat IS NULL)');
            $memb = $tabela->fetchAll($select);
            $trouvmembre = $memb->current();

            $this->view->ancien_code_membre = $trouvmembre->ancien_code_membre;
            $this->view->raison = $trouvmembre->raison_sociale;
            $this->view->code_rep = $trouvmembre->nom_membre." ".$trouvmembre->prenom_membre;
            $this->view->quartier_membre = $trouvmembre->quartier_membre;
            $this->view->ville_membre = $trouvmembre->ville_membre;
            $this->view->bp = $trouvmembre->bp_membre;
            //$this->view->tel = $trouvmembre->tel_membre;
            //$this->view->portable = $trouvmembre->portable_membre;
            $this->view->email = $trouvmembre->email_membre;
            $this->view->site_web = $trouvmembre->site_web;
            $this->view->statut_juridique = $trouvmembre->code_statut;
            $this->view->type_acteur = $trouvmembre->code_type_acteur;
        }
    }






    public function addsouscriptionbanpersoAction() {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }


        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if (
  (
  (isset($_POST['bon_neutre_nom']) && $_POST['bon_neutre_nom']!="" && isset($_POST['bon_neutre_prenom']) && $_POST['bon_neutre_prenom']!="") ||
  (isset($_POST['bon_neutre_raison']) && $_POST['bon_neutre_raison']!="")
  ) &&
  isset($_POST['bon_neutre_mobile']) && $_POST['bon_neutre_mobile']!="" &&
  isset($_POST['bon_neutre_email']) && $_POST['bon_neutre_email']!="" &&
  isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']!="" &&
  isset($_POST['id_canton']) && $_POST['id_canton']!="" &&
  isset($_POST['bon_neutre_banque']) && $_POST['bon_neutre_banque']!="" &&
  isset($_POST['bon_neutre_numero']) && $_POST['bon_neutre_numero']!="" && $_POST['bon_neutre_numero']!=NULL &&
  isset($_POST['bon_neutre_date_numero']) && $_POST['bon_neutre_date_numero']!="" &&
  isset($_POST['bon_neutre_montant']) && $_POST['bon_neutre_montant']!="") {

                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();

                        /////////////////controle nom prenom
                        /*$eubon_neutre = new Application_Model_DbTable_EuBonNeutre();
                        $select = $eubon_neutre->select();
                        $select->where("LOWER(REPLACE(bon_neutre_nom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_nom"))));
                        $select->where("LOWER(REPLACE(bon_neutre_prenom, ' ', '')) = ? ", strtolower(str_replace(" ", "",$request->getParam("bon_neutre_prenom"))));
                        $select->order(array("bon_neutre_id ASC"));
                        $select->limit(1);
                        $rowseubon_neutre = $eubon_neutre->fetchRow($select);
                        if(count($rowseubon_neutre) > 0) {
                          $bon_neutre_ok = 1;
                          $bon_neutre_first = $rowseubon_neutre->bon_neutre_id;
                        } else {
                          $bon_neutre_ok = 0;
                        }*/

                        /////////////////controle numero de banque
                        $eubon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
                        $select = $eubon_neutre_detail->select()
                                                ->where('bon_neutre_detail_banque = ?',$request->getParam("bon_neutre_banque"))
                                                ->where('bon_neutre_detail_numero = ?',$request->getParam("bon_neutre_numero"))
                                                ->where('bon_neutre_detail_date_numero = ?',$request->getParam("bon_neutre_date_numero"))
                                                ;
                        if ($rowseubon_neutre_detail = $eubon_neutre_detail->fetchRow($select)) {
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($rowseubon_neutre_detail->bon_neutre_id, $bon_neutre);

                                $code_BAn = $bon_neutre->bon_neutre_code;

                            $db->rollback();
                            $sessionmembre->error = "Numéro de banque déjà utilisé ...";
                            $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            return;
                        }else{

                        /////////////////controle email
                        if(!filter_var($request->getParam("bon_neutre_email"), FILTER_VALIDATE_EMAIL)){
                            $db->rollback();
                            $sessionmembre->error = "E-mail non valable ...";
                            $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            return;
                        }

                        /////////////////controle montant
                        if($request->getParam("bon_neutre_banque") == "BOA" || $request->getParam("bon_neutre_banque") == "UTB" || $request->getParam("bon_neutre_banque") == "BAT" || $request->getParam("bon_neutre_banque") == "DBANK" || $request->getParam("bon_neutre_banque") == "ECOBANK" || $request->getParam("bon_neutre_banque") == "ORABANK" || $request->getParam("bon_neutre_banque") == "WARI" || $request->getParam("bon_neutre_banque") == "BPEC" || $request->getParam("bon_neutre_banque") == "CCP" || $request->getParam("bon_neutre_banque") == "BTCI" || $request->getParam("bon_neutre_banque") == "FAIP" || $request->getParam("bon_neutre_banque") == "CECL" || $request->getParam("bon_neutre_banque") == "MECIT" || $request->getParam("bon_neutre_banque") == "MUTUAL" || $request->getParam("bon_neutre_banque") == "MECI" || $request->getParam("bon_neutre_banque") == "ASMA"){

                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                            $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                            $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate7($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $libellebanques, $request->getParam("bon_neutre_date_numero"));

                            if(count($relevebancairedetail) > 0) {
                                if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                $db->rollback();
                                $sessionmembre->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                return;
                                }
                            }else{

                                if($request->getParam("bon_neutre_banque") == "BAT" || $request->getParam("bon_neutre_banque") == "DBANK") {
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmembre->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmembre->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                    }

                                } else if($request->getParam("bon_neutre_banque") == "ECOBANK"){
                                    $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                    $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate6($request->getParam("bon_neutre_banque"), $request->getParam("bon_neutre_numero"), $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmembre->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmembre->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                    }

                                } else if($request->getParam("bon_neutre_banque") == "ORABANK"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmembre->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmembre->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                    }


                                }else if($request->getParam("bon_neutre_banque") == "UTB"){
                            $libellebanques = array(strtolower($request->getParam("bon_neutre_nom")), strtolower($request->getParam("bon_neutre_prenom")), strtolower($request->getParam("bon_neutre_raison")));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate5($request->getParam("bon_neutre_banque"), $libellebanques, $request->getParam("bon_neutre_date_numero"));
                                    if(count($relevebancairedetail) > 0) {
                                        if($request->getParam("bon_neutre_montant") != $relevebancairedetail->relevebancairedetail_montant) {
                                        $db->rollback();
                                        $sessionmembre->error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                        }
                                    }else{
                                        $db->rollback();
                                        $sessionmembre->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                    }

                                }else{
                                        $db->rollback();
                                        $sessionmembre->error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                        return;
                                }
                            }
                        } else {

                                    $db->rollback();
                                    $sessionmembre->error = "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ...";
                                    $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                        }




//$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);


/////////////////////////////////////controle code membre
if(isset($sessionmembre->code_membre) && $sessionmembre->code_membre!=""){
if(strlen($sessionmembre->code_membre) != 20) {
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
}else{
if(substr($sessionmembre->code_membre, -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($sessionmembre->code_membre, $membre);
                                if(count($membre) == 0){
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                                }
                                if($_POST['bon_neutre_nom'] == "" || $_POST['bon_neutre_nom'] == NULL){
                                    $db->rollback();
                                    $sessionmembre->error = "Veuillez bien saisir le nom et prénom(s)";
                                    $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                                }
                                $nom_membre = $membre->nom_membre;
                                $prenom_membre = $membre->prenom_membre;
                                $raison_sociale = "";
    }
if(substr($sessionmembre->code_membre, -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($sessionmembre->code_membre, $membremorale);
                                if(count($membremorale) == 0){
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                                }
                                if($_POST['bon_neutre_raison'] == "" || $_POST['bon_neutre_raison'] == NULL){
                                    $db->rollback();
                                    $sessionmembre->error = "Veuillez bien saisir la raison sociale";
                                    $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    return;
                                }
                                $nom_membre = "";
                                $prenom_membre = "";
                                $raison_sociale = $membremorale->raison_sociale;
    }

if((str_replace(" ", "", $_POST['bon_neutre_nom']) == str_replace(" ", "", $nom_membre) && str_replace(" ", "", $_POST['bon_neutre_prenom']) == str_replace(" ", "", $prenom_membre)) || (str_replace(" ", "", $_POST['bon_neutre_raison']) == str_replace(" ", "", $raison_sociale))){

                      }else{
                        $db->rollback();
                            $sessionmembre->error = "Le nom du recu de versement ne correspond pas à ce Code Membre ...";
                            $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            return;
                    }    
}


                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $request->getParam("bon_neutre_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($sessionmembre->code_membre);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);

}else{


                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($sessionmembre->code_membre);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre->setBon_neutre_nom($request->getParam("bon_neutre_nom"));
                            $bon_neutre->setBon_neutre_prenom($request->getParam("bon_neutre_prenom"));
                            $bon_neutre->setBon_neutre_raison($request->getParam("bon_neutre_raison"));
                            $bon_neutre->setBon_neutre_email($request->getParam("bon_neutre_email"));
                            $bon_neutre->setBon_neutre_mobile($request->getParam("bon_neutre_mobile"));
                            $bon_neutre_mapper->save($bon_neutre);




                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_montant"));
                            $bon_neutre_detail->setBon_neutre_detail_banque($request->getParam("bon_neutre_banque"));
                            $bon_neutre_detail->setBon_neutre_detail_numero($request->getParam("bon_neutre_numero"));
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($request->getParam("bon_neutre_date_numero"));
                            $bon_neutre_detail->setId_canton($request->getParam("id_canton"));
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


    }



                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($relevebancairedetail->relevebancairedetail_id, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);

                        }
                            ///////////////////////////////////////////////////////////////////////////////////////

                            $db->commit();
                            $sessionmembre->error = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn). <br />
Utilisez ce BAn pour : <br />
- votre propre Activation Personne Physique et/ou Personne Morale <br />
- la souscription pour tiers (CMFH) de votre choix <br />
<br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
                            $sessionmembre->code_BAn = $code_BAn;
    $sessionmembre->error .= "<strong>Veuillez bien noter votre code BAn. Il est très important.</strong>Le cas échéant, en cas de perte, reprenez l'opération.";

                            $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            return;

                    }  catch (Exception $exc) {
                        $sessionmembre->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                        return;
                    }


            }   else {  $sessionmembre->error = "Champs * obligatoire ..."; }


        }


    }








    public function listbonachatinterneAction()
    {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $capa = new Application_Model_EuCapaMapper();
        $this->view->entries = $capa->fetchAllByMembreOrigine($sessionmembre->code_membre, "BAi");

        $this->view->tabletri = 1;

}





    public function listbonachatneutreAction()
    {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $bon_neutre = new Application_Model_EuBonNeutreMapper();
        $this->view->entries = $bon_neutre->fetchAllByMembreBAn($sessionmembre->code_membre);

        $this->view->tabletri = 1;

}

    public function detailbonneutreAction()
    {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $bon_neutre_detail = new Application_Model_EuBonNeutreDetailMapper();
        $this->view->entries = $bon_neutre_detail->fetchAllByBonNeutre($id);

        }

        $this->view->tabletri = 1;

}





    public function utilisebonneutreAction()
    {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $id = (int) $this->_request->getParam('id');
        if (isset($id) && $id != 0) {

        $bon_neutre_utilise = new Application_Model_EuBonNeutreUtiliseMapper();
        $this->view->entries = $bon_neutre_utilise->fetchAllByBonNeutre($id);

        }

        $this->view->tabletri = 1;

}




    public function codebonconsoAction()
    {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $bon_neutre = new Application_Model_EuBonNeutreMapper();
        $entries = $bon_neutre->fetchAllByMembreBAn($sessionmembre->code_membre);
        $row = $entries[0];

        if ($row->bon_neutre_codebarre != "") {
            $codebonconso = $row->bon_neutre_codebarre;

        }else{

            $compte = new Application_Model_EuCompte();
            $compte_mapper = new Application_Model_EuCompteMapper();
            if (substr($sessionmembre->code_membre,19,1) == 'P') {
                $compte_mapper->find("NB-TSRPG-".$sessionmembre->code_membre, $compte);
                $row = $entries[0];
                $codebonconso = $compte->mifarecard;

            }else{
                $compte_mapper->find("NB-TSGCI-".$sessionmembre->code_membre, $compte);
                $row = $entries[0];
                if ($compte->mifarecard != "") {
                    $codebonconso = $compte->mifarecard;

                }else{
                    $compte_mapper->find("NB-TSI-".$sessionmembre->code_membre, $compte);
                    $row = $entries[0];
                    $codebonconso = $compte->mifarecard;

                }
            }
        }
        

        $eusms = new Application_Model_DbTable_EuSms();
        $select = $eusms->select();
        if($codebonconso != ""){
        $select->where("smsbody LIKE '%".$codebonconso."%'");  
        }else{
        $select->where("1=2");      
        }
        //$select->where("recipient = ? ", $sessionmembre->portable_membre);
        $select->order(array('neng DESC'));
        $select->limit(1);
        $rowseusms = $eusms->fetchRow($select);

        $this->view->entries = $rowseusms;


        $this->view->tabletri = 1;

}




    public function codebonconso2Action()
    {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $compte = new Application_Model_EuCompte();
        $compte_mapper = new Application_Model_EuCompteMapper();
        $compte_mapper->find("NB-TSGCI-".$sessionmembre->code_membre, $compte);

        $row = $entries[0];
        $codebonconso = $compte->mifarecard;

        $eusms = new Application_Model_DbTable_EuSms();
        $select = $eusms->select();
        $select->where("smsbody LIKE '%".$codebonconso."%'");
        //$select->where("recipient = ? ", $sessionmembre->portable_membre);
        $select->order(array('neng DESC'));
        $select->limit(1);
        $rowseusms = $eusms->fetchRow($select);

        $this->view->entries = $rowseusms;


        $this->view->tabletri = 1;

}









    public function addbantiersAction() {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if (isset($_POST['bon_neutre_tiers_beneficiaire']) && $_POST['bon_neutre_tiers_beneficiaire']!="" && isset($_POST['bon_neutre_tiers_montant']) && $_POST['bon_neutre_tiers_montant']!="") {

                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();

                //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                do{
                                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                }while(count($bon_neutre_detail2) > 0);

/////////////////////////////////////controle code membre
if(strlen($_POST['bon_neutre_tiers_beneficiaire']) != 20) {
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    $this->_redirect('/souscriptionbon/addbantiers');
                                    return;
}else{
if(substr($_POST['bon_neutre_tiers_beneficiaire'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($_POST['bon_neutre_tiers_beneficiaire'], $membre);
                                if(count($membre) == 0){
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    $this->_redirect('/souscriptionbon/addbantiers');
                                    return;
                                }
                $canton = $membre->id_canton;
                $nom = $membre->nom_membre;
                $prenom = $membre->prenom_membre;
                $email = $membre->email_membre;
                $mobile = $membre->portable_membre;
                $raison = "";
    }

if(substr($_POST['bon_neutre_tiers_beneficiaire'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($_POST['bon_neutre_tiers_beneficiaire'], $membremorale);
                                if(count($membremorale) == 0){
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    $this->_redirect('/souscriptionbon/addbantiers');
                                    return;
                                }
                $canton = $membremorale->id_canton;
                $nom = "";
                $prenom = "";
                $email = $membremorale->email_membre;
                $mobile = $membremorale->portable_membre;
                $raison = $membremorale->raison_sociale;
    }
}


                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

if($request->getParam("bon_neutre_tiers_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  $this->_redirect('/souscriptionbon/addbantiers');
  return;

}


$bon_neutre_tiers = new Application_Model_EuBonNeutreTiers();
$bon_neutre_tiers_mapper = new Application_Model_EuBonNeutreTiersMapper();

$compteur_bon_neutre_tiers = $bon_neutre_tiers_mapper->findConuter() + 1;
$bon_neutre_tiers->setBon_neutre_tiers_id($compteur_bon_neutre_tiers);
$bon_neutre_tiers->setBon_neutre_tiers_beneficiaire($request->getParam("bon_neutre_tiers_beneficiaire"));
$bon_neutre_tiers->setBon_neutre_tiers_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_tiers->setBon_neutre_tiers_montant($request->getParam("bon_neutre_tiers_montant"));
$bon_neutre_tiers->setBon_neutre_tiers_apporteur($sessionmembre->code_membre);
$bon_neutre_tiers_mapper->save($bon_neutre_tiers);





                                //$bon_neutre->setBon_neutre_code($code_BAn);
                                //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $request->getParam("bon_neutre_tiers_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $request->getParam("bon_neutre_tiers_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_tiers_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Souscription au BAn pour tiers P".substr($_POST['bon_neutre_tiers_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($request->getParam("bon_neutre_tiers_montant"));
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/

///////////////////////////////////////////////////////////////////////////

$mont = $request->getParam("bon_neutre_tiers_montant");

                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                   
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);


if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL){
$tiers_detail_mapper = new Application_Model_EuBonNeutreTiersDetailMapper();
$tiers_detail = $tiers_detail_mapper->fetchAllByBanque($detail->bon_neutre_tiers_id);
$code_banque = $tiers_detail->bon_neutre_tiers_detail_banque;
}else{
$code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
}

                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
$mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

$bon_neutre_tiers_detail = new Application_Model_EuBonNeutreTiersDetail();
$bon_neutre_tiers_detail_mapper = new Application_Model_EuBonNeutreTiersDetailMapper();

$bon_neutre_tiers_detail->setBon_neutre_tiers_id($compteur_bon_neutre_tiers);
$bon_neutre_tiers_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_mont_utilise(0);
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_banque($code_banque);
$bon_neutre_tiers_detail_mapper->save($bon_neutre_tiers_detail);

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                



                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_tiers_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Souscription au BAn pour tiers P".substr($_POST['bon_neutre_tiers_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{

$bon_neutre_tiers_detail = new Application_Model_EuBonNeutreTiersDetail();
$bon_neutre_tiers_detail_mapper = new Application_Model_EuBonNeutreTiersDetailMapper();

$bon_neutre_tiers_detail->setBon_neutre_tiers_id($compteur_bon_neutre_tiers);
$bon_neutre_tiers_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_montant($mont);
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_mont_utilise(0);
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_solde($mont);
$bon_neutre_tiers_detail->setBon_neutre_tiers_detail_banque($code_banque);
$bon_neutre_tiers_detail_mapper->save($bon_neutre_tiers_detail);

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_tiers_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Souscription au BAn pour tiers P".substr($_POST['bon_neutre_tiers_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }


                        }
                            


///////////////////////////////////////////////////////////////////////////


                $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre($_POST['bon_neutre_tiers_beneficiaire']);
                if(count($bon_neutre3) > 0){
                  $bon_neutre31 = new Application_Model_EuBonNeutre();
                                $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                                $bon_neutre31->setBon_neutre_code($code_BAn);
                                $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $request->getParam("bon_neutre_tiers_montant"));
                  $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $request->getParam("bon_neutre_tiers_montant"));
                                $bon_neutre31M->update($bon_neutre31);


                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                                $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_tiers_montant"));
                                $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_tiers_montant"));
                                $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                $bon_neutre_detail->setId_canton($canton);
                                $bon_neutre_detail->setBon_neutre_tiers_id($compteur_bon_neutre_tiers);
                                $bon_neutre_detail_mapper->save($bon_neutre_detail);


                  }else{

                                              $bon_neutre = new Application_Model_EuBonNeutre();
                                  $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                                  $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                                  $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre->setBon_neutre_type("BAn");
                                  $bon_neutre->setBon_neutre_code($code_BAn);
                                  $bon_neutre->setBon_neutre_code_membre($_POST['bon_neutre_tiers_beneficiaire']);
                                  $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_tiers_montant"));
                                  $bon_neutre->setBon_neutre_montant_utilise(0);
                                  $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_tiers_montant"));
                                  $bon_neutre->setBon_neutre_nom($nom);
                                  $bon_neutre->setBon_neutre_prenom($prenom);
                                  $bon_neutre->setBon_neutre_raison($raison);
                                  $bon_neutre->setBon_neutre_email($email);
                                  $bon_neutre->setBon_neutre_mobile($mobile);
                                  $bon_neutre_mapper->save($bon_neutre);




                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                  $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                  $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                  $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_tiers_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_tiers_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                  $bon_neutre_detail->setId_canton($canton);
                                  $bon_neutre_detail->setBon_neutre_tiers_id($compteur_bon_neutre_tiers);
                                  $bon_neutre_detail_mapper->save($bon_neutre_detail);


                    }


                            ///////////////////////////////////////////////////////////////////////////////////////

                            $db->commit();
                            $sessionmembre->error = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn) pour tiers. <br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
                            $sessionmembre->code_BAn = $code_BAn;

                            $this->_redirect('/souscriptionbon/addbantiers');
                            return;

}   else {
                            $db->rollback();
                                          $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            $this->_redirect('/souscriptionbon/addbantiers');
                            return;
}

                    }  catch (Exception $exc) {
                        $sessionmembre->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->_redirect('/souscriptionbon/addbantiers');
                        return;
                    }
                  }   else {  $sessionmembre->error = "Champs * obligatoire ..."; }
}
    }







    public function listbantiersapporteurAction()
    {
        /* page espacepersonnel/listrecu - Liste des reçus */

        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $bantiers = new Application_Model_EuBonNeutreTiersMapper();
        $this->view->entries = $bantiers->fetchAllByApporteur($sessionmembre->code_membre);

        $this->view->tabletri = 1;

    }


      public function listbantiersbeneficiaireAction()
      {
        /* page espacepersonnel/listrecu - Liste des reçus */

        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
          $this->_redirect('/');
        }

        $bantiers = new Application_Model_EuBonNeutreTiersMapper();
        $this->view->entries = $bantiers->fetchAllByBeneficiaire($sessionmembre->code_membre);

        $this->view->tabletri = 1;

      }


  public function listbcapproapporteurAction() {
	    /* page espacepersonnel/listrecu - Liste des reçus */
  		$sessionmembre = new Zend_Session_Namespace('membre');
  		//$this->_helper->layout->disableLayout();
  		$this->_helper->layout()->setLayout('layoutpublicesmcperso');

  		if (!isset($sessionmembre->code_membre)) {
  		   $this->_redirect('/');
  		}
		
		$bcappro = new Application_Model_EuApprovisionnementMapper();
  		$this->view->entries = $bcappro->fetchAllByApporteur($sessionmembre->code_membre);

  		$this->view->tabletri = 1;
	}
	
	
	
	public function listbcapprobeneficiaireAction() {
        /* page espacepersonnel/listrecu - Liste des reçus */
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
           $this->_redirect('/');
        }

        $bcappro = new Application_Model_EuApprovisionnementMapper();
        $this->view->entries = $bcappro->fetchAllByBeneficiaire($sessionmembre->code_membre);

        $this->view->tabletri = 1;

     }
	 
	 public function codetegcAction() {
      $code_membre = $_GET["code_membre"];
      $t_tab = new Application_Model_DbTable_EuTegc();
      $select = $t_tab->select();
	  if(substr($code_membre,19,1) == "M") {
	    $select->where('code_membre like ?', $code_membre);
	  } else {
	    $select->where('code_membre_physique like ?', $code_membre);
	  }
	  $select->where('nom_tegc is not null');
	  $select->order('nom_tegc asc');
	  $rows = $t_tab->fetchAll($select);
	  
	  $data = array();
      for ($i = 0; $i < count($rows); $i++) {
        $value = $rows[$i];
        $data[$i][0] = $value->code_tegc;
        $data[$i][1] = $value->nom_tegc;
      }
      $this->view->data = $data;
   }
   
   public  function listbanqueAction() {
      $id_pays  = $_GET["id_pays"];
      $t_banque = new Application_Model_DbTable_EuBanque();
	  $select = $t_banque->select();
	  $select->where('id_pays like ?', $id_pays);
	  $select->order('libelle_banque asc');
	  $rows = $t_banque->fetchAll($select);
	  $data = array();
      for($i = 0; $i < count($rows); $i++) {
         $value = $rows[$i];
         $data[$i][0] = $value->code_banque;
         $data[$i][1] = $value->libelle_banque;
      }
      $this->view->data = $data;
    }
   
   
   public function addblapproandroidAction()  {
	   $sessionmembre = new Zend_Session_Namespace('membre');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcperso');

       if(!isset($sessionmembre->code_membre)) {
           $this->_redirect('/');
       }
	   
	   $t_tegc = new Application_Model_DbTable_EuTegc();
	   $selection = $t_tegc->select();
	   $selection->where('nom_tegc is not null');
	   if(substr($sessionmembre->code_membre,19,1) == "M") {
	     $selection->where('code_membre like ?',$sessionmembre->code_membre);
	   } else {
         $selection->where('code_membre_physique like ?',$sessionmembre->code_membre);
       }
	   
	   $selection->order('nom_tegc asc');
       $tes = $t_tegc->fetchAll($selection);
	   $this->view->tes = $tes;
	   
	   $request = $this->getRequest();
	   if($request->isPost()) {
	       $db = Zend_Db_Table::getDefaultAdapter();
           $db->beginTransaction();
		   try { 
               $echange   = new Application_Model_EuEchange();
			   $m_echange = new Application_Model_EuEchangeMapper();
			   
			   $credit_conso   = new Application_Model_EuCreditConsommer();
			   $m_credit_conso = new Application_Model_EuCreditConsommerMapper();
			   
               $compte   = new Application_Model_EuCompte();
			   $m_compte = new Application_Model_EuCompteMapper();
			   
			   $approvisionnement = new Application_Model_EuApprovisionnement();
			   $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			   $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			   $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			   
			   $operation   = new Application_Model_EuOperation();
			   $m_operation = new Application_Model_EuOperationMapper();
			   
			   $bon   = new Application_Model_EuBon();
			   $m_bon = new Application_Model_EuBonMapper();
			   
			   $cnp   = new Application_Model_EuCnp();
			   $m_cnp = new Application_Model_EuCnpMapper();
			   
			   $tcnp = new Application_Model_DbTable_EuCnpEntree();
			   
			   $gcp   = new Application_Model_EuGcp();
			   $m_gcp = new Application_Model_EuGcpMapper();
			   
			   $tegc   = new Application_Model_EuTegc();
			   $m_tegc = new Application_Model_EuTegcMapper();
			   
			   $cc   = new Application_Model_EuCompteCredit();
			   $m_cc = new Application_Model_EuCompteCreditMapper();
			   
			   $ccts   = new Application_Model_EuCompteCreditTs();
			   $m_ccts = new Application_Model_EuCompteCreditTsMapper();
			   
			   $smc   = new Application_Model_EuSmc();
			   $m_smc = new Application_Model_EuSmcMapper();

               $membre = new Application_Model_EuMembre();
	           $m_membre  = new Application_Model_EuMembreMapper();
			   $membremorale = new Application_Model_EuMembreMorale();
	           $m_membremorale  = new Application_Model_EuMembreMoraleMapper();
			   
               $vendeur = $sessionmembre->code_membre;
			   $beneficiaire = $request->getParam("code_benef");
			   $code_tegc  = $request->getParam("code_tegc");
			   $code_tegcbenef  = $request->getParam("code_tegcbenef");
			   $montant = $request->getParam("montant_bl");
			   $id_canton = "";
			   
			   $code_produit = "";
			   $compte_bc = "";
			   $comptets_bc = "";
			   
			   $date_all = new Zend_Date(Zend_Date::ISO_8601);
               $date_alloc = clone $date_all;
			   $date_debut = new Zend_Date(Zend_Date::ISO_8601);
               $date_deb = clone $date_debut;
			   
			   $date_fin = $date_deb;
			   $date_fin->addDay(30);
			   
			   $compte_gcp_vendeur = 'NB-TPAGCP-'.$vendeur;
			   $compte_gcp_beneficiaire = 'NB-TPAGCP-'.$beneficiaire;
			  
			   if(substr($vendeur,19,1) == "P") {
			     $compte_bc =  "NB-TPAGCRPG-".$vendeur;
			     $comptets_bc =  "NB-TSRPG-".$vendeur;
                 $code_produit = "RPGnr";				 
               } else {
                 $comptets_bc =  "NB-TSGCI-".$vendeur;
				 $compte_bc =  "NB-TPAGCI-".$vendeur;
				 $code_produit = "Inr";
               }
			   
			   if(substr($vendeur,19,1) == 'P')  {
					$findvendeur = $m_membre->find($vendeur,$membre);
					if($membre->desactiver == 1)  {
						$db->rollback();
						$this->view->error = "Ce membre dont le code membre  ".$vendeur."  n'est pas autoriser à effectuer de cette opération  ...";
				        return;
				    }
				} else {
					$findvendeur = $m_membremorale->find($vendeur,$membremorale);
					if($membremorale->desactiver == 1)  {
						$db->rollback();
		                $this->view->error = "Ce membre dont le code membre  ".$vendeur."  n'est pas autoriser à effectuer de cette opération  ...";
					    return;
					}
				}
				
				if(substr($beneficiaire,19,1) == 'P')  {
				    $findmembre = $m_membre->find($beneficiaire,$membre);
				    if($findmembre == false) {
				        $db->rollback();
		                $this->view->error = "Le code membre du bénéficiaire  ".$beneficiaire."  est introuvable ...";
					    return;
				    }

                    if($membre->desactiver == 1)  {
						$db->rollback();
		                $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					    return;
					}
					
			    } else {
				    $findmembre = $m_membremorale->find($beneficiaire,$membremorale);
				    if($findmembre == false) {
					    $db->rollback();
		                $this->view->error = "Le code membre du bénéficiaire  ".$beneficiaire."  est introuvable ...";
					    return;
				    }
                    
					if($membremorale->desactiver == 1)  {
						$db->rollback();
		                $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					    return;
					}

			    }
			   
			    if($code_tegc == $code_tegcbenef) {
			        $db->rollback();
		            $this->view->error = "Impossible de faire l'approvisionnement à vous-même ...";
				    return;
			    }
			   
			    $res = $m_compte->find($compte_gcp_vendeur,$compte);
			    $rep = $m_tegc->find($code_tegc,$tegc);
			   
			   
			    if(($compte->getSolde() < $montant) ||  ($tegc->getSolde_tegc() < $montant)) {
			        $db->rollback();
		            $this->view->error = "Le solde du Terminal d'Echange du membre apporteur est insuffisant pour effectuer cette operation ...";
				    return;       
			    }
				
				//Enregistrement dans la table eu_echange
                $count_ech = $m_echange->findConuter() + 1;
			   
			    $echange->setId_echange($count_ech);
			    if(substr($vendeur,19,1) == "P") {
			      $echange->setCode_membre($vendeur);
				  $echange->setCode_membre_morale(Null);
			    } else {
			      $echange->setCode_membre_morale($vendeur);
				  $echange->setCode_membre(Null);
			    }
			    $echange->setMontant($montant)
			            ->setDate_echange($date_alloc->toString('yyyy-MM-dd'))
					    ->setId_utilisateur(Null)
					    ->setType_echange('NB/NB')
					    ->setCat_echange('GCP')
					    ->setAgio(0)
                        ->setCompenser(0)
                        ->setCode_produit($code_produit)
                        ->setMontant_echange($montant)
                        ->setCode_compte_obt($compte_bc);
			    $m_echange->save($echange);
			   
			    // Mise à jour du compte gcp vendeur ou prestataire
				$compte->setSolde($compte->getSolde() - $montant);
                $m_compte->update($compte);

				//Mise à jour du Terminal d'Echange vendeur ou prestataire
				$tegc->setMontant_utilise($tegc->getMontant_utilise() + $montant);
				$tegc->setSolde_tegc($tegc->getSolde_tegc() - $montant);
				$m_tegc->update($tegc);
				
				//Enrégistrement dans la table eu_approvisionnement
				$count_appro = $approvisionnement_mapper->findConuter() + 1;
				$approvisionnement->setId_approvisionnement($count_appro);
			    $approvisionnement->setCode_membre_apporteur($vendeur);
			    $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			    $approvisionnement->setDate_approvisionnement($date_alloc->toString('yyyy-MM-dd HH:mm:ss'));
			    $approvisionnement->setType_approvisionnement("APPRO_BL");
			    $approvisionnement->setMontant_approvisionnement($montant);
				$approvisionnement->setId_canton($membre->id_canton);
			    $approvisionnement_mapper->save($approvisionnement);
				
				
				//Mise à jour des GCP Vendeur ou Prestataire
				$gcps = $m_gcp->findGcpByTegcp($code_tegc);
				$reste = $montant;
				if(count($gcps) > 0 && $gcps != false) {
				     $j = 0;
                     while($reste > 0 && $j < count($gcps)) {
                       $rowgcp = $gcps[$j];
                       if($rowgcp->getReste() < $reste) {
						  //Enrégistrement dans la table eu_detail_approvisionnement
					      $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					      $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					      $detailapprovisionnement->setId_approvisionnement($count_appro);
				          $detailapprovisionnement->setId_credit($rowgcp->getId_credit());
					      $detailapprovisionnement->setCode_compte($compte_gcp_vendeur);
					      $detailapprovisionnement->setMontant_detail_approvisionnement($rowgcp->getReste());
					      $detailapprovisionnement_mapper->save($detailapprovisionnement);
								
                          $reste = $reste - $rowgcp->getReste();						 
                          //Mise à jour des GCP
                          $rowgcp->setMont_preleve($rowgcp->getMont_preleve() + $rowgcp->getReste());
                          $rowgcp->setReste(0);
                          $m_gcp->update($rowgcp);
                          $j = $j + 1;
                   		} else {
						  //Enrégistrement dans la table eu_detail_approvisionnement
					      $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					      $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					      $detailapprovisionnement->setId_approvisionnement($count_appro);
				          $detailapprovisionnement->setId_credit($rowgcp->getId_credit());
					      $detailapprovisionnement->setCode_compte($compte_gcp_vendeur);
					      $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					      $detailapprovisionnement_mapper->save($detailapprovisionnement);
								
                          //Mise à jour des GCP
						  $rowgcp->setMont_preleve($rowgcp->getMont_preleve() + $reste);
                          $rowgcp->setReste($rowgcp->getReste() - $reste);
                          $m_gcp->update($rowgcp);
						  
                          $reste = 0;
                          $j = $j + 1;						  
                        }
                        						
				      }
				   } else {
					  $db->rollback();
		              $this->view->error = "Le solde des details de GCP  est vide ...";
				      return;
				   }
				   
				   //Enrégistrement dans la table eu_operation
				   //$countop = $m_operation->findConuter() + 1;
				   //$operation->setId_operation($countop)
					
				   $operation->setDate_op($date_alloc->toString('yyyy-MM-dd'))
                            ->setHeure_op($date_alloc->toString('hh:mm:ss'))
                            ->setId_utilisateur(Null)
							->setMontant_op($montant)
                            ->setCode_produit('GCP')
                            ->setLib_op('APPROVISIONNEMENT DU GCP')
                            ->setType_op('APPROVISIONNEMENT')
                            ->setCode_cat('TPAGCP');
                   if(substr($vendeur,19,1) == "P") {
                        $operation->setCode_membre($vendeur);
                   } else {
                        $operation->setCode_membre_morale($vendeur);
                   }
                   $m_operation->save($operation);
				   $countop = $db->lastInsertId();
				   
				   //Enregistrement dans la table eu_compte_credit
                   $maxcc = $m_cc->findConuter() + 1;
                   $source = $vendeur.$date_alloc->toString('yyyyMMddHHmmss');
                   $cc->setId_credit($maxcc)
                      ->setCode_produit($code_produit)
                      ->setMontant_place($montant)
                      ->setDatedeb($date_deb->toString('yyyy-MM-dd'))
                      ->setDatefin($date_fin->toString('yyyy-MM-dd'))
                      ->setDate_octroi($date_alloc->toString('yyyy-MM-dd'))
                      ->setSource($source)
                      ->setCode_compte($compte_bc)
                      ->setId_operation($countop)
                      ->setBnp(0)
                      ->setCode_type_credit(NULL)
                      ->setPrk(0)
                      ->setCompte_source($compte_gcp_vendeur)
                      ->setMontant_credit(0)
                      ->setRenouveller('N')
                      ->setDomicilier(0)
                      ->setAffecter(0)
                      ->setKrr('N')
                      ->setCode_membre($vendeur);
                    $m_cc->save($cc);
					
					//Enregistrement dans la table eu_cnp
					$maxcnp = $m_cnp->findConuter() + 1;
					$cnp->setId_cnp($maxcnp)
						->setId_credit($maxcc)
                        ->setDate_cnp($date_alloc->toString('yyyy-MM-dd'))
                        ->setMont_debit($montant)
                        ->setMont_credit($montant)
                        ->setSolde_cnp(0)
                        ->setType_cnp($code_produit)
                        ->setSource_credit($source)
                        ->setCode_capa(null)
                        ->setTransfert_gcp(0)
						->setId_gcp(null)
                        ->setOrigine_cnp('FG'.$code_produit);
                    $m_cnp->save($cnp);

					//Enrégistrement dans la table eu_cnp_entree
					$ecnp = new Application_Model_EuCnpEntree();
					$select_cnpe = $tcnp->select();
                    $select_cnpe->from($tcnp,array('MAX(id_cnp_entree) as count'));
                    $result_cnpe = $tcnp->fetchAll($select_cnpe);
                    $row_cnpe = $result_cnpe->current();
								
					$ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
						    ->setId_cnp($maxcnp)
                            ->setDate_entree($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setMont_cnp_entree($montant)
                            ->setType_cnp_entree('GCP');
                    $tcnp->insert($ecnp->toArray());
					   
					//Enrégistrement dans la table eu_smc
                    $maxsmc = $m_smc->findConuter() + 1;
				    $smc->setId_smc($maxsmc)
						->setDate_smc($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                        ->setMontant($montant)
                        ->setEntree(0)
                        ->setSortie(0)
                        ->setSolde(0)
					    ->setId_credit($maxcc)
                        ->setSource_credit($source)
                        ->setMontant_solde($montant)
                        ->setOrigine_smc(0);
                     $smc->setType_smc('CNCSnr');
                     $smc->setCode_smcipn(null);
				     $smc->setCode_smcipnp(null);
                     $smc->setCode_capa(null);
				     $smc->setCode_domicilier(null);
					 $m_smc->save($smc);
							
				     //Enrégistrement dans la table eu_gcp du bénéficiaire
				     $maxgcp = $m_gcp->findConuter() + 1;
					 $gcp->setId_gcp($maxgcp)
					     ->setId_credit($maxcc)
						 ->setCode_tegc($code_tegcbenef)
						 ->setSource($source)
						 ->setDate_conso($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
						 ->setCode_membre($beneficiaire)
                         ->setCode_cat("TPAGCP")
                         ->setMont_gcp($montant)
                         ->setMont_preleve(0)
                         ->setReste($montant)
						 ->setBon_id(NULL)
						 ->setType_gcp(NULL);
                      $m_gcp->save($gcp);
							 
					  //Enrégistrement dans la table eu_cnp pour le gcp
					  $maxcnpgcp = $m_cnp->findConuter() + 1;
					  $sourcegcp = $beneficiaire.$date_alloc->toString('yyyyMMddHHmmss');
					  $cnp->setId_cnp($maxcnpgcp)
						  ->setId_credit(NULL)
                          ->setDate_cnp($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                          ->setMont_debit($montant)
                                 ->setMont_credit(0)
                                 ->setSolde_cnp($montant)
                                 ->setType_cnp($code_produit)
                                 ->setSource_credit($sourcegcp)
                                 ->setCode_capa(null)
                                 ->setTransfert_gcp(0)
						         ->setId_gcp($maxgcp)
                                 ->setOrigine_cnp($code_produit);
                       $m_cnp->save($cnp);
							
					   //Enrégistrement dans la table eu_credit_consommer
                       $maxconso = $m_credit_conso->findConuter() + 1;
                       $credit_conso->setId_consommation($maxconso)
                                    ->setId_operation($countop)
                                    ->setCode_produit($code_produit)
                                    ->setCode_compte($compte_bc)
                                    ->setCode_membre_dist($beneficiaire)
                                    ->setMont_consommation($montant)
                                    ->setDate_consommation($date_alloc->toString('yyyy-MM-dd'))
                                    ->setHeure_consommation($date_alloc->toString('HH:mm:ss'))
								    ->setId_credit(NULL)
								    ->setBon_id(NULL)
								    ->setType_produit(NULL)
								    ->setCode_type_credit(NULL);
										 		 
					    if(substr($vendeur,19,1) == "P") {			 
						   $credit_conso->setCode_membre($vendeur);			 
					    } else {
						   $credit_conso->setCode_membre_morale($vendeur);
					    }
					    $m_credit_conso->save($credit_conso);
							
						$res1 = $m_compte->find($compte_gcp_beneficiaire,$compte);
			            $rep1 = $m_tegc->find($code_tegcbenef,$tegc);
							
						//Mise à jour du compte gcp bénéficiaire
				        $compte->setSolde($compte->getSolde() + $montant);
                        $m_compte->update($compte);

				        //Mise à jour du Terminal d'Echange bénéficiaire
				        $tegc->setMontant($tegc->getMontant() + $montant);
				        $tegc->setSolde_tegc($tegc->getSolde_tegc() + $montant);
					    $m_tegc->update($tegc);
							
			            $db->commit();
					    $sessionmembre->error = "Operation  bien  effectuee ...";
                        $this->_redirect('/souscriptionbon/addblappro');
			   
		   } catch(Exception $exc) {
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                $db->rollback();
                return;
           }
	   
	   
	   }  
   }
   
   
    public function addblapprodgAction()  {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if(!isset($sessionmembre->code_membre)) {
           $this->_redirect('/');
        }
	   
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
	   
	    $t_tegc = new Application_Model_DbTable_EuTegc();
	    $selection = $t_tegc->select();
	    $selection->where('nom_tegc is not null');
	    if(substr($sessionmembre->code_membre,19,1) == "M") {
	        $selection->where('code_membre like ?',$sessionmembre->code_membre);
	    } else {
            $selection->where('code_membre_physique like ?',$sessionmembre->code_membre);
        }
	   
	    $selection->order('nom_tegc asc');
        $tes = $t_tegc->fetchAll($selection);
	    $this->view->tes = $tes;
	   
	    $request = $this->getRequest();
	    if($request->isPost ()) {
	        $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
	            $echange   = new Application_Model_EuEchange();
			    $m_echange = new Application_Model_EuEchangeMapper();
			   
			    $credit_conso   = new Application_Model_EuCreditConsommer();
			    $m_credit_conso = new Application_Model_EuCreditConsommerMapper();
			   
                $compte   = new Application_Model_EuCompte();
			    $m_compte = new Application_Model_EuCompteMapper();
			   
			    $approvisionnement = new Application_Model_EuApprovisionnement();
			    $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			    $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			    $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			   
			    $operation   = new Application_Model_EuOperation();
			    $m_operation = new Application_Model_EuOperationMapper();
			   
			    $bon   = new Application_Model_EuBon();
			    $m_bon = new Application_Model_EuBonMapper();
			   
			    $cnp   = new Application_Model_EuCnp();
			    $m_cnp = new Application_Model_EuCnpMapper();
			   
			    $tcnp = new Application_Model_DbTable_EuCnpEntree();
			   
			    $gcp   = new Application_Model_EuGcp();
			    $m_gcp = new Application_Model_EuGcpMapper();
			   
			    $tegc   = new Application_Model_EuTegc();
			    $m_tegc = new Application_Model_EuTegcMapper();
			   
			    $cc   = new Application_Model_EuCompteCredit();
			    $m_cc = new Application_Model_EuCompteCreditMapper();
			   
			    $ccts   = new Application_Model_EuCompteCreditTs();
			    $m_ccts = new Application_Model_EuCompteCreditTsMapper();
			   
			    $smc   = new Application_Model_EuSmc();
			    $m_smc = new Application_Model_EuSmcMapper();
			   
			    $membre = new Application_Model_EuMembre();
	            $m_membre  = new Application_Model_EuMembreMapper();
			    $membremorale = new Application_Model_EuMembreMorale();
	            $m_membremorale  = new Application_Model_EuMembreMoraleMapper();
			   
                $vendeur = $sessionmembre->code_membre;
			    $beneficiaire = $request->getParam("code_benef");
			    $code_tegc  = $request->getParam("code_tegc");
			    $code_tegcbenef  = $request->getParam("code_tegcbenef");
			    $montant = $request->getParam("montant_bl");
			    $id_canton = $request->getParam("id_canton");
			    $code_produit = "";
			    $compte_bc = "";
			    $comptets_bc = "";
			   
			    $date_all = new Zend_Date(Zend_Date::ISO_8601);
                $date_alloc = clone $date_all;
			    $date_debut = new Zend_Date(Zend_Date::ISO_8601);
                $date_deb = clone $date_debut;
			   
			    $date_fin = $date_deb;
			    $date_fin->addDay(30);
			   
			    $compte_gcp_vendeur = 'NB-TPAGCP-'.$vendeur;
			    $compte_gcp_beneficiaire = 'NB-TPAGCP-'.$beneficiaire;
			  
			    if(substr($vendeur,19,1) == "P") {
			        $compte_bc =  "NB-TPAGCRPG-".$vendeur;
			        $comptets_bc =  "NB-TSRPG-".$vendeur;
                    $code_produit = "RPGnr";				 
                } else {
                    $comptets_bc =  "NB-TSGCI-".$vendeur;
				    $compte_bc =  "NB-TPAGCI-".$vendeur;
				    $code_produit = "Inr";
                }
				
				if(substr($vendeur,19,1) == 'P')  {
					$findvendeur = $m_membre->find($vendeur,$membre);
					if($membre->desactiver == 1)  {
						$db->rollback();
						$this->view->error = "Ce membre dont le code membre  ".$vendeur."  n'est pas autoriser à effectuer de cette opération  ...";
				        return;
				    }
				}  else {
					$findvendeur = $m_membremorale->find($vendeur,$membremorale);
					if($membremorale->desactiver == 1)  {
						$db->rollback();
		                $this->view->error = "Ce membre dont le code membre  ".$vendeur."  n'est pas autoriser à effectuer de cette opération  ...";
					    return;
					}
					
				}
			   
			    if(substr($beneficiaire,19,1) == 'P')  {
				    $findmembre = $m_membre->find($beneficiaire,$membre);
				    if($findmembre == false) {
				        $db->rollback();
		                $this->view->error = "Le code membre du bénéficiaire  ".$beneficiaire."  est introuvable ...";
					    return;
				    }

                    if($membre->desactiver == 1)  {
						$db->rollback();
		                $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					    return;
					}
					
			    } else {
				    $findmembre = $m_membremorale->find($beneficiaire,$membremorale);
				    if($findmembre == false) {
					    $db->rollback();
		                $this->view->error = "Le code membre du bénéficiaire  ".$beneficiaire."  est introuvable ...";
					    return;
				    }
                    
					if($membremorale->desactiver == 1)  {
						$db->rollback();
		                $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					    return;
					}

			    }
			   
			    if($code_tegc == $code_tegcbenef) {
			        $db->rollback();
		            $this->view->error = "Impossible de faire l'approvisionnement à vous-même ...";
				    return;
			    }
			   
			    $res = $m_compte->find($compte_gcp_vendeur,$compte);
			    $rep = $m_tegc->find($code_tegc,$tegc);
			   
			   
			    if(($compte->getSolde() < $montant) ||  ($tegc->getSolde_tegc() < $montant)) {
			        $db->rollback();
		            $this->view->error = "Le solde du Terminal d'Echange du membre apporteur est insuffisant pour effectuer cette operation ...";
				    return;       
			    }
				
				if(isset($_POST['confirmation']) && $_POST['confirmation'] == 1)  {
				    $sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
					if($sms_connexion = $sms_connexion_mapper->fetchAllByCodeMembre4($sessionmembre->code_membre)) {
						$this->view->sms_connexion_code_envoi = $sms_connexion->sms_connexion_code_envoi;
						
						$compteur = Util_Utils::findConuter() + 1; 
                        Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, $sms_connexion->sms_connexion_code_recu);
					    
						$sessionmembre->confirmation_envoi = $sms_connexion->sms_connexion_code_envoi;
						$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...2";
						$sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->tegcbeneficiaire = $code_tegcbenef;
						$sessionmembre->tegc = $code_tegc;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
                        $db->commit();
						
					} else {
						do  {
						    $code_envoi = strtoupper(Util_Utils::genererCodeSMS(5));
					        $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
					        $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeEnvoi($code_envoi);
					    } while(count($sms_connexion2) > 0);
						
						do  {
						    $code_recu = strtoupper(Util_Utils::genererCodeSMS(5));
							$sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
							$sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeRecu($code_recu);
					    } while(count($sms_connexion2) > 0);
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
					    $sms_connexion1 = new Application_Model_EuSmsConnexion();
					    $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

					    $compteur = $sms_connexion1_mapper->findConuter() + 1;
					    $sms_connexion1->setSms_connexion_id($compteur);
					    $sms_connexion1->setSms_connexion_code_envoi($code_envoi);
					    $sms_connexion1->setSms_connexion_code_recu("Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement BL : ".$code_recu.". Merci. ESMC");
					    $sms_connexion1->setSms_connexion_code_membre($sessionmembre->code_membre);
					    $sms_connexion1->setSms_connexion_utilise(0);
					    $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $sms_connexion1_mapper->save($sms_connexion1);

						$compteur = Util_Utils::findConuter() + 1; 
                        Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, "Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");        

						
				        $this->view->sms_connexion_code_envoi = $sms_connexion1->sms_connexion_code_envoi;
					    $sessionmembre->confirmation_envoi = $sms_connexion1->sms_connexion_code_envoi;
						$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
						$sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->tegcbeneficiaire = $code_tegcbenef;
						$sessionmembre->tegc = $code_tegc;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
					    $db->commit();
					}
				
				} else if(isset($_POST['confirmation']) && $_POST['confirmation'] == 2) {
					$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
                    $sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_recu']);
					if($sms_connexion->sms_connexion_code_envoi == $sessionmembre->confirmation_envoi && $sms_connexion->sms_connexion_code_membre == $sessionmembre->code_membre){
				        $sms_connexion1 = new Application_Model_EuSmsConnexion();
						$sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
						$sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

						$sms_connexion1->setSms_connexion_utilise(1);
						$sms_connexion1_mapper->update($sms_connexion1);

						$sessionmembre->confirmation_envoi = "";
			            //Enregistrement dans la table eu_echange
                        $count_ech = $m_echange->findConuter() + 1;
			   
			            $echange->setId_echange($count_ech);
			            if(substr($vendeur,19,1) == "P") {
			                $echange->setCode_membre($vendeur);
				        $echange->setCode_membre_morale(Null);
			        } else {
			            $echange->setCode_membre_morale($vendeur);
				        $echange->setCode_membre(Null);
			        }
			   
			        $echange->setMontant($montant)
			                ->setDate_echange($date_alloc->toString('yyyy-MM-dd'))
					        ->setId_utilisateur(Null)
					        ->setType_echange('NB/NB')
					        ->setCat_echange('GCP')
					        ->setAgio(0)
                            ->setCompenser(0)
                            ->setCode_produit($code_produit)
                            ->setMontant_echange($montant)
                            ->setCode_compte_obt($compte_bc);
			        $m_echange->save($echange);
				
				    // Mise à jour du compte gcp vendeur ou prestataire
				    $compte->setSolde($compte->getSolde() - $montant);
                    $m_compte->update($compte);

				    // Mise à jour du Terminal d'Echange vendeur ou prestataire
				    $tegc->setMontant_utilise($tegc->getMontant_utilise() + $montant);
				    $tegc->setSolde_tegc($tegc->getSolde_tegc() - $montant);
				    $m_tegc->update($tegc);
				
				    //Enrégistrement dans la table eu_approvisionnement
				    $count_appro = $approvisionnement_mapper->findConuter() + 1;
				    $approvisionnement->setId_approvisionnement($count_appro);
			        $approvisionnement->setCode_membre_apporteur($vendeur);
			        $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			        $approvisionnement->setDate_approvisionnement($date_alloc->toString('yyyy-MM-dd HH:mm:ss'));
			        $approvisionnement->setType_approvisionnement("APPRO_BL");
			        $approvisionnement->setMontant_approvisionnement($montant);
				    $approvisionnement->setId_canton($id_canton);
			        $approvisionnement_mapper->save($approvisionnement);
				
				    //Mise à jour des GCP Vendeur ou Prestataire
				    $gcps = $m_gcp->findGcpByTegcp($code_tegc);
				    $reste = $montant;
				    if(count($gcps) > 0 && $gcps != false) {
				        $j = 0;
                        while($reste > 0 && $j < count($gcps)) {
                            $rowgcp = $gcps[$j];
                            if($rowgcp->getReste() < $reste) {
								//Enrégistrement dans la table eu_detail_approvisionnement
					            $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					            $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					            $detailapprovisionnement->setId_approvisionnement($count_appro);
				                $detailapprovisionnement->setId_credit($rowgcp->getId_credit());
					            $detailapprovisionnement->setCode_compte($compte_gcp_vendeur);
					            $detailapprovisionnement->setMontant_detail_approvisionnement($rowgcp->getReste());
					            $detailapprovisionnement_mapper->save($detailapprovisionnement);
								
                                $reste = $reste - $rowgcp->getReste();						 
                                //Mise à jour des GCP
                                $rowgcp->setMont_preleve($rowgcp->getMont_preleve() + $rowgcp->getReste());
                                $rowgcp->setReste(0);
                                $m_gcp->update($rowgcp);
                                $j = $j + 1;
						  
                   		    } else {
								//Enrégistrement dans la table eu_detail_approvisionnement
					            $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					            $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					            $detailapprovisionnement->setId_approvisionnement($count_appro);
				                $detailapprovisionnement->setId_credit($rowgcp->getId_credit());
					            $detailapprovisionnement->setCode_compte($compte_gcp_vendeur);
					            $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					            $detailapprovisionnement_mapper->save($detailapprovisionnement);
								
                                // Mise à jour des GCP
						        $rowgcp->setMont_preleve($rowgcp->getMont_preleve() + $reste);
                                $rowgcp->setReste($rowgcp->getReste() - $reste);
                                $m_gcp->update($rowgcp);
						  
                                $reste = 0;
                                $j = $j + 1;							
                            }						 
				        }
				    }  else  {
					    $db->rollback();
		                $this->view->error = "Le solde des details de GCP  est vide ...";
				        return;
				    }
				
				    //Enrégistrement dans la table eu_operation
				    //$countop = $m_operation->findConuter() + 1;
				    //$operation->setId_operation($countop)
					
				    $operation->setDate_op($date_alloc->toString('yyyy-MM-dd'))
                            ->setHeure_op($date_alloc->toString('hh:mm:ss'))
                            ->setId_utilisateur(Null)
							->setMontant_op($montant)
                            ->setCode_produit('GCP')
                            ->setLib_op('APPROVISIONNEMENT DU GCP')
                            ->setType_op('APPROVISIONNEMENT')
                            ->setCode_cat('TPAGCP');
                    if(substr($vendeur,19,1) == "P") {
                        $operation->setCode_membre($vendeur);
                    } else {
                        $operation->setCode_membre_morale($vendeur);
                    }
                    $m_operation->save($operation);
					$countop = $db->lastInsertId();
				
                    // Enregistrement dans la table eu_compte_credit
                    $maxcc = $m_cc->findConuter() + 1;
                    $source = $vendeur.$date_alloc->toString('yyyyMMddHHmmss');
                    $cc->setId_credit($maxcc)
                       ->setCode_produit($code_produit)
                       ->setMontant_place($montant)
                       ->setDatedeb($date_deb->toString('yyyy-MM-dd'))
                       ->setDatefin($date_fin->toString('yyyy-MM-dd'))
                       ->setDate_octroi($date_alloc->toString('yyyy-MM-dd'))
                       ->setSource($source)
                       ->setCode_compte($compte_bc)
                       ->setId_operation($countop)
                       ->setBnp(0)
                       ->setCode_type_credit(NULL)
                       ->setPrk(0)
                       ->setCompte_source($compte_gcp_vendeur)
                       ->setMontant_credit(0)
                       ->setRenouveller('N')
                       ->setDomicilier(0)
                       ->setAffecter(0)
                       ->setKrr('N')
                       ->setCode_membre($vendeur);
                    $m_cc->save($cc);
					
					//Enregistrement dans la table eu_cnp
					$maxcnp = $m_cnp->findConuter() + 1;
					$cnp->setId_cnp($maxcnp)
						->setId_credit($maxcc)
                        ->setDate_cnp($date_alloc->toString('yyyy-MM-dd'))
                        ->setMont_debit($montant)
                        ->setMont_credit($montant)
                        ->setSolde_cnp(0)
                        ->setType_cnp($code_produit)
                        ->setSource_credit($source)
                        ->setCode_capa(null)
                        ->setTransfert_gcp(0)
						->setId_gcp(null)
                        ->setOrigine_cnp('FG'.$code_produit);
                    $m_cnp->save($cnp);

					//Enrégistrement dans la table eu_cnp_entree
					$ecnp = new Application_Model_EuCnpEntree();
					$select_cnpe = $tcnp->select();
                    $select_cnpe->from($tcnp,array('MAX(id_cnp_entree) as count'));
                    $result_cnpe = $tcnp->fetchAll($select_cnpe);
                    $row_cnpe = $result_cnpe->current();
								
					$ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
						    ->setId_cnp($maxcnp)
                            ->setDate_entree($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setMont_cnp_entree($montant)
                            ->setType_cnp_entree('GCP');
                    $tcnp->insert($ecnp->toArray());
					   
					//Enrégistrement dans la table eu_smc
                    $maxsmc = $m_smc->findConuter() + 1;
				    $smc->setId_smc($maxsmc)
						    ->setDate_smc($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setMontant($montant)
                            ->setEntree(0)
                            ->setSortie(0)
                            ->setSolde(0)
							->setId_credit($maxcc)
                            ->setSource_credit($source)
                            ->setMontant_solde($montant)
                               ->setOrigine_smc(0);
                            $smc->setType_smc('CNCSnr');
                            $smc->setCode_smcipn(null);
							$smc->setCode_smcipnp(null);
                            $smc->setCode_capa(null);
							$smc->setCode_domicilier(null);
							$m_smc->save($smc);
							
						    // Enrégistrement dans la table eu_gcp du bénéficiaire
						    $maxgcp = $m_gcp->findConuter() + 1;
							$gcp->setId_gcp($maxgcp)
							    ->setId_credit($maxcc)
								->setCode_tegc($code_tegcbenef)
								->setSource($source)
								->setDate_conso($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
								->setCode_membre($beneficiaire)
                                ->setCode_cat("TPAGCP")
                                ->setMont_gcp($montant)
                                ->setMont_preleve(0)
                                ->setReste($montant)
								->setBon_id(NULL)
								->setType_gcp(NULL);
                            $m_gcp->save($gcp);
							 
							// Enrégistrement dans la table eu_cnp pour le gcp
							$maxcnpgcp = $m_cnp->findConuter() + 1;
							$sourcegcp = $beneficiaire.$date_alloc->toString('yyyyMMddHHmmss');
					        $cnp->setId_cnp($maxcnpgcp)
						        ->setId_credit(NULL)
                                 ->setDate_cnp($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                                 ->setMont_debit($montant)
                                 ->setMont_credit(0)
                                 ->setSolde_cnp($montant)
                                 ->setType_cnp($code_produit)
                                 ->setSource_credit($sourcegcp)
                                 ->setCode_capa(null)
                                 ->setTransfert_gcp(0)
						         ->setId_gcp($maxgcp)
                                 ->setOrigine_cnp($code_produit);
                            $m_cnp->save($cnp);
							
						    // Enrégistrement dans la table eu_credit_consommer
                            $maxconso = $m_credit_conso->findConuter() + 1;
                            $credit_conso->setId_consommation($maxconso)
                                         ->setId_operation($countop)
                                         ->setCode_produit($code_produit)
                                         ->setCode_compte($compte_bc)
                                         ->setCode_membre_dist($beneficiaire)
                                         ->setMont_consommation($montant)
                                         ->setDate_consommation($date_alloc->toString('yyyy-MM-dd'))
                                         ->setHeure_consommation($date_alloc->toString('HH:mm:ss'))
										 ->setId_credit(NULL)
										 ->setBon_id(NULL)
										 ->setType_produit(NULL)
										 ->setCode_type_credit(NULL);
										 		 
							if(substr($vendeur,19,1) == "P") {			 
							  $credit_conso->setCode_membre($vendeur);			 
							} else {
							  $credit_conso->setCode_membre_morale($vendeur);
							}
							$m_credit_conso->save($credit_conso);
							
							$res1 = $m_compte->find($compte_gcp_beneficiaire,$compte);
			                $rep1 = $m_tegc->find($code_tegcbenef,$tegc);
							
							//Mise à jour du compte gcp bénéficiaire
				            $compte->setSolde($compte->getSolde() + $montant);
                            $m_compte->update($compte);

				            //Mise à jour du Terminal d'Echange bénéficiaire
				            $tegc->setMontant($tegc->getMontant() + $montant);
				            $tegc->setSolde_tegc($tegc->getSolde_tegc() + $montant);
							$m_tegc->update($tegc);
							
			                $db->commit();
							$sessionmembre->error = "Operation  bien  effectuee ...";
                            $this->_redirect('/souscriptionbon/addblappro');
							
					} else {
					    $sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
					    $sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->tegcbeneficiaire = $code_tegcbenef;
						$sessionmembre->tegc = $code_tegc;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
					}
					
				}
										
	        } catch(Exception $exc) {
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                $db->rollback();
                return;
            }
	    }

    }
	
	

    public function listblapproapporteurAction() {
	    /* page espacepersonnel/listblappro - Liste des bl approvisionnés */
  		$sessionmembre = new Zend_Session_Namespace('membre');
  		//$this->_helper->layout->disableLayout();
  		$this->_helper->layout()->setLayout('layoutpublicesmcperso');

  		if (!isset($sessionmembre->code_membre)) {
  		   $this->_redirect('/');
  		}
		
		$blappro = new Application_Model_EuApprovisionnementMapper();
  		$this->view->entries = $blappro->fetchAllByApporteurBL($sessionmembre->code_membre);

  		$this->view->tabletri = 1;
	}
	
	
	
	public function listblapprobeneficiaireAction() {
        /* page espacepersonnel/listrecu - Liste des reçus */
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
           $this->_redirect('/');
        }

        $blappro = new Application_Model_EuApprovisionnementMapper();
        $this->view->entries = $blappro->fetchAllByBeneficiaireBL($sessionmembre->code_membre);

        $this->view->tabletri = 1;

    }	

    
    public function addbsapproAction()  {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if(!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }
	   
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
	  
	    $date_id = Zend_Date::now();
	    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	    $periode = Util_Utils::getParametre('periode','valeur');
        $date_fin->addDay($periode);
	   
	    $request = $this->getRequest ();
	    if($request->isPost()) {
	        $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
	            $compte = new Application_Model_EuCompte();
			    $compte_mapper =  new Application_Model_EuCompteMapper();
			 
			    $cc_mapper =  new Application_Model_EuCompteCreditMapper();
			    $cc = new Application_Model_EuCompteCredit();
			 
			    $place = new Application_Model_EuOperation();
			    $place_mapper = new Application_Model_EuOperationMapper();
			 
			    $membre = new Application_Model_EuMembre();
			    $membre_mapper =  new Application_Model_EuMembreMapper();
			 
			    $approvisionnement = new Application_Model_EuApprovisionnement();
			    $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			    $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			    $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			 
			    $apporteur = $sessionmembre->code_membre;
			    $beneficiaire = $request->getParam("code_benef");
			    $montant = $request->getParam("montant_bs");
			    $type_compte = $request->getParam("type_compte");
			    $id_canton = $request->getParam("id_canton");
			  
			    $type_ressource = "NR";
			    if($type_compte == "TCNCS") {
			        $code_cat = "TCNCS";
			    }
              
                if($type_compte == "TPN") {
                    $code_cat = "TPN";
                }
			  
			    $produit = "CNCSnr";
			  
			    $retour = false;
				$findapporteur = $membre_mapper->find($apporteur,$membre);
			    if($membre->desactiver == 1)  {
			        $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bs = $montant;
				    $this->view->error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
				    return;
				}
				
			    if(strlen($beneficiaire) != 20) {
			        $db->rollback();
			        $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bs = $montant;
		            $this->view->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
			        return;
			    }						
			 
			    $retour = $membre_mapper->find($beneficiaire,$membre);
			    if(!$retour) {
                    $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bs = $montant;
                    $this->view->error = "Le code membre du membre bénéficiaire est inexistant ...";
                    return;
                }
				
				if($membre->desactiver == 1)  {
				    $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bs = $montant;
		            $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					return;
				}
			 
			    if($beneficiaire == $apporteur) {
                    $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bs = $montant;
                    $this->view->error = "Vous ne pouvez pas approvisionner les bon de salaire à vous même";
                    return;
                }
			  
			    $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			    $code_compte_beneficiaire = $type_ressource."-".$code_cat."-".$beneficiaire;
			  
			    $t_produit = new Application_Model_DbTable_EuCompteCredit();
                $select = $t_produit->select();
                $select->from($t_produit, array('sum(montant_credit) as somme'));
                $select->where('code_membre = ?', $apporteur);
                $select->where('code_compte like ?', $code_compte_apporteur);
			 
                $result = $t_produit->fetchAll($select);
                $row = $result->current();
			    $somme = $row['somme'];
			    if($somme == null) {
			        $somme = 0;
			    }
			 
			    $ret = $compte_mapper->find($code_compte_apporteur,$compte);
			 
			    if($compte->getSolde() < $montant) {
			        $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bs = $montant;
                    $this->view->error = "Le solde de votre compte de bon de salaire est insuffisant pour effectuer cet approvisionnement ...";
                    return;				
			    }
			 
			    if($somme < $montant) {
                    $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bs = $montant;
                    $this->view->error = "Votre bon de salaire de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ...";
                    return;
                }
				
				
				
				if(isset($_POST['confirmation']) && $_POST['confirmation'] == 1)  {
					$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
					if($sms_connexion = $sms_connexion_mapper->fetchAllByCodeMembre7($sessionmembre->code_membre)) {
					    $this->view->sms_connexion_code_envoi = $sms_connexion->sms_connexion_code_envoi;
						$compteur = Util_Utils::findConuter() + 1; 
                        Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, $sms_connexion->sms_connexion_code_recu);
					    
						$sessionmembre->confirmation_envoi = $sms_connexion->sms_connexion_code_envoi;
						$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...2";
						$sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->type_compte = $type_compte;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
                        $db->commit();	
						
					} else  {
						do  {
						    $code_envoi = strtoupper(Util_Utils::genererCodeSMS(5));
					        $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
					        $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeEnvoi($code_envoi);
					    } while(count($sms_connexion2) > 0);
						
						do  {
						    $code_recu = strtoupper(Util_Utils::genererCodeSMS(5));
							$sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
							$sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeRecu($code_recu);
					    } while(count($sms_connexion2) > 0);
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
					    $sms_connexion1 = new Application_Model_EuSmsConnexion();
					    $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

					    $compteur = $sms_connexion1_mapper->findConuter() + 1;
					    $sms_connexion1->setSms_connexion_id($compteur);
					    $sms_connexion1->setSms_connexion_code_envoi($code_envoi);
					    $sms_connexion1->setSms_connexion_code_recu("Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement BS : ".$code_recu.". Merci. ESMC");
					    $sms_connexion1->setSms_connexion_code_membre($sessionmembre->code_membre);
					    $sms_connexion1->setSms_connexion_utilise(0);
					    $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $sms_connexion1_mapper->save($sms_connexion1);

						$compteur = Util_Utils::findConuter() + 1; 
                        Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, "Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");        

				        $this->view->sms_connexion_code_envoi = $sms_connexion1->sms_connexion_code_envoi;
					    $sessionmembre->confirmation_envoi = $sms_connexion1->sms_connexion_code_envoi;
						$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
						$sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->type_compte = $type_compte;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
					    $db->commit();
					}
					
					
				} else if(isset($_POST['confirmation']) && $_POST['confirmation'] == 2) {
				
				    $sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
                    $sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_recu']);
				
				    if($sms_connexion->sms_connexion_code_envoi == $sessionmembre->confirmation_envoi && $sms_connexion->sms_connexion_code_membre == $sessionmembre->code_membre) {
			            
						$sms_connexion1 = new Application_Model_EuSmsConnexion();
						$sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
						$sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

						$sms_connexion1->setSms_connexion_utilise(1);
						$sms_connexion1_mapper->update($sms_connexion1);

						$sessionmembre->confirmation_envoi = "";
						
						//insertion dans la table eu_operation
			            $compteur = $place_mapper->findConuter() + 1;
			            $place->setId_operation($compteur)
			                  ->setDate_op($date_id->toString('yyyy-MM-dd'))
                              ->setHeure_op($date_id->toString('HH:mm:ss'))
                              ->setId_utilisateur(null)
                              ->setMontant_op($montant)
                              ->setCode_produit($produit)
                              ->setLib_op("Approvisionnement du ".$produit)
                              ->setType_op('APPRO_BS')
                              ->setCode_cat($code_cat);
				   
			            if(substr($beneficiaire,-1,1) == 'P') {	 
                            $place->setCode_membre($beneficiaire);
			            } else {
                            $place->setCode_membre_morale($beneficiaire);
                        }
                        $place_mapper->save($place);
			   
			            $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
			            $compte->setSolde($compte->getSolde() + $montant);
                        $compte_mapper->update($compte);
						
			            $cpte_origine = new Application_Model_EuCompte();
			            $res = $compte_mapper->find($code_compte_apporteur,$cpte_origine);
			            $cpte_origine->setSolde($cpte_origine->getSolde() - $montant);
                        $compte_mapper->update($cpte_origine);
			  
			            //Enrégistrement dans la table eu_approvisionnement
			            $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  
			            $approvisionnement->setId_approvisionnement($count_appro);
			            $approvisionnement->setCode_membre_apporteur($apporteur);
			            $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			            $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			            $approvisionnement->setType_approvisionnement("APPRO_BS");
			            $approvisionnement->setMontant_approvisionnement($montant);
			            $approvisionnement->setId_canton($id_canton);
			            $approvisionnement_mapper->save($approvisionnement);
			   
			            $credits = $cc_mapper->findByCompte($code_compte_apporteur);
			            if($credits != false) {
			                $j = 0;
                            $reste = $montant;
                            $nbre_credit = count($credits);
				            while($reste > 0 && $j < $nbre_credit)  {
					            $credit = $credits[$j];
					            $id = $credit->getId_credit();
					            if($reste > $credit->getMontant_credit()) {
					                //Enrégistrement dans la table eu_detail_approvisionnement
					                $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					                $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					                $detailapprovisionnement->setId_approvisionnement($count_appro);
				                    $detailapprovisionnement->setId_credit($id);
					                $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					                $detailapprovisionnement->setMontant_detail_approvisionnement($credit->getMontant_credit());
					                $detailapprovisionnement_mapper->save($detailapprovisionnement);
					   
					                //Enregistrement dans la table eu_compte_credit du bénéficiaire
					                $maxcc = $cc_mapper->findConuter() + 1;
					                $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					                $cc->setId_credit($maxcc)
					                   ->setCode_produit($credit->getCode_produit())
                                       ->setMontant_place($montant)
						               ->setDatedeb($credit->getDatedeb())
                                       ->setDatefin($credit->getDatefin())
                                       ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
						               ->setSource($source)
                                       ->setCode_compte($code_compte_beneficiaire)
                                       ->setId_operation($compteur)
                                       ->setBnp($credit->getBnp())
                                       ->setCode_type_credit($credit->getCode_type_credit())
                                       ->setPrk($credit->getPrk())
                                       ->setCompte_source($code_compte_apporteur)
                                       ->setMontant_credit($credit->getMontant_credit())
                                       ->setRenouveller($credit->getRenouveller())
                                       ->setDomicilier($credit->getDomicilier())
                                       ->setAffecter($credit->getAffecter())
                                       ->setKrr($credit->getKrr())
						               ->setType_produit($credit->getType_produit())
						               ->setCode_bnp($credit->getCode_bnp())
						               ->setNbre_renouvel($credit->getNbre_renouvel())
						               ->setType_recurrent($credit->getType_recurrent())
						               ->setDuree($credit->getDuree())
						               ->setId_bps($credit->getId_bps())
                                       ->setCode_membre($beneficiaire);
                                    $cc_mapper->save($cc);
					   
					                //Mise à jour du compte crédit cncs apporteur
                                    $reste = $reste - $credit->getMontant_credit();
                                    $credit->setMontant_credit(0);
                                    $cc_mapper->update($credit);
					   
				                } else {
					                //Enrégistrement dans la table eu_detail_approvisionnement
					                $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					                $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					                $detailapprovisionnement->setId_approvisionnement($count_appro);
				                    $detailapprovisionnement->setId_credit($id);
					                $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					                $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					                $detailapprovisionnement_mapper->save($detailapprovisionnement);	
					   
					                //Enregistrement dans la table eu_compte_credit du bénéficiaire
					                $maxcc = $cc_mapper->findConuter() + 1;
					                $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					   
					                $cc->setId_credit($maxcc)
                                       ->setCode_produit($credit->getCode_produit())
                                       ->setMontant_place($montant)
                                       ->setDatedeb($credit->getDatedeb())
                                       ->setDatefin($credit->getDatefin())
                                       ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                       ->setSource($source)
                                       ->setCode_compte($code_compte_beneficiaire)
                                       ->setId_operation($compteur)
                                       ->setBnp($credit->getBnp())
                                       ->setCode_type_credit($credit->getCode_type_credit())
                                       ->setPrk($credit->getPrk())
                                       ->setCompte_source($code_compte_apporteur)
                                       ->setMontant_credit($reste)
                                       ->setRenouveller($credit->getRenouveller())
                                       ->setDomicilier($credit->getDomicilier())
                                       ->setAffecter($credit->getAffecter())
                                       ->setKrr($credit->getKrr())
						               ->setType_produit($credit->getType_produit())
						               ->setCode_bnp($credit->getCode_bnp())
						               ->setNbre_renouvel($credit->getNbre_renouvel())
						               ->setType_recurrent($credit->getType_recurrent())
						               ->setDuree($credit->getDuree())
						               ->setId_bps($credit->getId_bps())
                                       ->setCode_membre($beneficiaire);
                                    $cc_mapper->save($cc);

                                    //Mise à jour du compte crédit apporteur
                                    $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                                    $cc_mapper->update($credit);
					                $reste = 0;					   
                                }					
				                $j++;
				            }
			   
			            } else {
			                $db->rollback();
				            $this->view->code_benef = $beneficiaire;
			                $this->view->montant_bs = $montant;
				            $this->view->error = "Il n'y a pas de bon de salaire correspondant à ce compte " . $produit;
                            return;   
			            }
			   
			            $db->commit();              
                        $sessionmembre->error = "Opération  bien  effectuée ...";
                        $this->_redirect('/souscriptionbon/addbsappro');
			   
			        } else  {
						$db->rollback();
					    $sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
					    $sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->type_compte = $type_compte;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
						return;
				    }
			   
			    }
				 
	        } catch (Exception $exc) {
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                $db->rollback();
                return;
            }
	  
	    }

    }



	


    public function addbsapproOLDAction()  {
       $sessionmembre = new Zend_Session_Namespace('membre');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcperso');

       if (!isset($sessionmembre->code_membre)) {
          $this->_redirect('/');
       }
	   
	   $t_zone = new Application_Model_DbTable_EuZone();
       $zones = $t_zone->fetchAll();
       $this->view->zones = $zones;
       $t_pays = new Application_Model_DbTable_EuPays();
       $pays = $t_pays->fetchAll();
       $this->view->pays = $pays;
       $t_region = new Application_Model_DbTable_EuRegion();
       $regions = $t_region->fetchAll();
       $this->view->regions = $regions;
       $t_prefecture = new Application_Model_DbTable_EuPrefecture();
       $prefectures = $t_prefecture->fetchAll();
       $this->view->prefectures = $prefectures;
       $t_canton = new Application_Model_DbTable_EuCanton();
       $cantons = $t_canton->fetchAll();
       $this->view->cantons = $cantons;
	  
	   $date_id = Zend_Date::now();
	   $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	   $periode = Util_Utils::getParametre('periode','valeur');
       $date_fin->addDay($periode);
	   
	   $request = $this->getRequest ();
	   if($request->isPost ()) {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
          try {
	          $compte = new Application_Model_EuCompte();
			  $compte_mapper =  new Application_Model_EuCompteMapper();
			 
			  $cc_mapper =  new Application_Model_EuCompteCreditMapper();
			  $cc = new Application_Model_EuCompteCredit();
			 
			  $place = new Application_Model_EuOperation();
			  $place_mapper = new Application_Model_EuOperationMapper();
			 
			  $membre = new Application_Model_EuMembre();
			  $membre_mapper =  new Application_Model_EuMembreMapper();
			 
			  $approvisionnement = new Application_Model_EuApprovisionnement();
			  $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			  $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			  $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			 
			  $apporteur = $sessionmembre->code_membre;
			  $beneficiaire = $request->getParam("code_benef");
			  $montant = $request->getParam("montant_bs");
			  $type_compte = $request->getParam("type_compte");
			  $id_canton = $request->getParam("id_canton");
			  
			  $type_ressource = "NR";
			  if($type_compte == "TCNCS") {
			    $code_cat = "TCNCS";
			  }
              
              if($type_compte == "TPN") {
                $code_cat = "TPN";
              }
			  
			  $produit = "CNCSnr";
			  
			  $retour = false;
			  if(strlen($beneficiaire) != 20) {
			    $db->rollback();
			    $this->view->code_benef = $beneficiaire;
			    $this->view->montant_bs = $montant;
		        $this->view->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
			    return;
			  }						
			 
			  $retour = $membre_mapper->find($beneficiaire,$membre);
			  if (!$retour) {
                 $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bs = $montant;
                 $this->view->error = "Le code membre du membre bénéficiaire est inexistant ...";
                 return;
              }
			 
			  if ($beneficiaire == $apporteur) {
                 $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bs = $montant;
                 $this->view->error = "Vous ne pouvez pas approvisionner les bon de salaire à vous même";
                 return;
              }
			  
			  $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			  $code_compte_beneficiaire = $type_ressource."-".$code_cat."-".$beneficiaire;
			  
			  $t_produit = new Application_Model_DbTable_EuCompteCredit();
              $select = $t_produit->select();
              $select->from($t_produit, array('sum(montant_credit) as somme'));
              $select->where('code_membre = ?', $apporteur);
              $select->where('code_compte like ?', $code_compte_apporteur);
			 
              $result = $t_produit->fetchAll($select);
              $row = $result->current();
			  $somme = $row['somme'];
			  if($somme == null) {
			    $somme = 0;
			  }
			 
			  $ret = $compte_mapper->find($code_compte_apporteur,$compte);
			 
			  if($compte->getSolde() < $montant) {
			     $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bs = $montant;
                 $this->view->error = "Le solde de votre compte de bon de salaire est insuffisant pour effectuer cet approvisionnement ...";
                 return;				
			  }
			 
			  if ($somme < $montant) {
                 $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bs = $montant;
                 $this->view->error = "Votre bon de salaire de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ...";
                 return;
              }
			  
			  // insertion dans la table eu_operation
			  $compteur = $place_mapper->findConuter() + 1;
			  $place->setId_operation($compteur)
			       ->setDate_op($date_id->toString('yyyy-MM-dd'))
                   ->setHeure_op($date_id->toString('HH:mm:ss'))
                   ->setId_utilisateur(null)
                   ->setMontant_op($montant)
                   ->setCode_produit($produit)
                   ->setLib_op("Approvisionnement du ".$produit)
                   ->setType_op('APPRO_BS')
                   ->setCode_cat($code_cat);
				   
			   if(substr($beneficiaire,-1,1) == 'P') {	 
                  $place->setCode_membre($beneficiaire);
			   } else {
                  $place->setCode_membre_morale($beneficiaire);
               }
				   
               $place_mapper->save($place);
			   
			   $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
			   $compte->setSolde($compte->getSolde() + $montant);
               $compte_mapper->update($compte);
						
			   $cpte_origine = new Application_Model_EuCompte();
			   $res = $compte_mapper->find($code_compte_apporteur,$cpte_origine);
			   $cpte_origine->setSolde($cpte_origine->getSolde() - $montant);
               $compte_mapper->update($cpte_origine);
			  
			   //Enrégistrement dans la table eu_approvisionnement
			   $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  
			   $approvisionnement->setId_approvisionnement($count_appro);
			   $approvisionnement->setCode_membre_apporteur($apporteur);
			   $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			   $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			   $approvisionnement->setType_approvisionnement("APPRO_BS");
			   $approvisionnement->setMontant_approvisionnement($montant);
			   $approvisionnement->setId_canton($id_canton);
			   $approvisionnement_mapper->save($approvisionnement);
			   
			   $credits = $cc_mapper->findByCompte($code_compte_apporteur);
			   if($credits != false) {
			     $j = 0;
                 $reste = $montant;
                 $nbre_credit = count($credits);
				 while($reste > 0 && $j < $nbre_credit)  {
					$credit = $credits[$j];
					$id = $credit->getId_credit();
					if($reste > $credit->getMontant_credit()) {
					  //Enrégistrement dans la table eu_detail_approvisionnement
					  $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					  $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					  $detailapprovisionnement->setId_approvisionnement($count_appro);
				      $detailapprovisionnement->setId_credit($id);
					  $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					  $detailapprovisionnement->setMontant_detail_approvisionnement($credit->getMontant_credit());
					  $detailapprovisionnement_mapper->save($detailapprovisionnement);
					   
					  //Enregistrement dans la table eu_compte_credit du bénéficiaire
					  $maxcc = $cc_mapper->findConuter() + 1;
					  $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					  $cc->setId_credit($maxcc)
					     ->setCode_produit($credit->getCode_produit())
                         ->setMontant_place($montant)
						 ->setDatedeb($credit->getDatedeb())
                         ->setDatefin($credit->getDatefin())
                         ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
						 ->setSource($source)
                         ->setCode_compte($code_compte_beneficiaire)
                         ->setId_operation($compteur)
                         ->setBnp($credit->getBnp())
                         ->setCode_type_credit($credit->getCode_type_credit())
                         ->setPrk($credit->getPrk())
                         ->setCompte_source($code_compte_apporteur)
                         ->setMontant_credit($credit->getMontant_credit())
                         ->setRenouveller($credit->getRenouveller())
                         ->setDomicilier($credit->getDomicilier())
                         ->setAffecter($credit->getAffecter())
                         ->setKrr($credit->getKrr())
						 ->setType_produit($credit->getType_produit())
						 ->setCode_bnp($credit->getCode_bnp())
						 ->setNbre_renouvel($credit->getNbre_renouvel())
						 ->setType_recurrent($credit->getType_recurrent())
						 ->setDuree($credit->getDuree())
						 ->setId_bps($credit->getId_bps())
                         ->setCode_membre($beneficiaire);
                       $cc_mapper->save($cc);
					   
					   //Mise à jour du compte crédit cncs apporteur
                       $reste = $reste - $credit->getMontant_credit();
                       $credit->setMontant_credit(0);
                       $cc_mapper->update($credit);
					   
				    } else {
					   //Enrégistrement dans la table eu_detail_approvisionnement
					   $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					   $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					   $detailapprovisionnement->setId_approvisionnement($count_appro);
				       $detailapprovisionnement->setId_credit($id);
					   $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					   $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					   $detailapprovisionnement_mapper->save($detailapprovisionnement);	
					   
					   //Enregistrement dans la table eu_compte_credit du bénéficiaire
					   $maxcc = $cc_mapper->findConuter() + 1;
					   $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					   
					   $cc->setId_credit($maxcc)
                          ->setCode_produit($credit->getCode_produit())
                          ->setMontant_place($montant)
                          ->setDatedeb($credit->getDatedeb())
                          ->setDatefin($credit->getDatefin())
                          ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                          ->setSource($source)
                          ->setCode_compte($code_compte_beneficiaire)
                          ->setId_operation($compteur)
                          ->setBnp($credit->getBnp())
                          ->setCode_type_credit($credit->getCode_type_credit())
                          ->setPrk($credit->getPrk())
                          ->setCompte_source($code_compte_apporteur)
                          ->setMontant_credit($reste)
                          ->setRenouveller($credit->getRenouveller())
                          ->setDomicilier($credit->getDomicilier())
                          ->setAffecter($credit->getAffecter())
                          ->setKrr($credit->getKrr())
						  ->setType_produit($credit->getType_produit())
						  ->setCode_bnp($credit->getCode_bnp())
						  ->setNbre_renouvel($credit->getNbre_renouvel())
						  ->setType_recurrent($credit->getType_recurrent())
						  ->setDuree($credit->getDuree())
						  ->setId_bps($credit->getId_bps())
                          ->setCode_membre($beneficiaire);
                       $cc_mapper->save($cc);

                       //Mise à jour du compte crédit apporteur
                       $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                       $cc_mapper->update($credit);
					   $reste = 0;					   
                    }					
				    $j++;
				 }
			   
			   } else {
			     $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bs = $montant;
				 $this->view->error = "Il n'y a pas de bon de salaire correspondant à ce compte " . $produit;
                 return;   
			   }
			   
			   $db->commit();              
               $sessionmembre->error = "Opération  bien  effectuée ...";
               $this->_redirect('/souscriptionbon/addbsappro');
			     
	     } catch (Exception $exc) {
            $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
            $db->rollback();
            return;
         }
	  
	   }

   }
   
   
   public function listbsapproapporteurAction()    {
	    /* page espacepersonnel/listrecu - Liste des reçus */
  		$sessionmembre = new Zend_Session_Namespace('membre');
  		//$this->_helper->layout->disableLayout();
  		$this->_helper->layout()->setLayout('layoutpublicesmcperso');

  		if (!isset($sessionmembre->code_membre))  {
  		    $this->_redirect('/');
  		}
		
		$bsappro = new Application_Model_EuApprovisionnementMapper();
  		$this->view->entries = $bsappro->fetchAllByApporteurBS($sessionmembre->code_membre);

  		$this->view->tabletri = 1;
	}
	
	
	
	public function listbsapprobeneficiaireAction() {
      /* page espacepersonnel/listrecu - Liste des reçus */
      $sessionmembre = new Zend_Session_Namespace('membre');
      //$this->_helper->layout->disableLayout();
      $this->_helper->layout()->setLayout('layoutpublicesmcperso');

      if (!isset($sessionmembre->code_membre)) {
         $this->_redirect('/');
      }

      $bsappro = new Application_Model_EuApprovisionnementMapper();
      $this->view->entries = $bsappro->fetchAllByBeneficiaireBS($sessionmembre->code_membre);

      $this->view->tabletri = 1;

    }
	
	
	
	public function addintapproAction()   {
	    $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if(!isset($sessionmembre->code_membre)) {
           $this->_redirect('/');
        }
		
		$t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
		
	    $date_id = Zend_Date::now();
	    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	    $periode = Util_Utils::getParametre('periode','valeur');
        $date_fin->addDay($periode);
	    $request = $this->getRequest();
		 
		if($request->isPost())  {
	        $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
                $compte = new Application_Model_EuCompte();
			    $compte_mapper =  new Application_Model_EuCompteMapper();
				
				$capa = new Application_Model_EuCapa();
			    $capa_mapper =  new Application_Model_EuCapaMapper();
			 
			    $place = new Application_Model_EuOperation();
			    $place_mapper = new Application_Model_EuOperationMapper();
			 
			    $cnp = new Application_Model_EuCnp();
			    $cnp_mapper = new Application_Model_EuCnpMapper();
			 
			    $cc_mapper =  new Application_Model_EuCompteCreditMapper();
			    $cc = new Application_Model_EuCompteCredit();
			    
			    $membre = new Application_Model_EuMembre();
			    $membre_mapper =  new Application_Model_EuMembreMapper();
			  
			    $membremorale = new Application_Model_EuMembreMorale();
			    $membremorale_mapper =  new Application_Model_EuMembreMoraleMapper();
			 
			    $approvisionnement = new Application_Model_EuApprovisionnement();
			    $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			    $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			    $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
				
				$tcnp = new Application_Model_DbTable_EuCnpEntree();
			 
			    $type_ressource = "";
			    $code_cat = "";
			    $code_cat1 = "";
				$produit = "";
				
			    $apporteur = $sessionmembre->code_membre;
			    $beneficiaire = $request->getParam("code_benef");
			    $montant = $request->getParam("montant_bai");
			    $cat_compte = $request->getParam("cat_compte");
			    $id_canton = $request->getParam("id_canton");

                if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
				    $type_ressource = "NN";
			        $code_cat = "CAPA";
				    $code_cat1 = "CAPA";
                    $cumul = $capa_mapper->CumulBAiByMembre($apporteur,$cat_compte);				  
			    } elseif($cat_compte == "BC") {
				    $type_ressource = "NB";
			        $code_cat = "TFS";
				    $code_cat1 = "TFS";
				    $produit = "FS";
				}
				
				if(substr($apporteur,-1,1) == 'P')  {
				    $findapporteur = $membre_mapper->find($apporteur,$membre);
					if($membre->desactiver == 1)  {
						$db->rollback();
						$this->view->code_benef = $beneficiaire;
			            $this->view->montant_bai = $montant;
						$this->view->error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
				        return;
				    }
				} else  {
					$findapporteur = $membremorale_mapper->find($apporteur,$membremorale);
					if($membremorale->desactiver == 1)  {
						$db->rollback();
						$this->view->code_benef = $beneficiaire;
			            $this->view->montant_bai = $montant;
		                $this->view->error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
					    return;
					}
				}
				
				$retour = false;
			    if(strlen($beneficiaire) != 20) {
			       $db->rollback();
			       $this->view->code_benef = $beneficiaire;
			       $this->view->montant_bai = $montant;
		           $this->view->error = "Le Code Membre est errone. Verifiez bien le nombre de caracteres du Code Membre. Merci...";
			       return;
			    }
			  
			    if(substr($beneficiaire,-1,1) == 'P') {
			       $retour = $membre_mapper->find($beneficiaire,$membre);
			    } else {
			       $retour = $membremorale_mapper->find($beneficiaire,$membremorale); 
			    }
			  
			    if(!$retour)  {
                  $db->rollback();
				  $this->view->code_benef = $beneficiaire;
			      $this->view->montant_bai = $montant;
                  $this->view->error = "Le code membre du  beneficiaire est inexistant ...";
                  return;
                }
				
				if(substr($beneficiaire,-1,1) == 'P') {
					if($membre->desactiver == 1)  {
						$db->rollback();
						$this->view->code_benef = $beneficiaire;
			            $this->view->montant_bai = $montant;
		                $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					    return;
					}
				} else {
					if($membremorale->desactiver == 1)  {
						$db->rollback();
						$this->view->code_benef = $beneficiaire;
			            $this->view->montant_bai = $montant;
		                $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					    return;
					}
				}
				
				
			  
			    if($beneficiaire == $apporteur) {
                   $db->rollback();
				   $this->view->code_benef = $beneficiaire;
			       $this->view->montant_bai = $montant;
                   $this->view->error = "Vous ne pouvez pas approvisionner les bons d'achat interne à vous meme ...";
                   return;
                }
			   
			    /*if($cat_compte == "CNCS" && substr($beneficiaire,-1,1) == 'M')  {
			       $db->rollback();
				   $this->view->code_benef = $beneficiaire;
			       $this->view->montant_bai = $montant;
                   $this->view->error = "Seules les membres personnes physiques disposent de compte salaire ...";
                   return;
			    }*/
				
				$code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			    $code_compte_beneficiaire = $type_ressource."-".$code_cat1."-".$beneficiaire;
				
				$ret = $compte_mapper->find($code_compte_apporteur,$compte);
				
				if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
				   
				    if($cumul < $montant) {
				        $db->rollback();
				        $this->view->code_benef = $beneficiaire;
			            $this->view->montant_bai = $montant;
                        $this->view->error = "Le cumul des montants de votre compte de bon d'achat interne est insuffisant ...";
                        return;
				    }
				   
				} 
				
				if($compte->getSolde() == 0) {
			        $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bai = $montant;
                    $this->view->error = "Le solde de votre compte de bon d'achat interne est egale a 0 ...";
                    return;				
			    }
				
				
			    if($compte->getSolde() < $montant) {
			        $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bai = $montant;
                    $this->view->error = "Le solde de votre compte de bon d'achat interne est insuffisant pour effectuer cet approvisionnement ...";
                    return;				
			    }
				
				if(isset($_POST['confirmation']) && $_POST['confirmation'] == 1)  {
					
					$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
					if($sms_connexion = $sms_connexion_mapper->fetchAllByCodeMembre6($sessionmembre->code_membre)) {
					    $this->view->sms_connexion_code_envoi = $sms_connexion->sms_connexion_code_envoi;
						$compteur = Util_Utils::findConuter() + 1; 
                        Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, $sms_connexion->sms_connexion_code_recu);
					    
						$sessionmembre->confirmation_envoi = $sms_connexion->sms_connexion_code_envoi;
						$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...2";
						$sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->cat_compte = $cat_compte;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
                        $db->commit();	
						
					} else  {
						do  {
						    $code_envoi = strtoupper(Util_Utils::genererCodeSMS(5));
					        $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
					        $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeEnvoi($code_envoi);
					    } while(count($sms_connexion2) > 0);
						
						do  {
						    $code_recu = strtoupper(Util_Utils::genererCodeSMS(5));
							$sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
							$sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeRecu($code_recu);
					    } while(count($sms_connexion2) > 0);
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
					    $sms_connexion1 = new Application_Model_EuSmsConnexion();
					    $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

					    $compteur = $sms_connexion1_mapper->findConuter() + 1;
					    $sms_connexion1->setSms_connexion_id($compteur);
					    $sms_connexion1->setSms_connexion_code_envoi($code_envoi);
					    $sms_connexion1->setSms_connexion_code_recu("Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement BAi : ".$code_recu.". Merci. ESMC");
					    $sms_connexion1->setSms_connexion_code_membre($sessionmembre->code_membre);
					    $sms_connexion1->setSms_connexion_utilise(0);
					    $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $sms_connexion1_mapper->save($sms_connexion1);

						$compteur = Util_Utils::findConuter() + 1; 
                        Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, "Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");        

				        $this->view->sms_connexion_code_envoi = $sms_connexion1->sms_connexion_code_envoi;
					    $sessionmembre->confirmation_envoi = $sms_connexion1->sms_connexion_code_envoi;
						$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
						$sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->cat_compte = $cat_compte;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
					    $db->commit();
					}
				
				} else if(isset($_POST['confirmation']) && $_POST['confirmation'] == 2) {
					
					$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
                    $sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_recu']);
					
					if($sms_connexion->sms_connexion_code_envoi == $sessionmembre->confirmation_envoi && $sms_connexion->sms_connexion_code_membre == $sessionmembre->code_membre) {
					
					    $sms_connexion1 = new Application_Model_EuSmsConnexion();
						$sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
						$sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

						$sms_connexion1->setSms_connexion_utilise(1);
						$sms_connexion1_mapper->update($sms_connexion1);

						$sessionmembre->confirmation_envoi = "";
					
				        if(!$ret) {
			                $compte->setSolde($compte->getSolde() - $montant);
                            $compte_mapper->update($compte);
				        }
				
				        $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
				        if(!$result) {
                            $compte->setCode_cat($code_cat1)
                               ->setCode_compte($code_compte_beneficiaire)
						       ->setCode_type_compte($type_ressource)
                               ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                               ->setDesactiver(0)
                               ->setLib_compte($code_cat1)
                               ->setSolde($montant);
						 
				            if(substr($beneficiaire,-1,1) == 'M') {	 
                                $compte->setCode_membre(NULL);
                                $compte->setCode_membre_morale($code);
				            } else {
				                $compte->setCode_membre($code);
                                $compte->setCode_membre_morale(null);
				            }                    
                            $compte_mapper->save($compte);
				  
                        } else {
			                $compte->setSolde($compte->getSolde() + $montant);
                            $compte_mapper->update($compte);
				        }
				
				        //Enrégistrement dans la table eu_approvisionnement
			            $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  
			            $approvisionnement->setId_approvisionnement($count_appro);
			            $approvisionnement->setCode_membre_apporteur($apporteur);
			            $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			            $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			            $approvisionnement->setType_approvisionnement("APPRO_BAI");
			            $approvisionnement->setMontant_approvisionnement($montant);
				        $approvisionnement->setId_canton($id_canton);
			            $approvisionnement_mapper->save($approvisionnement);
				
				        if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
				            $creditcapas = $capa_mapper->fetchAllBAiByMembre($apporteur,$cat_compte);
				            if($creditcapas != NULL) {
				                $j = 0;
                                $reste = $montant;
                                $nbre_capa = count($creditcapas);
					            while($reste > 0 && $j < $nbre_capa)  {
				                    $creditcapa = $creditcapas[$j];
                                    $id = $creditcapa->getCode_capa();
                                    if($reste > $creditcapa->getMontant_solde()) {
						                //Enrégistrement dans la table eu_detail_approvisionnement
			                            $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
			                            $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
				                        $detailapprovisionnement->setId_approvisionnement($count_appro);
				                        $detailapprovisionnement->setId_credit(null);
						                $detailapprovisionnement->setCode_capa($id);
				                        $detailapprovisionnement->setCode_compte($code_compte_apporteur);
			                            $detailapprovisionnement->setMontant_detail_approvisionnement($creditcapa->getMontant_solde());
				                        $detailapprovisionnement_mapper->save($detailapprovisionnement);
						   
						                //Mise à jour du compte crédit apporteur
                                        $reste = $reste - $creditcapa->getMontant_solde();
						                $creditcapa->setMontant_utiliser($creditcapa->getMontant_utiliser() + $creditcapa->getMontant_solde());
                                        $creditcapa->setMontant_solde(0);
                                        $capa_mapper->update($creditcapa);
						   
						            } else {
						                //Enrégistrement dans la table eu_detail_approvisionnement
			                            $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
			                            $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
				                        $detailapprovisionnement->setId_approvisionnement($count_appro);
				                        $detailapprovisionnement->setId_credit(null);
						                $detailapprovisionnement->setCode_capa($id);
				                        $detailapprovisionnement->setCode_compte($code_compte_apporteur);
			                            $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
				                        $detailapprovisionnement_mapper->save($detailapprovisionnement);
						
						                //Mise à jour du compte crédit apporteur
						                $creditcapa->setMontant_utiliser($creditcapa->getMontant_utiliser() + $reste);
                                        $creditcapa->setMontant_solde($creditcapa->getMontant_solde() - $reste);
                                        $capa_mapper->update($credit);
					                    $reste = 0;
						            }
					                $j++;  
				                }
					 
					            //Creation du capa du beneficiaire
					            $code_capa = 'CAPA' .$date_id->toString('yyyyMMddHHmmss');
					            $capa->setCode_capa($code_capa)
                                     ->setCode_compte($code_compte_beneficiaire)
                                     ->setDate_capa($date_id->toString('yyyy-MM-dd'))
                                     ->setHeure_capa($date_id->toString('HH:mm:ss'))
                                     ->setCode_membre($beneficiaire)
                                     ->setMontant_capa($montant)
                                     ->setMontant_utiliser(0)
                                     ->setMontant_solde($montant)
                                     ->setId_operation(null)
                                     ->setType_capa($cat_compte)
                                     ->setEtat_capa('Actif')
			                         ->setCode_produit($cat_compte)
                                     ->setOrigine_capa("BAI");
                                $capa_mapper->save($capa); 
				            }
				  
				        } 
				
				        /*
				            elseif($cat_compte == "BC") {
				            $t_produit = new Application_Model_DbTable_EuCompteCredit();
                            $select = $t_produit->select();
                            $select->from($t_produit, array('sum(montant_credit) as somme'));
                            $select->where('code_membre = ?', $apporteur);
                            $select->where('code_compte like ?', $code_compte_apporteur);
			 
                            $result = $t_produit->fetchAll($select);
                            $row = $result->current();
			                $somme = $row['somme'];
			                if($somme == null) {
			                    $somme = 0;
			                }
					
					        if($somme < $montant) {
                            $db->rollback();
				            $this->view->code_benef = $beneficiaire;
			                $this->view->montant_bai = $montant;
                            $this->view->error = "Votre bon de consommation de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ...";
                            return;
                            }
					
					        $credits = $cc_mapper->fetchAllCreditByCompte($apporteur,$code_compte_apporteur,$produit);
					        if($credits != NULL) {
					        $j = 0;
                            $reste = $montant;
                            $nbre_credit = count($credits);
					        while($reste > 0 && $j < $nbre_credit)  {
					        $credit = $credits[$j];
                            $id = $credit->getId_credit();
				            $source_credit = $credit->getSource();
                            if($reste > $credit->getMontant_credit()) {
						    $maxcc = $cc_mapper->findConuter() + 1;
					        $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					        $cc->setId_credit($maxcc)
						        ->setCode_produit($produit)
                                ->setMontant_place($montant)
						        ->setDatedeb($credit->getDatedeb())
						        ->setDatefin($credit->getDatefin())
                                ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                ->setSource($source)
                                ->setCode_compte($code_compte_beneficiaire)
                                ->setId_operation($compteur)
                                ->setBnp($credit->getBnp())
                                ->setCode_type_credit($credit->getCode_type_credit())
                                ->setPrk($credit->getPrk())
                                ->setCompte_source($code_compte_apporteur)
                                ->setMontant_credit($credit->getMontant_credit())
                                ->setRenouveller($credit->getRenouveller())
                                ->setDomicilier($credit->getDomicilier())
                                ->setAffecter($credit->getAffecter())
                                ->setKrr($credit->getKrr())
						        ->setType_produit($credit->getType_produit())
						        ->setCode_bnp($credit->getCode_bnp())
						        ->setNbre_renouvel($credit->getNbre_renouvel())
						        ->setType_recurrent($credit->getType_recurrent())
						        ->setDuree($credit->getDuree())
						        ->setId_bps($credit->getId_bps())
                                ->setCode_membre($beneficiaire);
                            $cc_mapper->save($cc);
							
							//Enregistrement dans la table eu_cnp du beneficiaire
					        $maxcnp = $cnp_mapper->findConuter() + 1;
					        $cnp->setId_cnp($maxcnp)
						    ->setId_credit($maxcc)
                            ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                            ->setMont_debit($credit->getMontant_credit())
                            ->setMont_credit(0)
                            ->setSolde_cnp($credit->getMontant_credit())
                            ->setType_cnp($produit)
                            ->setSource_credit($source)
                            ->setCode_capa(null)
                            ->setTransfert_gcp(0)
						    ->setId_gcp(null)
                            ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit);
                            $cnp_mapper->save($cnp);
							
							//Mise à jour de la table eu_cnp apporteur
						    $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
						    if($cnp_credit != null) {
					        $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                            //Mise à jour du cnp
                            $cnp->setMont_credit($cnp->getMont_credit() + $credit->getMontant_credit())
                            ->setSolde_cnp($cnp->getSolde_cnp() - $credit->getMontant_credit());
                            $cnp_mapper->update($cnp);
					       
						    $ecnp = new Application_Model_EuCnpEntree();
						    $select_cnpe = $tcnp->select();
                            $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                            $result_cnpe = $tcnp->fetchAll($select_cnpe);
                            $row_cnpe = $result_cnpe->current();
										
                            $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					        ->setId_cnp($cnp->getId_cnp())
                            ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                            ->setMont_cnp_entree($credit->getMontant_credit())
                            ->setType_cnp_entree($credit->getCode_produit());
                            $tcnp->insert($ecnp->toArray());
					        } else  {
						    $db->rollback();
				            $this->view->code_benef = $beneficiaire;
			                $this->view->montant_bai = $montant;
				            $this->view->error = "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit;
                            return;
						    }
					        //Mise à jour du compte crédit apporteur
                            $reste = $reste - $credit->getMontant_credit();
                            $credit->setMontant_credit(0);
                            $cc_mapper->update($credit);
						  
						    } else {
						    //Enrégistrement dans la table eu_detail_approvisionnement
					        $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					        $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					        $detailapprovisionnement->setId_approvisionnement($count_appro);
				            $detailapprovisionnement->setId_credit($id);
					        $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					        $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					        $detailapprovisionnement_mapper->save($detailapprovisionnement);

                            $maxcc = $cc_mapper->findConuter() + 1;
					        $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					        $cc->setId_credit($maxcc)
						    ->setCode_produit($produit1)
                            ->setMontant_place($montant)
                            ->setDatedeb($credit->getDatedeb())
                            ->setDatefin($credit->getDatefin())
                            ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                            ->setSource($source)
                            ->setCode_compte($code_compte_beneficiaire)
                            ->setId_operation($compteur)
                            ->setBnp($credit->getBnp())
                            ->setCode_type_credit($credit->getCode_type_credit())
                            ->setPrk($credit->getPrk())
                            ->setCompte_source($code_compte_apporteur)
                            ->setMontant_credit($reste)
                            ->setRenouveller($credit->getRenouveller())
                            ->setDomicilier($credit->getDomicilier())
                            ->setAffecter($credit->getAffecter())
                            ->setKrr($credit->getKrr())
						    ->setType_produit($credit->getType_produit())
						    ->setCode_bnp($credit->getCode_bnp())
						    ->setNbre_renouvel($credit->getNbre_renouvel())
						    ->setType_recurrent($credit->getType_recurrent())
						    ->setDuree($credit->getDuree())
						    ->setId_bps($credit->getId_bps())
                            ->setCode_membre($beneficiaire);
                            $cc_mapper->save($cc);

                            //Enregistrement dans la table eu_cnp du beneficiaire
					        $maxcnp = $cnp_mapper->findConuter() + 1;
					        $cnp->setId_cnp($maxcnp)
						    ->setId_credit($maxcc)
                            ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                            ->setMont_debit($reste)
                            ->setMont_credit(0)
                            ->setSolde_cnp($reste)
                            ->setType_cnp($produit1)
                            ->setSource_credit($source)
                            ->setCode_capa(null)
                            ->setTransfert_gcp(0)
						    ->setId_gcp(null)
                            ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit);
                            $cnp_mapper->save($cnp);

                            //Mise à jour de la table eu_cnp apporteur
						    $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);							 
						    if($cnp_credit != NULL) { 
                            $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                            //Mise a jour du cnp
                            $cnp->setMont_credit($cnp->getMont_credit() + $reste)
                            ->setSolde_cnp($cnp->getSolde_cnp() - $reste);
                            $cnp_mapper->update($cnp);
					       
						    $ecnp = new Application_Model_EuCnpEntree();
						    $select_cnpe = $tcnp->select();
                            $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                            $result_cnpe = $tcnp->fetchAll($select_cnpe);
                            $row_cnpe = $result_cnpe->current();
										
                            $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					        ->setId_cnp($cnp->getId_cnp())
                            ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                            ->setMont_cnp_entree($reste)
                            ->setType_cnp_entree($credit->getCode_produit());
                            $tcnp->insert($ecnp->toArray());								 
							} else {
						    $db->rollback();
				            $this->view->code_benef = $beneficiaire;
			                $this->view->montant_bai = $montant;
				            $this->view->error = "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit;
                            return;
						    }
							//Mise à jour du compte crédit apporteur
                            $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                            $cc_mapper->update($credit);
					        $reste = 0;
						    }
					        $j++;
					        }
					        } else {
                            $db->rollback();
				            $this->view->code_benef = $beneficiaire;
			                $this->view->montant_bai = $montant;
				            $this->view->error = "Il n'y a pas de bon de consommation correspondant à ce compte " . $produit;
                            return;
			                }    
			                }
				            */
				
			                $db->commit();              
                            $sessionmembre->error = "Operation  bien  effectuee ...";
                            $this->_redirect('/souscriptionbon/addintappro');
					
					} else  {
						$db->rollback();
					    $sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
					    $sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->cat_compte = $cat_compte;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
						return;
					}

                }				
			
			} catch (Exception $exc) {
              $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
              $db->rollback();
              return;
            }
	 
	    }
	 
	}
	
	
	
	
	
	
	public function addintapprooldAction() {
	     $sessionmembre = new Zend_Session_Namespace('membre');
         //$this->_helper->layout->disableLayout();
         $this->_helper->layout()->setLayout('layoutpublicesmcperso');

         if(!isset($sessionmembre->code_membre)) {
           $this->_redirect('/');
         }
		
		 $t_zone = new Application_Model_DbTable_EuZone();
         $zones = $t_zone->fetchAll();
         $this->view->zones = $zones;
         $t_pays = new Application_Model_DbTable_EuPays();
         $pays = $t_pays->fetchAll();
         $this->view->pays = $pays;
         $t_region = new Application_Model_DbTable_EuRegion();
         $regions = $t_region->fetchAll();
         $this->view->regions = $regions;
         $t_prefecture = new Application_Model_DbTable_EuPrefecture();
         $prefectures = $t_prefecture->fetchAll();
         $this->view->prefectures = $prefectures;
         $t_canton = new Application_Model_DbTable_EuCanton();
         $cantons = $t_canton->fetchAll();
         $this->view->cantons = $cantons;
		
	     $date_id = Zend_Date::now();
	     $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	     $periode = Util_Utils::getParametre('periode','valeur');
         $date_fin->addDay($periode);
	     $request = $this->getRequest();
		 
		 if($request->isPost ())  {
	        $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
            try {
                $compte = new Application_Model_EuCompte();
			    $compte_mapper =  new Application_Model_EuCompteMapper();
				
				$capa = new Application_Model_EuCapa();
			    $capa_mapper =  new Application_Model_EuCapaMapper();
			 
			    $place = new Application_Model_EuOperation();
			    $place_mapper = new Application_Model_EuOperationMapper();
			 
			    $cnp = new Application_Model_EuCnp();
			    $cnp_mapper = new Application_Model_EuCnpMapper();
			 
			    $cc_mapper =  new Application_Model_EuCompteCreditMapper();
			    $cc = new Application_Model_EuCompteCredit();
			    
			    $membre = new Application_Model_EuMembre();
			    $membre_mapper =  new Application_Model_EuMembreMapper();
			  
			    $membremorale = new Application_Model_EuMembreMorale();
			    $membremorale_mapper =  new Application_Model_EuMembreMoraleMapper();
			 
			    $approvisionnement = new Application_Model_EuApprovisionnement();
			    $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			    $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			    $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
				
				$tcnp = new Application_Model_DbTable_EuCnpEntree();
			 
			    $type_ressource = "";
			    $code_cat = "";
			    $code_cat1 = "";
				$produit = "";
				
			    $apporteur = $sessionmembre->code_membre;
			    $beneficiaire = $request->getParam("code_benef");
			    $montant = $request->getParam("montant_bai");
			    $cat_compte = $request->getParam("cat_compte");
			    $id_canton = $request->getParam("id_canton");

                if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
				  $type_ressource = "NN";
			      $code_cat = "CAPA";
				  $code_cat1 = "CAPA";
                  $cumul = $capa_mapper->CumulBAiByMembre($apporteur,$cat_compte);				  
			    } elseif($cat_compte == "BC") {
				  $type_ressource = "NB";
			      $code_cat = "TFS";
				  $code_cat1 = "TFS";
				  $produit = "FS";
				}
				
				$retour = false;
			    if(strlen($beneficiaire) != 20) {
			       $db->rollback();
			       $this->view->code_benef = $beneficiaire;
			       $this->view->montant_bai = $montant;
		           $this->view->error = "Le Code Membre est errone. Verifiez bien le nombre de caracteres du Code Membre. Merci...";
			       return;
			    }
			  
			    if(substr($beneficiaire,-1,1) == 'P') {
			       $retour = $membre_mapper->find($beneficiaire,$membre);
			    } else {
			       $retour = $membremorale_mapper->find($beneficiaire,$membremorale); 
			    }
			  
			    if(!$retour)  {
                  $db->rollback();
				  $this->view->code_benef = $beneficiaire;
			      $this->view->montant_bai = $montant;
                  $this->view->error = "Le code membre du  beneficiaire est inexistant ...";
                  return;
                }
			  
			    if($beneficiaire == $apporteur) {
                   $db->rollback();
				   $this->view->code_benef = $beneficiaire;
			       $this->view->montant_bai = $montant;
                   $this->view->error = "Vous ne pouvez pas approvisionner les bons d'achat interne à vous meme ...";
                   return;
                }
			   
			    /*if($cat_compte == "CNCS" && substr($beneficiaire,-1,1) == 'M')  {
			       $db->rollback();
				   $this->view->code_benef = $beneficiaire;
			       $this->view->montant_bai = $montant;
                   $this->view->error = "Seules les membres personnes physiques disposent de compte salaire ...";
                   return;
			    }*/
				
				$code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			    $code_compte_beneficiaire = $type_ressource."-".$code_cat1."-".$beneficiaire;
				
				$ret = $compte_mapper->find($code_compte_apporteur,$compte);
				
				if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" 
				  || $cat_compte == "RPG" || $cat_compte == "I")  {
				   
				   if($cumul < $montant) {
				      $db->rollback();
				      $this->view->code_benef = $beneficiaire;
			          $this->view->montant_bai = $montant;
                      $this->view->error = "Le cumul des montants de votre compte de bon d'achat interne est insuffisant ...";
                      return;
				   }
				   
				} 
				
				if($compte->getSolde() == 0) {
			      $db->rollback();
				  $this->view->code_benef = $beneficiaire;
			      $this->view->montant_bai = $montant;
                  $this->view->error = "Le solde de votre compte de bon d'achat interne est egale a 0 ...";
                  return;				
			    }
				
				
			    if($compte->getSolde() < $montant) {
			      $db->rollback();
				  $this->view->code_benef = $beneficiaire;
			      $this->view->montant_bai = $montant;
                  $this->view->error = "Le solde de votre compte de bon d'achat interne est insuffisant pour effectuer cet approvisionnement ...";
                  return;				
			    }
				
				if(!$ret) {
			      $compte->setSolde($compte->getSolde() - $montant);
                  $compte_mapper->update($compte);
				}
				
				$result = $compte_mapper->find($code_compte_beneficiaire,$compte);
				if(!$result) {
                  $compte->setCode_cat($code_cat1)
                         ->setCode_compte($code_compte_beneficiaire)
						 ->setCode_type_compte($type_ressource)
                         ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                         ->setDesactiver(0)
                         ->setLib_compte($code_cat1)
                         ->setSolde($montant);
						 
				  if(substr($beneficiaire,-1,1) == 'M') {	 
                    $compte->setCode_membre(NULL);
                    $compte->setCode_membre_morale($code);
				  } else {
				    $compte->setCode_membre($code);
                    $compte->setCode_membre_morale(null);
				  }                    
                  $compte_mapper->save($compte);
				  
                } else {
			       $compte->setSolde($compte->getSolde() + $montant);
                   $compte_mapper->update($compte);
				}
				
				//Enrégistrement dans la table eu_approvisionnement
			    $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  
			    $approvisionnement->setId_approvisionnement($count_appro);
			    $approvisionnement->setCode_membre_apporteur($apporteur);
			    $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			    $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			    $approvisionnement->setType_approvisionnement("APPRO_BAI");
			    $approvisionnement->setMontant_approvisionnement($montant);
				$approvisionnement->setId_canton($id_canton);
			    $approvisionnement_mapper->save($approvisionnement);
				
				if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" 
				  || $cat_compte == "RPG" || $cat_compte == "I")  {
				  $creditcapas = $capa_mapper->fetchAllBAiByMembre($apporteur,$cat_compte);
				  if($creditcapas != NULL) {
				     $j = 0;
                     $reste = $montant;
                     $nbre_capa = count($creditcapas);
					 while($reste > 0 && $j < $nbre_capa)  {
				        $creditcapa = $creditcapas[$j];
                        $id = $creditcapa->getCode_capa();
                        if($reste > $creditcapa->getMontant_solde()) {
						   //Enrégistrement dans la table eu_detail_approvisionnement
			               $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
			               $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
				           $detailapprovisionnement->setId_approvisionnement($count_appro);
				           $detailapprovisionnement->setId_credit(null);
						   $detailapprovisionnement->setCode_capa($id);
				           $detailapprovisionnement->setCode_compte($code_compte_apporteur);
			               $detailapprovisionnement->setMontant_detail_approvisionnement($creditcapa->getMontant_solde());
				           $detailapprovisionnement_mapper->save($detailapprovisionnement);
						   
						   //Mise à jour du compte crédit apporteur
                           $reste = $reste - $creditcapa->getMontant_solde();
						   $creditcapa->setMontant_utiliser($creditcapa->getMontant_utiliser() + $creditcapa->getMontant_solde());
                           $creditcapa->setMontant_solde(0);
                           $capa_mapper->update($creditcapa);
						   
						   
						} else {
						   //Enrégistrement dans la table eu_detail_approvisionnement
			               $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
			               $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
				           $detailapprovisionnement->setId_approvisionnement($count_appro);
				           $detailapprovisionnement->setId_credit(null);
						   $detailapprovisionnement->setCode_capa($id);
				           $detailapprovisionnement->setCode_compte($code_compte_apporteur);
			               $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
				           $detailapprovisionnement_mapper->save($detailapprovisionnement);
						
						   //Mise à jour du compte crédit apporteur
						   $creditcapa->setMontant_utiliser($creditcapa->getMontant_utiliser() + $reste);
                           $creditcapa->setMontant_solde($creditcapa->getMontant_solde() - $reste);
                           $capa_mapper->update($credit);
					       $reste = 0;
						}
					    $j++;  
				     }
					 
					 //Creation du capa du beneficiaire
					 $code_capa = 'CAPA' .$date_id->toString('yyyyMMddHHmmss');
					 $capa->setCode_capa($code_capa)
                          ->setCode_compte($code_compte_beneficiaire)
                          ->setDate_capa($date_id->toString('yyyy-MM-dd'))
                          ->setHeure_capa($date_id->toString('HH:mm:ss'))
                          ->setCode_membre($beneficiaire)
                          ->setMontant_capa($montant)
                          ->setMontant_utiliser(0)
                          ->setMontant_solde($montant)
                          ->setId_operation(null)
                          ->setType_capa($cat_compte)
                          ->setEtat_capa('Actif')
			              ->setCode_produit($cat_compte)
                          ->setOrigine_capa("BAI");
                      $capa_mapper->save($capa); 
				  }
				  
				} elseif($cat_compte == "BC") {
				
				    $t_produit = new Application_Model_DbTable_EuCompteCredit();
                    $select = $t_produit->select();
                    $select->from($t_produit, array('sum(montant_credit) as somme'));
                    $select->where('code_membre = ?', $apporteur);
                    $select->where('code_compte like ?', $code_compte_apporteur);
			 
                    $result = $t_produit->fetchAll($select);
                    $row = $result->current();
			        $somme = $row['somme'];
			        if($somme == null) {
			           $somme = 0;
			        }
					
					if($somme < $montant) {
                      $db->rollback();
				      $this->view->code_benef = $beneficiaire;
			          $this->view->montant_bai = $montant;
                      $this->view->error = "Votre bon de consommation de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ...";
                      return;
                    }
					
					$credits = $cc_mapper->fetchAllCreditByCompte($apporteur,$code_compte_apporteur,$produit);
					if($credits != NULL) {
					   $j = 0;
                       $reste = $montant;
                       $nbre_credit = count($credits);
					   while($reste > 0 && $j < $nbre_credit)  {
					      $credit = $credits[$j];
                          $id = $credit->getId_credit();
				          $source_credit = $credit->getSource();
                          if($reste > $credit->getMontant_credit()) {
						     $maxcc = $cc_mapper->findConuter() + 1;
					         $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					         $cc->setId_credit($maxcc)
						        ->setCode_produit($produit)
                                ->setMontant_place($montant)
						        ->setDatedeb($credit->getDatedeb())
						        ->setDatefin($credit->getDatefin())
                                ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                ->setSource($source)
                                ->setCode_compte($code_compte_beneficiaire)
                                ->setId_operation($compteur)
                                ->setBnp($credit->getBnp())
                                ->setCode_type_credit($credit->getCode_type_credit())
                                ->setPrk($credit->getPrk())
                                ->setCompte_source($code_compte_apporteur)
                                ->setMontant_credit($credit->getMontant_credit())
                                ->setRenouveller($credit->getRenouveller())
                                ->setDomicilier($credit->getDomicilier())
                                ->setAffecter($credit->getAffecter())
                                ->setKrr($credit->getKrr())
						        ->setType_produit($credit->getType_produit())
						        ->setCode_bnp($credit->getCode_bnp())
						        ->setNbre_renouvel($credit->getNbre_renouvel())
						        ->setType_recurrent($credit->getType_recurrent())
						        ->setDuree($credit->getDuree())
						        ->setId_bps($credit->getId_bps())
                                ->setCode_membre($beneficiaire);
                            $cc_mapper->save($cc);
							
							//Enregistrement dans la table eu_cnp du beneficiaire
					        $maxcnp = $cnp_mapper->findConuter() + 1;
					        $cnp->setId_cnp($maxcnp)
						        ->setId_credit($maxcc)
                                ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                                ->setMont_debit($credit->getMontant_credit())
                                ->setMont_credit(0)
                                ->setSolde_cnp($credit->getMontant_credit())
                                ->setType_cnp($produit)
                                ->setSource_credit($source)
                                ->setCode_capa(null)
                                ->setTransfert_gcp(0)
						        ->setId_gcp(null)
                                ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit);
                             $cnp_mapper->save($cnp);
							
							//Mise à jour de la table eu_cnp apporteur
						    $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
						    if($cnp_credit != null) {
					           $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                               //Mise à jour du cnp
                               $cnp->setMont_credit($cnp->getMont_credit() + $credit->getMontant_credit())
                                   ->setSolde_cnp($cnp->getSolde_cnp() - $credit->getMontant_credit());
                               $cnp_mapper->update($cnp);
					       
						       $ecnp = new Application_Model_EuCnpEntree();
						       $select_cnpe = $tcnp->select();
                               $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                               $result_cnpe = $tcnp->fetchAll($select_cnpe);
                               $row_cnpe = $result_cnpe->current();
										
                               $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					                ->setId_cnp($cnp->getId_cnp())
                                    ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                    ->setMont_cnp_entree($credit->getMontant_credit())
                                    ->setType_cnp_entree($credit->getCode_produit());
                               $tcnp->insert($ecnp->toArray());
					         } else  {
						       $db->rollback();
				               $this->view->code_benef = $beneficiaire;
			                   $this->view->montant_bai = $montant;
				               $this->view->error = "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit;
                               return;
						     }
						
					         //Mise à jour du compte crédit apporteur
                             $reste = $reste - $credit->getMontant_credit();
                             $credit->setMontant_credit(0);
                             $cc_mapper->update($credit);
						  
						  } else {
						     //Enrégistrement dans la table eu_detail_approvisionnement
					         $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					         $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					         $detailapprovisionnement->setId_approvisionnement($count_appro);
				             $detailapprovisionnement->setId_credit($id);
					         $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					         $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					         $detailapprovisionnement_mapper->save($detailapprovisionnement);

                             $maxcc = $cc_mapper->findConuter() + 1;
					         $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					         $cc->setId_credit($maxcc)
						        ->setCode_produit($produit1)
                                ->setMontant_place($montant)
                                ->setDatedeb($credit->getDatedeb())
                                ->setDatefin($credit->getDatefin())
                                ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                ->setSource($source)
                                ->setCode_compte($code_compte_beneficiaire)
                                ->setId_operation($compteur)
                                ->setBnp($credit->getBnp())
                                ->setCode_type_credit($credit->getCode_type_credit())
                                ->setPrk($credit->getPrk())
                                ->setCompte_source($code_compte_apporteur)
                                ->setMontant_credit($reste)
                                ->setRenouveller($credit->getRenouveller())
                                ->setDomicilier($credit->getDomicilier())
                                ->setAffecter($credit->getAffecter())
                                ->setKrr($credit->getKrr())
						        ->setType_produit($credit->getType_produit())
						        ->setCode_bnp($credit->getCode_bnp())
						        ->setNbre_renouvel($credit->getNbre_renouvel())
						        ->setType_recurrent($credit->getType_recurrent())
						        ->setDuree($credit->getDuree())
						        ->setId_bps($credit->getId_bps())
                                ->setCode_membre($beneficiaire);
                            $cc_mapper->save($cc);

                            //Enregistrement dans la table eu_cnp du beneficiaire
					        $maxcnp = $cnp_mapper->findConuter() + 1;
					        $cnp->setId_cnp($maxcnp)
						        ->setId_credit($maxcc)
                                ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                                ->setMont_debit($reste)
                                ->setMont_credit(0)
                                ->setSolde_cnp($reste)
                                ->setType_cnp($produit1)
                                ->setSource_credit($source)
                                ->setCode_capa(null)
                                ->setTransfert_gcp(0)
						        ->setId_gcp(null)
                                ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit);
                             $cnp_mapper->save($cnp);

                             //Mise à jour de la table eu_cnp apporteur
						     $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);							 
						     if($cnp_credit != NULL) { 
                                $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                                //Mise a jour du cnp
                                $cnp->setMont_credit($cnp->getMont_credit() + $reste)
                                    ->setSolde_cnp($cnp->getSolde_cnp() - $reste);
                                $cnp_mapper->update($cnp);
					       
						        $ecnp = new Application_Model_EuCnpEntree();
						        $select_cnpe = $tcnp->select();
                                $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                                $result_cnpe = $tcnp->fetchAll($select_cnpe);
                                $row_cnpe = $result_cnpe->current();
										
                                $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					                 ->setId_cnp($cnp->getId_cnp())
                                     ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                     ->setMont_cnp_entree($reste)
                                     ->setType_cnp_entree($credit->getCode_produit());
                                $tcnp->insert($ecnp->toArray());								
							 
							 } else {
						       $db->rollback();
				               $this->view->code_benef = $beneficiaire;
			                   $this->view->montant_bai = $montant;
				               $this->view->error = "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit;
                               return;
						     }
							 //Mise à jour du compte crédit apporteur
                             $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                             $cc_mapper->update($credit);
					         $reste = 0;
						  }
					      $j++;
					   }
					
					} else {
                      $db->rollback();
				      $this->view->code_benef = $beneficiaire;
			          $this->view->montant_bai = $montant;
				      $this->view->error = "Il n'y a pas de bon de consommation correspondant à ce compte " . $produit;
                      return;
			        }    
				
			   }
			   $db->commit();              
               $sessionmembre->error = "Operation  bien  effectuee ...";
               $this->_redirect('/souscriptionbon/addintappro'); 
			
			} catch (Exception $exc) {
              $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
              $db->rollback();
              return;
            }
	 
	 }
	 
	 }
	
	
	
	
	public function addintapproolderAction()   {
	   $sessionmembre = new Zend_Session_Namespace('membre');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcperso');

       if(!isset($sessionmembre->code_membre)) {
         $this->_redirect('/');
       }
	   
	   $date_id = Zend_Date::now();
	   $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	   $periode = Util_Utils::getParametre('periode','valeur');
       $date_fin->addDay($periode);
	   $request = $this->getRequest();
	   
	   if($request->isPost ())  {
	      $db = Zend_Db_Table::getDefaultAdapter();
          $db->beginTransaction();
          try { 
			  $compte = new Application_Model_EuCompte();
			  $compte_mapper =  new Application_Model_EuCompteMapper();
			 
			  $place = new Application_Model_EuOperation();
			  $place_mapper = new Application_Model_EuOperationMapper();
			 
			  $membre = new Application_Model_EuMembre();
			  $membre_mapper =  new Application_Model_EuMembreMapper();
			  
			  $membremorale = new Application_Model_EuMembreMorale();
			  $membremorale_mapper =  new Application_Model_EuMembreMoraleMapper();
			 
			  $approvisionnement = new Application_Model_EuApprovisionnement();
			  $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			  $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			  $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			 
			  $apporteur = $sessionmembre->code_membre;
			  $beneficiaire = $request->getParam("code_benef");
			  $montant = $request->getParam("montant_bai");
			  $cat_compte = $request->getParam("cat_compte");
			  $type_ressource = "NN";
			  
			  $code_cat = "";
			  $code_cat1 = "";
			  
			  $retour = false;
			  if(strlen($beneficiaire) != 20) {
			     $db->rollback();
			     $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bai = $montant;
		         $this->view->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
			     return;
			  }
			  
			  if(substr($beneficiaire,-1,1) == 'P') {
			    $retour = $membre_mapper->find($beneficiaire,$membre);
			  } else {
			    $retour = $membremorale_mapper->find($beneficiaire,$membremorale); 
			  }
			  
			  if (!$retour)  {
                 $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bai = $montant;
                 $this->view->error = "Le code membre du  bénéficiaire est inexistant ...";
                 return;
              }
			  
			  if ($beneficiaire == $apporteur) {
                 $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bai = $montant;
                 $this->view->error = "Vous ne pouvez pas approvisionner les bons d'achat interne à vous même";
                 return;
               }
			   
			   if($cat_compte == "CNCS" && substr($beneficiaire,-1,1) == 'M')  {
			     $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bai = $montant;
                 $this->view->error = "Seules les membres personnes physiques disposent de compte salaire ...";
                 return;
			   }
			   
			   if($cat_compte == "MARGE" && substr($beneficiaire,-1,1) == 'P')  {
			      $db->rollback();
				  $this->view->code_benef = $beneficiaire;
			      $this->view->montant_bai = $montant;
                  $this->view->error = "Seules les membres personnes morales disposent de compte de frais d'exploitation ...";
                  return;
			   }
			   
			   
			   if($cat_compte == "CNCS")  {
			     $code_cat = "TCNCS";
				 $code_cat1 = "TCNCS";
   				 
			   } elseif($cat_compte == "BC")  {
			      if(substr($apporteur,-1,1) == 'P') {
				    $code_cat = "TPAGCRPG";
				  } else {
				    $code_cat = "TPAGCI";
				  }
				  if(substr($beneficiaire,-1,1) == 'P') {
				    $code_cat1 = "TPAGCRPG";
				  } else {
				    $code_cat1 = "TPAGCI";
				  }
				    
			   } elseif($cat_compte == "PaR") {
			      $code_cat = "TPaR";
				  $code_cat1 = "TPaR";  
			   } elseif($cat_compte == "MARGE") {
			      $code_cat = "TMARGE";
				  $code_cat1 = "TMARGE";  
			   }
			   
			   $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			   $code_compte_beneficiaire = $type_ressource."-".$code_cat1."-".$beneficiaire;
			   
			   $ret = $compte_mapper->find($code_compte_apporteur,$compte);
			   
			   if($compte->getSolde() == 0) {
			     $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bai = $montant;
                 $this->view->error = "Le solde de votre compte de bon d'achat interne est égale à 0 ...";
                 return;				
			   }
			   
			   if($compte->getSolde() < $montant) {
			     $db->rollback();
				 $this->view->code_benef = $beneficiaire;
			     $this->view->montant_bai = $montant;
                 $this->view->error = "Le solde de votre compte de bon d'achat interne est insuffisant pour effectuer cet approvisionnement ...";
                 return;				
			   }
			   
			   // insertion dans la table eu_operation
			   $compteur = $place_mapper->findConuter() + 1;
			   $place->setId_operation($compteur)
			         ->setDate_op($date_id->toString('yyyy-MM-dd'))
                     ->setHeure_op($date_id->toString('HH:mm:ss'))
                     ->setId_utilisateur(null)
					 ->setMontant_op($montant)
                     ->setCode_produit(null)
                     ->setLib_op("Approvisionnement du BAi")
                     ->setType_op('APPRO_BAI')
                     ->setCode_cat($code_cat1);
				if(substr($beneficiaire,-1,1) == 'P') {	 
                  $place->setCode_membre($beneficiaire);
				} else {
                  $place->setCode_membre_morale($beneficiaire);
                }				
                     
                $place_mapper->save($place);
				
				
				$cpte_origine = new Application_Model_EuCompte();
			    $res = $compte_mapper->find($code_compte_apporteur,$cpte_origine);
			    $cpte_origine->setSolde($cpte_origine->getSolde() - $montant);
                $compte_mapper->update($cpte_origine);
				
				
				$result = $compte_mapper->find($code_compte_beneficiaire,$compte);
				if(!$result) {
                  $compte->setCode_cat($code_cat1)
                         ->setCode_compte($code_compte_beneficiaire)
						 ->setCode_type_compte($type_ressource)
                         ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                         ->setDesactiver(0)
                         ->setLib_compte($code_cat1)
                         ->setSolde($montant);
						 
				  if(substr($beneficiaire,-1,1) == 'M') {	 
                    $compte->setCode_membre(NULL);
                    $compte->setCode_membre_morale($code);
				  } else {
				    $compte->setCode_membre($code);
                    $compte->setCode_membre_morale(null);
				  }                    
                   $compte_mapper->save($compte);
                }  else {
			       $compte->setSolde($compte->getSolde() + $montant);
                   $compte_mapper->update($compte);
				}   
				
				
				//Enrégistrement dans la table eu_approvisionnement
			    $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  
			    $approvisionnement->setId_approvisionnement($count_appro);
			    $approvisionnement->setCode_membre_apporteur($apporteur);
			    $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			    $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			    $approvisionnement->setType_approvisionnement("APPRO_BAI");
			    $approvisionnement->setMontant_approvisionnement($montant);
			    $approvisionnement_mapper->save($approvisionnement);
				
				//Enrégistrement dans la table eu_detail_approvisionnement
			    $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
			    $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
				$detailapprovisionnement->setId_approvisionnement($count_appro);
				$detailapprovisionnement->setId_credit(null);
				$detailapprovisionnement->setCode_compte($code_compte_apporteur);
			    $detailapprovisionnement->setMontant_detail_approvisionnement($montant);
				$detailapprovisionnement_mapper->save($detailapprovisionnement);
				
				$db->commit();              
                $sessionmembre->error = "Opération  bien  effectuée ...";
                $this->_redirect('/souscriptionbon/addintappro');
			  
           } catch (Exception $exc) {
              $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
              $db->rollback();
              return;
           }		   
        }
	
	}
	
	
	public function listintapproapporteurAction() {
	    /* page espacepersonnel/listrecu - Liste des reçus */
  		$sessionmembre = new Zend_Session_Namespace('membre');
  		//$this->_helper->layout->disableLayout();
  		$this->_helper->layout()->setLayout('layoutpublicesmcperso');

  		if (!isset($sessionmembre->code_membre))  {
  		    $this->_redirect('/');
  		}
		
		$baiappro = new Application_Model_EuApprovisionnementMapper();
  		$this->view->entries = $baiappro->fetchAllByApporteurBAI($sessionmembre->code_membre);

  		$this->view->tabletri = 1;
	}
	
	
	public function listintapprobeneficiaireAction() {
	   /* page espacepersonnel/listrecu - Liste des reçus */
       $sessionmembre = new Zend_Session_Namespace('membre');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcperso');

       if (!isset($sessionmembre->code_membre)) {
          $this->_redirect('/');
       }

       $baiappro = new Application_Model_EuApprovisionnementMapper();
       $this->view->entries = $baiappro->fetchAllByBeneficiaireBAI($sessionmembre->code_membre);

       $this->view->tabletri = 1;
	}
	
	
	
	 

    public function addbcapproAction()   {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if(!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }
	  
	    $date_id = Zend_Date::now();
	    $date_fin = new Zend_Date(Zend_Date::ISO_8601);
	    $periode = Util_Utils::getParametre('periode','valeur');
        $date_fin->addDay($periode);
	  
	    $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
	  
	  
	    $request = $this->getRequest ();
	    if($request->isPost ()) {
            $db = Zend_Db_Table::getDefaultAdapter();
            $db->beginTransaction();
		    try {
		        $compte = new Application_Model_EuCompte();
			    $compte_mapper =  new Application_Model_EuCompteMapper();
			 
			    $echange = new Application_Model_EuEchange();
			    $echange_mapper =  new Application_Model_EuEchangeMapper();
			 
			    $cnp = new Application_Model_EuCnp();
			    $cnp_mapper = new Application_Model_EuCnpMapper();
			 
			    $cc_mapper =  new Application_Model_EuCompteCreditMapper();
			    $cc = new Application_Model_EuCompteCredit();
			 
			    $place = new Application_Model_EuOperation();
			    $place_mapper = new Application_Model_EuOperationMapper();
			 
			    $capa = new Application_Model_EuCapa();
			    $capa_mapper = new Application_Model_EuCapaMapper();
			 
			    $membre = new Application_Model_EuMembre();
			    $membre_mapper =  new Application_Model_EuMembreMapper();
			 
			    $membremorale = new Application_Model_EuMembreMorale();
			    $membremorale_mapper =  new Application_Model_EuMembreMoraleMapper();
			 
			    $approvisionnement = new Application_Model_EuApprovisionnement();
			    $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
			 
			    $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
			    $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
			 
			    $tcnp = new Application_Model_DbTable_EuCnpEntree();
			 
			    $apporteur = $sessionmembre->code_membre;
			    $beneficiaire = $request->getParam("code_benef");
			    $montant = $request->getParam("montant_bc");
			    $type_ressource  = "";
			    $type_ressource1 = "";
			    $code_cat  = "";
			    $code_cat1 = "";
			    $produit = "";
			    $produit1 = "";
			    $cat_produit = $request->getParam("cat_produit");
			    //$cat_bps = $request->getParam("cat_bps");
			    $cat_echange = "";
			    $id_canton = $request->getParam("id_canton");
			 
			    if(substr($apporteur,-1,1) == 'P')  {
			        if($cat_produit == "nr") {
				        $produit = "RPGnr";
				    }
				
				    if($cat_produit == "r") {
				        $produit = "RPGr";
				    }
				
			        $type_ressource = "NB";
			        $code_cat = "TPAGCRPG";
			        $cat_echange = "RPG";
					
			    } else {
			        if($cat_produit == "nr") {
				        $produit = "Inr";
			        }
			        if($cat_produit == "r") {
				        $produit = "Ir";
			        }
			 
			        $type_ressource = "NB";
			        $code_cat = "TPAGCI";
			        $cat_echange = "I";
			    }
				
			    $retour = false;
				if(substr($apporteur,-1,1) == 'P')  {
				    $findapporteur = $membre_mapper->find($apporteur,$membre);
					if($membre->desactiver == 1)  {
						$db->rollback();
						$this->view->code_benef = $beneficiaire;
			            $this->view->montant_bc = $montant;
						$this->view->error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
				        return;
				    }
				} else  {
					$findapporteur = $membremorale_mapper->find($apporteur,$membremorale);
					if($membremorale->desactiver == 1)  {
						$db->rollback();
						$this->view->code_benef = $beneficiaire;
			            $this->view->montant_bc = $montant;
		                $this->view->error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
					    return;
					}
				}
				
			    if(strlen($beneficiaire) != 20) {
			        $db->rollback();
			        $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bc = $montant;
		            $this->view->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
			        return;
			    }						
			 
			    if(substr($beneficiaire,-1,1) == 'P') {
			        $retour = $membre_mapper->find($beneficiaire,$membre);
			    } else {
			        $retour = $membremorale_mapper->find($beneficiaire,$membremorale); 
			    }
			 
			    if(!$retour) {
                    $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bc = $montant;
                    $this->view->error = "Le code membre du membre bénéficiaire est inexistant ...";
                    return;
                }
				
				if(substr($beneficiaire,-1,1) == 'P') {
					if($membre->desactiver == 1)  {
						$db->rollback();
						$this->view->code_benef = $beneficiaire;
			            $this->view->montant_bc = $montant;
		                $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					    return;
					}
				} else {
					if($membremorale->desactiver == 1)  {
						$db->rollback();
						$this->view->code_benef = $beneficiaire;
			            $this->view->montant_bc = $montant;
		                $this->view->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					    return;
					}
				}
				
			 
			    if($beneficiaire == $apporteur) {
                    $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bc = $montant;
                    $this->view->error = "Vous ne pouvez pas approvisionner les bon de consommation à vous même";
                    return;
                }
			 
			    if(substr($beneficiaire,-1,1) == 'P')  {
			        $type_ressource1 = "NB";
			        $code_cat1 = "TPAGCRPG";
			    } else {
			        $type_ressource1 = "NB";
			        $code_cat1 = "TPAGCI";
			    }
			 
			    $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
			    $code_compte_beneficiaire = $type_ressource1."-".$code_cat1."-".$beneficiaire;
			 
			    $t_produit = new Application_Model_DbTable_EuCompteCredit();
                $select = $t_produit->select();
                $select->from($t_produit, array('sum(montant_credit) as somme'));
                $select->where('code_membre = ?', $apporteur);
                $select->where('code_compte like ?', $code_compte_apporteur);
			 
			    if($cat_produit != "") {
                    $select->where('code_produit like ?', $produit);
			    }
			 
			 /*
			 if($cat_bps != "") {
			   $select->where('type_produit like ?', $cat_bps);   
			 }
			 */
			 
                $result = $t_produit->fetchAll($select);
                $row = $result->current();
			    $somme = $row['somme'];
			    if($somme == null) {
			        $somme = 0;
			    }
			 
			    $ret = $compte_mapper->find($code_compte_apporteur,$compte);
			 
			    if($compte->getSolde() < $montant) {
			        $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bc = $montant;
                    $this->view->error = "Le solde de votre compte de bon de consommation est insuffisant pour effectuer cet approvisionnement ...";
                    return;				
			    }
			 
			    if($somme < $montant) {
                    $db->rollback();
				    $this->view->code_benef = $beneficiaire;
			        $this->view->montant_bc = $montant;
                    $this->view->error = "Votre bon de consommation de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ...";
                    return;
                }
				
				if(isset($_POST['confirmation']) && $_POST['confirmation'] == 1)  {
					
					$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
					if($sms_connexion = $sms_connexion_mapper->fetchAllByCodeMembre5($sessionmembre->code_membre)) {
						$this->view->sms_connexion_code_envoi = $sms_connexion->sms_connexion_code_envoi;
						$compteur = Util_Utils::findConuter() + 1; 
                        Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, $sms_connexion->sms_connexion_code_recu);
					    
						$sessionmembre->confirmation_envoi = $sms_connexion->sms_connexion_code_envoi;
						$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...2";
						$sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->produit = $cat_produit;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
                        $db->commit();
						
					} else {
						do  {
						    $code_envoi = strtoupper(Util_Utils::genererCodeSMS(5));
					        $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
					        $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeEnvoi($code_envoi);
					    } while(count($sms_connexion2) > 0);
						
						do  {
						    $code_recu = strtoupper(Util_Utils::genererCodeSMS(5));
							$sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
							$sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeRecu($code_recu);
					    } while(count($sms_connexion2) > 0);
						
						$date_id = new Zend_Date(Zend_Date::ISO_8601);
					    $sms_connexion1 = new Application_Model_EuSmsConnexion();
					    $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

					    $compteur = $sms_connexion1_mapper->findConuter() + 1;
					    $sms_connexion1->setSms_connexion_id($compteur);
					    $sms_connexion1->setSms_connexion_code_envoi($code_envoi);
					    $sms_connexion1->setSms_connexion_code_recu("Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement BC : ".$code_recu.". Merci. ESMC");
					    $sms_connexion1->setSms_connexion_code_membre($sessionmembre->code_membre);
					    $sms_connexion1->setSms_connexion_utilise(0);
					    $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					    $sms_connexion1_mapper->save($sms_connexion1);

						$compteur = Util_Utils::findConuter() + 1; 
                        Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, "Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");        

						
				        $this->view->sms_connexion_code_envoi = $sms_connexion1->sms_connexion_code_envoi;
					    $sessionmembre->confirmation_envoi = $sms_connexion1->sms_connexion_code_envoi;
						$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
						$sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->produit = $cat_produit;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
					    $db->commit();
					}
					
				} else if(isset($_POST['confirmation']) && $_POST['confirmation'] == 2) {
					
					$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
                    $sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_recu']);
					if($sms_connexion->sms_connexion_code_envoi == $sessionmembre->confirmation_envoi && $sms_connexion->sms_connexion_code_membre == $sessionmembre->code_membre){
					    
						$sms_connexion1 = new Application_Model_EuSmsConnexion();
						$sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
						$sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

						$sms_connexion1->setSms_connexion_utilise(1);
						$sms_connexion1_mapper->update($sms_connexion1);

						$sessionmembre->confirmation_envoi = "";
					
			            //insertion dans la table eu_operation
			            $compteur = $place_mapper->findConuter() + 1;
			            $place->setId_operation($compteur)
			                  ->setDate_op($date_id->toString('yyyy-MM-dd'))
                              ->setHeure_op($date_id->toString('HH:mm:ss'))
                              ->setId_utilisateur(null)
                              ->setMontant_op($montant)
                              ->setCode_produit($produit)
                              ->setLib_op("Approvisionnement du BC")
                              ->setType_op('APPRO')
                              ->setCode_cat($code_cat1);
				   
			            if(substr($beneficiaire,-1,1) == 'P') {	 
                            $place->setCode_membre($beneficiaire);
			            } else {
                            $place->setCode_membre_morale($beneficiaire);
                        }
						
                        $place_mapper->save($place);
			            $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
			            $compte->setSolde($compte->getSolde() + $montant);
                        $compte_mapper->update($compte);
						
			            $cpte_origine = new Application_Model_EuCompte();
			            $res = $compte_mapper->find($code_compte_apporteur,$cpte_origine);
			            $cpte_origine->setSolde($cpte_origine->getSolde() - $montant);
                        $compte_mapper->update($cpte_origine);
			  
			            //Enrégistrement dans la table eu_approvisionnement
			            $count_appro = $approvisionnement_mapper->findConuter() + 1;
			  
			            $approvisionnement->setId_approvisionnement($count_appro);
			            $approvisionnement->setCode_membre_apporteur($apporteur);
			            $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
			            $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
			            $approvisionnement->setType_approvisionnement("APPRO_BC");
			            $approvisionnement->setMontant_approvisionnement($montant);
			            $approvisionnement->setId_canton($id_canton);
			            $approvisionnement_mapper->save($approvisionnement);
			  
			            $credits = $cc_mapper->fetchAllCreditByCompte($apporteur,$code_compte_apporteur,$produit);
			            if($credits != NULL) {
			                $j = 0;
                            $reste = $montant;
                            $nbre_credit = count($credits);
				            while($reste > 0 && $j < $nbre_credit)  {
                                $credit = $credits[$j];
                                $id = $credit->getId_credit();
				                $source_credit = $credit->getSource();
                                if($reste > $credit->getMontant_credit()) {
                                    //Enrégistrement dans la table eu_detail_approvisionnement
					                $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					                $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					                $detailapprovisionnement->setId_approvisionnement($count_appro);
				                    $detailapprovisionnement->setId_credit($id);
					                $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					                $detailapprovisionnement->setMontant_detail_approvisionnement($credit->getMontant_credit());
					                $detailapprovisionnement_mapper->save($detailapprovisionnement);
				   
					                //Enregistrement dans la table eu_compte_credit du bénéficiaire
					                if(substr($beneficiaire,-1,1) == 'P')  {
					                    if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
						                    $produit1 = "RPGnr";
						                } else {
						                    $produit1 = "RPGr";
						                }
					                } else {
					                    if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
						                    $produit1 = "Inr";
						                } else {
						                    $produit1 = "Ir";
						                }
					                }

                                    $maxcc = $cc_mapper->findConuter() + 1;
					                $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					                $cc->setId_credit($maxcc)
						               ->setCode_produit($produit1)
                                       ->setMontant_place($montant)
						               ->setDatedeb($credit->getDatedeb())
						               ->setDatefin($credit->getDatefin())
                                       ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                       ->setSource($source)
                                       ->setCode_compte($code_compte_beneficiaire)
                                       ->setId_operation($compteur)
                                       ->setBnp($credit->getBnp())
                                       ->setCode_type_credit($credit->getCode_type_credit())
                                       ->setPrk($credit->getPrk())
                                       ->setCompte_source($code_compte_apporteur)
                                       ->setMontant_credit($credit->getMontant_credit())
                                       ->setRenouveller($credit->getRenouveller())
                                       ->setDomicilier($credit->getDomicilier())
                                       ->setAffecter($credit->getAffecter())
                                       ->setKrr($credit->getKrr())
						               ->setType_produit($credit->getType_produit())
						               ->setCode_bnp($credit->getCode_bnp())
						               ->setNbre_renouvel($credit->getNbre_renouvel())
						               ->setType_recurrent($credit->getType_recurrent())
						               ->setDuree($credit->getDuree())
						               ->setId_bps($credit->getId_bps())
						               ->setFrequence_cumul($credit->getFrequence_cumul())
                                       ->setCode_membre($beneficiaire);
                                    $cc_mapper->save($cc);
					   
					                //Enregistrement dans la table eu_cnp du beneficiaire
					                $maxcnp = $cnp_mapper->findConuter() + 1;
					                $cnp->setId_cnp($maxcnp)
						                ->setId_credit($maxcc)
                                        ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                                        ->setMont_debit($credit->getMontant_credit())
                                        ->setMont_credit(0)
                                        ->setSolde_cnp($credit->getMontant_credit())
                                        ->setType_cnp($produit1)
                                        ->setSource_credit($source)
                                        ->setCode_capa(null)
                                        ->setTransfert_gcp(0)
						                ->setId_gcp(null)
                                        ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit1);
                                    $cnp_mapper->save($cnp);
						
						
						            //Mise à jour de la table eu_cnp apporteur
						            $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
						            if($cnp_credit != null) {
					                    $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                                        //Mise à jour du cnp
                                        $cnp->setMont_credit($cnp->getMont_credit() + $credit->getMontant_credit())
                                            ->setSolde_cnp($cnp->getSolde_cnp() - $credit->getMontant_credit());
                                        $cnp_mapper->update($cnp);
					       
						                $ecnp = new Application_Model_EuCnpEntree();
						                $select_cnpe = $tcnp->select();
                                        $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                                        $result_cnpe = $tcnp->fetchAll($select_cnpe);
                                        $row_cnpe = $result_cnpe->current();
										
                                        $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					                         ->setId_cnp($cnp->getId_cnp())
                                             ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                             ->setMont_cnp_entree($credit->getMontant_credit())
                                             ->setType_cnp_entree($credit->getCode_produit());
                                        $tcnp->insert($ecnp->toArray());
								
					                } else {
						                $db->rollback();
				                        $this->view->code_benef = $beneficiaire;
			                            $this->view->montant_bc = $montant;
				                        $this->view->error = "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit;
                                        return;
						            }
						
						            //Mise à jour du compte crédit apporteur
                                    $reste = $reste - $credit->getMontant_credit();
                                    $credit->setMontant_credit(0);
                                    $cc_mapper->update($credit);
                   			       
				                }  else  {
					                //Enrégistrement dans la table eu_detail_approvisionnement
					                $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
					                $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
					                $detailapprovisionnement->setId_approvisionnement($count_appro);
				                    $detailapprovisionnement->setId_credit($id);
					                $detailapprovisionnement->setCode_compte($code_compte_apporteur);
					                $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
					                $detailapprovisionnement_mapper->save($detailapprovisionnement);
				   
                                    //Enregistrement dans la table eu_compte_credit du bénéficiaire
					                if(substr($beneficiaire,-1,1) == 'P')  {
					                    if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
						                    $produit1 = "RPGnr";
						                } else {
						                    $produit1 = "RPGr";
						                }
					                } else {
					                    if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
						                    $produit1 = "Inr";
						                } else {
						                    $produit1 = "Ir";
						                }
					                }
						
						            $maxcc = $cc_mapper->findConuter() + 1;
					                $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
					                $cc->setId_credit($maxcc)
						               ->setCode_produit($produit1)
                                       ->setMontant_place($montant)
                                       ->setDatedeb($credit->getDatedeb())
                                       ->setDatefin($credit->getDatefin())
                                       ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                       ->setSource($source)
                                       ->setCode_compte($code_compte_beneficiaire)
                                       ->setId_operation($compteur)
                                       ->setBnp($credit->getBnp())
                                       ->setCode_type_credit($credit->getCode_type_credit())
                                       ->setPrk($credit->getPrk())
                                       ->setCompte_source($code_compte_apporteur)
                                       ->setMontant_credit($reste)
                                       ->setRenouveller($credit->getRenouveller())
                                       ->setDomicilier($credit->getDomicilier())
                                       ->setAffecter($credit->getAffecter())
                                       ->setKrr($credit->getKrr())
						               ->setType_produit($credit->getType_produit())
						               ->setCode_bnp($credit->getCode_bnp())
						               ->setNbre_renouvel($credit->getNbre_renouvel())
						               ->setType_recurrent($credit->getType_recurrent())
						               ->setDuree($credit->getDuree())
						               ->setId_bps($credit->getId_bps())
						               ->setFrequence_cumul($credit->getFrequence_cumul())
                                       ->setCode_membre($beneficiaire);
                                    $cc_mapper->save($cc);
					   
					                //Enregistrement dans la table eu_cnp du beneficiaire
					                $maxcnp = $cnp_mapper->findConuter() + 1;
					                $cnp->setId_cnp($maxcnp)
						                ->setId_credit($maxcc)
                                        ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                                        ->setMont_debit($reste)
                                        ->setMont_credit(0)
                                        ->setSolde_cnp($reste)
                                        ->setType_cnp($produit1)
                                        ->setSource_credit($source)
                                        ->setCode_capa(null)
                                        ->setTransfert_gcp(0)
						                ->setId_gcp(null)
                                        ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit1);
                                    $cnp_mapper->save($cnp);
						
						            //Mise à jour de la table eu_cnp apporteur
						            $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
						            if($cnp_credit != NULL) {
					                    $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);			
                                        //Mise à jour du cnp
                                        $cnp->setMont_credit($cnp->getMont_credit() + $reste)
                                            ->setSolde_cnp($cnp->getSolde_cnp() - $reste);
                                        $cnp_mapper->update($cnp);
					       
						                $ecnp = new Application_Model_EuCnpEntree();
						                $select_cnpe = $tcnp->select();
                                        $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                                        $result_cnpe = $tcnp->fetchAll($select_cnpe);
                                        $row_cnpe = $result_cnpe->current();
										
                                        $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
					                         ->setId_cnp($cnp->getId_cnp())
                                             ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                             ->setMont_cnp_entree($reste)
                                             ->setType_cnp_entree($credit->getCode_produit());
                                        $tcnp->insert($ecnp->toArray());
						   
					                } else {
						                $db->rollback();
				                        $this->view->code_benef = $beneficiaire;
			                            $this->view->montant_bc = $montant;
				                        $this->view->error = "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit;
                                        return;
						            }					  
                                    //Mise à jour du compte crédit apporteur
                                    $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                                    $cc_mapper->update($credit);
					                $reste = 0;
                                }				   
			                    $j++;
			                } 
				 
			            } else {
                            $db->rollback();
				            $this->view->code_benef = $beneficiaire;
			                $this->view->montant_bc = $montant;
				            $this->view->error = "Il n'y a pas de bon de consommation correspondant à ce compte " . $produit;
                            return;
			            }
			            $db->commit();              
                        $sessionmembre->error = "Opération  bien  effectuée ...";
                        $this->_redirect('/souscriptionbon/addbcappro');
					
					} else {
						$db->rollback();
					    $sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
					    $sessionmembre->beneficiaire = $beneficiaire;
						$sessionmembre->produit = $cat_produit;
						$sessionmembre->montant = $montant;
						$sessionmembre->canton = $id_canton;
						return;
					}
				}
		
		    } catch(Exception $exc) {
                $this->view->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                $db->rollback();
                return;
            }
        }
   
    }




  public  function addbanapproAction()  {
	   $sessionmembre = new Zend_Session_Namespace('membre');
       //$this->_helper->layout->disableLayout();
       $this->_helper->layout()->setLayout('layoutpublicesmcperso');

       if(!isset($sessionmembre->code_membre)) {
         $this->_redirect('/');
       }
       $date_id = Zend_Date::now();
       $request = $this->getRequest();
	   
	   if($request->isPost()) {
		  if(isset($_POST['bon_neutre_appro_beneficiaire']) && $_POST['bon_neutre_appro_beneficiaire']!="" && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") {
		      $db = Zend_Db_Table::getDefaultAdapter();
              $db->beginTransaction();
              try {
				  $membreappro = new Application_Model_EuMembre();
	              $m_membre  = new Application_Model_EuMembreMapper();
                  $membremoraleappro = new Application_Model_EuMembreMorale();
	              $m_membremorale  = new Application_Model_EuMembreMoraleMapper(); 

                  if(substr($sessionmembre->code_membre,19,1) == 'P')  {
		             $findappro = $m_membre->find($sessionmembre->code_membre,$membreappro);
		             if($membreappro->desactiver != 0)  {
			            $db->rollback();
		                $sessionmembre->error = "Ce membre dont le code membre  ".$sessionmembre->code_membre."  n'est pas autoriser à effectuer de cette opération  ...";
			            return;
		             }
	              }  else {
			         $findappro = $m_membremorale->find($sessionmembre->code_membre,$membremoraleappro);
			         if($membremoraleappro->desactiver != 0)  {
				       $db->rollback();
		               $sessionmembre->error = "Ce membre dont le code membre  ".$sessionmembre->code_membre."  n'est pas autoriser à effectuer de cette opération  ...";
			           return;
			         }		
	              }

                  if($_POST['bon_neutre_appro_beneficiaire'] == $sessionmembre->code_membre) {
                     $db->rollback();
                     $sessionmembre->error = "Le Code Membre du bénéficiaire doit etre different du Code Membre de l'apporteur. Merci...";
                     return;
                  }
				  
				  /////////////////////////////////////controle code membre
                  if(strlen($_POST['bon_neutre_appro_beneficiaire']) != 20) {
                     $db->rollback();
                     $sessionmembre->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                     return;
                  } else {
                     if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'P') {
                        $membre = new Application_Model_EuMembre();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        if(!($membre_mapper->find($_POST['bon_neutre_appro_beneficiaire'],$membre))) {
						  $db->rollback();
                          $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                          return;
                        }
								
					    if($membre->desactiver != 0) {
						    $db->rollback();
		                    $sessionmembre->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					        return;
					    }
										
                        $canton = $membre->id_canton;
                        $nom = $membre->nom_membre;
                        $prenom = $membre->prenom_membre;
                        $email = $membre->email_membre;
                        $mobile = $membre->portable_membre;
                        $raison = "";
						
                    } else if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'M') {
                        $membremorale = new Application_Model_EuMembreMorale();
                        $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                        if(!($membremorale_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membremorale))) {
                          $db->rollback();
                          $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                          return;
                        }
								
					    if($membremorale->desactiver != 0)  {
						  $db->rollback();
		                  $sessionmembre->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					      return;
					    }
											
                        $canton = $membremorale->id_canton;
                        $nom = "";
                        $prenom = "";
                        $email = $membremorale->email_membre;
                        $mobile = $membremorale->portable_membre;
                        $raison = $membremorale->raison_sociale;
						
                        } else {
                            $db->rollback();
                            $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre...";
                            return;
                        }
                     }
					 
					 $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                     $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
					 
					 if(count($bon_neutre2) == 0) {
					    $db->rollback();
                        $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                        return; 
					 }
					 /*
					 if($request->getParam("bon_neutre_appro_montant") <= 0) {
                        $db->rollback();
                        $sessionmembre->error = "Le montant à allouer doit etre supérieur à 0...";
                        return;
                     }
					 
					 if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()) {
                        $db->rollback();
                        $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                        return;
                     }
					 */


					

								$ok_franchise_1 = 0;
								$ok_eli_anticipe_1 = 0;
								$ok_franchise_2 = 0;
								$ok_association_2 = 0;


                            $franchise = new Application_Model_EuFranchise();
                            $franchiseM = new Application_Model_EuFranchiseMapper();
                            $franchise2 = $franchiseM->fetchAllByMembreType($sessionmembre->code_membre, "");
							if(count($franchise2) > 0){
								$ok_franchise_1 = 1;
							}
                    
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutreDetailBanque($bon_neutre->bon_neutre_id, "ELI");
                    if($bon_neutre_detail_somme > 0){
								$ok_eli_anticipe_1 = 1;
                    }
                	}


                            $franchise1 = new Application_Model_EuFranchise();
                            $franchise1M = new Application_Model_EuFranchiseMapper();
                            $franchise12 = $franchise1M->fetchAllByMembreType($_POST['bon_neutre_appro_beneficiaire'], "");
							if(count($franchise12) > 0){
								$ok_franchise_2 = 1;
							}

                    		$association1 = new Application_Model_EuAssociation();
                            $association1M = new Application_Model_EuAssociationMapper();
                            $association12 = $association1M->fetchAllByMembreGuichet($_POST['bon_neutre_appro_beneficiaire']);
							if(count($association12) > 0){
								$ok_association_2 = 1;
							}

                    
if($ok_franchise_1 == 1 && $ok_eli_anticipe_1 == 1 && $ok_franchise_2 == 1 && $ok_association_2 == 1){
	$bon_neutre_appro_montant = $request->getParam("bon_neutre_appro_montant") + ($request->getParam("bon_neutre_appro_montant") * Util_Utils::getParamEsmc(19) / 100);
}else{
	$bon_neutre_appro_montant = $request->getParam("bon_neutre_appro_montant");	
}



					$bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0)  {
						if($ok_eli_anticipe_1 == 1){

						if($bon_neutre_appro_montant > $bon_neutre_detail_somme) {
                             $db->rollback();
                             $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             return;
                        }
						}else{

						$bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                        $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
						if($bon_neutre_appro_montant > $bon_neutre->getBon_neutre_montant_solde()) {
                             $db->rollback();
                             $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             return;
                        }
						}
						
					} else {
                        $db->rollback();
                        $sessionmembre->error = "Le membre apporteur ne dispose pas de BAn ...";
                        return;
                    }
					

                    ////////////////////////////////////////
					 
					 //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                     do {
                        $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                        $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                        $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                     } while(count($bon_neutre_detail2) > 0);
					 
					 $bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
                     $bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

                     $compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
                     $bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                     $bon_neutre_appro->setBon_neutre_appro_beneficiaire(strtoupper($request->getParam("bon_neutre_appro_beneficiaire")));
                     $bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_appro->setBon_neutre_appro_montant($bon_neutre_appro_montant);
                     $bon_neutre_appro->setBon_neutre_appro_apporteur($sessionmembre->code_membre);
                     $bon_neutre_appro_mapper->save($bon_neutre_appro);
					 
					 //$bon_neutre->setBon_neutre_code($code_BAn);
                     //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                     $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $bon_neutre_appro_montant);
                     $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $bon_neutre_appro_montant);
                     $bon_neutreM->update($bon_neutre);

                     $bon_neutre_id = $bon_neutre->bon_neutre_id;
					 
					 /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                     $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                     $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                     $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                     $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                     $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_appro_montant);
                     $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
					 
					 ///////////////////////////////////////////////////////////////////////////

                     $mont = $bon_neutre_appro_montant;
                     $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                     $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					 foreach($bon_neutre_detail as $detail) {
                       $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                       $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                       $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                       if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL) {
                          $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                          $appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
                          $code_banque = $appro_detail->bon_neutre_appro_detail_banque;
                       } else {
                          $code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
                       }

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }


                       if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                          $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                          $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                          $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                          $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                          $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                          $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                          $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_detail2M->update($bon_neutre_detail2);
					 

					 $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                     $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                     $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                     $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                     $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                     $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                     $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                     $bon_neutre_utilise2M->save($bon_neutre_utilise2);
                                
                        } else {
                          $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                          $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                          $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                          $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                          $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                          $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                          $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                          $bon_neutre_detail2M->update($bon_neutre_detail2);
					 

					 $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                     $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                     $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                     $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                     $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                     $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                     $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                     $bon_neutre_utilise2M->save($bon_neutre_utilise2);
                                
                          break;
                        }					   
				     }
					 
					 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					 
					 $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                     $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
					 
					 if(count($bon_neutre3) > 0) {
					     $bon_neutre31 = new Application_Model_EuBonNeutre();
                         $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                         $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                         $bon_neutre31->setBon_neutre_code($code_BAn);
                         $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $bon_neutre_appro_montant);
                         $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $bon_neutre_appro_montant);
                         $bon_neutre31M->update($bon_neutre31);

                         $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                         $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                         $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                         $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                         $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                         $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                         $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                         $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                         $bon_neutre_detail->setId_canton($canton);
                         $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                         $bon_neutre_detail_mapper->save($bon_neutre_detail);
                         
					 } else {
                         $bon_neutre = new Application_Model_EuBonNeutre();
                         $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                         $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                         $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                         $bon_neutre->setBon_neutre_type("BAn");
                         $bon_neutre->setBon_neutre_code($code_BAn);
                         $bon_neutre->setBon_neutre_code_membre(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
                         $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $bon_neutre->setBon_neutre_montant($bon_neutre_appro_montant);
                         $bon_neutre->setBon_neutre_montant_utilise(0);
                         $bon_neutre->setBon_neutre_montant_solde($bon_neutre_appro_montant);
                         $bon_neutre->setBon_neutre_nom($nom);
                         $bon_neutre->setBon_neutre_prenom($prenom);
                         $bon_neutre->setBon_neutre_raison($raison);
                         $bon_neutre->setBon_neutre_email($email);
                         $bon_neutre->setBon_neutre_mobile($mobile);
                         $bon_neutre_mapper->save($bon_neutre);

                         $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                         $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                         $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                         $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                         $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                         $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                         $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                         $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                         $bon_neutre_detail->setId_canton($canton);
                         $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                         $bon_neutre_detail_mapper->save($bon_neutre_detail);
                    }
					
					
					///////////////////////////////////////////////////////////////////////////////////////
                    $db->commit();
                    $sessionmembre->error = "Opération bien effectuée. <br />
                    Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
                    Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
                    $sessionmembre->code_BAn = $code_BAn;
                    $montant_BAn = $request->getParam("bon_neutre_appro_montant");
                    $sessionmembre->montantbanappro = $montant_BAn;


                    $sessionmembre->bon_neutre_appro_apporteur = "";
                    $sessionmembre->bon_neutre_appro_beneficiaire = "";
                    $sessionmembre->bon_neutre_appro_montant = "";
                    $sessionmembre->confirmation_envoi = "";
                    $this->_redirect('/souscriptionbon/addbanappro');
				  
			  } catch(Exception $exc) {
                 $sessionmembre->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                 $db->rollback();
                 return;
              }
		  } else {  $sessionmembre->error = "Champs * obligatoire ..."; }
	   }
  }
	

	
  public function addbanapprosmsAction() {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

        if (isset($_POST['bon_neutre_appro_beneficiaire']) && $_POST['bon_neutre_appro_beneficiaire']!="" && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") {

                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();





if(isset($_POST['confirmation']) && $_POST['confirmation'] == 1) {
	
	$membreappro = new Application_Model_EuMembre();
	$m_membre  = new Application_Model_EuMembreMapper();
    $membremoraleappro = new Application_Model_EuMembreMorale();
	$m_membremorale  = new Application_Model_EuMembreMoraleMapper();
	
	if(substr($sessionmembre->code_membre,19,1) == 'P')  {
		$findappro = $m_membre->find($sessionmembre->code_membre,$membreappro);
		if($membreappro->desactiver == 1)  {
			$db->rollback();
		    $sessionmembre->error = "Ce membre dont le code membre  ".$sessionmembre->code_membre."  n'est pas autoriser à effectuer de cette opération  ...";
			return;
		}
	}  else {
			$findappro = $m_membremorale->find($sessionmembre->code_membre,$membremoraleappro);
			if($membremoraleappro->desactiver == 1)  {
				$db->rollback();
		        $sessionmembre->error = "Ce membre dont le code membre  ".$sessionmembre->code_membre."  n'est pas autoriser à effectuer de cette opération  ...";
			    return;
			}		
	}
	
	

if($_POST['bon_neutre_appro_beneficiaire'] == $sessionmembre->code_membre) {
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre du bénéficiaire doit etre different du Code Membre de l'apporteur. Merci...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
}
/////////////////////////////////////controle code membre
if(strlen($_POST['bon_neutre_appro_beneficiaire']) != 20) {
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
}else{
if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if($membre_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membre)){
                                }else{
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
                                }
								
								if($membre->desactiver == 1)  {
						            $db->rollback();
		                            $sessionmembre->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					                return;
					            }
								
								
                $canton = $membre->id_canton;
                $nom = $membre->nom_membre;
                $prenom = $membre->prenom_membre;
                $email = $membre->email_membre;
                $mobile = $membre->portable_membre;
                $raison = "";
    } else if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                if($membremorale_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membremorale)){
                                }else{
                                  $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
                                }
								
								if($membremorale->desactiver == 1)  {
						            $db->rollback();
		                            $sessionmembre->error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
					                return;
					            }
								
								
                $canton = $membremorale->id_canton;
                $nom = "";
                $prenom = "";
                $email = $membremorale->email_membre;
                $mobile = $membremorale->portable_membre;
                $raison = $membremorale->raison_sociale;
    }else{
      $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
    }
}

/*
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/souscriptionbon/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/souscriptionbon/addbanappro');
  return;

}

}   else {
                            $db->rollback();
                                          $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/souscriptionbon/addbanappro');
                            return;
}
*/


					

								$ok_franchise_1 = 0;
								$ok_eli_anticipe_1 = 0;
								$ok_franchise_2 = 0;
								$ok_association_2 = 0;


                            $franchise = new Application_Model_EuFranchise();
                            $franchiseM = new Application_Model_EuFranchiseMapper();
                            $franchise2 = $franchiseM->fetchAllByMembreType($sessionmembre->code_membre, "");
							if(count($franchise2) > 0){
								$ok_franchise_1 = 1;
							}
                    
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutreDetailBanque($bon_neutre->bon_neutre_id, "ELI");
                    if($bon_neutre_detail_somme > 0){
								$ok_eli_anticipe_1 = 1;
                    }
                	}


                            $franchise1 = new Application_Model_EuFranchise();
                            $franchise1M = new Application_Model_EuFranchiseMapper();
                            $franchise12 = $franchise1M->fetchAllByMembreType($_POST['bon_neutre_appro_beneficiaire'], "");
							if(count($franchise12) > 0){
								$ok_franchise_2 = 1;
							}

                    		$association1 = new Application_Model_EuAssociation();
                            $association1M = new Application_Model_EuAssociationMapper();
                            $association12 = $association1M->fetchAllByMembreGuichet($_POST['bon_neutre_appro_beneficiaire']);
							if(count($association12) > 0){
								$ok_association_2 = 1;
							}

                    
if($ok_franchise_1 == 1 && $ok_eli_anticipe_1 == 1 && $ok_franchise_2 == 1 && $ok_association_2 == 1){
	$bon_neutre_appro_montant = $request->getParam("bon_neutre_appro_montant") + ($request->getParam("bon_neutre_appro_montant") * Util_Utils::getParamEsmc(19) / 100);
}else{
	$bon_neutre_appro_montant = $request->getParam("bon_neutre_appro_montant");	
}



					$bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0)  {
						if($ok_eli_anticipe_1 == 1){

						if($bon_neutre_appro_montant > $bon_neutre_detail_somme) {
                             $db->rollback();
                             $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             return;
                        }
						}else{

						$bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                        $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
						if($bon_neutre_appro_montant > $bon_neutre->getBon_neutre_montant_solde()) {
                             $db->rollback();
                             $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             return;
                        }
						}
						
					} else {
                        $db->rollback();
                        $sessionmembre->error = "Le membre apporteur ne dispose pas de BAn ...";
                        return;
                    }
					

////////////////////////////////////////

				$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
				if($sms_connexion = $sms_connexion_mapper->fetchAllByCodeMembre3($sessionmembre->code_membre)){
					$this->view->sms_connexion_code_envoi = $sms_connexion->sms_connexion_code_envoi;
					$sessionmembre->confirmation_envoi = $sms_connexion->sms_connexion_code_envoi;


$compteur = Util_Utils::findConuter() + 1; 
Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, $sms_connexion->sms_connexion_code_recu);        


$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...2";
$sessionmembre->bon_neutre_appro_apporteur = $sessionmembre->code_membre;
$sessionmembre->bon_neutre_appro_beneficiaire = $_POST['bon_neutre_appro_beneficiaire'];
$sessionmembre->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];

                            $db->commit();


				}else {
					//$code_envoi = strtoupper(Util_Utils::genererCodeSMS(9));/
					do{
						                	$code_envoi = strtoupper(Util_Utils::genererCodeSMS(5));
					                    $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
					                    $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeEnvoi($code_envoi);
					}while(count($sms_connexion2) > 0);
					//$code_recu = strtoupper(Util_Utils::genererCodeSMS(9));/
					do{
															$code_recu = strtoupper(Util_Utils::genererCodeSMS(5));
															$sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
															$sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeRecu($code_recu);
					}while(count($sms_connexion2) > 0);

					$date_id = new Zend_Date(Zend_Date::ISO_8601);
					$sms_connexion1 = new Application_Model_EuSmsConnexion();
					$sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

					$compteur = $sms_connexion1_mapper->findConuter() + 1;
					$sms_connexion1->setSms_connexion_id($compteur);
					$sms_connexion1->setSms_connexion_code_envoi($code_envoi);
					$sms_connexion1->setSms_connexion_code_recu("Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");
					$sms_connexion1->setSms_connexion_code_membre($sessionmembre->code_membre);
					$sms_connexion1->setSms_connexion_utilise(0);
					$sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
					$sms_connexion1_mapper->save($sms_connexion1);


$compteur = Util_Utils::findConuter() + 1; 
Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, "Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");        

					$this->view->sms_connexion_code_envoi = $sms_connexion1->sms_connexion_code_envoi;
					$sessionmembre->confirmation_envoi = $sms_connexion1->sms_connexion_code_envoi;


$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...3";
$sessionmembre->bon_neutre_appro_apporteur = $sessionmembre->code_membre;
$sessionmembre->bon_neutre_appro_beneficiaire = $_POST['bon_neutre_appro_beneficiaire'];
$sessionmembre->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];

                            $db->commit();

				}





}else if(isset($_POST['confirmation']) && $_POST['confirmation'] == 2){


if($_POST['bon_neutre_appro_beneficiaire'] == $sessionmembre->code_membre) {
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre du bénéficiaire doit etre different du Code Membre de l'apporteur. Merci...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
}
/////////////////////////////////////controle code membre
if(strlen($_POST['bon_neutre_appro_beneficiaire']) != 20) {
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
}else{
if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if($membre_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membre)){
                                }else{
                                    $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
                                }
                $canton = $membre->id_canton;
                $nom = $membre->nom_membre;
                $prenom = $membre->prenom_membre;
                $email = $membre->email_membre;
                $mobile = $membre->portable_membre;
                $raison = "";
    } else if(substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                if($membremorale_mapper->find($_POST['bon_neutre_appro_beneficiaire'], $membremorale)){
                                }else{
                                  $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
                                }
                $canton = $membremorale->id_canton;
                $nom = "";
                $prenom = "";
                $email = $membremorale->email_membre;
                $mobile = $membremorale->portable_membre;
                $raison = $membremorale->raison_sociale;
    }else{
      $db->rollback();
                                    $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return;
    }
}


$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
$sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_recu']);
if($sms_connexion->sms_connexion_code_envoi == $sessionmembre->confirmation_envoi && $sms_connexion->sms_connexion_code_membre == $sessionmembre->code_membre){
//if(isset($_POST['code_recu']) && $_POST['code_recu'] == $sessionmembre->confirmation_envoi){
						$sms_connexion1 = new Application_Model_EuSmsConnexion();
						$sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
						$sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

						$sms_connexion1->setSms_connexion_utilise(1);
						$sms_connexion1_mapper->update($sms_connexion1);

						$sessionmembre->confirmation_envoi = "";
/*
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);


if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/souscriptionbon/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/souscriptionbon/addbanappro');
  return;

}


}   else {
                            $db->rollback();
                                          $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/souscriptionbon/addbanappro');
                            return;
}
*/


					

								$ok_franchise_1 = 0;
								$ok_eli_anticipe_1 = 0;
								$ok_franchise_2 = 0;
								$ok_association_2 = 0;


                            $franchise = new Application_Model_EuFranchise();
                            $franchiseM = new Application_Model_EuFranchiseMapper();
                            $franchise2 = $franchiseM->fetchAllByMembreType($sessionmembre->code_membre, "");
							if(count($franchise2) > 0){
								$ok_franchise_1 = 1;
							}
                    
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutreDetailBanque($bon_neutre->bon_neutre_id, "ELI");
                    if($bon_neutre_detail_somme > 0){
								$ok_eli_anticipe_1 = 1;
                    }
                	}


                            $franchise1 = new Application_Model_EuFranchise();
                            $franchise1M = new Application_Model_EuFranchiseMapper();
                            $franchise12 = $franchise1M->fetchAllByMembreType($_POST['bon_neutre_appro_beneficiaire'], "");
							if(count($franchise12) > 0){
								$ok_franchise_2 = 1;
							}

                    		$association1 = new Application_Model_EuAssociation();
                            $association1M = new Application_Model_EuAssociationMapper();
                            $association12 = $association1M->fetchAllByMembreGuichet($_POST['bon_neutre_appro_beneficiaire']);
							if(count($association12) > 0){
								$ok_association_2 = 1;
							}

                    
if($ok_franchise_1 == 1 && $ok_eli_anticipe_1 == 1 && $ok_franchise_2 == 1 && $ok_association_2 == 1){
	$bon_neutre_appro_montant = $request->getParam("bon_neutre_appro_montant") + ($request->getParam("bon_neutre_appro_montant") * Util_Utils::getParamEsmc(19) / 100);
}else{
	$bon_neutre_appro_montant = $request->getParam("bon_neutre_appro_montant");	
}



					$bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0)  {
						if($ok_eli_anticipe_1 == 1){

						if($bon_neutre_appro_montant > $bon_neutre_detail_somme) {
                             $db->rollback();
                             $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             return;
                        }
						}else{

						$bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                        $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
						if($bon_neutre_appro_montant > $bon_neutre->getBon_neutre_montant_solde()) {
                             $db->rollback();
                             $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             return;
                        }
						}
						
					} else {
                        $db->rollback();
                        $sessionmembre->error = "Le membre apporteur ne dispose pas de BAn ...";
                        return;
                    }
					

////////////////////////////////////////



                //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                do{
                                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                }while(count($bon_neutre_detail2) > 0);




$bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

$compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
$bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro->setBon_neutre_appro_beneficiaire(strtoupper($request->getParam("bon_neutre_appro_beneficiaire")));
$bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro->setBon_neutre_appro_montant($bon_neutre_appro_montant);
$bon_neutre_appro->setBon_neutre_appro_apporteur($sessionmembre->code_membre);
$bon_neutre_appro_mapper->save($bon_neutre_appro);





                                //$bon_neutre->setBon_neutre_code($code_BAn);
                                //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $bon_neutre_appro_montant);
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $bon_neutre_appro_montant);
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_appro_montant);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/

///////////////////////////////////////////////////////////////////////////

$mont = $bon_neutre_appro_montant;

                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                   
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL){
$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
$code_banque = $appro_detail->bon_neutre_appro_detail_banque;
}else{
$code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
}

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }


                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
$mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_appro_beneficiaire'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }


                        }
                            


///////////////////////////////////////////////////////////////////////////

                $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
                if(count($bon_neutre3) > 0){
                  $bon_neutre31 = new Application_Model_EuBonNeutre();
                                $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                                $bon_neutre31->setBon_neutre_code($code_BAn);
                                $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $bon_neutre_appro_montant);
                  $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $bon_neutre_appro_montant);
                                $bon_neutre31M->update($bon_neutre31);


                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                                $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                                $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                                $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                $bon_neutre_detail->setId_canton($canton);
                                $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                $bon_neutre_detail_mapper->save($bon_neutre_detail);


                  }else{

                                              $bon_neutre = new Application_Model_EuBonNeutre();
                                  $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                                  $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                                  $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre->setBon_neutre_type("BAn");
                                  $bon_neutre->setBon_neutre_code($code_BAn);
                                  $bon_neutre->setBon_neutre_code_membre(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
                                  $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre->setBon_neutre_montant($bon_neutre_appro_montant);
                                  $bon_neutre->setBon_neutre_montant_utilise(0);
                                  $bon_neutre->setBon_neutre_montant_solde($bon_neutre_appro_montant);
                                  $bon_neutre->setBon_neutre_nom($nom);
                                  $bon_neutre->setBon_neutre_prenom($prenom);
                                  $bon_neutre->setBon_neutre_raison($raison);
                                  $bon_neutre->setBon_neutre_email($email);
                                  $bon_neutre->setBon_neutre_mobile($mobile);
                                  $bon_neutre_mapper->save($bon_neutre);




                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                  $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                  $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                  $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                                  $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                  $bon_neutre_detail->setId_canton($canton);
                                  $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                  $bon_neutre_detail_mapper->save($bon_neutre_detail);


                    }


                            ///////////////////////////////////////////////////////////////////////////////////////

                            $db->commit();
                            $sessionmembre->error = "Opération bien effectuée. <br />
Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
                            $sessionmembre->code_BAn = $code_BAn;

$sessionmembre->bon_neutre_appro_apporteur = "";
$sessionmembre->bon_neutre_appro_beneficiaire = "";
$sessionmembre->bon_neutre_appro_montant = "";
$sessionmembre->confirmation_envoi = "";

                            $this->_redirect('/souscriptionbon/addbanappro');
                            return;


}else{


$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
$sessionmembre->bon_neutre_appro_apporteur = $sessionmembre->code_membre;
$sessionmembre->bon_neutre_appro_beneficiaire = $_POST['bon_neutre_appro_beneficiaire'];
$sessionmembre->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];



}

}

                    }  catch (Exception $exc) {
                        $sessionmembre->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        //$this->_redirect('/souscriptionbon/addbanappro');
                        return;
                    }
                  }   else {  $sessionmembre->error = "Champs * obligatoire ..."; }
}
    }






    public function listbanapproapporteurAction()
    {
        /* page espacepersonnel/listrecu - Liste des reçus */

        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }

        $banappro = new Application_Model_EuBonNeutreApproMapper();
        $this->view->entries = $banappro->fetchAllByApporteur($sessionmembre->code_membre);

        $this->view->tabletri = 1;

    }


      public function listbanapprobeneficiaireAction()
      {
        /* page espacepersonnel/listrecu - Liste des reçus */

        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
          $this->_redirect('/');
        }

        $banappro = new Application_Model_EuBonNeutreApproMapper();
        $this->view->entries = $banappro->fetchAllByBeneficiaire($sessionmembre->code_membre);

        $this->view->tabletri = 1;

      }





public function migrertelephoneAction() {
        /* page espacepersonnel/migrertelephone -  */

        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
          $this->_redirect('/');
        }

        
        $table_membre = new Application_Model_DbTable_EuMembre();
        $select = $table_membre->select();
        $resultSet = $table_membre->fetchAll($select);
        foreach ($resultSet as $row) {
////////////////////////////////////portable_membre
            $portable = $row->portable_membre;

$portable = trim($portable);
$portable = str_replace(" ", "", $portable);
$portable = str_replace("-", "", $portable);
$portable = str_replace("+", "", $portable);
$portable = str_replace("S/C", "", $portable);
$portable = str_replace("s/c", "", $portable);
$portable = str_replace("SC", "", $portable);
$portable = str_replace("sc", "", $portable);

if (strlen($portable) > 8) {
    if(substr($portable, 0, 3) == "228"){
$portable = substr($portable, -8);
    }
}


if (strlen($portable) == 8) {
$compagnie = telephonecompagnie(228, $portable);
$numero_telephone = intval(228).$portable;

if($compagnie == 1){
//$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{
                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($row->code_membre);
                    $m_telephone->save($telephone);



                $membre = new Application_Model_EuMembre();
                $m_membre = new Application_Model_EuMembreMapper();
                $m_membre->find($row->code_membre, $membre);

                    $membre->setPortable_membre($numero_telephone);
                    $m_membre->update($membre);
}
}else{


$tab_portable = array();
$pos1 = stripos($portable, "/");
if ($pos1 !== false) {
    $tab_portable = explode("/", $portable);

for($i = 0; $i < count($tab_portable); $i++) {
 
if (strlen($tab_portable[$i]) > 8) {
    if(substr($tab_portable[$i], 0, 3) == "228"){
$tab_portable[$i] = substr($tab_portable[$i], -8);
    }
}


if (strlen($tab_portable[$i]) == 8) {
$compagnie = telephonecompagnie(228, $tab_portable[$i]);
$numero_telephone = intval(228).$tab_portable[$i];

if($compagnie == 1){
//$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{
                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($row->code_membre);
                    $m_telephone->save($telephone);



                $membre = new Application_Model_EuMembre();
                $m_membre = new Application_Model_EuMembreMapper();
                $m_membre->find($row->code_membre, $membre);

                    $membre->setPortable_membre($numero_telephone);
                    $m_membre->update($membre);
}
}
}

}
}


////////////////////////////////////tel_membre
            $tel = $row->tel_membre;

$tel = trim($tel);
$tel = str_replace(" ", "", $tel);
$tel = str_replace("-", "", $tel);
$tel = str_replace("+", "", $tel);
$tel = str_replace("S/C", "", $tel);
$tel = str_replace("s/c", "", $tel);
$tel = str_replace("SC", "", $tel);
$tel = str_replace("sc", "", $tel);

if (strlen($tel) > 8) {
    if(substr($tel, 0, 3) == "228"){
$tel = substr($tel, -8);
    }
}


if (strlen($tel) == 8) {
$compagnie = telephonecompagnie(228, $tel);
$numero_telephone = intval(228).$tel;

if($compagnie == 1){
//$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{
                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($row->code_membre);
                    $m_telephone->save($telephone);



                $membre = new Application_Model_EuMembre();
                $m_membre = new Application_Model_EuMembreMapper();
                $m_membre->find($row->code_membre, $membre);

                    $membre->setTel_membre(NULL);
                    $m_membre->update($membre);
}
}else{



$tab_telephone = array();
$pos1 = stripos($tel, "/");
if ($pos1 !== false) {
    $tab_telephone = explode("/", $tel);


for($i = 0; $i < count($tab_telephone); $i++) {
 
if (strlen($tab_telephone[$i]) > 8) {
    if(substr($tab_telephone[$i], 0, 3) == "228"){
$tab_telephone[$i] = substr($tab_telephone[$i], -8);
    }
}


if (strlen($tab_telephone[$i]) == 8) {
$compagnie = telephonecompagnie(228, $tab_telephone[$i]);
$numero_telephone = intval(228).$tab_telephone[$i];

if($compagnie == 1){
//$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{
                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($row->code_membre);
                    $m_telephone->save($telephone);



                $membre = new Application_Model_EuMembre();
                $m_membre = new Application_Model_EuMembreMapper();
                $m_membre->find($row->code_membre, $membre);

                    $membre->setTel_membre(NULL);
                    $m_membre->update($membre);
}
}
}

}
}


        }


      }




public function migrertelephonepmAction() {
        /* page espacepersonnel/migrertelephone -  */

        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if (!isset($sessionmembre->code_membre)) {
          $this->_redirect('/');
        }

        
        $table_membre = new Application_Model_DbTable_EuMembreMorale();
        $select = $table_membre->select();
        $resultSet = $table_membre->fetchAll($select);
        foreach ($resultSet as $row) {
////////////////////////////////////portable_membre
            $portable = $row->portable_membre;

$portable = trim($portable);
$portable = str_replace(" ", "", $portable);
$portable = str_replace("-", "", $portable);
$portable = str_replace("+", "", $portable);
$portable = str_replace("S/C", "", $portable);
$portable = str_replace("s/c", "", $portable);
$portable = str_replace("SC", "", $portable);
$portable = str_replace("sc", "", $portable);

if (strlen($portable) > 8) {
    if(substr($portable, 0, 3) == "228"){
$portable = substr($portable, -8);
    }
}


if (strlen($portable) == 8) {
$compagnie = telephonecompagnie(228, $portable);
$numero_telephone = intval(228).$portable;

if($compagnie == 1){
//$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{
                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($row->code_membre_morale);
                    $m_telephone->save($telephone);



                $membre = new Application_Model_EuMembreMorale();
                $m_membre = new Application_Model_EuMembreMoraleMapper();
                $m_membre->find($row->code_membre_morale, $membre);

                    $membre->setPortable_membre($numero_telephone);
                    $m_membre->update($membre);
}
}else{



$tab_portable = array();
$pos1 = stripos($portable, "/");
if ($pos1 !== false) {
    $tab_portable = explode("/", $portable);

for($i = 0; $i < count($tab_portable); $i++) {
 
if (strlen($tab_portable[$i]) > 8) {
    if(substr($tab_portable[$i], 0, 3) == "228"){
$tab_portable[$i] = substr($tab_portable[$i], -8);
    }
}


if (strlen($tab_portable[$i]) == 8) {
$compagnie = telephonecompagnie(228, $tab_portable[$i]);
$numero_telephone = intval(228).$tab_portable[$i];

if($compagnie == 1){
//$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{
                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($row->code_membre_morale);
                    $m_telephone->save($telephone);



                $membre = new Application_Model_EuMembreMorale();
                $m_membre = new Application_Model_EuMembreMoraleMapper();
                $m_membre->find($row->code_membre_morale, $membre);

                    $membre->setPortable_membre($numero_telephone);
                    $m_membre->update($membre);
}
}
}

}
}


////////////////////////////////////tel_membre
            $tel = $row->tel_membre;

$tel = trim($tel);
$tel = str_replace(" ", "", $tel);
$tel = str_replace("-", "", $tel);
$tel = str_replace("+", "", $tel);
$tel = str_replace("S/C", "", $tel);
$tel = str_replace("s/c", "", $tel);
$tel = str_replace("SC", "", $tel);
$tel = str_replace("sc", "", $tel);

if (strlen($tel) > 8) {
    if(substr($tel, 0, 3) == "228"){
$tel = substr($tel, -8);
    }
}


if (strlen($tel) == 8) {
$compagnie = telephonecompagnie(228, $tel);
$numero_telephone = intval(228).$tel;

if($compagnie == 1){
//$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{
                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($row->code_membre_morale);
                    $m_telephone->save($telephone);



                $membre = new Application_Model_EuMembreMorale();
                $m_membre = new Application_Model_EuMembreMoraleMapper();
                $m_membre->find($row->code_membre_morale, $membre);

                    $membre->setTel_membre(NULL);
                    $m_membre->update($membre);
}
}else{



$tab_telephone = array();
$pos1 = stripos($tel, "/");
if ($pos1 !== false) {
    $tab_telephone = explode("/", $tel);


for($i = 0; $i < count($tab_telephone); $i++) {
 
if (strlen($tab_telephone[$i]) > 8) {
    if(substr($tab_telephone[$i], 0, 3) == "228"){
$tab_telephone[$i] = substr($tab_telephone[$i], -8);
    }
}


if (strlen($tab_telephone[$i]) == 8) {
$compagnie = telephonecompagnie(228, $tab_telephone[$i]);
$numero_telephone = intval(228).$tab_telephone[$i];

if($compagnie == 1){
//$this->view->error = "Veuillez bien saisir le numéro de téléphone, le nombre de chiffre n'est pas correct.";
}else{
                $telephone = new Application_Model_EuTelephone();
                $m_telephone = new Application_Model_EuTelephoneMapper();

                    $compteur = $m_telephone->findConuter() + 1;

                    $telephone->setId_telephone($compteur);
                    $telephone->setNumero_telephone($numero_telephone);
                    $telephone->setCompagnie_telephone($compagnie);
                    $telephone->setCode_membre($row->code_membre_morale);
                    $m_telephone->save($telephone);



                $membre = new Application_Model_EuMembreMorale();
                $m_membre = new Application_Model_EuMembreMoraleMapper();
                $m_membre->find($row->code_membre_morale, $membre);

                    $membre->setTel_membre(NULL);
                    $m_membre->update($membre);
}
}
}

}
}


        }

      }



   public  function  addbanapprocmAction()  {
	    $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if(!isset($sessionmembre->code_membre)) {
          $this->_redirect('/');
        }


        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;

        $date_id = Zend_Date::now();

        $request = $this->getRequest();
        if($request->isPost()) {
	         if(((isset($_POST['bon_neutre_nom']) && $_POST['bon_neutre_nom']!="" && isset($_POST['bon_neutre_prenom']) 
		     && $_POST['bon_neutre_prenom']!="" && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="") 
			 ||(isset($_POST['bon_neutre_raison']) && $_POST['bon_neutre_raison']!="")) 
		     && isset($_POST['bon_neutre_mobile']) && $_POST['bon_neutre_mobile'] > 0 
			 && isset($_POST['bon_neutre_email']) && $_POST['bon_neutre_email']!="" 
			 && isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']!="" 
             && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") {
	            
				$db = Zend_Db_Table::getDefaultAdapter();
                $db->beginTransaction();
                try {
					$date_id = Zend_Date::now();
					/////////////////controle nom prenom
                    if(isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']=="PP") {
                        $eupreinscription = new Application_Model_DbTable_EuMembre();
                        $prenom_membre = $_POST['bon_neutre_prenom'];
	                    $prenom_membre = str_replace("'", " ", $prenom_membre);
	                    $tabprenom = explode(" ",$prenom_membre);
					
	                    $nom_membre = $_POST['bon_neutre_nom'];
	                    $nom_membre = str_replace("'", " ", $nom_membre);

                        $select = $eupreinscription->select();
                        $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

                        //$tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
                        foreach($tabprenom as $value) {
                           $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
                        }

                        $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
                        $select->limit(1);
                        $rowseupreinscription = $eupreinscription->fetchRow($select);
                        if(count($rowseupreinscription) > 0) {
                           $sessionmembre->error = $_POST['bon_neutre_nom']." ".$_POST['bon_neutre_prenom']." est déjà membre ...";
                           $db->rollback();
                           return;
                        }
                     }
					 
					 /////////////////controle raison sociale
                     if(isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']=="PM") {
                         $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                         $select = $eupreinscription->select();
                         $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$_POST['bon_neutre_raison'])));

                         $select->limit(1);
                         $rowseupreinscription = $eupreinscription->fetchRow($select);
                         if(count($rowseupreinscription) > 0) {
                            $sessionmembre->error = $_POST['bon_neutre_raison']." est déjà membre ...";
                            $db->rollback();
                            return;
                         }
                      }
					  
					  $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                      $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
					  
					  if(count($bon_neutre2) == 0) {
						$db->rollback();
                        $sessionmembre->error = "Le membre apporteur ne dispose pas de BAn ...";
                        return;
					  }
					  
					  $bon_neutre = new Application_Model_EuBonNeutre();
                      $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                      $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
					  
					  if($request->getParam("bon_neutre_appro_montant") <= 0) {
                        $db->rollback();
                        $sessionmembre->error = "Le montant à allouer doit etre supérieur à 0...";
                        return;
                      }
					  
					  if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()) {
                        $db->rollback();
                        $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
                        return;
                      }
					  
					  //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                      do {
                         $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                         $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                         $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                      } while(count($bon_neutre_detail2) > 0);
					  
					  $bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
                      $bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

                      $compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
                      $bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                      $bon_neutre_appro->setBon_neutre_appro_beneficiaire(NULL);
                      $bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre_appro->setBon_neutre_appro_montant($request->getParam("bon_neutre_appro_montant"));
                      $bon_neutre_appro->setBon_neutre_appro_apporteur($sessionmembre->code_membre);
                      $bon_neutre_appro_mapper->save($bon_neutre_appro);
					  
					  //$bon_neutre->setBon_neutre_code($code_BAn);
                      //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                      $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $request->getParam("bon_neutre_appro_montant"));
                      $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $request->getParam("bon_neutre_appro_montant"));
                      $bon_neutreM->update($bon_neutre);

                      $bon_neutre_id = $bon_neutre->bon_neutre_id;
					  /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                      $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                      $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                      $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                      $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                      $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                      $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                      $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre_utilise2->setBon_neutre_utilise_montant($request->getParam("bon_neutre_appro_montant"));
                      $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
					  
					  
					  ///////////////////////////////////////////////////////////////////////////
                      $mont = $request->getParam("bon_neutre_appro_montant");
                      $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                      $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
					  
					  foreach($bon_neutre_detail as $detail) {
						 $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                         $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                         $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);
                         if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL) {
                            $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                            $appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
                            $code_banque = $appro_detail->bon_neutre_appro_detail_banque;
                         } else {
                            $code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
                         }

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }


                         if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                            $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                            $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                            $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                            $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                            $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                            $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                            $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                            $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                            $bon_neutre_detail2M->update($bon_neutre_detail2);
					

					  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                      $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                      $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                      $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                      $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                      $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                      $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                      $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                      $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                      $bon_neutre_utilise2M->save($bon_neutre_utilise2);
					  
                          } else {
                            $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                            $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                            $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                            $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
                            $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                            $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                            $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                            $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                            $bon_neutre_detail2M->update($bon_neutre_detail2);
					

					  $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                      $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                      $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                      $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                      $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                      $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                      $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                      $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                      $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                      $bon_neutre_utilise2M->save($bon_neutre_utilise2);
					  
                            break;
                          }
					  }
					  
					  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
					  $bon_neutre = new Application_Model_EuBonNeutre();
                      $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                      $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                      $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                      $bon_neutre->setBon_neutre_type("BAn");
                      $bon_neutre->setBon_neutre_code($code_BAn);
                      $bon_neutre->setBon_neutre_code_membre(NULL);
                      $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_appro_montant"));
                      $bon_neutre->setBon_neutre_montant_utilise(0);
                      $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_appro_montant"));
                      $bon_neutre->setBon_neutre_nom($_POST['bon_neutre_nom']);
                      $bon_neutre->setBon_neutre_prenom($_POST['bon_neutre_prenom']);
                      $bon_neutre->setBon_neutre_raison($_POST['bon_neutre_raison']);
                      $bon_neutre->setBon_neutre_email($_POST['bon_neutre_email']);
                      $bon_neutre->setBon_neutre_mobile($_POST['bon_neutre_mobile']);
                      $bon_neutre_mapper->save($bon_neutre);
					  
					  $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                      $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                      $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                      $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                      $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                      $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                      $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                      $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                      $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                      $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                      $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                      $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                      $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                      $bon_neutre_detail->setId_canton($_POST['id_canton']);
                      $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                      $bon_neutre_detail_mapper->save($bon_neutre_detail);

                      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                      $db->commit();
                      $sessionmembre->error = "Opération bien effectuée. <br />
                      Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
                      Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
                      $sessionmembre->code_BAn = $code_BAn;

                      $sessionmembre->bon_neutre_appro_apporteur = "";
                      $sessionmembre->bon_neutre_nom = "";
                      $sessionmembre->bon_neutre_prenom = "";
                      $sessionmembre->bon_neutre_raison = "";
                      $sessionmembre->bon_neutre_personne = "";
                      $sessionmembre->bon_neutre_mobile = "";
                      $sessionmembre->bon_neutre_email = "";
                      //$sessionmembre->id_canton = "";
                      $sessionmembre->bon_neutre_appro_montant = "";
                      $sessionmembre->confirmation_envoi = "";
                      $sessionmembre->date_nais_membre = "";

                      $this->_redirect('/souscriptionbon/addbanapprocm');
					
				} catch(Exception $exc) {
                    $sessionmembre->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                    $db->rollback();
                    return;
                }
				
		     } else {  $sessionmembre->error = "Champs * obligatoire ..."; }
         }
		 
		 
   }
   
   


   public function addbanapprocmsmsAction() {
        $sessionmembre = new Zend_Session_Namespace('membre');
        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmcperso');

        if(!isset($sessionmembre->code_membre)) {
            $this->_redirect('/');
        }


        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if ((
  (isset($_POST['bon_neutre_nom']) && $_POST['bon_neutre_nom']!="" && isset($_POST['bon_neutre_prenom']) && $_POST['bon_neutre_prenom']!="" && isset($_POST['date_nais_membre']) && $_POST['date_nais_membre']!="") ||
  (isset($_POST['bon_neutre_raison']) && $_POST['bon_neutre_raison']!="")
  ) &&
  
  isset($_POST['bon_neutre_mobile']) && $_POST['bon_neutre_mobile']>0 &&
  isset($_POST['bon_neutre_email']) && $_POST['bon_neutre_email']!="" &&
  isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']!="" /*&&
  isset($_POST['id_canton']) && $_POST['id_canton']!=""*/

   && isset($_POST['bon_neutre_appro_montant']) && $_POST['bon_neutre_appro_montant']!="") {

                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();

              /////////////////controle nom prenom
if(isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']=="PP"){
              $eupreinscription = new Application_Model_DbTable_EuMembre();
              $prenom_membre = $_POST['bon_neutre_prenom'];
	      $prenom_membre = str_replace("'", " ", $prenom_membre);
	      $tabprenom = explode(" ",$prenom_membre);
					
	      $nom_membre = $_POST['bon_neutre_nom'];
	      $nom_membre = str_replace("'", " ", $nom_membre);

              $select = $eupreinscription->select();
              $select->where("LOWER(REPLACE(nom_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$nom_membre)));

              //$tabprenom = explode(" ", $bon_neutre->bon_neutre_prenom);
              foreach ($tabprenom as $value) {
                $select->where("LOWER(REPLACE(prenom_membre, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
              }

              $select->where("LOWER(REPLACE(date_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("date_nais_membre"))));
              //$select->where("LOWER(REPLACE(lieu_nais_membre, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$request->getParam("lieu_nais_membre"))));
              $select->limit(1);
              $rowseupreinscription = $eupreinscription->fetchRow($select);
              if(count($rowseupreinscription) > 0) {
                $sessionmembre->error = $_POST['bon_neutre_nom']." ".$_POST['bon_neutre_prenom']." est déjà membre ...";
                $db->rollback();
                //$this->_redirect('/souscriptionbon/addbanapprocm');
                return;
              }
}


                        /////////////////controle raison sociale
if(isset($_POST['bon_neutre_personne']) && $_POST['bon_neutre_personne']=="PM"){
              $eupreinscription = new Application_Model_DbTable_EuMembreMorale();
                      $select = $eupreinscription->select();
                      $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE ? ", strtolower(str_replace(" ", "",$_POST['bon_neutre_raison'])));

            /*$tabraison = explode("", $bon_neutre->bon_neutre_raison);
            foreach ($tabraison as $value) {
                      $select->where("LOWER(REPLACE(raison_sociale, ' ', '')) LIKE '%".strtolower(str_replace(" ", "",$value))."%' ");
            }*/

                      $select->limit(1);
                      $rowseupreinscription = $eupreinscription->fetchRow($select);
                    if(count($rowseupreinscription) > 0) {
                            $sessionmembre->error = $_POST['bon_neutre_raison']." est déjà membre ...";
                            $db->rollback();
                            //$this->_redirect('/souscriptionbon/addbanapprocm');
                            return;
                  }
}


if(isset($_POST['confirmation']) && $_POST['confirmation'] == 1){



                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);


if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/souscriptionbon/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/souscriptionbon/addbanapprocm');
  return;

}



                $sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
                if($sms_connexion = $sms_connexion_mapper->fetchAllByCodeMembre3($sessionmembre->code_membre)){
                    $this->view->sms_connexion_code_envoi = $sms_connexion->sms_connexion_code_envoi;
                    $sessionmembre->confirmation_envoi = $sms_connexion->sms_connexion_code_envoi;


//$compteur = Util_Utils::findConuter() + 1; 
//Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, $sms_connexion->sms_connexion_code_recu);        


$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...2";
$sessionmembre->bon_neutre_appro_apporteur = $sessionmembre->code_membre;
$sessionmembre->bon_neutre_nom = $_POST['bon_neutre_nom'];
$sessionmembre->bon_neutre_prenom = $_POST['bon_neutre_prenom'];
$sessionmembre->bon_neutre_raison = $_POST['bon_neutre_raison'];
$sessionmembre->bon_neutre_personne = $_POST['bon_neutre_personne'];
$sessionmembre->bon_neutre_mobile = $_POST['bon_neutre_mobile'];
$sessionmembre->bon_neutre_email = $_POST['bon_neutre_email'];
//$sessionmembre->id_canton = $_POST['id_canton'];
$sessionmembre->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];
$sessionmembre->date_nais_membre = $_POST['date_nais_membre'];


                            $db->commit();


                }else {
                    //$code_envoi = strtoupper(Util_Utils::genererCodeSMS(9));/
                    do{
                                            $code_envoi = strtoupper(Util_Utils::genererCodeSMS(5));
                                        $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
                                        $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeEnvoi($code_envoi);
                    }while(count($sms_connexion2) > 0);
                    //$code_recu = strtoupper(Util_Utils::genererCodeSMS(9));/
                    do{
                                                            $code_recu = strtoupper(Util_Utils::genererCodeSMS(5));
                                                            $sms_connexion2_mapper = new Application_Model_EuSmsConnexionMapper();
                                                            $sms_connexion2 = $sms_connexion2_mapper->fetchAllByCodeRecu($code_recu);
                    }while(count($sms_connexion2) > 0);

                    $date_id = new Zend_Date(Zend_Date::ISO_8601);
                    $sms_connexion1 = new Application_Model_EuSmsConnexion();
                    $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();

                    $compteur = $sms_connexion1_mapper->findConuter() + 1;
                    $sms_connexion1->setSms_connexion_id($compteur);
                    $sms_connexion1->setSms_connexion_code_envoi($code_envoi);
                    $sms_connexion1->setSms_connexion_code_recu("Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");
                    $sms_connexion1->setSms_connexion_code_membre($sessionmembre->code_membre);
                    $sms_connexion1->setSms_connexion_utilise(0);
                    $sms_connexion1->setSms_connexion_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                    $sms_connexion1_mapper->save($sms_connexion1);


//$compteur = Util_Utils::findConuter() + 1; 
//Util_Utils::addSms3Easys($compteur, $sessionmembre->portable_membre, "Veuillez saisir ce code dans le formulaire de confirmation de l'approvisionnement : ".$code_recu.". Merci. ESMC");        

                    $this->view->sms_connexion_code_envoi = $sms_connexion1->sms_connexion_code_envoi;
                    $sessionmembre->confirmation_envoi = $sms_connexion1->sms_connexion_code_envoi;


$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...3";
$sessionmembre->bon_neutre_appro_apporteur = $sessionmembre->code_membre;
$sessionmembre->bon_neutre_nom = $_POST['bon_neutre_nom'];
$sessionmembre->bon_neutre_prenom = $_POST['bon_neutre_prenom'];
$sessionmembre->bon_neutre_raison = $_POST['bon_neutre_raison'];
$sessionmembre->bon_neutre_personne = $_POST['bon_neutre_personne'];
$sessionmembre->bon_neutre_mobile = $_POST['bon_neutre_mobile'];
$sessionmembre->bon_neutre_email = $_POST['bon_neutre_email'];
//$sessionmembre->id_canton = $_POST['id_canton'];
$sessionmembre->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];
$sessionmembre->date_nais_membre = $_POST['date_nais_membre'];

                            $db->commit();

                }


}   else {
                            $db->rollback();
                                          $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/souscriptionbon/addbanapprocm');
                            return;
}



}else if(isset($_POST['confirmation']) && $_POST['confirmation'] == 2){




$sms_connexion_mapper = new Application_Model_EuSmsConnexionMapper();
$sms_connexion = $sms_connexion_mapper->fetchAllByCodeRecu($_POST['code_recu']);
if($sms_connexion->sms_connexion_code_envoi == $sessionmembre->confirmation_envoi && $sms_connexion->sms_connexion_code_membre == $sessionmembre->code_membre){
//if(isset($_POST['code_recu']) && $_POST['code_recu'] == $sessionmembre->confirmation_envoi){
                        $sms_connexion1 = new Application_Model_EuSmsConnexion();
                        $sms_connexion1_mapper = new Application_Model_EuSmsConnexionMapper();
                        $sms_connexion1_mapper->find($sms_connexion->sms_connexion_id, $sms_connexion1);

                        $sms_connexion1->setSms_connexion_utilise(1);
                        $sms_connexion1_mapper->update($sms_connexion1);

                        $sessionmembre->confirmation_envoi = "";

                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($sessionmembre->code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

if($request->getParam("bon_neutre_appro_montant") <= 0){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/souscriptionbon/addbanappro');
  return;

}

if($request->getParam("bon_neutre_appro_montant") > $bon_neutre->getBon_neutre_montant_solde()){
  $db->rollback();
                $sessionmembre->error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/souscriptionbon/addbanapprocm');
  return;

}








                //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                do{
                                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                }while(count($bon_neutre_detail2) > 0);




$bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

$compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
$bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro->setBon_neutre_appro_beneficiaire(NULL);
$bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro->setBon_neutre_appro_montant($request->getParam("bon_neutre_appro_montant"));
$bon_neutre_appro->setBon_neutre_appro_apporteur($sessionmembre->code_membre);
$bon_neutre_appro_mapper->save($bon_neutre_appro);





                                //$bon_neutre->setBon_neutre_code($code_BAn);
                                //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $request->getParam("bon_neutre_appro_montant"));
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($request->getParam("bon_neutre_appro_montant"));
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/

///////////////////////////////////////////////////////////////////////////

$mont = $request->getParam("bon_neutre_appro_montant");

                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                   
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL){
$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
$code_banque = $appro_detail->bon_neutre_appro_detail_banque;
}else{
$code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
}

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                       	$code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                       	$code_banque2 = $code_banque;
                       }


                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
$mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                



                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);



                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($_POST['bon_neutre_personne'], -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($_POST['bon_neutre_personne'], -1, 1)." pour CM");
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
              		   $bon_neutre_utilise2->setUsertable("utilisateur");
                       $bon_neutre_utilise2->setUser_id(1);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }


                        }
                            


///////////////////////////////////////////////////////////////////////////

                

                                  $bon_neutre = new Application_Model_EuBonNeutre();
                                  $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                                  $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                                  $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre->setBon_neutre_type("BAn");
                                  $bon_neutre->setBon_neutre_code($code_BAn);
                                  $bon_neutre->setBon_neutre_code_membre(NULL);
                                  $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre->setBon_neutre_montant($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre->setBon_neutre_montant_utilise(0);
                                  $bon_neutre->setBon_neutre_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre->setBon_neutre_nom($_POST['bon_neutre_nom']);
                                  $bon_neutre->setBon_neutre_prenom($_POST['bon_neutre_prenom']);
                                  $bon_neutre->setBon_neutre_raison($_POST['bon_neutre_raison']);
                                  $bon_neutre->setBon_neutre_email($_POST['bon_neutre_email']);
                                  $bon_neutre->setBon_neutre_mobile($_POST['bon_neutre_mobile']);
                                  $bon_neutre_mapper->save($bon_neutre);




                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                  $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                  $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                  $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre_detail->setBon_neutre_detail_montant($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_solde($request->getParam("bon_neutre_appro_montant"));
                                  $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                  $bon_neutre_detail->setId_canton($_POST['id_canton']);
                                  $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                  $bon_neutre_detail_mapper->save($bon_neutre_detail);


                    


                            ///////////////////////////////////////////////////////////////////////////////////////

                            $db->commit();
                            $sessionmembre->error = "Opération bien effectuée. <br />
Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
                            $sessionmembre->code_BAn = $code_BAn;

$sessionmembre->bon_neutre_appro_apporteur = "";
$sessionmembre->bon_neutre_nom = "";
$sessionmembre->bon_neutre_prenom = "";
$sessionmembre->bon_neutre_raison = "";
$sessionmembre->bon_neutre_personne = "";
$sessionmembre->bon_neutre_mobile = "";
$sessionmembre->bon_neutre_email = "";
//$sessionmembre->id_canton = "";
$sessionmembre->bon_neutre_appro_montant = "";
$sessionmembre->confirmation_envoi = "";
$sessionmembre->date_nais_membre = "";

                            $this->_redirect('/souscriptionbon/addbanapprocm');
                            return;

}   else {
                            $db->rollback();
                                          $sessionmembre->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/souscriptionbon/addbanapprocm');
                            return;
}

}else{


$sessionmembre->error = "Veuillez bien saisir le Code de confirmation reçu par SMS dans le formulaire ...";
$sessionmembre->bon_neutre_appro_apporteur = $sessionmembre->code_membre;
$sessionmembre->bon_neutre_nom = $_POST['bon_neutre_nom'];
$sessionmembre->bon_neutre_prenom = $_POST['bon_neutre_prenom'];
$sessionmembre->bon_neutre_raison = $_POST['bon_neutre_raison'];
$sessionmembre->bon_neutre_personne = $_POST['bon_neutre_personne'];
$sessionmembre->bon_neutre_mobile = $_POST['bon_neutre_mobile'];
$sessionmembre->bon_neutre_email = $_POST['bon_neutre_email'];
//$sessionmembre->id_canton = $_POST['id_canton'];
$sessionmembre->bon_neutre_appro_montant = $_POST['bon_neutre_appro_montant'];
$sessionmembre->date_nais_membre = $_POST['date_nais_membre'];



}

}

                    }  catch (Exception $exc) {
                        $sessionmembre->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        //$this->_redirect('/souscriptionbon/addbanapprocm');
                        return;
                    }
                  }   else {  $sessionmembre->error = "Champs * obligatoire ..."; }
}
    }








    public function addbanflooztmoneyAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        
        $request = $this->getRequest ();
        $db = Zend_Db_Table::getDefaultAdapter ();
        $date = new Zend_Date(Zend_Date::ISO_8601);
        if ($request->isPost ()) {
            $date_releve = $date->toString ( "yyyy-MM-dd" );
            $libelle = $request->getParam ( "libelle" );
            list($autre1, $autre2) = explode("#", $libelle);
            $code_membre = substr($autre2,0,20);
            $numero = "";
            $montant = $request->getParam ( "montant" );
            $date_valeur = "";
            $code_banque = $request->getParam ( "code_banque" );
            $relbancaire = new Application_Model_EuRelevebancaire ();
            $m_releve = new Application_Model_EuRelevebancaireMapper ();
            $m_detReleve = new Application_Model_EuRelevebancairedetailMapper ();
            $releves = $m_releve->fetchAllByDateWari ($date->toString ( "yyyy-MM-dd" ), $code_banque);
            $db->beginTransaction ();
            try {
                /*$relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {*/
                        
                //$date_depot = new Zend_Date ( Util_Utils::convertDate ( $date_releve ), Zend_Date::ISO_8601 );
                //$date_v = new Zend_Date ( Util_Utils::convertDate ( $date_valeur ), Zend_Date::ISO_8601 );
                $date_depot = $date_releve ;
                $date_v = $date_valeur ;
                if (count ( $releves ) >= 1) {
                    $releve = $releves;
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $releve->getRelevebancaire_id () );
                    $detReleve->setPublier ( 5 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                } else {
                    $lastId = $m_releve->findConuter ();
                    if (isset ( $lastId )) {
                        $lastId ++;
                    } else {
                        $lastId = 1;
                    }
                    $relbancaire->setRelevebancaire_id ( $lastId );
                    $relbancaire->setPublier ( 1 );
                    $relbancaire->setRelevebancaire_banque ( $code_banque );
                    $relbancaire->setRelevebancaire_date ( $date->toString ( "yyyy-MM-dd" ) );
                    $relbancaire->setRelevebancaire_utilisateur ( 1 );
                    $m_releve->save ( $relbancaire );
                    
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $relbancaire->getRelevebancaire_id () );
                    $detReleve->setPublier ( 5 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                }

                //$ok = Util_Utils::addBAn($code_membre, $numero, $date_depot, $montant, $libelle, $code_banque);

                $db->commit ();
                //if($ok == 0){
                //$message = "Ajout de relevé effectué avec succès!";
                //}else if($ok == 1){
                $message = "Ajout de relevé effectué avec succès! BAn bien effectué";
                //}
            /*}else{
                $this->view->message = "Relevé deja chargé ...";
            }*/
                //$this->_redirect ( "/administration/addreleve" );

/////////////////////////////////////////*/

$token = "220c88e7-f6bf-4114-85e3-578d1176ff6e";
$identifier = $lastDetId;
$description = "Souscription au BAn";
$url = "https://www.esmc.esmcgie.com/souscriptionbon/addbanflooztmoney";//?message=".$message."

$this->_redirect('https://paygateglobal.com/v1/page?token='.$token.'&amount='.$montant.'&description='.urlencode($description).'&identifier='.$identifier.'&url='.urlencode($url).'');


            } catch ( Exception $e ) {
                $db->rollBack ();
                $this->view->message = "Echec d'ajout de relevé bancaire; Erreur de :" . $e->getMessage ();
                $this->view->date_releve = $date_releve;
                $this->view->libelle = $libelle;
                $this->view->numero = $numero;
                $this->view->montant = $montant;
                $this->view->date_valeur = $date_valeur;
                $this->view->code_banque = $code_banque;
                return;
            }
        } else {
            return;
        }
    }




    public function addbanfloozAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        
        $request = $this->getRequest ();
        $db = Zend_Db_Table::getDefaultAdapter ();
        $date = new Zend_Date(Zend_Date::ISO_8601);
        if ($request->isPost ()) {
            $date_releve = $date->toString ( "yyyy-MM-dd" );
            $libelle = $request->getParam ( "libelle" );
            list($autre1, $autre2) = explode("#", $libelle);
            $code_membre = substr($autre2,0,20);
            $numero = "";
            $montant = $request->getParam ( "montant" );
            $phone_number = $request->getParam ( "phone_number" );
            $date_valeur = "";
            $code_banque = $request->getParam ( "code_banque" );
            $relbancaire = new Application_Model_EuRelevebancaire ();
            $m_releve = new Application_Model_EuRelevebancaireMapper ();
            $m_detReleve = new Application_Model_EuRelevebancairedetailMapper ();
            $releves = $m_releve->fetchAllByDateWari ($date->toString ( "yyyy-MM-dd" ), $code_banque);
            $db->beginTransaction ();
            try {
                /*$relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {*/
                        
                //$date_depot = new Zend_Date ( Util_Utils::convertDate ( $date_releve ), Zend_Date::ISO_8601 );
                //$date_v = new Zend_Date ( Util_Utils::convertDate ( $date_valeur ), Zend_Date::ISO_8601 );
                $date_depot = $date_releve ;
                $date_v = $date_valeur ;
                if (count ( $releves ) >= 1) {
                    $releve = $releves;
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $releve->getRelevebancaire_id () );
                    $detReleve->setPublier ( 5 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                } else {
                    $lastId = $m_releve->findConuter ();
                    if (isset ( $lastId )) {
                        $lastId ++;
                    } else {
                        $lastId = 1;
                    }
                    $relbancaire->setRelevebancaire_id ( $lastId );
                    $relbancaire->setPublier ( 1 );
                    $relbancaire->setRelevebancaire_banque ( $code_banque );
                    $relbancaire->setRelevebancaire_date ( $date->toString ( "yyyy-MM-dd" ) );
                    $relbancaire->setRelevebancaire_utilisateur ( 1 );
                    $m_releve->save ( $relbancaire );
                    
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $relbancaire->getRelevebancaire_id () );
                    $detReleve->setPublier ( 5 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                }

                //$ok = Util_Utils::addBAn($code_membre, $numero, $date_depot, $montant, $libelle, $code_banque);

                $db->commit ();
                //if($ok == 0){
                //$message = "Ajout de relevé effectué avec succès!";
                //}else if($ok == 1){
                $this->view->message = "Ajout de relevé effectué avec succès! BAn bien effectué";
                //}
            /*}else{
                $this->view->message = "Relevé deja chargé ...";
            }*/
                //$this->_redirect ( "/administration/addreleve" );

/////////////////////////////////////////*/

$token = "220c88e7-f6bf-4114-85e3-578d1176ff6e";
$identifier = $lastDetId;
$description = "Souscription au BAn";
$phone_number = $phone_number;
$amount = $montant;


$homepage = file_get_contents("http://172.16.20.51/paygateglobal/addbanflooz?auth_token=".urlencode($token)."&description=".urlencode($description)."&phone_number=".$phone_number."&amount=".$amount."&code_banque=".$code_banque."&identifier=".$identifier."");

$this->view->message = $homepage;







            } catch ( Exception $e ) {
                $db->rollBack ();
                $this->view->message = "Echec d'ajout de relevé bancaire; Erreur de :" . $e->getMessage ();
                $this->view->date_releve = $date_releve;
                $this->view->libelle = $libelle;
                $this->view->numero = $numero;
                $this->view->montant = $montant;
                $this->view->date_valeur = $date_valeur;
                $this->view->code_banque = $code_banque;
                return;
            }
        } else {
            return;
        }
    }







    public function addbanapproflooztmoneyAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        
        $request = $this->getRequest ();
        $db = Zend_Db_Table::getDefaultAdapter ();
        $date = new Zend_Date(Zend_Date::ISO_8601);
        if ($request->isPost ()) {
            $date_releve = $date->toString ( "yyyy-MM-dd" );
            $libelle = $request->getParam ( "libelle" );
            //list($autre1, $autre2) = explode("#", $libelle);
            //$code_membre = substr($autre2,0,20);
            $numero = "";
            $montant = $request->getParam ( "montant" );
            $code_membre = $request->getParam ( "code_membre" );
            $date_valeur = "";
            $code_banque = $request->getParam ( "code_banque" );
            
            $db->beginTransaction ();
            try {
                
/////////////////////////////////////////*/

$token = "220c88e7-f6bf-4114-85e3-578d1176ff6e";
$identifier = $code_membre;
$description = "Souscription au BAn";
$url = "http://www.esmc.esmcgie.com/souscriptionbon/addbanapproflooztmoney";//?message=".$message."

$this->_redirect('https://paygateglobal.com/v1/page?token='.$token.'&amount='.$montant.'&description='.urlencode($description).'&identifier='.$identifier.'&url='.urlencode($url).'');


            } catch ( Exception $e ) {
                $db->rollBack ();
                $this->view->message = "Echec d'ajout de relevé bancaire; Erreur de :" . $e->getMessage ();
                $this->view->code_membre = $code_membre;
                $this->view->date_releve = $date_releve;
                $this->view->libelle = $libelle;
                $this->view->numero = $numero;
                $this->view->montant = $montant;
                $this->view->date_valeur = $date_valeur;
                $this->view->code_banque = $code_banque;
                return;
            }
        } else {
            return;
        }
    }





    public function addbangrosflooztmoneyAction() {
        $sessionmcnp = new Zend_Session_Namespace('mcnp');

        //$this->_helper->layout->disableLayout();
        $this->_helper->layout()->setLayout('layoutpublicesmc');

        
        $request = $this->getRequest ();
        $db = Zend_Db_Table::getDefaultAdapter ();
        $date = new Zend_Date(Zend_Date::ISO_8601);
        if ($request->isPost ()) {
            $date_releve = $date->toString ( "yyyy-MM-dd" );
            $libelle = $request->getParam ( "libelle" );
            //list($autre1, $autre2) = explode("#", $libelle);
            //$code_membre = substr($autre2,0,20);
            $numero = "";
            $montant = $request->getParam ( "montant" );
            $code_membre = $request->getParam ( "code_membre" );
            $date_valeur = "";
            $code_banque = $request->getParam ( "code_banque" );
            
            $db->beginTransaction ();
            try {
                
/////////////////////////////////////////*/

$token = "220c88e7-f6bf-4114-85e3-578d1176ff6e";
$identifier = $code_membre;
$description = "Souscription au BAn";
$url = "http://www.esmc.esmcgie.com/souscriptionbon/addbangrosflooztmoney";//?message=".$message."

$this->_redirect('https://paygateglobal.com/v1/page?token='.$token.'&amount='.$montant.'&description='.urlencode($description).'&identifier='.$identifier.'&url='.urlencode($url).'');


            } catch ( Exception $e ) {
                $db->rollBack ();
                $this->view->message = "Echec d'ajout de relevé bancaire; Erreur de :" . $e->getMessage ();
                $this->view->code_membre = $code_membre;
                $this->view->date_releve = $date_releve;
                $this->view->libelle = $libelle;
                $this->view->numero = $numero;
                $this->view->montant = $montant;
                $this->view->date_valeur = $date_valeur;
                $this->view->code_banque = $code_banque;
                return;
            }
        } else {
            return;
        }
    }




    public function addbantmoneyfloozAction()  {
    $sessionmcnp = new Zend_Session_Namespace('mcnp');
    //$this->_helper->layout->disableLayout();
    $this->_helper->layout()->setLayout('layoutpublicesmc');


        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;


        $date_id = Zend_Date::now();

        $request = $this->getRequest ();
        if ($request->isPost ()) {

  if (isset($_POST['code_membre']) && $_POST['code_membre']!="" && isset($_POST['reference_tmoney']) && $_POST['reference_tmoney']!="") {


                    $db = Zend_Db_Table::getDefaultAdapter();
                    $db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();
                            $date = Zend_Date::now();

////////////////////////////////////////////////////////////////////////////////

//$tab = file_get_contents("http://payme.gacsource.net/payMe/verifreference.php?reference_tmoney=".$_POST['reference_tmoney']."&");

$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://esmcgie.com/payMe/verifreference.php?reference_tmoney=".$_POST['reference_tmoney']."",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
  CURLOPT_HTTPHEADER => array(
    "cache-control: no-cache"//,
    //"postman-token: aaf077e5-a019-7d87-5c72-95030c9baa5e"/
  ),
));

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  //echo "cURL Error #:" . $err;
//$sessionmcnp->error = 1;
} else {

$obj = json_decode($response);
//echo $obj->status;

//$sessionmcnp->error = $obj->status;

}

////////////////////////////////////////////////////////////////////////////////
                		$association1M = new Application_Model_EuAssociationMapper();
                            $association12 = $association1M->fetchAllByMembreGuichet($_POST['code_membre']);
                        if(count($association12) > 0) {
                        	$guichet = 1;
                        }else{
                        	$guichet = 0;
                        }

////////////////////////////////////////////////////////////////////////////////
								if($obj->status == 0) {
                                $db->rollback();
                                $sessionmcnp->error = $obj->error;
                                $this->_redirect('/souscriptionbon/addbantmoneyflooz');
                                return;
                                }

            $date_releve = substr($obj->datepaiement, 0, 10);
            $libelle = $obj->libelle." #".$request->getParam("code_membre");
            $numero = $obj->numero;
            $bon_neutre_numero = $obj->numero;
            $montant = $obj->montant;
            $bon_neutre_montant = $obj->montant;
            $code_banque = $obj->operateur;
            $bon_neutre_banque = $obj->operateur;
            $date_valeur = $date_releve;
            $bon_neutre_date_numero = $date_releve;
            $relbancaire = new Application_Model_EuRelevebancaire ();
            $m_releve = new Application_Model_EuRelevebancaireMapper ();
            $m_detReleve = new Application_Model_EuRelevebancairedetailMapper ();
            $releves = $m_releve->fetchAllByDateWari ($date->toString ( "yyyy-MM-dd" ), $code_banque);

if($obj->operateur == "TMONEY"){

$code_membre_operateur = "0000000000000000005M";
		$montant_flooz = 0;

}else if($obj->operateur == "FLOOZ"){

$code_membre_operateur = "0000000000000000004M";

/////////////////////////tarif flooz/////////////
        $tarif_M = new Application_Model_EuTarifMapper();
        $tarif = $tarif_M->fetchAllByMontantTarifMode($bon_neutre_montant, $obj->operateur);
        $montant_flooz = $tarif->montant_tarif;/**/

}


                $relevebancairedetail_m = new Application_Model_EuRelevebancairedetailMapper();
                        $relevebancairedetail = $relevebancairedetail_m->fetchAllByBanqueNumero($code_banque, trim($numero));
                        if(count($relevebancairedetail) == 0) {
                        
                //$date_depot = new Zend_Date ( Util_Utils::convertDate ( $date_releve ), Zend_Date::ISO_8601 );
                //$date_v = new Zend_Date ( Util_Utils::convertDate ( $date_valeur ), Zend_Date::ISO_8601 );
                $date_depot = $date_releve ;
                $date_v = $date_valeur ;
                if (count ( $releves ) >= 1) {
                    $releve = $releves;
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $releve->getRelevebancaire_id () );
                    $detReleve->setPublier ( 0 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                } else {
                    $lastId = $m_releve->findConuter ();
                    if (isset ( $lastId )) {
                        $lastId ++;
                    } else {
                        $lastId = 1;
                    }
                    $relbancaire->setRelevebancaire_id ( $lastId );
                    $relbancaire->setPublier ( 1 );
                    $relbancaire->setRelevebancaire_banque ( $code_banque );
                    $relbancaire->setRelevebancaire_date ( $date->toString ( "yyyy-MM-dd" ) );
                    $relbancaire->setRelevebancaire_utilisateur ( 0 );
                    $m_releve->save ( $relbancaire );
                    
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $relbancaire->getRelevebancaire_id () );
                    $detReleve->setPublier ( 0 );
                    $detReleve->setRelevebancairedetail_date ( $date_depot );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_v );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                }
                $relevebancairedetail_id = $lastDetId;
                //$db->commit ();
                //$sessionmcnp->message = "Ajout d'utilisateur effectué avec succès!";
                //$this->_redirect ( "/banqueopi/addreleve" );

////////////////////////////////////////////////////////////////////////////////
if(substr($request->getParam("code_membre"), -1) == "P"){

   $membre2 = new Application_Model_EuMembre();
   $membre2M = new Application_Model_EuMembreMapper();
   $membre2M->find($request->getParam("code_membre"), $membre2);

                                $bon_neutre_nom = $membre2->nom_membre;
                                $bon_neutre_prenom = $membre2->prenom_membre;
                                $bon_neutre_raison = "";
                                $bon_neutre_code_membre = $membre2->code_membre;
                                $bon_neutre_email = $membre2->email_membre;
                                $bon_neutre_mobile = $membre2->portable_membre;
                                $id_canton = $membre2->id_canton;

}else if(substr($request->getParam("code_membre"), -1) == "M"){

                                $membre_morale = new Application_Model_EuMembreMorale();
                                $membre_moraleM = new Application_Model_EuMembreMoraleMapper();
                                $membre_moraleM->find($request->getParam("code_membre"), $membre_morale);

   $representationM = new Application_Model_EuRepresentationMapper();
   $representation = $representationM->findbyrep($membre_morale->code_membre_morale);

   $membre2 = new Application_Model_EuMembre();
   $membre2M = new Application_Model_EuMembreMapper();
   $membre2M->find($representation->code_membre, $membre2);

                                $bon_neutre_nom = $membre2->nom_membre;
                                $bon_neutre_prenom = $membre2->prenom_membre;
                                $bon_neutre_raison = $membre_morale->raison_sociale;
                                $bon_neutre_code_membre = $membre_morale->code_membre_morale;
                                $bon_neutre_email = $membre_morale->email_membre;
                                $bon_neutre_mobile = $membre_morale->portable_membre;
                                $id_canton = $membre_morale->id_canton;

}


                        

//}




//$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);

do{
                    $code_BAn2 = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn2);
}while(count($bon_neutre_detail2) > 0);

do{
                    $code_BAn3 = strtoupper(Util_Utils::genererCodeSMS(6));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn3);
}while(count($bon_neutre_detail2) > 0);

do{
                    $code_BAn4 = strtoupper(Util_Utils::genererCodeSMS(6));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn4);
}while(count($bon_neutre_detail2) > 0);

///////////////////////////////////calcul commission banque//////////////////////////////

if($guichet == 1){
$montant_commission_banque = floor($bon_neutre_montant * Util_Utils::getParamEsmc(19) / 100) + $montant_flooz;
}else{
$montant_commission_banque = 0 + $montant_flooz;
}
                            



/////////////////////////////////////controle code membre
if(isset($bon_neutre_code_membre) && $bon_neutre_code_membre!=""){
if(strlen($bon_neutre_code_membre) != 20) {
                                    $db->rollback();
                                    $sessionmcnp->error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    $this->_redirect('/souscriptionbon/addbantmoneyflooz');
                                    return;
}else{
if(substr($bon_neutre_code_membre, -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($bon_neutre_code_membre, $membre);
                                if(count($membre) == 0){
                                    $db->rollback();
                                    $sessionmcnp->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    $this->_redirect('/souscriptionbon/addbantmoneyflooz');
                                    return;
                                }
                                if($bon_neutre_nom == "" || $bon_neutre_nom == NULL){
                                    $db->rollback();
                                    $sessionmcnp->error = "Veuillez bien saisir le nom et prénom(s)";
                                    $this->_redirect('/souscriptionbon/addbantmoneyflooz');
                                    return;
                                }
    }
if(substr($bon_neutre_code_membre, -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($bon_neutre_code_membre, $membremorale);
                                if(count($membremorale) == 0){
                                    $db->rollback();
                                    $sessionmcnp->error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    $this->_redirect('/souscriptionbon/addbantmoneyflooz');
                                    return;
                                }
                                if($bon_neutre_raison == "" || $bon_neutre_raison == NULL){
                                    $db->rollback();
                                    $sessionmcnp->error = "Veuillez bien saisir la raison sociale";
                                    $this->_redirect('/souscriptionbon/addbantmoneyflooz');
                                    return;
                                }
    }
}

//////////////////////////////////////////////
                                $ban2M = new Application_Model_EuBanMapper();
                                //$ban2 = $ban2M->fetchAllOneMembre();
                                $ban_solde = $ban2M->getSumByBan($code_membre_operateur);
                                //if($ban2->solde >= $bon_neutre_montant){ 
                                	$montant_ban = ($bon_neutre_montant + $montant_commission_banque);
                                if($ban_solde >= $montant_ban){ 
                                $ban2 = $ban2M->fetchAllMembre0($code_membre_operateur);
                    foreach ($ban2 as $ban2_entry){

                                $ban = new Application_Model_EuBan();
                                $banM = new Application_Model_EuBanMapper();
                                $banM->find($ban2_entry->id_ban, $ban);

                        if($ban->getSolde() < $montant_ban){

                                $montant_ban = $montant_ban - $ban->getSolde();
                                
                                $ban->setMont_vendu($ban->getMont_vendu() + $ban->getSolde());
                                $ban->setSolde($ban->getSolde() - $ban->getSolde());
                                $banM->update($ban);

                                $ban_id = $ban->id_ban;

                            $ban_vendu = new Application_Model_EuBanVendu();
                            $ban_vendu_mapper = new Application_Model_EuBanVenduMapper();

                            $compteur_ban_vendu = $ban_vendu_mapper->findConuter() + 1;
                            $ban_vendu->setId_ban_vendu($compteur_ban_vendu);
                            $ban_vendu->setId_ban($ban_id);
                            $ban_vendu->setDate_ban_vendu($date_id->toString('yyyy-MM-dd'));
                            $ban_vendu->setCode_membre($bon_neutre_code_membre);
                            $ban_vendu->setMont_vendu($ban->getSolde());
                            $ban_vendu->setNumero_recu($bon_neutre_numero);
                            $ban_vendu->setId_user(0);
                            $ban_vendu_mapper->save($ban_vendu);

}else{
                                $ban->setMont_vendu($ban->getMont_vendu() + $montant_ban);
                                $ban->setSolde($ban->getSolde() - $montant_ban);
                                $banM->update($ban);

                                $ban_id = $ban->id_ban;

                            $ban_vendu = new Application_Model_EuBanVendu();
                            $ban_vendu_mapper = new Application_Model_EuBanVenduMapper();

                            $compteur_ban_vendu = $ban_vendu_mapper->findConuter() + 1;
                            $ban_vendu->setId_ban_vendu($compteur_ban_vendu);
                            $ban_vendu->setId_ban($ban_id);
                            $ban_vendu->setDate_ban_vendu($date_id->toString('yyyy-MM-dd'));
                            $ban_vendu->setCode_membre($bon_neutre_code_membre);
                            $ban_vendu->setMont_vendu($montant_ban);
                            $ban_vendu->setNumero_recu($bon_neutre_numero);
                            $ban_vendu->setId_user(0);
                            $ban_vendu_mapper->save($ban_vendu);
}

}
//////////////////////////////////////////////

                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($bon_neutre_code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $bon_neutre_montant + $montant_commission_banque);
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $bon_neutre_montant + $montant_commission_banque);
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($bon_neutre_code_membre);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($bon_neutre_montant + $montant_commission_banque);
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($bon_neutre_montant + $montant_commission_banque);
                            $bon_neutre->setBon_neutre_nom($bon_neutre_nom);
                            $bon_neutre->setBon_neutre_prenom($bon_neutre_prenom);
                            $bon_neutre->setBon_neutre_raison($bon_neutre_raison);
                            $bon_neutre->setBon_neutre_email($bon_neutre_email);
                            $bon_neutre->setBon_neutre_mobile($bon_neutre_mobile);
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_montant);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_montant);
                            $bon_neutre_detail->setBon_neutre_detail_banque($bon_neutre_banque);
                            $bon_neutre_detail->setBon_neutre_detail_numero($bon_neutre_numero);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($bon_neutre_date_numero);
                            $bon_neutre_detail->setId_canton($id_canton);
							if($guichet == 1){
                            $bon_neutre_detail->setBon_neutre_detail_commission("AvecCommission");
                            }else{
                            $bon_neutre_detail->setBon_neutre_detail_commission("SansCommission");
                            }
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);



/////////////////////////////commission esmc banque
                            if(($montant_commission_banque - $montant_flooz) > 0){
                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn2);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($montant_commission_banque - $montant_flooz);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($montant_commission_banque - $montant_flooz);
                            $bon_neutre_detail->setBon_neutre_detail_banque("CS-ESMC");
                            $bon_neutre_detail->setBon_neutre_detail_type("COM");
                            $bon_neutre_detail->setBon_neutre_detail_numero($code_BAn3);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($date_id->toString('yyyy-MM-dd'));
                            $bon_neutre_detail->setId_canton($id_canton);
							if($guichet == 1){
                            $bon_neutre_detail->setBon_neutre_detail_commission("AvecCommission");
                            }else{
                            $bon_neutre_detail->setBon_neutre_detail_commission("SansCommission");
                            }
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);
                            }

                            if($montant_flooz > 0){
                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn2);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($montant_flooz);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($montant_flooz);
                            $bon_neutre_detail->setBon_neutre_detail_banque("CS-ESMC");
                            $bon_neutre_detail->setBon_neutre_detail_type("COM");
                            $bon_neutre_detail->setBon_neutre_detail_numero($code_BAn4);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($date_id->toString('yyyy-MM-dd'));
                            $bon_neutre_detail->setId_canton($id_canton);
							if($guichet == 1){
                            $bon_neutre_detail->setBon_neutre_detail_commission("AvecCommission");
                            }else{
                            $bon_neutre_detail->setBon_neutre_detail_commission("SansCommission");
                            }
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);
                            }

                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($relevebancairedetail_id, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);
        
                            ///////////////////////////////////////////////////////////////////////////////////////


$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://esmcgie.com/payMe/verifreference.php?ID=".$obj->ID."&RecipientID=".$relevebancairedetail_id."",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
  CURLOPT_HTTPHEADER => array(
    "cache-control: no-cache"//,
    //"postman-token: aaf077e5-a019-7d87-5c72-95030c9baa5e"/
  ),
));

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  //echo "cURL Error #:" . $err;
//$sessionmcnp->error = 1;
} else {

$obj = json_decode($response);
//echo $obj->status;

//$sessionmcnp->error = $obj->status;

}
                        

                            ///////////////////////////////////////////////////////////////////////////////////////




                            $db->commit();

                            $sessionmcnp->code_BAn = $code_BAn;
                            $sessionmcnp->membre_code = $bon_neutre->bon_neutre_code_membre;

                            $sessionmcnp->error = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn) par TMONEY ou FLOOZ. <br />
<br />
";
if($sessionmcnp->membre_code != "" && $sessionmcnp->membre_code != NULL){
   $sessionmcnp->error .= "Le code du Bon d'Achat neutre (BAn) se trouve dans le compte marchand du membre <strong>".$sessionmcnp->membre_code."</strong><br />";
   $sessionmcnp->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
} else {
    $sessionmcnp->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}
    $sessionmcnp->error .= "<strong>Veuillez bien noter votre code BAn. Il est très important. </strong>Le cas échéant, en cas de perte, reprenez l'opération.";


                            //$this->_redirect('/souscriptionbon/addbantmoneyflooz');
                            //return;
}else{
                        $db->rollback();
                                    $sessionmcnp->error = "Solde BAn Source inferieur au montant";
                                    $this->_redirect('/souscriptionbon/addbantmoneyflooz');
                                    return;
}
    }
            }else{
                $this->view->message = "Relevé deja chargé ...";
            }

                    }  catch (Exception $exc) {
                        $sessionmcnp->error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        $db->rollback();
                        $this->_redirect('/souscriptionbon/addbantmoneyflooz');
                        return;
                    }


            }   else {  $sessionmcnp->error = "Champs * obligatoire ..."; }


        }else{


//$tab = file_get_contents("http://payme.gacsource.net/payMe/verifreference.php?smscall=".$_POST['smscall']."&");

$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://esmcgie.com/payMe/verifreference.php?smscall=smscall",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET",
  CURLOPT_HTTPHEADER => array(
    "cache-control: no-cache"//,
    //"postman-token: aaf077e5-a019-7d87-5c72-95030c9baa5e"/
  ),
));

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  //echo "cURL Error #:" . $err;
//$sessionmcnp->error = "cURL Error #:" . $err;
$sessionmcnp->error = 0;
} else {

//$obj = json_decode($response);
//echo $obj->status;


$sessionmcnp->error = $response;
//$sessionmcnp->error = 1;
//var_export($response);
}
        }


    }
    



}
