<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

final class Util_Utils {

    private function __construct() {

    }

    public static function stretchingurl()
    {
      var_dump(dirname(__FILE__).'../');

    }


    function getOS($user_agent = null)
    {
        if(!isset($user_agent) && isset($_SERVER['HTTP_USER_AGENT'])) {
            $user_agent = $_SERVER['HTTP_USER_AGENT'];
        }
    
        // https://stackoverflow.com/questions/18070154/get-operating-system-info-with-php
        $os_array = [
            'windows nt 10'                              =>  'Windows 10',
            'windows nt 6.3'                             =>  'Windows 8.1',
            'windows nt 6.2'                             =>  'Windows 8',
            'windows nt 6.1|windows nt 7.0'              =>  'Windows 7',
            'windows nt 6.0'                             =>  'Windows Vista',
            'windows nt 5.2'                             =>  'Windows Server 2003/XP x64',
            'windows nt 5.1'                             =>  'Windows XP',
            'windows xp'                                 =>  'Windows XP',
            'windows nt 5.0|windows nt5.1|windows 2000'  =>  'Windows 2000',
            'windows me'                                 =>  'Windows ME',
            'windows nt 4.0|winnt4.0'                    =>  'Windows NT',
            'windows ce'                                 =>  'Windows CE',
            'windows 98|win98'                           =>  'Windows 98',
            'windows 95|win95'                           =>  'Windows 95',
            'win16'                                      =>  'Windows 3.11',
            'mac os x 10.1[^0-9]'                        =>  'Mac OS X Puma',
            'macintosh|mac os x'                         =>  'Mac OS X',
            'mac_powerpc'                                =>  'Mac OS 9',
            'linux'                                      =>  'Linux',
            'ubuntu'                                     =>  'Linux - Ubuntu',
            'iphone'                                     =>  'iPhone',
            'ipod'                                       =>  'iPod',
            'ipad'                                       =>  'iPad',
            'android'                                    =>  'Android',
            'blackberry'                                 =>  'BlackBerry',
            'webos'                                      =>  'Mobile',
    
            '(media center pc).([0-9]{1,2}\.[0-9]{1,2})'=>'Windows Media Center',
            '(win)([0-9]{1,2}\.[0-9x]{1,2})'=>'Windows',
            '(win)([0-9]{2})'=>'Windows',
            '(windows)([0-9x]{2})'=>'Windows',
    
            // Doesn't seem like these are necessary...not totally sure though..
            //'(winnt)([0-9]{1,2}\.[0-9]{1,2}){0,1}'=>'Windows NT',
            //'(windows nt)(([0-9]{1,2}\.[0-9]{1,2}){0,1})'=>'Windows NT', // fix by bg
    
            'Win 9x 4.90'=>'Windows ME',
            '(windows)([0-9]{1,2}\.[0-9]{1,2})'=>'Windows',
            'win32'=>'Windows',
            '(java)([0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2})'=>'Java',
            '(Solaris)([0-9]{1,2}\.[0-9x]{1,2}){0,1}'=>'Solaris',
            'dos x86'=>'DOS',
            'Mac OS X'=>'Mac OS X',
            'Mac_PowerPC'=>'Macintosh PowerPC',
            '(mac|Macintosh)'=>'Mac OS',
            '(sunos)([0-9]{1,2}\.[0-9]{1,2}){0,1}'=>'SunOS',
            '(beos)([0-9]{1,2}\.[0-9]{1,2}){0,1}'=>'BeOS',
            '(risc os)([0-9]{1,2}\.[0-9]{1,2})'=>'RISC OS',
            'unix'=>'Unix',
            'os/2'=>'OS/2',
            'freebsd'=>'FreeBSD',
            'openbsd'=>'OpenBSD',
            'netbsd'=>'NetBSD',
            'irix'=>'IRIX',
            'plan9'=>'Plan9',
            'osf'=>'OSF',
            'aix'=>'AIX',
            'GNU Hurd'=>'GNU Hurd',
            '(fedora)'=>'Linux - Fedora',
            '(kubuntu)'=>'Linux - Kubuntu',
            '(ubuntu)'=>'Linux - Ubuntu',
            '(debian)'=>'Linux - Debian',
            '(CentOS)'=>'Linux - CentOS',
            '(Mandriva).([0-9]{1,3}(\.[0-9]{1,3})?(\.[0-9]{1,3})?)'=>'Linux - Mandriva',
            '(SUSE).([0-9]{1,3}(\.[0-9]{1,3})?(\.[0-9]{1,3})?)'=>'Linux - SUSE',
            '(Dropline)'=>'Linux - Slackware (Dropline GNOME)',
            '(ASPLinux)'=>'Linux - ASPLinux',
            '(Red Hat)'=>'Linux - Red Hat',
            // Loads of Linux machines will be detected as unix.
            // Actually, all of the linux machines I've checked have the 'X11' in the User Agent.
            //'X11'=>'Unix',
            '(linux)'=>'Linux',
            '(amigaos)([0-9]{1,2}\.[0-9]{1,2})'=>'AmigaOS',
            'amiga-aweb'=>'AmigaOS',
            'amiga'=>'Amiga',
            'AvantGo'=>'PalmOS',
            //'(Linux)([0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,3}(rel\.[0-9]{1,2}){0,1}-([0-9]{1,2}) i([0-9]{1})86){1}'=>'Linux',
            //'(Linux)([0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,3}(rel\.[0-9]{1,2}){0,1} i([0-9]{1}86)){1}'=>'Linux',
            //'(Linux)([0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,3}(rel\.[0-9]{1,2}){0,1})'=>'Linux',
            '[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,3})'=>'Linux',
            '(webtv)/([0-9]{1,2}\.[0-9]{1,2})'=>'WebTV',
            'Dreamcast'=>'Dreamcast OS',
            'GetRight'=>'Windows',
            'go!zilla'=>'Windows',
            'gozilla'=>'Windows',
            'gulliver'=>'Windows',
            'ia archiver'=>'Windows',
            'NetPositive'=>'Windows',
            'mass downloader'=>'Windows',
            'microsoft'=>'Windows',
            'offline explorer'=>'Windows',
            'teleport'=>'Windows',
            'web downloader'=>'Windows',
            'webcapture'=>'Windows',
            'webcollage'=>'Windows',
            'webcopier'=>'Windows',
            'webstripper'=>'Windows',
            'webzip'=>'Windows',
            'wget'=>'Windows',
            'Java'=>'Unknown',
            'flashget'=>'Windows',
    
            // delete next line if the script show not the right OS
            //'(PHP)/([0-9]{1,2}.[0-9]{1,2})'=>'PHP',
            'MS FrontPage'=>'Windows',
            '(msproxy)/([0-9]{1,2}.[0-9]{1,2})'=>'Windows',
            '(msie)([0-9]{1,2}.[0-9]{1,2})'=>'Windows',
            'libwww-perl'=>'Unix',
            'UP.Browser'=>'Windows CE',
            'NetAnts'=>'Windows',
        ];
    
        // https://github.com/ahmad-sa3d/php-useragent/blob/master/core/user_agent.php
        $arch_regex = '/\b(x86_64|x86-64|Win64|WOW64|x64|ia64|amd64|ppc64|sparc64|IRIX64)\b/ix';
        $arch = preg_match($arch_regex, $user_agent) ? '64' : '32';
    
        foreach ($os_array as $regex => $value) {
            if (preg_match('{\b('.$regex.')\b}i', $user_agent)) {
                return $value.' x'.$arch;
            }
        }
    
        return 'Unknown';
    }


    /* return Operating System */
public static function  operating_system_detection(){
  if ( isset( $_SERVER ) ) {
      $agent = htmlspecialchars($_SERVER['HTTP_USER_AGENT']);
  }
  else {
      global $HTTP_SERVER_VARS;
      if ( isset( $HTTP_SERVER_VARS ) ) {
          $agent = htmlspecialchars($HTTP_SERVER_VARS['HTTP_USER_AGENT']);
      }
      else {
          global $HTTP_USER_AGENT;
          $agent = htmlspecialchars($HTTP_USER_AGENT);
      }
  }
  $ros[] = array('Windows XP', 'Windows XP');
  $ros[] = array('Windows NT 5.1|Windows NT5.1)', 'Windows XP');
  $ros[] = array('Windows 2000', 'Windows 2000');
  $ros[] = array('Windows NT 5.0', 'Windows 2000');
  $ros[] = array('Windows NT 4.0|WinNT4.0', 'Windows NT');
  $ros[] = array('Windows NT 5.2', 'Windows Server 2003');
  $ros[] = array('Windows NT 6.0', 'Windows Vista');
  $ros[] = array('Windows NT 7.0', 'Windows 7');
  $ros[] = array('Windows CE', 'Windows CE');
  $ros[] = array('(media center pc).([0-9]{1,2}\.[0-9]{1,2})', 'Windows Media Center');
  $ros[] = array('(win)([0-9]{1,2}\.[0-9x]{1,2})', 'Windows');
  $ros[] = array('(win)([0-9]{2})', 'Windows');
  $ros[] = array('(windows)([0-9x]{2})', 'Windows');
  // Doesn't seem like these are necessary...not totally sure though..
  //$ros[] = array('(winnt)([0-9]{1,2}\.[0-9]{1,2}){0,1}', 'Windows NT');
  //$ros[] = array('(windows nt)(([0-9]{1,2}\.[0-9]{1,2}){0,1})', 'Windows NT'); // fix by bg
  $ros[] = array('Windows ME', 'Windows ME');
  $ros[] = array('Win 9x 4.90', 'Windows ME');
  $ros[] = array('Windows 98|Win98', 'Windows 98');
  $ros[] = array('Windows 95', 'Windows 95');
  $ros[] = array('(windows)([0-9]{1,2}\.[0-9]{1,2})', 'Windows');
  $ros[] = array('win32', 'Windows');
  $ros[] = array('(java)([0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,2})', 'Java');
  $ros[] = array('(Solaris)([0-9]{1,2}\.[0-9x]{1,2}){0,1}', 'Solaris');
  $ros[] = array('dos x86', 'DOS');
  $ros[] = array('unix', 'Unix');
  $ros[] = array('Mac OS X', 'Mac OS X');
  $ros[] = array('Mac_PowerPC', 'Macintosh PowerPC');
  $ros[] = array('(mac|Macintosh)', 'Mac OS');
  $ros[] = array('(sunos)([0-9]{1,2}\.[0-9]{1,2}){0,1}', 'SunOS');
  $ros[] = array('(beos)([0-9]{1,2}\.[0-9]{1,2}){0,1}', 'BeOS');
  $ros[] = array('(risc os)([0-9]{1,2}\.[0-9]{1,2})', 'RISC OS');
  $ros[] = array('os/2', 'OS/2');
  $ros[] = array('freebsd', 'FreeBSD');
  $ros[] = array('openbsd', 'OpenBSD');
  $ros[] = array('netbsd', 'NetBSD');
  $ros[] = array('irix', 'IRIX');
  $ros[] = array('plan9', 'Plan9');
  $ros[] = array('osf', 'OSF');
  $ros[] = array('aix', 'AIX');
  $ros[] = array('GNU Hurd', 'GNU Hurd');
  $ros[] = array('(fedora)', 'Linux - Fedora');
  $ros[] = array('(kubuntu)', 'Linux - Kubuntu');
  $ros[] = array('(ubuntu)', 'Linux - Ubuntu');
  $ros[] = array('(debian)', 'Linux - Debian');
  $ros[] = array('(CentOS)', 'Linux - CentOS');
  $ros[] = array('(Mandriva).([0-9]{1,3}(\.[0-9]{1,3})?(\.[0-9]{1,3})?)', 'Linux - Mandriva');
  $ros[] = array('(SUSE).([0-9]{1,3}(\.[0-9]{1,3})?(\.[0-9]{1,3})?)', 'Linux - SUSE');
  $ros[] = array('(Dropline)', 'Linux - Slackware (Dropline GNOME)');
  $ros[] = array('(ASPLinux)', 'Linux - ASPLinux');
  $ros[] = array('(Red Hat)', 'Linux - Red Hat');
  // Loads of Linux machines will be detected as unix.
  // Actually, all of the linux machines I've checked have the 'X11' in the User Agent.
  //$ros[] = array('X11', 'Unix');
  $ros[] = array('(linux)', 'Linux');
  $ros[] = array('(amigaos)([0-9]{1,2}\.[0-9]{1,2})', 'AmigaOS');
  $ros[] = array('amiga-aweb', 'AmigaOS');
  $ros[] = array('amiga', 'Amiga');
  $ros[] = array('AvantGo', 'PalmOS');
  //$ros[] = array('(Linux)([0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,3}(rel\.[0-9]{1,2}){0,1}-([0-9]{1,2}) i([0-9]{1})86){1}', 'Linux');
  //$ros[] = array('(Linux)([0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,3}(rel\.[0-9]{1,2}){0,1} i([0-9]{1}86)){1}', 'Linux');
  //$ros[] = array('(Linux)([0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,3}(rel\.[0-9]{1,2}){0,1})', 'Linux');
  $ros[] = array('[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{1,3})', 'Linux');
  $ros[] = array('(webtv)/([0-9]{1,2}\.[0-9]{1,2})', 'WebTV');
  $ros[] = array('Dreamcast', 'Dreamcast OS');
  $ros[] = array('GetRight', 'Windows');
  $ros[] = array('go!zilla', 'Windows');
  $ros[] = array('gozilla', 'Windows');
  $ros[] = array('gulliver', 'Windows');
  $ros[] = array('ia archiver', 'Windows');
  $ros[] = array('NetPositive', 'Windows');
  $ros[] = array('mass downloader', 'Windows');
  $ros[] = array('microsoft', 'Windows');
  $ros[] = array('offline explorer', 'Windows');
  $ros[] = array('teleport', 'Windows');
  $ros[] = array('web downloader', 'Windows');
  $ros[] = array('webcapture', 'Windows');
  $ros[] = array('webcollage', 'Windows');
  $ros[] = array('webcopier', 'Windows');
  $ros[] = array('webstripper', 'Windows');
  $ros[] = array('webzip', 'Windows');
  $ros[] = array('wget', 'Windows');
  $ros[] = array('Java', 'Unknown');
  $ros[] = array('flashget', 'Windows');
  // delete next line if the script show not the right OS
  //$ros[] = array('(PHP)/([0-9]{1,2}.[0-9]{1,2})', 'PHP');
  $ros[] = array('MS FrontPage', 'Windows');
  $ros[] = array('(msproxy)/([0-9]{1,2}.[0-9]{1,2})', 'Windows');
  $ros[] = array('(msie)([0-9]{1,2}.[0-9]{1,2})', 'Windows');
  $ros[] = array('libwww-perl', 'Unix');
  $ros[] = array('UP.Browser', 'Windows CE');
  $ros[] = array('NetAnts', 'Windows');
  $file = count ( $ros );
  $os = '';

  $useragent = strtolower($agent);
  for ( $n=0 ; $n<$file ; $n++ ){
      if ( preg_match('/'.$ros[$n][0].'/i' , $useragent, $name)){
          $os = @$ros[$n][1].' '.@$name[2];
          break;
      }
  }
  return trim ( $os );
}


public static function detecterSysteme($ua = ''){

    $detection = array();

      $_user_agent='';
      $_name = '';
      $_version  = '';
      $_platform = '';
      $_basic_browser = array (
         'Trident\/7.0' => 'Internet Explorer 11',
      'Beamrise' => 'Beamrise',
      'Opera' => 'Opera',
      'OPR' => 'Opera',
      'Shiira' => 'Shiira',
      'Chimera' => 'Chimera',
      'Phoenix' => 'Phoenix',
      'Firebird' => 'Firebird',
      'Camino' => 'Camino',
      'Netscape' => 'Netscape',
      'OmniWeb' => 'OmniWeb',
      'Konqueror' => 'Konqueror',
      'icab' => 'iCab',
       'Lynx' => 'Lynx',
      'Links' => 'Links',
      'hotjava' => 'HotJava',
      'amaya' => 'Amaya',
      'IBrowse' => 'IBrowse',
      'iTunes' => 'iTunes',
      'Silk' => 'Silk',
      'Dillo' => 'Dillo', 
      'Maxthon' => 'Maxthon',
      'Arora' => 'Arora',
      'Galeon' => 'Galeon',
      'Iceape' => 'Iceape',
      'Iceweasel' => 'Iceweasel',
      'Midori' => 'Midori',
      'QupZilla' => 'QupZilla',
      'Namoroka' => 'Namoroka',
      'NetSurf' => 'NetSurf',
      'BOLT' => 'BOLT',
      'EudoraWeb' => 'EudoraWeb',
      'shadowfox' => 'ShadowFox',
      'Swiftfox' => 'Swiftfox',
      'Uzbl' => 'Uzbl',
      'UCBrowser' => 'UCBrowser',
      'Kindle' => 'Kindle',
      'wOSBrowser' => 'wOSBrowser',
       'Epiphany' => 'Epiphany', 
      'SeaMonkey' => 'SeaMonkey',
      'Avant Browser' => 'Avant Browser',
      'Firefox' => 'Firefox',
      'Chrome' => 'Google Chrome',
      'MSIE' => 'Internet Explorer',
      'Internet Explorer' => 'Internet Explorer',
       'Safari' => 'Safari',
      'Mozilla' => 'Mozilla'  
      );
  
      $_basic_platform = array(
          'windows' => 'Windows', 
       'iPad' => 'iPad', 
        'iPod' => 'iPod', 
      'iPhone' => 'iPhone', 
       'mac' => 'Apple', 
      'android' => 'Android', 
      'linux' => 'Linux',
      'Nokia' => 'Nokia',
       'BlackBerry' => 'BlackBerry',
      'FreeBSD' => 'FreeBSD',
       'OpenBSD' => 'OpenBSD',
      'NetBSD' => 'NetBSD',
       'UNIX' => 'UNIX',
      'DragonFly' => 'DragonFlyBSD',
      'OpenSolaris' => 'OpenSolaris',
      'SunOS' => 'SunOS', 
      'OS\/2' => 'OS/2',
      'BeOS' => 'BeOS',
      'win' => 'Windows',
      'Dillo' => 'Linux',
      'PalmOS' => 'PalmOS',
      'RebelMouse' => 'RebelMouse'   
       ); 
  
    
     if(empty($ua)) {
             $_user_agent = (!empty($_SERVER['HTTP_USER_AGENT'])?$_SERVER['HTTP_USER_AGENT']:getenv('HTTP_USER_AGENT'));
          }
          else {
             $_user_agent = $ua;
          }

          //detectBrowser
       foreach($_basic_browser as $pattern => $name) {
            if( preg_match("/".$pattern."/i",$_user_agent, $match)) {
                $_name = $name;
                 // finally get the correct version number
                $known = array('Version', $pattern, 'other');
                $pattern_version = '#(?<browser>' . join('|', $known).')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';
                if (!preg_match_all($pattern_version, $_user_agent, $matches)) {
                    // we have no matching number just continue
                }
                // see how many we have
                $i = count($matches['browser']);
                if ($i != 1) {
                    //we will have two since we are not using 'other' argument yet
                    //see if version is before or after the name
                    if (strripos($_user_agent,"Version") < strripos($_user_agent,$pattern)){
                        @$_version = $matches['version'][0];
                    }
                    else {
                        @$_version = $matches['version'][1];
                    }
                }
                else {
                    $_version = $matches['version'][0];
                }
                break;
            }
           }


  
         //detectPlatform
        foreach($_basic_platform as $key => $platform) {
              if (stripos($_user_agent, $key) !== false) {
                  $_platform = $platform;
                  break;
              } 
          }
  
  

      $detection['browser'] = $_name;
      $detection['version'] = $_version;
      $detection['useragent'] = $_version;
      $detection['platform'] = $_platform;

          return $detection;
    }



    public static function envoiNotificationAdministrationBiometrique($id_confirmation, $code_membre, $titre, $message, $code_sms) {
   // $passerelle_call = file_get_contents("http://172.16.20.50/notif/envoinotification.php?titre=ESMC&code_membre=".$code_membre."&message=".urlencode(html_entity_decode($message)));


      $passerelle_call = file_get_contents("https://esmcgie.com/notif/envoipush.php?message_confirmation=".urlencode(html_entity_decode($message))."&id_confirmation=".$id_confirmation."&code_membre=".$code_membre."&nom_operateur=Administration&type_notif=3&code_sms=".$code_sms);

      return $passerelle_call;
    }



    public function findConuter() {
        $t_sms = new Application_Model_DbTable_EuSms();
        $select = $t_sms->select();
        $select->from($t_sms, array('MAX(neng) as COUNT'));
        $result = $t_sms->fetchAll($select);
        $row = $result->current();
        return $row['COUNT'];
    }

    public function findquota($code_membre, $code_cat) {
        $t_op = new Application_Model_DbTable_EuOperation();
        $select = $t_op->select();
        $select->from($t_op, array('COUNT(id_operation) as COUNT'));
        $select->where('code_cat = ?', $code_cat);
        $select->where('code_membre = ?', $code_membre);
        $result = $t_op->fetchAll($select);
        $row = $result->current();
        return $row['COUNT'];
    }

    public function findquotamf($code_membre, $code_produit) {
        $t_op = new Application_Model_DbTable_EuCompteCredit();
        $select = $t_op->select();
        $select->from($t_op, array('sum(montant_place) as COUNT'));
        $select->where('code_produit = ?', $code_produit);
        $select->where('code_membre = ?', $code_membre);
        $result = $t_op->fetchAll($select);
        $row = $result->current();
        if ($row['COUNT'] == NULL) {
            return 0;
        } else {
            return $row['COUNT'];
        }
    }

    public function findquotabypaysb($pays, $code_cat) {
        $t_op = new Application_Model_DbTable_EuOperation();
        $select = $t_op->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        //$select = $t_op->distinct();
        $select->setIntegrityCheck(false)
                ->join('eu_membre', 'eu_membre.code_membre = eu_operation.code_membre', array('COUNT(eu_membre.code_membre) COUNT', 'eu_operation.*', 'eu_membre.*'))
                ->join('eu_utilisateur', 'eu_utilisateur.id_utilisateur = eu_operation.id_utilisateur')
                ->where('eu_utilisateur.id_pays = ?', $pays)
                ->where('eu_operation.code_cat = ?', $code_cat)
        ;
        $result = $t_op->fetchAll($select);
        $row = $result->current();
        return $row['COUNT'];
    }

    public function findquotabypays($pays, $code_cat) {
        $db = Zend_Db_Table::getDefaultAdapter();
        $requete = "SELECT COUNT(DISTINCT eu_operation.code_membre) as COUNT FROM eu_operation,eu_utilisateur WHERE  eu_operation.id_utilisateur=eu_utilisateur.id_utilisateur AND
                   eu_operation.code_cat LIKE '$code_cat' AND eu_utilisateur.id_pays=$pays";
        $db->setFetchMode(Zend_Db::FETCH_OBJ);
        $stmt = $db->query($requete);
        $result = $stmt->fetchAll();
        foreach ($result as $row) {
            return $row->COUNT;
        }
    }

    public function findquotabypaysmf($pays, $code_produit) {
        $db = Zend_Db_Table::getDefaultAdapter();
        $requete = "SELECT sum(eu_compte_credit.montant_place) as COUNT FROM  eu_compte_credit,eu_operation,eu_utilisateur WHERE eu_compte_credit.id_operation=eu_operation.id_operation
		   AND eu_operation.id_utilisateur=eu_utilisateur.id_utilisateur AND
           eu_compte_credit.code_produit LIKE '$code_produit'  AND  eu_utilisateur.id_pays=$pays";
        $db->setFetchMode(Zend_Db::FETCH_OBJ);
        $stmt = $db->query($requete);
        $result = $stmt->fetchAll();
        foreach ($result as $row) {
            return $row->COUNT;
        }
    }

    public static function toDate_bis($date) {
        $z_date = new DateTime($date->toString('yyyy-MM-dd'));
        $date_exp = new Zend_Db_Expr("TO_DATE('" . date_format($z_date, 'Y-m-d H:i:s') . "','YYYY-MM-DD HH24:MI:SS')");
        return $date_exp;
    }

    public static function toDate($date) {
        //$date_exp = new Zend_Db_Expr("TO_DATE('" . $date->toString('yyyy-MM-dd') . "','YYYY-MM-DD HH24:MI:SS')");
        $date_exp = $date->toString('yyyy-MM-dd HH:mm:ss');
        return $date_exp;
    }

    public static function toChar($date) {
        $date_exp = new Zend_Db_Expr("TO_CHAR('" . $date . "','DS')");
        return $date_exp;
    }

    public static function getMembre($code_membre, Application_Model_EuMembre $membre) {
        if (isset($code_membre)) {
            $type = Util_Utils::getMembreType($code_membre);
            if ($type === 'P') {
                $m_membre = new Application_Model_EuMembreMapper();
                return $m_membre->find($code_membre, $membre);
            }
        } else {
            return FALSE;
        }
    }

    public static function getMembreType($membre) {
        if (isset($membre)) {
            return substr($membre, -1, 1);
        } else {
            return '';
        }
    }


    public static function decode_string($str){
    //split the reply in chunks of 4 characters (each 4 character is hex encoded), use | as separator
    $str = str_replace(" ", "", $str); // remove normal space, you might have better ways of doing this
    $chunk = chunk_split($str, 4, '|');
    $coded_array = explode('|', $chunk);
    $n = count($coded_array);
    $decoded = '';
    for($i = 0; $i < $n; $i++){
        $decoded .= chr(hexdec($coded_array[$i]));
    }
    return $decoded;
}


    public static function getMembreMorale($code_membre, Application_Model_EuMembreMorale $moral) {
        if (isset($code_membre)) {
            $type = Util_Utils::getMembreType($code_membre);
            if ($type === 'M') {
                $m_moral = new Application_Model_EuMembreMoraleMapper();
                return $m_moral->find($code_membre, $moral);
            }
        } else {
            return FALSE;
        }
    }

     public static function addtoSms($compteur, $recipient, $smsbody, $dlrmask) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);
            $mysqli = new mysqli("10.10.20.20", "esmc", "esmc", "kannel");
            $time = mktime(0, 0, 0, $date->toString('MM'), $date->toString('dd'), $date->toString('yyyy'));
            $date_envoi = $date->toString('dd/MM/yyyy HH:mm:ss');

        if ($mysqli->connect_errno) {
            printf("Échec de la connexion : %s\n", $mysqli->connect_error);
            exit();
        }

        if ($result = $mysqli->query("INSERT INTO send_sms (momt, sender, receiver, msgdata, sms_type, smsc_id, dlr_mask, dlr_url, time) VALUES ('MT', 'ESMC', '".str_replace(" ", "", $recipient)."', '".addslashes($smsbody)."', 2, 'zte', '31','".$time."');")) {

        }
          $mysqli->close();
        }
    }

    public static function addSms($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);




/////////////////////////////////////////////////////////////////////////
//$mysqli = new mysqli("localhost", "gnokii", "smsgnokii", "sms");

$mysqli = new mysqli("bd.gacsource.net", "esmc", "esmc@gacsource", "kannel");
//$mysqli = new mysqli("localhost", "esmc", "esmc", "kannel");

if ($mysqli->connect_errno) {
    printf("Échec de la connexion : %s\n", $mysqli->connect_error);
    exit();
}


$time = mktime(0, 0, 0, $date->toString('MM'), $date->toString('dd'), $date->toString('yyyy'));

if ($result = $mysqli->query("INSERT INTO send_sms (momt, sender, receiver, msgdata, sms_type, smsc_id, dlr_mask, time) VALUES ('MT', 'ESMC', '".str_replace(" ", "", "".$recipient)."', '".addslashes($smsbody)."', 2,'zte', 31, '".$time."');")) {

}

/*if ($result = $mysqli->query("INSERT INTO  outbox (number ,processed_date ,insertdate ,text ,phone ,processed ,error ,dreport ,not_before ,not_after) VALUES ('".str_replace(" ", "", $recipient)."', '".$date->toString('yyyy-MM-dd HH:mm:ss')."', '".$date->toString('yyyy-MM-dd HH:mm:ss')."', '".addslashes($smsbody)."', '', 0, 0, 0, '00:00:00',	'23:59:59');")) {

}*/

$mysqli->close();

        }
    }




    public static function addSms2($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);
        }
    }
	
	
	public static function addSms2new($recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);
        }
    }
	
	


public static function addSms3($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);


/////////////////////////////////////////////////////////////////////////
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $type = "TOGOCEL";

        $smssent = new Application_Model_EuSmsSent();
        $smssentM = new Application_Model_EuSmsSentMapper();

        $compteursms = $smssentM->findConuter() + 1;

        $smssent->setNEng($compteursms);
        $smssent->setRecipient($recipient);
        $smssent->setSMSBody($smsbody);
        $smssent->setTypeExpediteur($type);
        $smssent->setDateTime($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smssent->setEtat(NULL);
        $smssent->setMsgId("ID_TOGOCEL1");
        $smssentM->save($smssent);

/////////////////////////////////////////////////////////////////////////
//$homepage = file_get_contents("http://prodsmstg.gacsource.net/smstogocel/envoisms.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");
$homepage = file_get_contents("https://esmcgie.com/smstogocel/envoisms.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

$homepage = strip_tags($homepage, '<br>');

if (strpos($homepage, "Status=0") !== false) {
$sms_sent->setEtat(0);
}else if (strpos($homepage, "Status=1") !== false) {
$sms_sent->setEtat(1);
}else if (strpos($homepage, "Status=2") !== false) {
$sms_sent->setEtat(2);
}

$pos2 = stripos($homepage, "MsgId=");
$pos3 = stripos(substr($homepage, ($pos2 + 6)), "<br>");
$MsgId = substr($homepage, ($pos2 + 6), $pos3);

$sms_sent->setMsgId($MsgId);

$sms_sentM->update($sms_sent);


        }
    }


public static function addSmsPayMeTMONEY($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);


/////////////////////////////////////////////////////////////////////////
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $type = "PayMeTMONEY";

        $smssent = new Application_Model_EuSmsSent();
        $smssentM = new Application_Model_EuSmsSentMapper();

        $compteursms = $smssentM->findConuter() + 1;

        $smssent->setNEng($compteursms);
        $smssent->setRecipient($recipient);
        $smssent->setSMSBody($smsbody);
        $smssent->setTypeExpediteur($type);
        $smssent->setDateTime($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smssent->setEtat(NULL);
        $smssent->setMsgId(NULL);
        $smssentM->save($smssent);

/////////////////////////////////////////////////////////////////////////
$homepage = file_get_contents("https://esmcgie.com/payMe/sendgammu_tmoney.php?message=".urlencode(html_entity_decode($smsbody))."&number=".substr($recipient, -8)."&token=esmcgacsource@228");
//$homepage = file_get_contents("http://easys.gacsource.net/envoisms.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

$sms_sent->setEtat(0);
$sms_sent->setMsgId($homepage);
$sms_sentM->update($sms_sent);/**/
        }else{
    return 2;  
}
    }



public static function addSmsPayMeFLOOZ($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);


/////////////////////////////////////////////////////////////////////////
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $type = "PayMeFLOOZ";

        $smssent = new Application_Model_EuSmsSent();
        $smssentM = new Application_Model_EuSmsSentMapper();

        $compteursms = $smssentM->findConuter() + 1;

        $smssent->setNEng($compteursms);
        $smssent->setRecipient($recipient);
        $smssent->setSMSBody($smsbody);
        $smssent->setTypeExpediteur($type);
        $smssent->setDateTime($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smssent->setEtat(NULL);
        $smssent->setMsgId(NULL);
        $smssentM->save($smssent);

/////////////////////////////////////////////////////////////////////////
$homepage = file_get_contents("https://esmcgie.com/payMe/sendgammu_flooz.php?message=".urlencode(html_entity_decode($smsbody))."&number=".substr($recipient, -8)."&token=esmcgacsource@228");
//$homepage = file_get_contents("http://easys.gacsource.net/envoisms.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

$sms_sent->setEtat(0);
$sms_sent->setMsgId($homepage);
$sms_sentM->update($sms_sent);/**/
        }else{
    return 2;  
}
    }



public static function addSms3EasysOld($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);


/////////////////////////////////////////////////////////////////////////
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $type = "EASYS";

        $smssent = new Application_Model_EuSmsSent();
        $smssentM = new Application_Model_EuSmsSentMapper();

        $compteursms = $smssentM->findConuter() + 1;

        $smssent->setNEng($compteursms);
        $smssent->setRecipient($recipient);
        $smssent->setSMSBody($smsbody);
        $smssent->setTypeExpediteur($type);
        $smssent->setDateTime($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smssent->setEtat(NULL);
        $smssent->setMsgId(NULL);
        $smssentM->save($smssent);

/////////////////////////////////////////////////////////////////////////
$homepage = file_get_contents("https://esmcgie.com/envoisms.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");
//$homepage = file_get_contents("http://prodsms.gacsource.net/easys/envoisms.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");

//$homepage = strip_tags($homepage, '<br>');
list($status, $numero, $msgid) = explode("|", $homepage);

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

$sms_sent->setEtat($status);
//$sms_sent->setRecipient($numero);
$sms_sent->setMsgId($msgid);
$sms_sentM->update($sms_sent);/**/

if($sms_sent->getEtat() == 1701){
    return 0;
}else{
    return 1;  
}
/*return $homepage."<br>".$status."<br>".$numero."<br>".$msgid;*/
        }else{
    return 2;  
}
    }




    public static function addSms3Easys($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);


/////////////////////////////////////////////////////////////////////////
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $type = "TOGOCEL";

        $smssent = new Application_Model_EuSmsSent();
        $smssentM = new Application_Model_EuSmsSentMapper();

        $compteursms = $smssentM->findConuter() + 1;

        $smssent->setNEng($compteursms);
        $smssent->setRecipient($recipient);
        $smssent->setSMSBody($smsbody);
        $smssent->setTypeExpediteur($type);
        $smssent->setDateTime($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smssent->setEtat(NULL);
        $smssent->setMsgId("ID_TOGOCEL2");
        $smssentM->save($smssent);

/////////////////////////////////////////////////////////////////////////
//$homepage = file_get_contents("http://prodsmstg.gacsource.net/smstogocel/envoisms2.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");
/*$homepage = file_get_contents("http://prodsms.gacsource.net/smstogocel/envoisms2.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

$homepage = strip_tags($homepage, '<br>');

if (strpos($homepage, "Status=0") !== false) {
$sms_sent->setEtat(0);
}else if (strpos($homepage, "Status=1") !== false) {
$sms_sent->setEtat(1);
}else if (strpos($homepage, "Status=2") !== false) {
$sms_sent->setEtat(2);
}else{
$sms_sent->setEtat(3);
}

$pos2 = stripos($homepage, "MsgId=");
$pos3 = stripos(substr($homepage, ($pos2 + 6)), "<br>");
$MsgId = substr($homepage, ($pos2 + 6), $pos3);

$sms_sent->setMsgId($MsgId);

$sms_sentM->update($sms_sent);
*/


$homepage = file_get_contents("https://esmcgie.com/smstogocel/envoisms2.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

if (strpos($homepage, "0") !== false) {
$sms_sent->setEtat(0);
}else if (strpos($homepage, "1") !== false) {
$sms_sent->setEtat(1);
}else if (strpos($homepage, "2") !== false) {
$sms_sent->setEtat(2);
}/*else{
$sms_sent->setEtat(3);
}*/

//$pos2 = stripos($homepage, "MsgId=");
//$pos3 = stripos(substr($homepage, ($pos2 + 6)), "<br>");
//$MsgId = substr($homepage, ($pos2 + 6), $pos3);

//$sms_sent->setMsgId($MsgId);

$sms_sentM->update($sms_sent);

        }
    }





    public static function addSms4($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);


/////////////////////////////////////////////////////////////////////////
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $type = "TOGOCEL";

        $smssent = new Application_Model_EuSmsSent();
        $smssentM = new Application_Model_EuSmsSentMapper();

        $compteursms = $smssentM->findConuter() + 1;

        $smssent->setNEng($compteursms);
        $smssent->setRecipient($recipient);
        $smssent->setSMSBody($smsbody);
        $smssent->setTypeExpediteur($type);
        $smssent->setDateTime($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smssent->setEtat(NULL);
        $smssent->setMsgId("ID_TOGOCEL2");
        $smssentM->save($smssent);

/////////////////////////////////////////////////////////////////////////
//$homepage = file_get_contents("http://prodsmstg.gacsource.net/smstogocel/envoisms2.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");
/*$homepage = file_get_contents("http://prodsms.gacsource.net/smstogocel/envoisms2.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

$homepage = strip_tags($homepage, '<br>');

if (strpos($homepage, "Status=0") !== false) {
$sms_sent->setEtat(0);
}else if (strpos($homepage, "Status=1") !== false) {
$sms_sent->setEtat(1);
}else if (strpos($homepage, "Status=2") !== false) {
$sms_sent->setEtat(2);
}else{
$sms_sent->setEtat(3);
}

$pos2 = stripos($homepage, "MsgId=");
$pos3 = stripos(substr($homepage, ($pos2 + 6)), "<br>");
$MsgId = substr($homepage, ($pos2 + 6), $pos3);

$sms_sent->setMsgId($MsgId);

$sms_sentM->update($sms_sent);
*/


$homepage = file_get_contents("https://esmcgie.com/smstogocel/envoisms2.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

if (strpos($homepage, "0") !== false) {
$sms_sent->setEtat(0);
}else if (strpos($homepage, "1") !== false) {
$sms_sent->setEtat(1);
}else if (strpos($homepage, "2") !== false) {
$sms_sent->setEtat(2);
}/*else{
$sms_sent->setEtat(3);
}*/

//$pos2 = stripos($homepage, "MsgId=");
//$pos3 = stripos(substr($homepage, ($pos2 + 6)), "<br>");
//$MsgId = substr($homepage, ($pos2 + 6), $pos3);

//$sms_sent->setMsgId($MsgId);

$sms_sentM->update($sms_sent);





        }
    }








    public static function addSmsMoov($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);


/////////////////////////////////////////////////////////////////////////
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $type = "MOOV";

        $smssent = new Application_Model_EuSmsSent();
        $smssentM = new Application_Model_EuSmsSentMapper();

        $compteursms = $smssentM->findConuter() + 1;

        $smssent->setNEng($compteursms);
        $smssent->setRecipient($recipient);
        $smssent->setSMSBody($smsbody);
        //$smssent->setSMSBody("http://prodsms.gacsource.net/smsmoov/envoisms2moov.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(($smsbody))."");
        $smssent->setTypeExpediteur($type);
        $smssent->setDateTime($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smssent->setEtat(NULL);
        $smssent->setMsgId("ID_MOOV");
        $smssentM->save($smssent);

/////////////////////////////////////////////////////////////////////////
$homepage = file_get_contents("https://esmcgie.com/smsmoov/envoisms2moov.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

if (strpos($homepage, "0") !== false) {
$sms_sent->setEtat(0);
}else if (strpos($homepage, "1") !== false) {
$sms_sent->setEtat(1);
}else if (strpos($homepage, "2") !== false) {
$sms_sent->setEtat(2);
}/*else{
$sms_sent->setEtat(3);
}*/

//$pos2 = stripos($homepage, "MsgId=");
//$pos3 = stripos(substr($homepage, ($pos2 + 6)), "<br>");
//$MsgId = substr($homepage, ($pos2 + 6), $pos3);

//$sms_sent->setMsgId($MsgId);

$sms_sentM->update($sms_sent);


        }
    }



    public static function addSms5($compteur, $recipient, $smsbody) {
        $t_sms = new Application_Model_DbTable_EuSms();
        if ($recipient != '' && $smsbody != '') {
            $date = Zend_Date::now();
            $data = array(
                //'neng' => $compteur,
                'recipient' => str_replace(" ", "", $recipient),
                'smsbody' => $smsbody,
                'datetime' => $date->toString('dd/MM/yyyy HH:mm:ss'),
                'iddatetime' => self::getIDDate($date->toString('dd/MM/yyyy'))
            );
            $t_sms->insert($data);


/////////////////////////////////////////////////////////////////////////
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        $type = "TOGOCEL";

        $smssent = new Application_Model_EuSmsSent();
        $smssentM = new Application_Model_EuSmsSentMapper();

        $compteursms = $smssentM->findConuter() + 1;

        $smssent->setNEng($compteursms);
        $smssent->setRecipient($recipient);
        $smssent->setSMSBody($smsbody);
        $smssent->setTypeExpediteur($type);
        $smssent->setDateTime($date_id->toString('yyyy-MM-dd HH:mm:ss'));
        $smssent->setEtat(NULL);
        $smssent->setMsgId("ID_TOGOCEL3");
        $smssentM->save($smssent);

/////////////////////////////////////////////////////////////////////////
//$homepage = file_get_contents("http://prodsmstg.gacsource.net/smstogocel/envoisms3.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(html_entity_decode($smsbody))."");
$homepage = file_get_contents("https://esmcgie.com/smstogocel/envoisms3.php?login=esmc&password=mcnp&type=1&destination=".$recipient."&message=".urlencode(($smsbody))."");

$sms_sent = new Application_Model_EuSmsSent();
$sms_sentM = new Application_Model_EuSmsSentMapper();
$sms_sentM->find($compteursms, $sms_sent);

$homepage = strip_tags($homepage, '<br>');

if (strpos($homepage, "Status=0") !== false) {
$sms_sent->setEtat(0);
}else if (strpos($homepage, "Status=1") !== false) {
$sms_sent->setEtat(1);
}else if (strpos($homepage, "Status=2") !== false) {
$sms_sent->setEtat(2);
}

$pos2 = stripos($homepage, "MsgId=");
$pos3 = stripos(substr($homepage, ($pos2 + 6)), "<br>");
$MsgId = substr($homepage, ($pos2 + 6), $pos3);

$sms_sent->setMsgId($MsgId);

$sms_sentM->update($sms_sent);


        }
    }





    public static function genererCodeSMS($number) {
        $string = "";
        //$user_ramdom_key = "aLABbC0cEd1eDf2FghR3ij4kYXQl5UmOPn6pVq7rJs8tuW9IvGwxHTyKZMS";
        $user_ramdom_key = "aABbCcEdeDf2FghR3j4kYXQ5UmPn6pVq7rJs8tuW9vGwxHTyKZMS";
        srand((double) microtime() * time());
        for ($i = 0; $i < $number; $i++) {
            $string .= $user_ramdom_key[rand() % strlen($user_ramdom_key)];
        }
        return $string;
    }

    public static function convertDate($date) {
        if ($date != '') {
            $date1 = explode("/", $date);
            $dated = $date1[2] . '-' . $date1[1] . '-' . $date1[0];
            return $dated;
        }
    }

    public static function convertDated($date, $delimiter) {
        if ($date != '') {
            $date1 = explode($delimiter, $date);
            $dated = $date1[2] . '-' . $date1[1] . '-' . $date1[0];
            return $dated;
        }
    }

    public static function convertDateO($date, $delimiter) {
        if ($date != '') {
            $date1 = explode($delimiter, $date);
            $dated = $date1[0] . '-' . $date1[1] . '-' . $date1[2];
            return $dated;
        }
    }

    public static function calculCredit($mont_capa, $pck, $prk) {
        return ($mont_capa * $prk) / $pck;
    }

    public static function getCapaByCredit($id_credit) {
        $t_capa = new Application_Model_DbTable_EuCapa();
        $select = $t_capa->select();
        $select->where('id_credit = ?', $id_credit);
        $results = $t_capa->fetchAll($select);
        if (count($results) > 0) {
            return $results->current();
        } else {
            return NULL;
        }
    }

    public static function calculCapa($mont_credit, $pck, $prk) {
        return ($mont_credit * $pck) / $prk;
    }

    public static function getTypeRappro($type) {
        $type_rappro = '';
        if ($type == 'FGRPGr') {
            $type_rappro = 'FGRPG1/RPGr';
        } elseif ($type == 'FGRPGnr') {
            $type_rappro = 'FGRPG1/RPGnr';
        } elseif ($type == 'FGInr') {
            $type_rappro = 'Inr2/InrSC';
        } elseif ($type == 'FGIr') {
            $type_rappro = 'Ir2/IrSC';
        } elseif ($type == 'EInr') {
            $type_rappro = 'Inr4/InrSC';
        } elseif ($type == 'ECNCSr') {
            $type_rappro = 'CNCSr6/RPGnr';
        } elseif ($type == 'ECNCSnr') {
            $type_rappro = 'CNCSnr5/RPGnr';
        } elseif ($type == 'EGCP-Inr') {
            $type_rappro = 'GCP11/Inr';
        } elseif ($type == 'EGCP-RPGnr') {
            $type_rappro = 'GCP12/RPGnr';
        }
        return $type_rappro;
    }

    public static function getParametre($code_param, $lib_param) {
        $param = 0;
        try {
            $tparam = new Application_Model_DbTable_EuParametres();
            $select_pck = $tparam->select();
            $select_pck->where('code_param = ?', $code_param)
                    ->where('lib_param = ?', $lib_param);
            $rows = $tparam->fetchAll($select_pck);
            if (count($rows) > 0) {
                $row = $rows->current();
                $param = $row->montant;
            }
            return $param;
        } catch (Exception $exc) {
            echo "Erreur d'éxécution: " . $exc->getMessage();
        }
    }

    public static function addOperation($id,$code_membre, $code_membre_morale, $code_cat, $montant_op, $code_produit, $lib_op, $type_op, $date_op, $heure_op, $utilisateur) {
        $t_operation = new Application_Model_DbTable_EuOperation();
        if ($id != NULL) {
            $data = array(
                'id_operation' => $id,
                'date_op' => $date_op,
                'montant_op' => $montant_op,
                'code_membre' => $code_membre,
                'code_membre_morale' => $code_membre_morale,
                'heure_op' => $heure_op,
                'code_produit' => $code_produit,
                'id_utilisateur' => $utilisateur,
                'lib_op' => $lib_op,
                'code_cat' => $code_cat,
                'type_op' => $type_op
            );
            $t_operation->insert($data);
        }
    }
	
	public static function addOperation2($code_membre,$code_membre_morale, $code_cat, $montant_op, $code_produit, $lib_op, $type_op, $date_op, $heure_op, $utilisateur) {
        $t_operation = new Application_Model_DbTable_EuOperation();
        //if ($id != NULL) {
            $data = array(
                //'id_operation' => $id,
                'date_op' => $date_op,
                'montant_op' => $montant_op,
                'code_membre' => $code_membre,
                'code_membre_morale' => $code_membre_morale,
                'heure_op' => $heure_op,
                'code_produit' => $code_produit,
                'id_utilisateur' => $utilisateur,
                'lib_op' => $lib_op,
                'code_cat' => $code_cat,
                'type_op' => $type_op
            );
            $t_operation->insert($data);
        //}
    }
	
	

    public static function addCnp($id_credit, $mont_debit, $mont_credit, $solde_cnp, $source, $type, $date_cnp, $code_capa, $dom) {
        $t_operation = new Application_Model_DbTable_EuCnp();
        if ($id_credit != '') {
            $data = array(
                'id_credit' => $id_credit,
                'mont_debit' => $mont_debit,
                'mont_credit' => $mont_credit,
                'solde_cnp' => $solde_cnp,
                'source_credit' => $source,
                'type_cnp' => $type,
                'date_cnp' => $date_cnp,
                'code_capa' => $code_capa,
                'code_domicilier' => $dom
            );
            $t_operation->insert($data);
        }
    }

    public static function createCompte($code, $libelle, $code_cat, $solde, $membre, $type_compte, $date, $desactiver, $code_membre_morale) {
        $t_compte = new Application_Model_DbTable_EuCompte();
        if ($code != '' && $code_cat != '' && $type_compte != '') {
            $data = array(
                'code_compte' => $code,
                'code_membre' => $membre,
                'code_membre_morale' => $code_membre_morale,
                'solde' => $solde,
                'lib_compte' => $libelle,
                'date_alloc' => $date,
                'desactiver' => $desactiver,
                'code_type_compte' => $type_compte,
                'code_cat' => $code_cat
            );

            $t_compte->insert($data);
        }
    }

    public static function createCompteCredit($id,$affecter,$id_op,$membre,$produit,$compte,$montant,$mont_place,$datedeb,$datefin,$source,$compte_source,$krr, $renouveller,$domicilier,$bnp,$code_bnp,$type_credit,$prk) {
        $t_credit = new Application_Model_DbTable_EuCompteCredit();
        if ($id != '' && $membre != '' && $produit != '' && $compte != '') {
            $data = array(
                'id_credit' => $id,
                'montant_credit' => $montant,
                'code_membre' => $membre,
                'code_produit' => $produit,
                'montant_place' => $mont_place,
				'datefin' => $datefin,
				'datedeb' => $datedeb,
                'source' => $source,
                'date_octroi' => $datedeb,
                'compte_source' => $compte_source,
                'krr' => $krr,
                'renouveller' => $renouveller,
                'bnp' => $bnp,
                'code_compte' => $compte,
                'id_operation' => $id_op,
                'domicilier' => $domicilier,
                'code_bnp' => $code_bnp,
                'affecter' => $affecter,
                'code_type_credit' => $type_credit,
                'prk' => $prk
            );
            $t_credit->insert($data);
        }
    }

	public static function verifierMembre($membre) {
        $ret = false;
        if (isset($membre)) {
            if (substr($membre, -1, 1) === 'M') {
                $t_moral = new Application_Model_DbTable_EuMembreMorale();
                $m_result = $t_moral->find($membre);
                $ret = (count($m_result) == 1);
            } else {
                $t_membre = new Application_Model_DbTable_EuMembre();
                $m_result = $t_membre->find($membre);
                $ret = (count($m_result) == 1);
            }
        }
        return $ret;
    }

    public function verifierMembreType($membre, $type) {
        if (isset($membre) && isset($type)) {
            $type_membre = Util_Utils::getMembreType($membre);
            return ($type_membre === $type);
        } else {
            return FALSE;
        }
    }


    public static function verifierCodeSMS(Application_Model_EuSmsmoney $sms) {
        $montant = 0;
        if ($sms != NULL && $sms->getIDDatetimeConsumed() == 0) {
            $compte_transfert = $sms->getFromAccount();
            list($type_Num, $code_cat, $membre_transfert) = explode('-', $compte_transfert);
            if ($type_Num == 'NN' && $code_cat == 'TR') {
                $tab_acteur = new Application_Model_DbTable_EuActeur();
                $select = $tab_acteur->select();
                $select->where('code_membre like ?', $membre_transfert)
                // ->where('type_ACTEUR in (?)', array('PBF','DSMS'))
				;
                $acteurs = $tab_acteur->fetchAll($select);
                if (count($acteurs) > 0) {
                   $montant = $sms->getCreditAmount();
                   $code_dev = $sms->getCurrencyCode();
                   if ($code_dev != 'XOF') {
                      $code_cours = $code_dev . '-XOF';
                      $cours = new Application_Model_EuCours();
                      $m_cours = new Application_Model_EuCoursMapper();
                      $ret = $m_cours->find($code_cours, $cours);
                      if ($ret) {
                            if (isset($montant)) {
                                $montant = $montant * $cours->getVal_dev_fin();
                            }
                      }
                    }
                }
            }
        }
        return $montant;
    }

    public static function getIDDate($Unedate) {
        try {
            if ($Unedate == '') {
                return 0;
                exit();
            }

            list($Jour, $Mois, $Annee) = explode('/', $Unedate);
            IF ($Annee < 100)
                $Annee = "20" . $Annee;  //Provisoire

            $timestamp = mktime(0, 0, 0, $Mois, $Jour, $Annee);
            $timestamp1 = $timestamp - mktime(0, 0, 0, 1, 1, $Annee) + (3600 * 24);

            $Result = round($timestamp1 / (3600 * 24)) + 366 * (date('Y', $timestamp) - 1);

            return $Result;
        } catch (Exception $e) {
            echo 'Exception reçue : ', $e->getMessage(), "\n";
        }
    }





    public static function getParamEsmc($id_param) {
        $param = 0;
        try {
            $tparam = new Application_Model_DbTable_EuParamEsmc();
            $select = $tparam->select();
            $select->where('id_param = ?', $id_param);
            $rows = $tparam->fetchAll($select);
            if (count($rows) > 0) {
                $row = $rows->current();
                $param = $row->valeur_param;
            }
            return $param;
        } catch (Exception $exc) {
            echo "Erreur d'éxécution: " . $exc->getMessage();
        }
    }


public static function getParamEsmcLib($id_param) {
        $param = 0;
        try {
            $tparam = new Application_Model_DbTable_EuParamEsmc();
            $select = $tparam->select();
            $select->where('id_param = ?', $id_param);
            $rows = $tparam->fetchAll($select);
            if (count($rows) > 0) {
                $row = $rows->current();
                $param = $row->libelle_param;
            }
            return $param;
        } catch (Exception $exc) {
            echo "Erreur d'éxécution: " . $exc->getMessage();
        }
    }




public static function ajoute1zero($numero) {
    if(strlen($numero) == 1){
    $numero = "0".$numero;
    }
    return $numero;
    }




public static function lettre($nb, $alaligne) {

$chiffre[1]="un";
$chiffre[2]="deux";
$chiffre[3]="trois";
$chiffre[4]="quatre";
$chiffre[5]="cinq";
$chiffre[6]="six";
$chiffre[7]="sept";
$chiffre[8]="huit";
$chiffre[9]="neuf";
$chiffre[10]="dix";
$chiffre[11]="onze";
$chiffre[12]="douze";
$chiffre[13]="treize";
$chiffre[14]="quatorze";
$chiffre[15]="quinze";
$chiffre[16]="seize";
$chiffre[17]="dix-sept";
$chiffre[18]="dix-huit";
$chiffre[19]="dix-neuf";

$dizaine[1]="dix";
$dizaine[2]="vingt";
$dizaine[3]="trente";
$dizaine[4]="quarante";
$dizaine[5]="cinquante";
$dizaine[6]="soixante";
$dizaine[8]="quatre-vingt";

if ($nb >= 1) {
$resultat = "";




$varnum = intval($nb / 1000000000);
if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

$resultat .= $varlet . " milliard";
if ($varlet != "un") {$resultat .= "s";}

}


//$varnum = intval($nb) % 1000000000;
//$varnum = intval($varnum / 1000000);

$nb1 = floor($nb);
$nb2 = strval($nb1);
$size = strlen($nb2);
if($size > 9){
$varnum = intval(substr($nb2, $size - 9, -6));
}else{
$varnum = intval($nb / 1000000);
}






if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

if ($varlet != "un") {$resultat .= " " . $varlet;}

$resultat .= " million";
if ($varlet != "un") {$resultat .= "s";}

}





$nb1 = floor($nb);
$nb2 = strval($nb1);
$size = strlen($nb2);
if($size > 9){
$varnum = intval(substr($nb2, $size - 6, -3));
}else{
$varnum = intval($nb) % 1000000;
$varnum = intval($varnum / 1000);
}


if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);


if ($varlet != "un") {$resultat .= " " . $varlet;}
$resultat .= " mille";
}

//$varnum = intval($nb) % 1000;
$nb1 = floor($nb);
$nb2 = strval($nb1);
$size = strlen($nb2);

if($size > 9){
$varnum = intval(substr($nb2, -3));
}else{
$varnum = intval($nb) % 1000;
}


if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

$resultat .= " " . $varlet;
}
$resultat = ltrim($resultat);

if (strstr($varlet,"cent"))  {$resultat .= "s";}
if (strstr($varlet,"ingt"))  {$resultat .= "s";}
if (strstr($varlet,"lion"))  {$resultat .= " de";}
if (strstr($varlet,"ions"))  {$resultat .= " de";}
if (strstr($varlet,"liard"))  {$resultat .= " de";}
if (strstr($varlet,"iard"))  {$resultat .= " de";}

$resultat .= " franc";
if ($nb >= 2) {$resultat .= "s";}


$varnum = intval(($nb - intval($nb)) * 100);

 if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

$resultat .= " et " . $varlet . " centime";
if ($varnum > 1) {$resultat .= "s";}
}

} else {
$resultat = "z&eacute;ro";
}

$resultat = str_ireplace("sss", "s", $resultat);
$resultat = str_ireplace("ss", "s", $resultat);
$resultat = str_ireplace("xs", "x", $resultat);

$tab = explode(" ", $resultat);
if($tab[0] == "milliard" || $tab[0] == "million"){
$resultat = "un ".$resultat;
    }

$resultat = ucfirst($resultat);

if($alaligne > 0 && $alaligne < strlen($resultat)){
$partie = substr($resultat, 0, $alaligne);
$position = strripos($partie, " ");

$partie1 = substr($resultat, 0, $position + 1);
$partie2 = substr($resultat, $position + 1);

$resultat = $partie1."<br>".$partie2;
}
    return $resultat;
}





public static function lettre1($nb) {

$chiffre[1]="un";
$chiffre[2]="deux";
$chiffre[3]="trois";
$chiffre[4]="quatre";
$chiffre[5]="cinq";
$chiffre[6]="six";
$chiffre[7]="sept";
$chiffre[8]="huit";
$chiffre[9]="neuf";
$chiffre[10]="dix";
$chiffre[11]="onze";
$chiffre[12]="douze";
$chiffre[13]="treize";
$chiffre[14]="quatorze";
$chiffre[15]="quinze";
$chiffre[16]="seize";
$chiffre[17]="dix-sept";
$chiffre[18]="dix-huit";
$chiffre[19]="dix-neuf";

$dizaine[1]="dix";
$dizaine[2]="vingt";
$dizaine[3]="trente";
$dizaine[4]="quarante";
$dizaine[5]="cinquante";
$dizaine[6]="soixante";
$dizaine[8]="quatre-vingt";

if ($nb >= 1) {
$resultat = "";
} else {
$resultat = "z&eacute;ro";
}

$varnum = intval($nb / 1000000);
if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

$resultat = $varlet . " million";
if ($varlet != "un") {$resultat .= "s";}
}

$varnum = intval($nb) % 1000000;
$varnum = intval($varnum / 1000);
if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

if ($varlet != "un") {$resultat .= " " . $varlet;}
$resultat .= " mille";
}

$varnum = intval($nb) % 1000;
if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

$resultat .= " " . $varlet;
}
$resultat = ltrim($resultat);

if (strstr($varlet,"cent"))  {$resultat .= "s";}
if (strstr($varlet,"ingt"))  {$resultat .= "s";}
if (strstr($varlet,"lion"))  {$resultat .= " de";}
if (strstr($varlet,"ions"))  {$resultat .= " de";}

$resultat .= " franc";
if ($nb >= 2) {$resultat .= "s";}

$varnum = intval(($nb - intval($nb)) * 100);

 if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

$resultat .= " et " . $varlet . " centime";
if ($varnum > 1) {$resultat .= "s";}
}

$resultat = ucfirst($resultat);

//echo $resultat;
    return $resultat;
}




public static function lettre2($nb, $alaligne) {

$chiffre[1]="un";
$chiffre[2]="deux";
$chiffre[3]="trois";
$chiffre[4]="quatre";
$chiffre[5]="cinq";
$chiffre[6]="six";
$chiffre[7]="sept";
$chiffre[8]="huit";
$chiffre[9]="neuf";
$chiffre[10]="dix";
$chiffre[11]="onze";
$chiffre[12]="douze";
$chiffre[13]="treize";
$chiffre[14]="quatorze";
$chiffre[15]="quinze";
$chiffre[16]="seize";
$chiffre[17]="dix-sept";
$chiffre[18]="dix-huit";
$chiffre[19]="dix-neuf";

$dizaine[1]="dix";
$dizaine[2]="vingt";
$dizaine[3]="trente";
$dizaine[4]="quarante";
$dizaine[5]="cinquante";
$dizaine[6]="soixante";
$dizaine[8]="quatre-vingt";

if ($nb >= 1) {
$resultat = "";




$varnum = intval($nb / 1000000000);
if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

$resultat .= $varlet . " milliard";
if ($varlet != "un") {$resultat .= "s";}

}


//$varnum = intval($nb) % 1000000000;
//$varnum = intval($varnum / 1000000);

$nb1 = floor($nb);
$nb2 = strval($nb1);
$size = strlen($nb2);
if($size > 9){
$varnum = intval(substr($nb2, $size - 9, -6));
}else{
$varnum = intval($nb / 1000000);
}






if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

//if ($varlet != "un") {$resultat .= " " . $varlet;}
$resultat .= " " . $varlet;

$resultat .= " million";
if ($varlet != "un") {$resultat .= "s";}

}





$nb1 = floor($nb);
$nb2 = strval($nb1);
$size = strlen($nb2);
if($size > 9){
$varnum = intval(substr($nb2, $size - 6, -3));
}else{
$varnum = intval($nb) % 1000000;
$varnum = intval($varnum / 1000);
}


if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);


if ($varlet != "un") {$resultat .= " " . $varlet;}
$resultat .= " mille";
}

//$varnum = intval($nb) % 1000;
$nb1 = floor($nb);
$nb2 = strval($nb1);
$size = strlen($nb2);

if($size > 9){
$varnum = intval(substr($nb2, -3));
}else{
$varnum = intval($nb) % 1000;
}


if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);

$resultat .= " " . $varlet;
}
$resultat = ltrim($resultat);

if (strstr($varlet,"cent"))  {$resultat .= "s";}
if (strstr($varlet,"ingt"))  {$resultat .= "s";}
if (strstr($varlet,"lion"))  {$resultat .= " de";}
if (strstr($varlet,"ions"))  {$resultat .= " de";}
if (strstr($varlet,"liard"))  {$resultat .= " de";}
if (strstr($varlet,"iard"))  {$resultat .= " de";}

$resultat .= " Bons d&rsquo;Achat";
if ($nb >= 2) {$resultat .= "s";}


$varnum = intval(($nb - intval($nb)) * 100);

 if ($varnum > 0) {

$varlet = "";
if ($varnum >= 100) {
$varlet = $chiffre[intval($varnum / 100)];
$varnum = $varnum % 100;
if ($varlet == "un")
{$varlet = "cent "; }
else
{$varlet .= " cent ";}
}
if ($varnum <= 19) {
    if ($varnum > 0) {$varlet .= $chiffre[$varnum];}
}
else {
$varnumd = intval($varnum / 10);
$varnumu = $varnum % 10;
switch ($varnumd) {
case 1: $varlet .= $dizaine[1]; break;
case 2: $varlet .= $dizaine[2]; break;
case 3: $varlet .= $dizaine[3]; break;
case 4: $varlet .= $dizaine[4]; break;
case 5: $varlet .= $dizaine[5]; break;
case 6: $varlet .= $dizaine[6]; break;
case 7: $varlet .= $dizaine[6]; break;
case 8: $varlet .= $dizaine[8]; break;
case 9: $varlet .= $dizaine[8]; break;
}
if ($varnumu == 1 && $varnumd < 8) {
$varlet .= " et ";
} else {
if ($varnumu != 0 || $varnumd == 7 || $varnumd == 9) {$varlet .= "-";}
}
if ($varnumd == 7 || $varnumd == 9) {$varnumu += 10;}
if ($varnumu != 0) {$varlet .= $chiffre[$varnumu];}
}
$varlet = trim($varlet);


$resultat .= " et " . $varlet . " centime";
if ($varnum > 1) {$resultat .= "s";}
}

} else {
$resultat = "z&eacute;ro";
}

$resultat = str_ireplace("sss", "s", $resultat);
$resultat = str_ireplace("ss", "s", $resultat);
$resultat = str_ireplace("xs", "x", $resultat);

$tab = explode(" ", $resultat);
if($tab[0] == "milliard" || $tab[0] == "million"){
$resultat = "un ".$resultat;
    }

$resultat = ucfirst($resultat);

if($alaligne > 0 && $alaligne < strlen($resultat)){
$partie = substr($resultat, 0, $alaligne);
$position = strripos($partie, " ");

$partie1 = substr($resultat, 0, $position + 1);
$partie2 = substr($resultat, $position + 1);

$resultat = $partie1."<br>".$partie2;
}
    return $resultat;
}


public  function validation_automatique($id_souscription) {

ini_set('memory_limit', '512M');

$id_utilisateur_acnev = 1;
$id_utilisateur_filiere = 2;
$id_utilisateur_technopole = 3;

                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($id_souscription, $souscription);

                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($souscription->souscription_banque, $souscription->souscription_numero, $souscription->souscription_date_numero)){



$date_id = new Zend_Date(Zend_Date::ISO_8601);

//////validation acnev
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($id_souscription, $souscription);

                                $souscription->setPublier(1);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_acnev);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation filere
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($id_souscription, $souscription);

                                $souscription->setPublier(2);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_filiere);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);




//////validation technopole
                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($id_souscription, $souscription);

                                $souscription->setPublier(3);
                                $souscriptionM->update($souscription);


                                $validation_quittance = new Application_Model_EuValidationQuittance();
                                $validation_quittance_mapper = new Application_Model_EuValidationQuittanceMapper();

                                                $compteur_validation_quittance = $validation_quittance_mapper->findConuter() + 1;
                                                $validation_quittance->setValidation_quittance_id($compteur_validation_quittance);
                                                $validation_quittance->setValidation_quittance_utilisateur($id_utilisateur_technopole);
                                                $validation_quittance->setValidation_quittance_souscription($souscription->souscription_id);
                                                $validation_quittance->setValidation_quittance_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                                $validation_quittance->setPublier(1);
                                                $validation_quittance_mapper->save($validation_quittance);



//include("Transfert.php");


//////////////////////////////////////////
if($souscription->souscription_membreasso != 1){
        $membreasso = new Application_Model_EuMembreasso();
        $m_membreasso = new Application_Model_EuMembreassoMapper();
        $m_membreasso->find($souscription->souscription_membreasso, $membreasso);

        $association = new Application_Model_EuAssociation();
        $m_association = new Application_Model_EuAssociationMapper();
        $m_association->find($membreasso->membreasso_association, $association);
        $code_agence = $association->code_agence;

        $recubancaire = new Application_Model_EuRecubancaire();
        $recubancaire_mapper = new Application_Model_EuRecubancaireMapper();
        $cumul_recubancaire = $recubancaire_mapper->findCumul($souscription->souscription_id);



        if($association->id_filiere == NULL && $association->code_type_acteur == NULL && $association->code_statut == NULL){

            if($souscription->souscription_programme == "KACM"){
            $partagea_montant = floor(($cumul_recubancaire / 100 * 5) / 2);
                }else{
            $partagea_montant = floor(($cumul_recubancaire / 100 * 5) / 2);
                    }

        }else{

            if($souscription->souscription_programme == "KACM"){
            $partagea_montant = floor($cumul_recubancaire / 100 * 5);
                }else{
            $partagea_montant = floor($cumul_recubancaire / 100 * 5);
                    }

        }

//////////////////////////////////////////

        $partagea = new Application_Model_EuPartagea();
        $partagea_mapper = new Application_Model_EuPartageaMapper();

            $compteur_partagea = $partagea_mapper->findConuter() + 1;
            $partagea->setPartagea_id($compteur_partagea);
            $partagea->setPartagea_association($membreasso->membreasso_association);
            $partagea->setPartagea_souscription($id_souscription);
            $partagea->setPartagea_montant($partagea_montant * 0.75);
            $partagea->setPartagea_montant_utilise(0);
            $partagea->setPartagea_montant_solde($partagea_montant * 0.75);
            $partagea->setPartagea_montant_impot(0);
            $partagea_mapper->save($partagea);

//////////////////////////////////////////

        $partagem = new Application_Model_EuPartagem();
        $partagem_mapper = new Application_Model_EuPartagemMapper();

            $compteur_partagem = $partagem_mapper->findConuter() + 1;
            $partagem->setPartagem_id($compteur_partagem);
            $partagem->setPartagem_membreasso($membreasso->membreasso_id);
            $partagem->setPartagem_souscription($id_souscription);
            $partagem->setPartagem_montant($partagea_montant * 0.25);
            $partagem->setPartagem_montant_utilise(0);
            $partagem->setPartagem_montant_solde($partagea_montant * 0.25);
            $partagem->setPartagem_montant_impot(0);
            $partagem_mapper->save($partagem);

//////////////////////////////////////////

}







$htmlpdf = "";

$htmlpdf .= '
                <page backbottom="15mm">
                <page_footer>
                                <table>
<tr>
                <td align="center">
                <hr>
                Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
        </tr>
                                </table>
                </page_footer>

<table width="768" border="0">
<tbody>
        <tr>
                <td colspan="4"><img src="'.getParamEsmc(2).'/sm_images/Entete-de-page-SM.png"  width="738" height="105"  /></td>
        </tr>';
if($souscription->souscription_personne == "PP"){

                                $souscrip = new Application_Model_EuSouscription();
                                $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                                $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");

                if($souscription->souscription_programme == "KACM"){
                                if($compteur_souscrip == 0){$compteur_souscrip = 1029;}
                                $unite = 5000;
$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>N° Reçu Personne Physique : PP'.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
        </tr>';
                }else if($souscription->souscription_programme == "CMFH"){
                                if($compteur_souscrip == 0){$compteur_souscrip = 118;}
                                $unite = 2187.5;
$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
        </tr>';
                }

}else if($souscription->souscription_personne == "PM"){
                if($souscription->souscription_programme == "KACM"){

                                $souscrip = new Application_Model_EuSouscription();
                                $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                                $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, $souscription->code_type_acteur);

                                if($compteur_souscrip == 0 && $souscription->code_type_acteur == "OSE"){$compteur_souscrip = 4;}
                                if($compteur_souscrip == 0 && $souscription->code_type_acteur == "OE"){$compteur_souscrip = 5;}
                                $unite = 70000;
$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>N° Reçu '.$souscription->code_type_acteur.' : '.$souscription->code_type_acteur.''.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
        </tr>';
                }else if($souscription->souscription_programme == "CMFH"){

                                $souscrip = new Application_Model_EuSouscription();
                                $souscrip_mapper = new Application_Model_EuSouscriptionMapper();
                                $compteur_souscrip = $souscrip_mapper->findConuterOrdre($souscription->souscription_personne, $souscription->souscription_programme, "");
                                if($compteur_souscrip == 0){$compteur_souscrip = 118;}
                                $unite = 2187.5;
$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.ajoutezero($compteur_souscrip + 1).'</u></em></strong></td>
        </tr>';
                }


}

/*$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>QUITTANCE CMFH/CAPS/GAC TOGO N° '.$souscription->souscription_id.'</u></em></strong></td>
        </tr>';*/

                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($id_souscription, $souscription);

                                $souscription->setSouscription_ordre($compteur_souscrip + 1);
                                $souscriptionM->update($souscription);

        if($souscription->souscription_autonome == 1){
                        $souscription_nombre = $souscription->souscription_nombre - 1;
                                                if($souscription->souscription_personne == "PP"){
                                                                $autonome = 5000;
                                                }else if($souscription->souscription_personne == "PM"){
                                                                $autonome = 70000;
                                                                }
                        }else{
                        $souscription_nombre = $souscription->souscription_nombre;
                $autonome = 0;
                                        }

if($souscription->souscription_personne == "PP"){
$htmlpdf .= '
        <tr>
                <td colspan="4" align="left"><p><em><u>Nom  &amp; prénom(s) de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_nom.' '.$souscription->souscription_prenom.'</em></strong></p></td>
        </tr>';
}else if($souscription->souscription_personne == "PM"){
$htmlpdf .= '
        <tr>
                <td colspan="4" align="left"><p><em><u>Raison sociale de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_raison.'</em></strong></p></td>
        </tr>';
}
$htmlpdf .= '
        <tr>
                <td colspan="4" align="left"><em><u>N°  code(s) SMS CMFH/CAPS/Togo acheté(s): '.$souscription->souscription_nombre.'</u></em></td>
        </tr>
        <tr>
                <td colspan="2">&nbsp;</td>
                <td colspan="2" align="center"><strong><em>Montant total : '.number_format(($souscription_nombre * $unite + $autonome), 0, ',', ' ').' FCFA</em></strong></td>
        </tr>
        <tr>
                <td align="left"><em><strong>Libellé</strong></em></td>
                <td align="center"><em><strong>Nombre de codes achetés</strong></em></td>
                <td align="center"><strong><em>Prix Unitaire d&rsquo;un code</em></strong></td>
                <td align="center"><em><strong>Montant total</strong></em></td>
        </tr>';

        if($souscription->souscription_autonome == 1){
$htmlpdf .= '
        <tr style="background-color:#999;">
                <td align="left"><em><strong>Achat de code SMS KACM</strong></em></td>
                <td align="center"><em>1</em></td>
                <td align="center"><em>'.$autonome.' FCFA</em></td>
                <td align="center"><em>'.number_format(($autonome), 0, ',', ' ').' FCFA</em></td>
        </tr>';
        }
                if($souscription->souscription_programme == "CMFH"){
$htmlpdf .= '
        <tr style="background-color:#999;">
                <td align="left"><em><strong>Achat de code SMS  CMFH/CAPS/GAC Togo</strong></em></td>
                <td align="center"><em>'.$souscription_nombre.'</em></td>
                <td align="center"><em>'.$unite.' FCFA</em></td>
                <td align="center"><em>'.number_format(($souscription_nombre * $unite), 0, ',', ' ').' FCFA</em></td>
        </tr>';
        }

$htmlpdf .= '
        <tr>
                <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.Util_Utils::lettre(($souscription_nombre * $unite + $autonome), 50).' CFA</em></td>
                <td colspan="2" rowspan="3" align="left"><img src="'.getParamEsmc(2).'/images/cachet.jpg" /><br />
Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
        </tr>';

                if($souscription->souscription_programme == "CMFH"){
$htmlpdf .= '
        <tr>
                <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  Chiffres :</u> '.number_format(($souscription_nombre * 70000 ), 0, ',', ' ').' BA.</em></td>
        </tr>
        <tr>
                <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  lettres :</u> '.lettre2(($souscription_nombre * 70000 ), 50).' </em></td>
        </tr>';
                }else if($souscription->souscription_programme == "KACM"){
$htmlpdf .= '
        <tr>
                <td colspan="2" align="left">&nbsp;</td>
        </tr>
        <tr>
                <td colspan="2" align="left">&nbsp;</td>
        </tr>';
                                }


$htmlpdf .= '
        <tr>
                <td colspan="4" align="left">&nbsp;</td>
        </tr>
        <tr>
                <td colspan="4" align="left">&nbsp;</td>
        </tr>
        <tr>
                <td colspan="4" align="center">';
                if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")){
list($width, $height, $type, $attr) = getimagesize(getParamEsmc(2).$souscription->souscription_vignette);
                $pourcent = 700 * 100 / $width;
                $width2 = 700;
                $height2 = $pourcent * $height / 100;
$htmlpdf .= '<img src="'.getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />

';
}
$htmlpdf .= '  </td>
                </tr>



        </tbody>
</table>

<br />
<br />
&nbsp;

</page>






';

$htmlpdf .= '


';


                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate($souscription->souscription_banque, $souscription->souscription_numero, $souscription->souscription_date_numero)){

                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($relevebancairedetail->relevebancairedetail_id, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);
                                }







////////////////////////////////////////////////////////////////////////////////
$filename = ''.getParamEsmc(1).'/souscriptions.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

                // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                // Le pointeur de fichier est placé à la fin du fichier
                // c'est là que $somecontent sera placé
                if (!$handle = fopen($filename, 'w+')) {
                                    echo "Impossible d'ouvrir le fichier ($filename)";
                                    exit;
                }

                // Ecrivons quelque chose dans notre fichier.
                if (fwrite($handle, $somecontent) === FALSE) {
                            echo "Impossible d'écrire dans le fichier ($filename)";
                            exit;
                }

                //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

                fclose($handle);

} else {
                echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_souscription/")) {
mkdir("../../webfiles/pdf_souscription/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".($souscription->souscription_id)."_.html";
$newnom = "SOUSCRIPTION_".($souscription->souscription_id)."_";
$newchemin = "../../webfiles/pdf_souscription/";

copy($file, $newfile);

                ob_start();
                include(dirname(__FILE__).'/../'.$newfile);
                $content = ob_get_clean();

                // convert to PDF
                require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                try
                {
                                $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                                $html2pdf->pdf->SetDisplayMode('fullpage');
                                $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                                //$html2pdf->writeHTML($content);
                                $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                }
                catch(HTML2PDF_exception $e) {
                                echo $e;
                                exit;
                }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);





                                //$this->_redirect(str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file));
                                $membreasso = new Application_Model_EuMembreasso();
                                $membreassoM = new Application_Model_EuMembreassoMapper();
                                $membreassoM->find($souscription->souscription_membreasso, $membreasso);

                                $association = new Application_Model_EuAssociation();
                                $associationM = new Application_Model_EuAssociationMapper();
                                $associationM->find($membreasso->membreasso_association, $association);



if($association->association_email != ""){
$config = array('auth' => 'login',
                                                                'username' => getParamEsmc(3),
                                                                'password' => getParamEsmc(4));

$tr = new Zend_Mail_Transport_Smtp(getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(getParamEsmc(3), "ESMC");
$mail->addTo($association->association_email, $association->association_nom);
$mail->setSubject('Recu Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);

$mail->send($tr);

}





if($membreasso->membreasso_email != ""){
$config = array('auth' => 'login',
                                                                'username' => getParamEsmc(3),
                                                                'password' => getParamEsmc(4));

$tr = new Zend_Mail_Transport_Smtp(getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(getParamEsmc(3), "ESMC");
$mail->addTo($membreasso->membreasso_email, $membreasso->membreasso_nom." ".$membreasso->membreasso_prenom);
$mail->setSubject('Recu Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);

$mail->send($tr);
}




            if($souscription->souscription_programme == "CMFH"){

$html .= "<br />";
$html .= "Voici votre Login et Mot de passe qui vous permettent de vous connecter &acirc; votre espace d'int&eacute;grateur. Veuillez vous int&eacute;grer selon le type d'int&eacute;grateur qui vous convient.";
//$html .= "<br />";
//$html .= "Connectez vous ici : <a href='http://prod.esmcgie.com/souscription/login'>Connexion Souscription</a>";
$html .= "<br />";
$html .= "Login : ".$souscription->souscription_login."<br />";
$html .= "<br />";
$html .= "Mot de passe : ".$souscription->souscription_passe."<br />";
$html .= "<br />";

/*if(isset($souscription->souscription_mobilisateur) && $souscription->souscription_mobilisateur == 1){
$html .= "Vous avez sélectionner l'option Mobilisateur donc utilisez les mêmes Login et Mot de passe pour vous connecter à votre espace Agrément OSE/OE pour pouvoir souscrire d'autres personnes.";
$html .= "<br />";
$html .= "Connectez vous aussi : <a href='http://prod.esmcgie.com/integrateur/login'>Connexion Agrément OSE/OE</a>";
$html .= "<br />";
}*/

            }

if($souscription->souscription_email != ""){
$config = array('auth' => 'login',
                                                                'username' => getParamEsmc(3),
                                                                'password' => getParamEsmc(4));

$tr = new Zend_Mail_Transport_Smtp(getParamEsmc(5), $config);
Zend_Mail::setDefaultTransport($tr);
$mail = new Zend_Mail();
//$mail->setBodyText('Mon texte de test');
$mail->setBodyHtml($html);
$mail->setFrom(getParamEsmc(3), "ESMC");
$mail->addTo($souscription->souscription_email, $souscription->souscription_nom." ".$souscription->souscription_prenom);
$mail->setSubject('Recu Quittance Souscription : '.$date_id->toString('dd-MM-yyyy HH:mm'));

$monImage = file_get_contents($file);
$finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
$at = new Zend_Mime_Part($monImage);
$at->type        = finfo_file($finfo, $file);
$at->disposition = Zend_Mime::DISPOSITION_INLINE;
$at->encoding    = Zend_Mime::ENCODING_BASE64;
$at->filename    = $filena;
$mail->addAttachment($at);

$mail->send($tr);
}



    }

}



public static function genererPdfRenseignement($id){
  ini_set('memory_limit', '512M');
  $dbri = new Application_Model_DbTable_EuRenseignementIdentite();
  $ri = new Application_Model_EuRenseignementIdentite();
  $pre = new Application_Model_EuPrefecture();
  $prem = new Application_Model_EuPrefectureMapper();
  $can = new Application_Model_EuCanton();
  $canm = new Application_Model_EuCantonMapper();
  $vi = new Application_Model_EuVille();
  $vim = new Application_Model_EuVilleMapper();
  $re = new Application_Model_EuRegion();
  $rem = new Application_Model_EuRegionMapper();
  $rel = new Application_Model_EuReligion();
  $relm = new Application_Model_EuReligionMapper();
  $pa = new Application_Model_EuPays();
  $pam = new Application_Model_EuPaysMapper();
  $pre_all = $prem->fetchAll();
  $can_all = $canm->fetchAll();
  $vi_all = $vim->fetchAll();
  $re_all = $rem->fetchAll();
  $rel_all = $relm->fetchAll();
  $pa_all = $pam->fetchAll();
  $dbrselect = $dbri->select();
  $dbrselect->from('eu_renseignement_identite')
            ->where('id like ?', $id);
  $dbrselect_all = $dbri->fetchAll($dbrselect);
  $true_religion = "";
  $true_cantons = "";
  $true_pays = "";
  $true_region = "";
  $true_prefecture = "";
  $month = array('01'=>'Janvier','02'=>'Fevrier','03'=>'Mars','04'=>'Avril','05'=>'Mai','06'=>'Juin','07'=>'Juillet','08'=>'Aout','09'=>'Septembre','10'=>'Octobre','11'=>'Novembre','12'=>'Decembre');
  $true_month = "";
  $ex_date = explode('-',$dbrselect_all[0]["date_naissance"]);

  foreach ($month as $key => $value) {
    if($ex_date[1] == $key){
      $true_month = $value;
    }
  }
  $next_ex_date = explode(' ', $ex_date[2]);
  $true_date = $next_ex_date[0]." ".$true_month." ".$ex_date[0];
  $htmlpdf = "";
  $htmlpdf .= '<page backleft="10mm" backright="7mm">';
  $htmlpdf .= '<h3 style="text-align:center">FICHE DE RENSEIGNEMENT</h3>';
  $htmlpdf .= '<p style="margin-bottom:25px;">';
    if ($dbrselect_all['renseignement']['perdu'] === "0"){
         $htmlpdf .= '<div style="margin-bottom: 5px;font-size: 14px;font-weight: normal;line-height: 20px;"><span style="block;font-size:1.2em;font-weight:bold;margin-top:2px;margin-left:10px">Je suis une personne ayant perdu sa pièce justificative</span></div>';
    }else{
         $htmlpdf .= '<div  style="min-height: 20px;padding-left: 20px;display: block;margin-bottom: 5px;font-size: 14px;font-weight: normal;line-height: 20px;"><span style="inline-block;font-size:1.2em;font-weight:bold">Je suis une personne n’ayant pas de pièce justificative</span></div>';
    }
  $htmlpdf .= '</p>';
  $htmlpdf .= '<table  style="width:100%;border:none;margin-bottom:50px;">
    <tbody>
      <tr>
        <td style="padding-bottom: 30px;width:40%"><span style="font-weight:bold"> Nom :</span> '.$dbrselect_all["renseignement"]["nom"].'</td>
        <td style="padding-bottom: 30px;width:60%" ><span style="font-weight:bold">Prenoms :</span> '.$dbrselect_all["renseignement"]["prenoms"].' </td>
      </tr>
      <tr>
        <td style="width:40%;padding-bottom: 30px" ><span style="font-weight:bold">Sexe :</span> '.$dbrselect_all["renseignement"]["sexe"].'</td>
        <td style="width:60%;padding-bottom: 30px" ><span style="font-weight:bold">Ville :</span> '.$dbrselect_all["renseignement"]["ville"].' </td>
      </tr>
      <tr>
        <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Nationalite :</span>'.$dbrselect_all["renseignement"]["nationalite"].'</td>';

      if ($dbrselect_all["renseignement"]["email"] !== null || $dbrselect_all["renseignement"]["email"] !== "") {
        $htmlpdf .= '<td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Email :</span> '.$dbrselect_all["renseignement"]["email"].'</td></tr>';

      }else{
        $htmlpdf .= '<td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Email :</span> Aucune</td></tr>';
      }
       $htmlpdf .=':
      <tr>
        <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Nom du père * :</span> '.$dbrselect_all["renseignement"]["pere"].' </td>
        <td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Nom de la mère :</span> '.$dbrselect_all["renseignement"]["mere"].'</td>
      </tr>
      <tr>
       <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Cellulaire * :</span> '.$dbrselect_all["renseignement"]["cellulaire"].'</td>';
       if ($dbrselect_all["renseignement"]["telephone"] !== "") {
         $htmlpdf .= '<td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Telephone fixe :</span> '.$dbrselect_all["renseignement"]["telephone"].'</td>
               </tr>';
       }else{
         $htmlpdf .= '<td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Telephone fixe :</span> Aucune</td>
               </tr>';
       }
      $htmlpdf .= '
      <tr>
        <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Matrimonial :</span> '.$dbrselect_all["renseignement"]["matrimonial"].'</td>
        <td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Date de naissance * :</span> Né le '.$true_date.'</td>
      </tr>
      <tr>
        <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Profession :</span> '.$dbrselect_all["renseignement"]["profession"].'</td>';
      if ($dbrselect_all['renseignement']['religion'] !== null) {
         foreach ($rel_all as $key => $value) {
           if ($dbrselect_all['renseignement']['religion'] == $value->id_religion_membre) {
             $true_religion =  $value->libelle_religion;
           }
         }
        $htmlpdf .= '<td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Réligion :</span> '.$true_religion.'</td></tr>';
      }
      $htmlpdf .= '
       <tr>
        <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Lieu de naissance :</span> '.$dbrselect_all["renseignement"]["lieu_naissance"].'</td>
        <td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Quartier :</span> '.$dbrselect_all["renseignement"]["quartier"].'</td>
       </tr>
       <tr>
        <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Nombre d\'enfant :</span> '.$dbrselect_all["renseignement"]["nbre_enfant"].'</td>
      ';
      if ($dbrselect_all['renseignement']['cantons'] !== null) {
         foreach ($can_all as $key => $value) {
           if ($dbrselect_all['renseignement']['cantons'] == $value->id_canton) {
             $true_cantons =  $value->nom_canton;
           }
         }
        $htmlpdf .= '<td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Canton :</span> '.$true_cantons.'</td></tr>';
      }
      $htmlpdf .= '
      <tr>
       <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Adresse :</span> '.$dbrselect_all['renseignement']['addresse'].'</td>';
      if ($dbrselect_all['renseignement']['bp'] !== null) {
        $htmlpdf .= '
         <td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Boite postale :</span> '.$dbrselect_all['renseignement']['bp'].'</td>
        </tr>';
      }else{
        $htmlpdf .= '
         <td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Boite postale :</span> Aucune</td>
        </tr>';
      }

      if ($dbrselect_all['renseignement']['monetaire'] !== null) {
        $htmlpdf .= '
        <tr>
          <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Zone monétaire :</span> '.$dbrselect_all['renseignement']['monetaire'].'</td>';
      }else{
        $htmlpdf .= '
        <tr>
          <td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Zone monétaire:</span> Aucune</td>';
      }
      if ($dbrselect_all['renseignement']['pays'] !== null) {
         foreach ($pa_all as $key => $value) {
           if ($dbrselect_all['renseignement']['pays'] == $value->id_pays) {
             $true_pays =  $value->libelle_pays;
           }
         }
        $htmlpdf .= '<td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Pays :</span> '.$true_pays.'</td></tr>';
      }

      if ($dbrselect_all['renseignement']['region'] !== null) {
         foreach ($re_all as $key => $value) {
           if ($dbrselect_all['renseignement']['region'] == $value->id_region) {
             $true_region =  $value->nom_region;
           }
         }
        $htmlpdf .= '
        <tr><td style="width:40%;padding-bottom: 30px;"><span style="font-weight:bold">Région :</span> '.$true_region.'</td>';
      }

      if ($dbrselect_all['renseignement']['prefecture'] !== null) {
         foreach ($pre_all as $key => $value) {
           if ($dbrselect_all['renseignement']['prefecture'] == $value->id_prefecture) {
             $true_prefecture =  $value->nom_prefecture;
           }
         }
         $htmlpdf .= '<td style="width:60%;padding-bottom: 30px;"><span style="font-weight:bold">Prefecture * :</span> '.$true_prefecture.'</td></tr>';
      }

  $htmlpdf .= '</tbody></table>';
  $htmlpdf .= '
  <p style="text-align:justify"> Je, soussigné(e) Mr/ Mme <span style="font-weight:bold">  '.$dbrselect_all["renseignement"]["nom_responsable"].'</span> , agissant en qualité de <span style="font-weight:bold"> '.$dbrselect_all["renseignement"]["qualite_responsable"].'</span> (Parent, tuteur, moi-même), contact <span style="font-weight:bold"> '.$dbrselect_all["renseignement"]["telephone_responsable"].'</span> Code membre <span style="font-weight:bold">  '.$dbrselect_all["renseignement"]["code_membre_responsable"].'</span> déclare que les informations fournies sont exactes et sincères.
</p>';

  $htmlpdf .= '</page>';

  $filename = '../public/renseignement.html';
  $somecontent = $htmlpdf;

  // Assurons nous que le fichier est accessible en écriture
  if (is_writable($filename)) {

      // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
      // Le pointeur de fichier est placé à la fin du fichier
      // c'est là que $somecontent sera placé
      if (!$handle = fopen($filename, 'w+')) {
           echo "Impossible d'ouvrir le fichier ($filename)";
           exit;
      }

      // Ecrivons quelque chose dans notre fichier.
      if (fwrite($handle, $somecontent) === FALSE) {
         echo "Impossible d'écrire dans le fichier ($filename)";
         exit;
      }

      //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

      fclose($handle);

  } else {
      echo "Le fichier $filename n'est pas accessible en écriture.";
  }

  ////////////////////////////////////////////////////////////////////////////
  $file = $filename;
  if (!is_dir("../../webfiles/pdf_renseignement/")) {
  mkdir("../../webfiles/pdf_renseignement/", 0777);
  }
  /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

  $id_renseignement = str_replace('/','_',$dbrselect_all[0]['id']);
  $newfile = "../../webfiles/pdf_renseignement/RENSEIGNEMENT_".$id_renseignement.".html";
  $newnom = "RENSEIGNEMENT_".$id_renseignement."";
  $newchemin = "../../webfiles/pdf_renseignement/";

  copy($file, $newfile);

      ob_start();
      include($newfile);
      $content = ob_get_clean();

      // convert to PDF
      require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
      try
      {
          $html2pdf = new HTML2PDF('P', 'A4', 'fr');
          $html2pdf->pdf->SetDisplayMode('fullpage');
          $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
          //$html2pdf->writeHTML($content);
          $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
      }
      catch(HTML2PDF_exception $e) {
          echo $e;
          exit;
      }

  $file = $newchemin.$newnom.'.pdf';
  $filena = $newnom.'.pdf';
  unlink($newfile);

  $domaine = Util_Utils::getParamEsmc(9);
/*
      if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
        $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
      }else{
        $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
      }

  */
          return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}


public static function genererPdfTicketGeranttwo($id){
  ini_set('memory_limit', '512M');
  $dbts = new Application_Model_DbTable_EuTicketSupport();
  $ts = new Application_Model_EuTicketSupport();
  $dbasts = new Application_Model_DbTable_EuAssociationTicketComite();
  $asts = new Application_Model_EuAssociationTicketComite();
  $dbtselect = $dbts->select();
  $dbtselect->from('eu_ticket_support')
            ->where('id_ticket like ?', $id)
            ->where('visa_one != ""');

  $dbtselect_all = $dbts->fetchAll($dbtselect);
  $ex_date = explode('-',$dbtselect_all[0]["created"]);
  $next_ex_date = explode(' ', $ex_date[2]);
  $true_date = $next_ex_date[0]."/".$ex_date[1]."/".$ex_date[0]." ".$next_ex_date[1];
  $dbasctselect = $dbasts->select();
  $dbasctselect->from('eu_association_ticket_comite')
               ->where('id_ticket like ?',$id);
  $dbasctselect_all = $dbasts->fetchAll($dbasctselect);
  $statut_traitement = "";
  $section_traitement = $dbasctselect_all[0]['membre_section_comite_ticket'];
    if ($dbasctselect_all[0]['statut'] == "traité"){
      $statut_traitement = "Oui";
    }else{
      $statut_traitement = "Non";
    }
      $commentaitre_section = $dbasctselect_all[0]['observation'];
      $date_section = $true_date;
  $htmlpdf = "";
  $htmlpdf .= '<page backleft="10mm" backright="7mm">';
  $htmlpdf .= '<h3 style="text-align:center">TICKET DE SUPPORT</h3>';
  $htmlpdf .= '
     <div style="text-align:right;margin-bottom:10px">
       <label for="" style="font-weight:bold;display:inline-block">DATE:</label>
         <span style="display:inline-block;border: 1px solid #000;width: 136px;margin-left: 10px;padding-left: 5px;padding-right: 5px;"> '.$true_date.'</span>
     </div>';

  $htmlpdf .= '
     <table  style="width:100%;border-spacing:0;margin-bottom:20px;">
        <tbody>
          <tr>
            <td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:30%;" cellspacing:0>DEMANDEURS</td>
            <td style="width:70%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;border-right: 1px solid #000;">'. $dbtselect_all[0]["numero_demandeur"].'</td>
          </tr>
          <tr>
             <td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;">TELEPHONE( pour vous contacter)</td>';
          if ($dbtselect_all[0]["telephone"] != "0") {
           $htmlpdf .= '
           <td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["telephone"].'</td></tr>';
  }else{
        $htmlpdf .= '<td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;"></td></tr>';
  }
  $htmlpdf .= '
  <tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;">EMAIL( pour vous contacter)</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["email"].'</td></tr><tr><td style="width:300px;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:30%;">LIEU DE SOUSCRIPTION</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["lieu"].'</td></tr><tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;">ADDRESSE INTEGRATEUR</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;border-bottom:1px solid #000">'.$dbtselect_all[0]["lieu"].'</td>
  </tr></tbody></table>
    <div style="text-align:left">
      <strong style="text-decoration:underline;display:block;margin-bottom: -5px;">NB:</strong>
      <p style="margin-left:10px;display:inline-block;margin-bottom:-15px">
        <span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span>
        <span style="display:inline-block;margin-left:15px;">Si la demande concerne des modifications de :</span>
      </p>
      <span style="display:block;margin-left:25px;text-align:justify"><span style="font-weight:bold;font-size:40px">.</span>
       nom, prénoms, email, date de naissance, nationalité, profession: veuillez joindre les pièces d\'identités ou toutes pièces justificatives à ce ticket
      </span>
      <br/>
      <span style="display:block;margin-left:25px;margin-top:-18px;margin-bottom:-10px;">
         <span style="font-weight:bold;font-size:40px">.</span> Téléphone: veullez joindre les codes membres et les pièces d\'identités à ce ticket
      </span><br/>
      <p style="margin-left:10px;margin-bottom:-10px;margin-top:-15px">
         <span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span>
         <span style="display:inline-block;margin-left:15px;text-align:justify">Si la demande concerne les codes (membre, secret, d\'activation), veuillez joindre les pièces d\'identités à ce ticket.
         </span>éze
      </p>
      <p style="margin-left:10px">
        <span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span>
        <span style="display:inline-block;margin-left:15px;text-align:justify">Si la demande concerne une restitution de BAn pour cause d\'erreur de nom sur le recu de versement bancaire: souscrire au BAn avec le reçu erroné puis joindre une lettre reconnaissance écrite de celuit qui fait la restitution</span>
      </p>
     <div style="width:100%;padding:10px 0px 10px 10px;border:1px solid #000;font-style:italic;"> Ex: je sousigné....................(Code membre......) demande la restitution de ..... à .......</div>
   <p style="margin-left:10px">
    <span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span>
    <span style="display:inline-block;margin-left:15px;text-align:justify"> Si la demande concerne une concession de BAn pour tiers, joindre une lettre de reconnaissance écrite de celui qui concède.</span>
</p>
<div style="width:100%;padding:10px 0px 10px 10px;border:1px solid #000;margin-bottom:10px;font-style:italic;">
  Ex: je sousigné....................(Code membre......) demande la concession de ..... à .......
</div>
<div style="width:100%;border:1px solid #000;text-align:center;padding:5px;font-weight:bold ">Description du problème</div>
   <div style="width:100%;border:1px solid #000;border-top:none;text-align:justify;padding:5px;">
'.$dbtselect_all[0]["description"].'
 </div></div>
<div style="text-align:left;margin-bottom:5px;margin-top:5px;">
  <strong ><i><span style="text-decoration:underline">NB</span>: Cadre reservé à l\'Administration ESMC</i></strong>
  </div>
<div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000">
   <strong style="margin-bottom:15px;"> Visa 1 du Gérant  <span style="display:inline-block;border: none;outline: none;box-shadow: 0px 0px 0px #FFF;color: #000;width: 88%;height: 28px;font-size: 1.8em;text-transform:uppercase" id="visa_one_sign_gerant">'.$dbtselect_all[0]['visa_one'].'</span>
   </strong>
</div>
<div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000">
  <strong style="margin-bottom:15px;"> Avis 1 du Gérant
    <span style="border: none;outline: none;box-shadow: 0px 0px 0px #FFF;color: #000;width: 88%;font-size: 1.8em;">'.$dbtselect_all[0]['avis_one'].'</span>
  </strong>
</div>
   <table style="width:100%;border-spacing:0;margin-bottom:20px;">
     <tbody>
     <tr style="font-weight:bold">
        <td style="padding: 3px;text-align: left;vertical-align: top;width:20%;">Affecté à </td>
        <td style="padding: 3px;text-align: left;vertical-align: top;width:20%;">Problème résolu ?</td>
        <td style="padding: 3px;text-align: left;vertical-align: top;width:20%;">Commentaire</td>
        <td style="padding: 3px;text-align: left;vertical-align: top;width:40%;">Date et Visa</td>
     </tr>
       <tr>
         <td style="padding: 3px;text-align: left;vertical-align: top;width:20%;">'.$section_traitement.'</td>
         <td style="text-align:center">'.$statut_traitement.'</td>
         <td style="width:35%">'.$commentaitre_section.'</td>
         <td><strong>'.$date_section.'</strong></td>
       </tr>
     </tbody>
   </table>
   <div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000">
     <strong style="margin-bottom:15px;"> Visa 2 du Gérant
       <span style="display:inline-block;border: none;outline: none;box-shadow: 0px 0px 0px #FFF;color: #000;width: 88%;height: 28px;font-size: 1.8em;text-transform:uppercase" >'.$dbtselect_all[0]['visa_two'].'</span>
     </strong>
   </div>
   <div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000">
     <strong style="margin-bottom:15px;"> Avis 2  du Gérant
     <span style="display:inline-block;border: none;outline: none;box-shadow: 0px 0px 0px #FFF;color: #000;width: 88%;font-size: 1.8em;" >'.$dbtselect_all[0]['avis_two'].'</span>
     </strong>
    </div>';
  $htmlpdf .= '</page>';
  $filename = '../public/ticket.html';
  $somecontent = $htmlpdf;

  // Assurons nous que le fichier est accessible en écriture
  if (is_writable($filename)) {

      // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
      // Le pointeur de fichier est placé à la fin du fichier
      // c'est là que $somecontent sera placé
      if (!$handle = fopen($filename, 'w+')) {
           echo "Impossible d'ouvrir le fichier ($filename)";
           exit;
      }

      // Ecrivons quelque chose dans notre fichier.
      if (fwrite($handle, $somecontent) === FALSE) {
         echo "Impossible d'écrire dans le fichier ($filename)";
         exit;
      }

      //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

      fclose($handle);

  } else {
      echo "Le fichier $filename n'est pas accessible en écriture.";
  }

  ////////////////////////////////////////////////////////////////////////////
  $file = $filename;
  if (!is_dir("../../webfiles/pdf_ticket/")) {
  mkdir("../../webfiles/pdf_ticket/", 0777);
  }
  /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

  $numero_demandeur = str_replace('/','_',$dbtselect_all[0]['numero_demandeur']);
  $newfile = "../../webfiles/pdf_ticket/TICKET_".$numero_demandeur.".html";
  $newnom = "TICKET_".$numero_demandeur."";
  $newchemin = "../../webfiles/pdf_ticket/";

  copy($file, $newfile);

      ob_start();
      include($newfile);
      $content = ob_get_clean();

      // convert to PDF
      require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
      try
      {
          $html2pdf = new HTML2PDF('P', 'A4', 'fr');
          $html2pdf->pdf->SetDisplayMode('fullpage');
          $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
          //$html2pdf->writeHTML($content);
          $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
      }
      catch(HTML2PDF_exception $e) {
          echo $e;
          exit;
      }

  $file = $newchemin.$newnom.'.pdf';
  $filena = $newnom.'.pdf';
  unlink($newfile);

  $domaine = Util_Utils::getParamEsmc(9);

/*
      if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
        $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
      }else{
        $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
      }
    
  */
          return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);



}

public static function genererPdfTicketSection($id){
    ini_set('memory_limit', '512M');
    $dbts = new Application_Model_DbTable_EuTicketSupport();
    $ts = new Application_Model_EuTicketSupport();
    $dbasts = new Application_Model_DbTable_EuAssociationTicketComite();
    $asts = new Application_Model_EuAssociationTicketComite();
    $dbtselect = $dbts->select();
    $dbtselect->from('eu_ticket_support')
              ->where('id_ticket like ?', $id)
              ->where('visa_one != ""');

    $dbtselect_all = $dbts->fetchAll($dbtselect);
    $ex_date = explode('-',$dbtselect_all[0]["created"]);
    $next_ex_date = explode(' ', $ex_date[2]);
    $true_date = $next_ex_date[0]."/".$ex_date[1]."/".$ex_date[0]." ".$next_ex_date[1];
    $dbasctselect = $dbasts->select();
    $dbasctselect->from('eu_association_ticket_comite')
                 ->where('id_ticket like ?',$id);
    $dbasctselect_all = $dbasts->fetchAll($dbasctselect);
    $statut_traitement = "";
    $section_traitement = $dbasctselect_all[0]['membre_section_comite_ticket'];
      if ($assc['statut'] == "traité"){
        $statut_traitement = "Oui";
      }else{
        $statut_traitement = "Non";
      }
        $commentaitre_section = $dbasctselect_all[0]['observation'];
        $date_section = $true_ready_date;
    $htmlpdf = "";
    $htmlpdf .= '<page backleft="10mm" backright="7mm">';
    $htmlpdf .= '<h3 style="text-align:center">TICKET DE SUPPORT</h3>';
    $htmlpdf .= '<div style="text-align:right;margin-bottom:10px"><label for="" style="font-weight:bold;display:inline-block">DATE:</label><span style="display:inline-block;border: 1px solid #000;width: 136px;margin-left: 10px;padding-left: 5px;padding-right: 5px;"> '.$true_date.'</span> </div>';$htmlpdf .= '<table  style="width:100%;border-spacing:0;margin-bottom:20px;"><tbody><tr><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:30%;" cellspacing:0>DEMANDEURS</td><td style="width:70%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;border-right: 1px solid #000;">'. $dbtselect_all[0]["numero_demandeur"].'</td>
    </tr><tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;">TELEPHONE( pour vous contacter)</td>';
    if ($dbtselect_all[0]["telephone"] != "0") {
      $htmlpdf .= '<td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["telephone"].'</td></tr>';
    }else{
          $htmlpdf .= '<td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;"></td></tr>';
    }
    $htmlpdf .= '
    <tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;">EMAIL( pour vous contacter)</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["email"].'</td></tr><tr><td style="width:300px;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:30%;">LIEU DE SOUSCRIPTION</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["lieu"].'</td></tr><tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;">ADDRESSE INTEGRATEUR</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;border-bottom:1px solid #000">'.$dbtselect_all[0]["lieu"].'</td>
    </tr></tbody></table><div style="text-align:left"><strong style="text-decoration:underline;display:block;margin-bottom: -5px;">NB:</strong><p style="margin-left:10px;display:inline-block;margin-bottom:-15px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;">Si la demande concerne des modifications de :</span></p><span style="display:block;margin-left:25px;text-align:justify"><span style="font-weight:bold;font-size:40px">.</span> nom, prénoms, email, date de naissance, nationalité, profession: veuillez joindre les pièces d\'identités ou toutes pièces justificatives à ce ticket</span><br/>
  <span style="display:block;margin-left:25px;margin-top:-18px;margin-bottom:-10px;"><span style="font-weight:bold;font-size:40px">.</span> Téléphone: veullez joindre les codes membres et les pièces d\'identités à ce ticket</span><br/><p style="margin-left:10px;margin-bottom:-10px;margin-top:-15px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify">Si la demande concerne les codes (membre, secret, d\'activation), veuillez joindre les pièces d\'identités à ce ticket.</span></p><p style="margin-left:10px"> <span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify">Si la demande concerne une restitution de BAn pour cause d\'erreur de nom sur le recu de versement bancaire: souscrire au BAn avec le reçu erroné puis joindre une lettre reconnaissance écrite de celuit qui fait la restitution</span></p><div style="width:100%;padding:10px 0px 10px 10px;border:1px solid #000;font-style:italic;"> Ex: je sousigné....................(Code membre......) demande la restitution de ..... à .......</div><p style="margin-left:10px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify"> Si la demande concerne une concession de BAn pour tiers, joindre une lettre de reconnaissance écrite de celui qui concède.</span></p><div style="width:100%;padding:10px 0px 10px 10px;border:1px solid #000;margin-bottom:10px;font-style:italic;"> Ex: je sousigné....................(Code membre......) demande la concession de ..... à ....... </div></div><div style="width:100%;border:1px solid #000;text-align:center;padding:5px;font-weight:bold ">Description du problème</div>
  <div style="width:100%;border:1px solid #000;border-top:none;text-align:justify;padding:5px;padding-top:30px">
  '.$dbtselect_all[0]["description"].'</div><div style="text-align:left;margin-bottom:5px;margin-top:5px;">
    <strong ><i><span style="text-decoration:underline">NB</span>: Cadre reservé à l\'Administration ESMC</i></strong></div<div style="text-align:left;margin-bottom:5px;margin-top:5px;">
      <strong ><i><span style="text-decoration:underline">NB</span>: Cadre reservé à l\'Administration ESMC</i></strong></div><div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000">
     <strong style="margin-bottom:15px;"> Visa 1 du Gérant<span style="display:inline-block;border: none;outline: none;box-shadow: 0px 0px 0px #FFF;color: #000;width: 88%;height: 28px;font-size: 1.8em;font-family: Matura MT Script Capitals;text-transform:uppercase" id="visa_one_sign_gerant">'.$dbtselect_all[0]['visa_one'].'</span></strong></div><div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000"><strong style="margin-bottom:15px;"> Avis 1 du Gérant<span style="border: none;outline: none;box-shadow: 0px 0px 0px #FFF;color: #000;width: 88%;font-size: 1.8em;font-family: Matura MT Script Capitals;">'.$dbtselect_all[0]['avis_one'].'</span></strong></div>
     <table>
       <th>
         <tr>Affecté à </tr>
       </th>
       <th>
          <tr>Problème résolu(oui/non)</tr>
       </th>
       <th>
          <tr>Commentaire</tr>
       </th>
       <th>
          <tr>Date et Visa</tr>
       </th>
       <tbody>
         <tr>
           <td>'.$section_traitement.'</td>
           <td>'.$statut_traitement.'</td>
           <td>'.$commentaitre_section.'</td>
           <td>'.$date_section.'</td>
         </tr>
       </tbody>
     </table>';
    $htmlpdf .= '</page>';
    $filename = '../public/ticket.html';
    $somecontent = $htmlpdf;

    // Assurons nous que le fichier est accessible en écriture
    if (is_writable($filename)) {

        // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
        // Le pointeur de fichier est placé à la fin du fichier
        // c'est là que $somecontent sera placé
        if (!$handle = fopen($filename, 'w+')) {
             echo "Impossible d'ouvrir le fichier ($filename)";
             exit;
        }

        // Ecrivons quelque chose dans notre fichier.
        if (fwrite($handle, $somecontent) === FALSE) {
           echo "Impossible d'écrire dans le fichier ($filename)";
           exit;
        }

        //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

        fclose($handle);

    } else {
        echo "Le fichier $filename n'est pas accessible en écriture.";
    }

    ////////////////////////////////////////////////////////////////////////////
    $file = $filename;
    if (!is_dir("../../webfiles/pdf_ticket/")) {
    mkdir("../../webfiles/pdf_ticket/", 0777);
    }
    /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

    $numero_demandeur = str_replace('/','_',$dbtselect_all[0]['numero_demandeur']);
    $newfile = "../../webfiles/pdf_ticket/TICKET_".$numero_demandeur.".html";
    $newnom = "TICKET_".$numero_demandeur."";
    $newchemin = "../../webfiles/pdf_ticket/";

    copy($file, $newfile);

        ob_start();
        include($newfile);
        $content = ob_get_clean();

        // convert to PDF
        require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
        try
        {
            $html2pdf = new HTML2PDF('P', 'A4', 'fr');
            $html2pdf->pdf->SetDisplayMode('fullpage');
            $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
            //$html2pdf->writeHTML($content);
            $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
        }
        catch(HTML2PDF_exception $e) {
            echo $e;
            exit;
        }

    $file = $newchemin.$newnom.'.pdf';
    $filena = $newnom.'.pdf';
    unlink($newfile);

    $domaine = Util_Utils::getParamEsmc(9);


    /*
        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
        }else{
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
        }
    */
            return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

public static function genererPdfTicketGerantone($id){
  ini_set('memory_limit', '512M');
  $dbts = new Application_Model_DbTable_EuTicketSupport();
  $ts = new Application_Model_EuTicketSupport();

  $dbtselect = $dbts->select();
  $dbtselect->from('eu_ticket_support')
            ->where('id_ticket like ?', $id);
  $dbtselect_all = $dbts->fetchAll($dbtselect);
  $ex_date = explode('-',$dbtselect_all[0]["created"]);
  $next_ex_date = explode(' ', $ex_date[2]);
  $true_date = $next_ex_date[0]."/".$ex_date[1]."/".$ex_date[0]." ".$next_ex_date[1];

  $htmlpdf = "";
  $htmlpdf .= '<page backleft="10mm" backright="7mm">';
  $htmlpdf .= '<h3 style="text-align:center">TICKET DE SUPPORT</h3>';
  $htmlpdf .= '<div style="text-align:right;margin-bottom:10px"><label for="" style="font-weight:bold;display:inline-block">DATE:</label><span style="display:inline-block;border: 1px solid #000;width: 136px;margin-left: 10px;padding-left: 5px;padding-right: 5px;"> '.$true_date.'</span> </div>';$htmlpdf .= '<table  style="width:100%;border-spacing:0;margin-bottom:20px;"><tbody><tr><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:30%;" cellspacing:0>DEMANDEURS</td><td style="width:70%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;border-right: 1px solid #000;">'. $dbtselect_all[0]["numero_demandeur"].'</td>
  </tr><tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;">TELEPHONE( pour vous contacter)</td>';
  if ($dbtselect_all[0]["telephone"] != "0") {
    $htmlpdf .= '<td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["telephone"].'</td></tr>';
  }else{
        $htmlpdf .= '<td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;"></td></tr>';
  }
  $htmlpdf .= '
  <tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;">EMAIL( pour vous contacter)</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["email"].'</td></tr><tr><td style="width:300px;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:30%;">LIEU DE SOUSCRIPTION</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["lieu"].'</td></tr><tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;">ADDRESSE INTEGRATEUR</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;border-bottom:1px solid #000">'.$dbtselect_all[0]["lieu"].'</td>
  </tr></tbody></table><div style="text-align:left"><strong style="text-decoration:underline;display:block;margin-bottom: -5px;">NB:</strong><p style="margin-left:10px;display:inline-block;margin-bottom:-15px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;">Si la demande concerne des modifications de :</span></p><span style="display:block;margin-left:25px;text-align:justify"><span style="font-weight:bold;font-size:40px">.</span> nom, prénoms, email, date de naissance, nationalité, profession: veuillez joindre les pièces d\'identités ou toutes pièces justificatives à ce ticket</span><br/>
<span style="display:block;margin-left:25px;margin-top:-18px;margin-bottom:-10px;"><span style="font-weight:bold;font-size:40px">.</span> Téléphone: veullez joindre les codes membres et les pièces d\'identités à ce ticket</span><br/><p style="margin-left:10px;margin-bottom:-10px;margin-top:-15px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify">Si la demande concerne les codes (membre, secret, d\'activation), veuillez joindre les pièces d\'identités à ce ticket.</span></p><p style="margin-left:10px"> <span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify">Si la demande concerne une restitution de BAn pour cause d\'erreur de nom sur le recu de versement bancaire: souscrire au BAn avec le reçu erroné puis joindre une lettre reconnaissance écrite de celuit qui fait la restitution</span></p><div style="width:100%;padding:10px 0px 10px 10px;border:1px solid #000;font-style:italic;"> Ex: je sousigné....................(Code membre......) demande la restitution de ..... à .......</div><p style="margin-left:10px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify"> Si la demande concerne une concession de BAn pour tiers, joindre une lettre de reconnaissance écrite de celui qui concède.</span></p><div style="width:100%;padding:10px 0px 10px 10px;border:1px solid #000;margin-bottom:10px;font-style:italic;"> Ex: je sousigné....................(Code membre......) demande la concession de ..... à ....... </div></div><div style="width:100%;border:1px solid #000;text-align:center;padding:5px;font-weight:bold ">Description du problème</div>
<div style="width:100%;border:1px solid #000;border-top:none;text-align:justify;padding:5px;padding-top:30px">
'.$dbtselect_all[0]["description"].'</div><div style="text-align:left;margin-bottom:5px;margin-top:5px;">
  <strong ><i><span style="text-decoration:underline">NB</span>: Cadre reservé à l\'Administration ESMC</i></strong></div<div style="text-align:left;margin-bottom:5px;margin-top:5px;">
    <strong ><i><span style="text-decoration:underline">NB</span>: Cadre reservé à l\'Administration ESMC</i></strong></div><div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000">
   <strong style="margin-bottom:15px;"> Visa 1 du Gérant<span style="display:inline-block;border: none;outline: none;box-shadow: 0px 0px 0px #FFF;color: #000;width: 88%;height: 28px;font-size: 1.8em;font-family: Matura MT Script Capitals;text-transform:uppercase" id="visa_one_sign_gerant">'.$dbtselect_all[0]['visa_one'].'</span></strong></div><div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000"><strong style="margin-bottom:15px;"> Avis 1 du Gérant<span style="border: none;outline: none;box-shadow: 0px 0px 0px #FFF;color: #000;width: 88%;font-size: 1.8em;font-family: Matura MT Script Capitals;">'.$dbtselect_all[0]['avis_one'].'</span></strong></div>';
  $htmlpdf .= '</page>';
  $filename = '../public/ticket.html';
  $somecontent = $htmlpdf;

  // Assurons nous que le fichier est accessible en écriture
  if (is_writable($filename)) {

      // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
      // Le pointeur de fichier est placé à la fin du fichier
      // c'est là que $somecontent sera placé
      if (!$handle = fopen($filename, 'w+')) {
           echo "Impossible d'ouvrir le fichier ($filename)";
           exit;
      }

      // Ecrivons quelque chose dans notre fichier.
      if (fwrite($handle, $somecontent) === FALSE) {
         echo "Impossible d'écrire dans le fichier ($filename)";
         exit;
      }

      //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

      fclose($handle);

  } else {
      echo "Le fichier $filename n'est pas accessible en écriture.";
  }

  ////////////////////////////////////////////////////////////////////////////
  $file = $filename;
  if (!is_dir("../../webfiles/pdf_ticket/")) {
  mkdir("../../webfiles/pdf_ticket/", 0777);
  }
  /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

  $numero_demandeur = str_replace('/','_',$dbtselect_all[0]['numero_demandeur']);
  $newfile = "../../webfiles/pdf_ticket/TICKET_".$numero_demandeur.".html";
  $newnom = "TICKET_".$numero_demandeur."";
  $newchemin = "../../webfiles/pdf_ticket/";

  copy($file, $newfile);

      ob_start();
      include($newfile);
      $content = ob_get_clean();

      // convert to PDF
      require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
      try
      {
          $html2pdf = new HTML2PDF('P', 'A4', 'fr');
          $html2pdf->pdf->SetDisplayMode('fullpage');
          $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
          //$html2pdf->writeHTML($content);
          $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
      }
      catch(HTML2PDF_exception $e) {
          echo $e;
          exit;
      }

  $file = $newchemin.$newnom.'.pdf';
  $filena = $newnom.'.pdf';
  unlink($newfile);

  $domaine = Util_Utils::getParamEsmc(9);

/*
      if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
        $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
      }else{
        $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
      }

  */
  
          return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

public static function genererPdfTicket($id){
  ini_set('memory_limit', '512M');
  $dbts = new Application_Model_DbTable_EuTicketSupport();
  $ts = new Application_Model_EuTicketSupport();

  $dbtselect = $dbts->select();
  $dbtselect->from('eu_ticket_support')
            ->where('id_ticket like ?', $id);
  $dbtselect_all = $dbts->fetchAll($dbtselect);
  $ex_date = explode('-',$dbtselect_all[0]["created"]);
  $next_ex_date = explode(' ', $ex_date[2]);
  $true_date = $next_ex_date[0]."/".$ex_date[1]."/".$ex_date[0]." ".$next_ex_date[1];

  $htmlpdf = "";
  $htmlpdf .= '<page backleft="10mm" backright="7mm">';
  $htmlpdf .= '<h3 style="text-align:center">TICKET DE SUPPORT</h3>';
  $htmlpdf .= '<div style="text-align:right;margin-bottom:10px"><label for="" style="font-weight:bold;display:inline-block">DATE:</label><span style="display:inline-block;border: 1px solid #000;width: 136px;margin-left: 10px;padding-left: 5px;padding-right: 5px;"> '.$true_date.'</span> </div>';$htmlpdf .= '<table  style="width:100%;border-spacing:0;margin-bottom:20px;"><tbody><tr><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:30%;" cellspacing:0>DEMANDEURS</td><td style="width:70%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;border-right: 1px solid #000;">'. $dbtselect_all[0]["numero_demandeur"].'</td>
  </tr><tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;">TELEPHONE( pour vous contacter)</td>';
  if ($dbtselect_all[0]["telephone"] != "0") {
    $htmlpdf .= '<td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["telephone"].'</td></tr>';
  }else{
        $htmlpdf .= '<td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;"></td></tr>';
  }
  $htmlpdf .= '
  <tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;">EMAIL( pour vous contacter)</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["email"].'</td></tr><tr><td style="width:300px;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:30%;">LIEU DE SOUSCRIPTION</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;">'.$dbtselect_all[0]["lieu"].'</td></tr><tr><td style="width:30%;padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;border-bottom: 1px solid #000;">ADDRESSE INTEGRATEUR</td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;border-top: 1px solid #000;border-left: 1px solid #000;width:70%;border-right: 1px solid #000;border-bottom:1px solid #000">'.$dbtselect_all[0]["lieu"].'</td>
  </tr></tbody></table><div style="text-align:left"><strong style="text-decoration:underline;display:block;margin-bottom: -5px;">NB:</strong><p style="margin-left:10px;display:inline-block;margin-bottom:-15px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;">Si la demande concerne des modifications de :</span></p><span style="display:block;margin-left:25px;text-align:justify"><span style="font-weight:bold;font-size:40px">.</span> nom, prénoms, email, date de naissance, nationalité, profession: veuillez joindre les pièces d\'identités ou toutes pièces justificatives à ce ticket</span><br/>
<span style="display:block;margin-left:25px;margin-top:-18px;margin-bottom:-10px;"><span style="font-weight:bold;font-size:40px">.</span> Téléphone: veullez joindre les codes membres et les pièces d\'identités à ce ticket</span><br/><p style="margin-left:10px;margin-bottom:-10px;margin-top:-15px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify">Si la demande concerne les codes (membre, secret, d\'activation), veuillez joindre les pièces d\'identités à ce ticket.</span></p><p style="margin-left:10px"> <span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify">Si la demande concerne une restitution de BAn pour cause d\'erreur de nom sur le recu de versement bancaire: souscrire au BAn avec le reçu erroné puis joindre une lettre reconnaissance écrite de celuit qui fait la restitution</span></p><div style="width:100%;padding:10px 0px 10px 10px;border:1px solid #000;font-style:italic;"> Ex: je sousigné....................(Code membre......) demande la restitution de ..... à .......</div><p style="margin-left:10px"><span style="display:inline-block;font-size:20px;font-weight:bold;position: relative;top: 5px;left: -10px;">*</span><span style="display:inline-block;margin-left:15px;text-align:justify"> Si la demande concerne une concession de BAn pour tiers, joindre une lettre de reconnaissance écrite de celui qui concède.</span></p><div style="width:100%;padding:10px 0px 10px 10px;border:1px solid #000;margin-bottom:10px;font-style:italic;"> Ex: je sousigné....................(Code membre......) demande la concession de ..... à ....... </div></div><div style="width:100%;border:1px solid #000;text-align:center;padding:5px;font-weight:bold ">Description du problème</div>
<div style="width:100%;border:1px solid #000;border-top:none;text-align:justify;padding:5px;">
'.$dbtselect_all[0]["description"].'</div><div style="text-align:left;margin-bottom:5px;margin-top:5px;">
  <strong ><i><span style="text-decoration:underline">NB</span>: Cadre reservé à l\'Administration ESMC</i></strong></div><div style="text-align:left;padding:5px;padding-top:20px;border:1px solid #000">
 <strong style="margin-bottom:15px;">  Avis et visa 1 du Gérant <span style="display:block;margin-left:25px">........................................</span></strong><table><tbody><tr><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;width:100px;height:45px;"><strong>Affecté à</strong></td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;width:200px"><strong>Problème résolu(oui/non)</strong></td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;width:160px"><strong>Commentaire</strong></td><td style="padding: 8px;line-height: 20px;text-align: left;vertical-align: top;"><strong>Date et visa:</strong></td></tr></tbody></table><div style="text-decoration:underline;margin-bottom:10px;font-weight:bold;margin-bottom:15px"><span>Visa 2 du Gérant:</span></div></div>';
  $htmlpdf .= '</page>';
  $filename = '../public/ticket.html';
  $somecontent = $htmlpdf;

  // Assurons nous que le fichier est accessible en écriture
  if (is_writable($filename)) {

      // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
      // Le pointeur de fichier est placé à la fin du fichier
      // c'est là que $somecontent sera placé
      if (!$handle = fopen($filename, 'w+')) {
           echo "Impossible d'ouvrir le fichier ($filename)";
           exit;
      }

      // Ecrivons quelque chose dans notre fichier.
      if (fwrite($handle, $somecontent) === FALSE) {
         echo "Impossible d'écrire dans le fichier ($filename)";
         exit;
      }

      //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

      fclose($handle);

  } else {
      echo "Le fichier $filename n'est pas accessible en écriture.";
  }

  ////////////////////////////////////////////////////////////////////////////
  $file = $filename;
  if (!is_dir("../../webfiles/pdf_ticket/")) {
  mkdir("../../webfiles/pdf_ticket/", 0777);
  }
  /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

  $numero_demandeur = str_replace('/','_',$dbtselect_all[0]['numero_demandeur']);
  $newfile = "../../webfiles/pdf_ticket/TICKET_".$numero_demandeur.".html";
  $newnom = "TICKET_".$numero_demandeur."";
  $newchemin = "../../webfiles/pdf_ticket/";

  copy($file, $newfile);

      ob_start();
      include($newfile);
      $content = ob_get_clean();

      // convert to PDF
      require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
      try
      {
          $html2pdf = new HTML2PDF('P', 'A4', 'fr');
          $html2pdf->pdf->SetDisplayMode('fullpage');
          $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
          //$html2pdf->writeHTML($content);
          $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
      }
      catch(HTML2PDF_exception $e) {
          echo $e;
          exit;
      }

  $file = $newchemin.$newnom.'.pdf';
  $filena = $newnom.'.pdf';
  unlink($newfile);

  $domaine = Util_Utils::getParamEsmc(9);

  /*

      if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
        $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
      }else{
        $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
      }
  */
          return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

public static function genererPdfQuitance($id_souscription) {

ini_set('memory_limit', '512M');

                                $souscription = new Application_Model_EuSouscription();
                                $souscriptionM = new Application_Model_EuSouscriptionMapper();
                                $souscriptionM->find($id_souscription, $souscription);


$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";

$htmlpdf .= '
                <page backbottom="15mm">
                <page_footer>
                                <table>
<tr>
                <td align="center">
                <hr>
                Conseil en Organisation des Affaires Commerciales, Recherche & Developpement de logiciels, Exploitation du Progiciel <span style="color:#F00;">MCNP</span>, Commerce sur Internet - RCCM N° : TG-LOME 2014 B 514 - N°FISCAL 1455870 - N°CNCS 42425</td>
        </tr>
                                </table>
                </page_footer>

<table width="768" border="0">
<tbody>
        <tr>
                <td colspan="4"><img src="'.getParamEsmc(2).'/sm_images/Entete-de-page-SM.png"  width="738" height="105"  /></td>
        </tr>';
if($souscription->souscription_personne == "PP"){
                if($souscription->souscription_programme == "KACM"){
                                $unite = 5000;
$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>N° Reçu Personne Physique : PP'.$souscription->souscription_ordre.'</u></em></strong></td>
        </tr>';
                }else if($souscription->souscription_programme == "CMFH"){
                                $unite = 2187.5;
$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.$souscription->souscription_ordre.'</u></em></strong></td>
        </tr>';
                }

}else if($souscription->souscription_personne == "PM"){
                if($souscription->souscription_programme == "KACM"){
                                $unite = 70000;
$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>N° Reçu '.$souscription->code_type_acteur.' : '.$souscription->code_type_acteur.''.$souscription->souscription_ordre.'</u></em></strong></td>
        </tr>';
                }else if($souscription->souscription_programme == "CMFH"){
                                $unite = 2187.5;
$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>N° QUITTANCE CMFH/CAPS : '.$souscription->souscription_ordre.'</u></em></strong></td>
        </tr>';
                }


}

/*$htmlpdf .= '
        <tr>
                <td colspan="4" align="center"><strong><em><u>QUITTANCE CMFH/CAPS/GAC TOGO N° '.$souscription->souscription_id.'</u></em></strong></td>
        </tr>';*/

if($souscription->souscription_personne == "PP"){
$htmlpdf .= '
        <tr>
                <td colspan="4" align="left"><p><em><u>Nom  &amp; prénom(s) de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_nom.' '.$souscription->souscription_prenom.'</em></strong></p></td>
        </tr>';
}else if($souscription->souscription_personne == "PM"){
$htmlpdf .= '
        <tr>
                <td colspan="4" align="left"><p><em><u>Raison sociale de l&rsquo;acheteur&nbsp;</u>: </em><strong><em>'.$souscription->souscription_raison.'</em></strong></p></td>
        </tr>';
}
$htmlpdf .= '
        <tr>
                <td colspan="4" align="left"><em><u>N°  code(s) SMS CMFH/CAPS/Togo acheté(s): '.$souscription->souscription_nombre.'</u></em></td>
        </tr>
        <tr>
                <td colspan="2">&nbsp;</td>
                <td colspan="2" align="center"><strong><em>Montant total : '.number_format(($souscription_nombre * $unite + $autonome), 0, ',', ' ').' FCFA</em></strong></td>
        </tr>
        <tr>
                <td align="left"><em><strong>Libellé</strong></em></td>
                <td align="center"><em><strong>Nombre de codes achetés</strong></em></td>
                <td align="center"><strong><em>Prix Unitaire d&rsquo;un code</em></strong></td>
                <td align="center"><em><strong>Montant total</strong></em></td>
        </tr>';

        if($souscription->souscription_autonome == 1){
$htmlpdf .= '
        <tr style="background-color:#999;">
                <td align="left"><em><strong>Achat de code SMS KACM</strong></em></td>
                <td align="center"><em>1</em></td>
                <td align="center"><em>'.$autonome.' FCFA</em></td>
                <td align="center"><em>'.number_format(($autonome), 0, ',', ' ').' FCFA</em></td>
        </tr>';
        }
                if($souscription->souscription_programme == "CMFH"){
$htmlpdf .= '
        <tr style="background-color:#999;">
                <td align="left"><em><strong>Achat de code SMS  CMFH/CAPS/GAC Togo</strong></em></td>
                <td align="center"><em>'.$souscription_nombre.'</em></td>
                <td align="center"><em>'.$unite.' FCFA</em></td>
                <td align="center"><em>'.number_format(($souscription_nombre * $unite), 0, ',', ' ').' FCFA</em></td>
        </tr>';
        }

$htmlpdf .= '
        <tr>
                <td colspan="2" align="left"><em><u>Montant total en  lettres&nbsp;</u>: '.Util_Utils::lettre(($souscription_nombre * $unite + $autonome), 50).' CFA</em></td>
                <td colspan="2" rowspan="3" align="left"><img src="'.getParamEsmc(2).'/images/cachet.jpg" /><br />
Date : '.datefr($date_id->toString('yyyy-MM-dd')).'</td>
        </tr>';

                if($souscription->souscription_programme == "CMFH"){
$htmlpdf .= '
        <tr>
                <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  Chiffres :</u> '.number_format(($souscription_nombre * 70000 ), 0, ',', ' ').' BA.</em></td>
        </tr>
        <tr>
                <td colspan="2" align="left"><em><u>Gains en Bons d&rsquo;Achat en  lettres :</u> '.lettre2(($souscription_nombre * 70000 ), 50).' </em></td>
        </tr>';
                }else if($souscription->souscription_programme == "KACM"){
$htmlpdf .= '
        <tr>
                <td colspan="2" align="left">&nbsp;</td>
        </tr>
        <tr>
                <td colspan="2" align="left">&nbsp;</td>
        </tr>';
                                }


$htmlpdf .= '
        <tr>
                <td colspan="4" align="left">&nbsp;</td>
        </tr>
        <tr>
                <td colspan="4" align="left">&nbsp;</td>
        </tr>
        <tr>
                <td colspan="4" align="center">';
                if($souscription->souscription_vignette != "" && (substr($souscription->souscription_vignette, 0, 3) == "jpg" || substr($souscription->souscription_vignette, 0, 3) == "jpeg" || substr($souscription->souscription_vignette, 0, 3) == "JPG" || substr($souscription->souscription_vignette, 0, 3) == "JPEG")){
list($width, $height, $type, $attr) = getimagesize(getParamEsmc(2).$souscription->souscription_vignette);
                $pourcent = 700 * 100 / $width;
                $width2 = 700;
                $height2 = $pourcent * $height / 100;
$htmlpdf .= '<img src="'.getParamEsmc(2).'/'.$souscription->souscription_vignette.'" width="'.$width2.'" height="'.$height2.'" />

';
}
$htmlpdf .= '  </td>
                </tr>



        </tbody>
</table>

<br />
<br />
&nbsp;

</page>


';

$htmlpdf .= '';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/souscriptions.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

                // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
                // Le pointeur de fichier est placé à la fin du fichier
                // c'est là que $somecontent sera placé
                if (!$handle = fopen($filename, 'w+')) {
                                    echo "Impossible d'ouvrir le fichier ($filename)";
                                    exit;
                }

                // Ecrivons quelque chose dans notre fichier.
                if (fwrite($handle, $somecontent) === FALSE) {
                            echo "Impossible d'écrire dans le fichier ($filename)";
                            exit;
                }

                //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

                fclose($handle);

} else {
                echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_souscription/")) {
mkdir("../../webfiles/pdf_souscription/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_souscription/SOUSCRIPTION_".($souscription->souscription_id)."_.html";
$newnom = "SOUSCRIPTION_".($souscription->souscription_id)."_";
$newchemin = "../../webfiles/pdf_souscription/";

copy($file, $newfile);

                ob_start();
                include(dirname(__FILE__).'/../'.$newfile);
                $content = ob_get_clean();

                // convert to PDF
                require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
                try
                {
                                $html2pdf = new HTML2PDF('P', 'A4', 'fr');
                                $html2pdf->pdf->SetDisplayMode('fullpage');
                                $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
                                //$html2pdf->writeHTML($content);
                                $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
                }
                catch(HTML2PDF_exception $e) {
                                echo $e;
                                exit;
                }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);


                                //$this->_redirect(str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file));

}

public static function genererPdfEli($codemembre) {
  ini_set('memory_limit', '512M');

	$db = Zend_Db_Table::getDefaultAdapter();

  $dbtselect = "SELECT *
                FROM eu_convention_eli_opi
                WHERE code_membre = '$codemembre'";
  $db->setFetchMode(Zend_Db::FETCH_OBJ);
  $stmt = $db->query($dbtselect);
  $dbsearchelimembre = $stmt->fetchAll();
  $countsearchelimembre = count($dbsearchelimembre);
  

  $month = array('01'=>'Janvier','02'=>'Fevrier','03'=>'Mars','04'=>'Avril','05'=>'Mai','06'=>'Juin','07'=>'Juillet','08'=>'Aout','09'=>'Septembre','10'=>'Octobre','11'=>'Novembre','12'=>'Decembre');
  $true_month = "";
  $ex_date = explode('-',$dbsearchelimembre[0]->date_signature);
  
  foreach ($month as $key => $value) {
    if($ex_date[1] == $key){
      $true_month = $value;
    }
  }
  $next_ex_date = explode(' ', $ex_date[2]);
  $last_ex_date = explode(':', $next_ex_date[1]);
  
  $true_date_eli = $next_ex_date[0]." ".$true_month." ".$ex_date[0]." ". "à"." ".$last_ex_date[0]."h"." ".$last_ex_date[1]."min"." ".$last_ex_date[2]."secondes";
  
  

  $htmlpdf = "";
  $htmlpdf .= '<page backleft="10mm" backright="7mm" backbottom="20mm" backtop="7mm">';
  $htmlpdf .= '<style>

  *{
    font-size:14px;
  }
  #forms-article{
    width: 100%;
    position: relative;
   border: 1px solid #2e2e2e;
   padding-top: 20px;
   padding-bottom: 20px;
   padding-left: 38px;
   padding-right: 15px;
   font-size: 1.1rem;
   margin-bottom: 20px;
      
  }
  #header {
   text-decoration: underline;
   font-weight: bold;
   font-size: 30px;   
   text-align: center;
   
  }

  #section-intro{
      position: relative;
  }

  #lecture_eli_space_perso{
   margin-bottom: 10px;
  }
  p{
    text-align:justify;
  }
</style>';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>';

$htmlpdf .= '<p id="header">CONTRAT D’ENGAGEMENT DE LIVRAISON IRREVOCABLE (ELI) CONTRE ORDRES DE PRELEVEMENT IRREVOCABLE (OPI)</p>';

if (in_array(substr($codemembre,-1), array('P')) && $countsearchelimembre > 0){
    
  $dbtselect = "SELECT 
                    eu_convention_eli_opi.code_membre,
                    eu_membre.nom_membre,
                    eu_membre.prenom_membre,
                    eu_membre.ville_membre,
                    eu_membre.quartier_membre,
                    eu_membre.portable_membre,
                    eu_membre.bp_membre
                FROM eu_convention_eli_opi,eu_membre
                WHERE eu_convention_eli_opi.code_membre = eu_membre.code_membre
                AND eu_convention_eli_opi.code_membre = '$codemembre'";
  $db->setFetchMode(Zend_Db::FETCH_OBJ);
  $stmt = $db->query($dbtselect);
  $dbsearchelimembre = $stmt->fetchAll();
  $nom = $dbsearchelimembre[0]->nom_membre;
  $prenoms = $dbsearchelimembre[0]->prenom_membre;
  $nometprenomsdumembre = $nom.' '.$prenoms;
  $quartierdumembre = $dbsearchelimembre[0]->quartier_membre;
  $numerodetelephone = $dbsearchelimembre[0]->portable_membre;
  $villedumembre = $dbsearchelimembre[0]->ville_membre;
  $bpdumembre = $dbsearchelimembre[0]->bp_membre;
  

  $htmlpdf .= '<p><p><strong>Mme/M : </strong>'.$nometprenomsdumembre.'</p><p> <strong>Demeurant à (ville/village):</strong> '.$villedumembre.'</p><p><strong>Quartier: </strong>'.$quartierdumembre.'</p>';
  
  if ($bp != ""){
    $htmlpdf .= '<p><strong>BP:</strong> '.$bpdumembre.'</p>';
  }

  if ($bp == ""){
    $htmlpdf .= '<p><strong>BP:</strong> Aucune</p>';
  }

  $htmlpdf .= '<p><strong>Numéro de téléphone: </strong> '.$numerodetelephone.'</p> </p>';
}


$htmlpdf .= '<p>Ci-après dénommé (e) le « VENDEUR »,</p>
<p><strong>D’une part.</strong></p>
<p>Et</p>';

$htmlpdf .= '<p>
             <span style="color:#aa325f;font-weight:bold">ESMC</span>
              (Entreprise Sociale de Marché Commun) société à responsabilité limitée unipersonnelle au
capital social de 1 000 000 de francs CFA dont le siège social est sis à Wuiti-Atchati, Angle ru Sagouda & Kiyéou, BP : 30038 Lomé-Togo ; Tél : + 228 22 19 32 71 / 22 26 60 09, Immatriculée
au registre du Commerce et du Crédit Mobilier de Lomé sous le numéro : TG-LOM 2018 M 203,représentée par son Gérant, Monsieur SAMA Essohamlon.
          </p>';
        
$htmlpdf .= '
           <p>
            Ci-après dénommée l’<strong>« ESMC SARLU »</strong> ou l’ <strong>« ACQUEREUR »</strong> ou l’ <strong>« ACHETEUR »</strong>,
           </p>
           <p>D’une part.</p>
           <p>Il a été convenu et arrêté ce qui suit :</p>';
    
$htmlpdf .= '    
          <p>
            <span style="font-weight:bold;text-decoration:underline">Article 1 - Objet du Contrat</span>
          </p>
          <p>
           Le présent contrat intervient dans lcadre de l’exécution de la ’’Convention de collaboration
           entre l’<span style="color:#aa325f;">ESMC</span> et les Fournisseurs de biens, produits et services : Utilisateurs, Fournisseurs
           Spécifiques et Fonisseurs Externes pour la réalisation par le marché des 17 Objectifs de
           Développement Durable‘’.
          </p>';

$htmlpdf .= '
           <p>Il a pour objet de définir tant les modalités de vente et d’acquisition des Biens, des Produits et
des Services (BPS) que les modalités de paiement par voie d’OPI.</p>

<p style="font-weight:bold;text-decoration:underline">Article 2 - Vente conditionnée par l’engagement préalable de fourniture des BPS</p>
<p style="margin-left:45px;font-weight:bold;text-decoration:underline">2.1. Engagement préalable de fourniture continue de BPS</p>
<p>Pour garantir la disponibilité en continu des BPS sur la plateforme <span style="color:#aa325f;">ESMC</span>, le VENDEUR met à la
disposition de l’ACHETEUR, le document intitulé <i>‘’ENGAGEMENT DE LIVRAISON IRREVOCABLE’’</i>.</p>
';

$htmlpdf .= '
<p>Par ce document, le VENDEUR s’engage donc à fournir sans rupture ces BPS l’ACHETEUR.</p>

<p>Dans le souci d’aider le VENDEUR à honorer son engagement, l’ACHETEUR s’engage à son tour à
mettre à sa disposition, à sa demande, des Bons de Consommation  (BC) dont il pourrait se servir
pour s’approvisionner auprès de ses fournisseurs éventuels.</p>

<p style="margin-left:45px;font-weight:bold;text-decoration:underline">2.2 - Modalités de vente et de livraison des BPS</p>

<p>Le vendeur vendra à l’ACHETEUR, la quantité sollicitée par ce dernier</p>
<p>Les BPS vendus à l’ACHETEUR seront directement livrés à ses clients.</p>
';

$htmlpdf .= '
<p style="margin-left:45px;font-weight:bold;text-decoration:underline">2.3 - Modalités de paiement du prix de vente des BPS</p>
<p>Le prix des BPS vendus sera payé au VENDEUR par l’ACHETEUR suivant douze (12) ordres de
prélèvement irrévocables (OPI) minimum. Le nombre des OPI varie selon qu’il s’agit des BPS
dont la mise en valeur s’effectue à court terme ou des BPS dont la mise en valeur s’effectue à
moyen et à long termes tels que : les immeubles, les matériels industriels, les équipements
industriels, de l’infrastructure et de la logistique …</p>


<p>Le VENDEUR fera usage des OPI selon les quatre (04) modes prévus à l’article 5.2.6 de la
convention de collaboration sus visée et selon les règles de l’innovation des Activités <span style="color:#aa325f;">ESMC</span> plus
précisément celles liées aux Activités Achat-Vente Réciproques</p>
';

$htmlpdf .= ' <p>L’émission des OPI exclut aussi bien à l’ACHETEUR qu’au VENDEUR, toute exigence d’avald’escompte, de gage ou d’autres garanties.</p>
    
<p style="font-weight:bold;text-decoration:underline">Article 3 - Vente précédée d’une avance de paiement par voie d’OPI</p>

<p style="margin-left:45px;font-weight:bold;text-decoration:underline">3.1 - Paiement anticipé par voie d’OPI</p>
<p>de l’émission anticipée des OPI contre une quantité équivalente de BPS à livrer à l’ACHETEUR. Le
cas échéant, le VENDEUR est tenu de mettre à la disposition de l’ACHETEUR le document intitulé
<i>‘’ENGAGEMENT DE LIVRAISON IRREVOCABLE’’</i>.</p>';

$htmlpdf .= '    <p>Par ce document, le VENDEUR s’engage donc à livrer la totalité de la quantité convenue de BPS pour laquelle l’ACHETEUR lui avait servi par avance des OPI.</p>
<p style="margin-left:45px;font-weight:bold;text-decoration:underline">3.2 - La garde des produits</p>
<p>Les produits vendus seront sous la garde du VENDEUR jusqu’à livraison entière.</p>
<p>Sous réserve de l’entente entre le VENDEUR et l’ACHETEUR, les produits ne peuvent être gardés au-delà de la période de ………………. mois.</p>

<p>Les produits livrés sur commande ne sont pas frappés par ce délai.</p>

<p>Si l’ACHETEUR n’lève pas ou ne fait pas enlever les produits dans le délai et les modalités prévus par le présent contrat, deux situations peuvent se présenter :</p>
';

$htmlpdf .= '
<p style="margin-left:45px"> 
. Au cas où le VENDEUR n’a utilisé qu’une partie des OPI, il est en droit de procéder à
résiliation du présent contrat dans les proportions de son utilisation des OPI objets de la
vente.
</p>
<p style="margin-left:45px"> 
. Au cas où le VENDEUR a déjà utilisé tous les OPI, il doit mettre en demeure l’ACHETEUR
d’enlever les produits dans un délai d’un (01) mois, à défaut il sera contraint de le
revendre à l’effet de verser leur prix à l’ACHETEUR, après avoir déduit les frais
occasionnés par lesdites ventes. Dans ce cas, la vente doit s’effectuer au vu et au su de
l’ACHETEUR ou de son représentant. La mise en demeure peut se faire 
</p>
';

$htmlpdf .= '

<p>En cas de difficultés à remplir son obligatide livraison des produits de façon autonome,
conformément à l’article 7.3 alinéa 5 de la convention de collaboration sus visée, le VENDEUR
peut recourir à la Production Commune sur la plateforme <span style="color:#aa325f;">ESMC</span>. En tout état de cause, aussi
longtemps que le VENDEUR aura la capacité de remplir ses engagements en nature, l’ACHETEUR
ne pourra exiger sa créance en espèce.</p>

<p>Si à la demande de l’ACHETEUR ou de ses clients, le VENDEUR qui n’ess en mesure de livrer
 les produits, refuse de recourir à l’alternative prévue à cet effet par l’alinéa précédent,
 l’ACHETEUR est en droit de déclencher des poursuites pénales contre lui.
 Le VENDEUR s’expose aux poursuites pénales s’il se dépossède des produits sans l’accord de l’ACHETEUR.</p>

 <p style="margin-left:45px;font-weight:bold;text-decoration:underline">3.3 - La couverture des produits d’une assurance</p>

 <p>En couverture des produits dont le stock est connu, le VENDEUR souscrira à une police connu, le VENDEUR souscrira à une police d’assurance multirisque, aux frais de l’ACHETEUR.</p>

 <p style="margin-left:45px;font-weight:bold;text-decoration:underline">3.4 - Modalités de livraison des BPS</p>
 
 <p>Les BPS acquis contre l’émission anticipée d’OPI peuvent être enlevés par l’ACHETEUR
 l’immédiat ou entreposés dans les espaces de l’ACHETEUR ou auprès de ses franchisés ou dans
 les espaces du VENDEUR où se fait directement la livraison aux clients de l’ACHETEUR.</p>
';

$htmlpdf .= '      <p style="margin-left:45px;font-weight:bold;text-decoration:underline">3.4.1 - La livraison des produits à l’ACHETEUR</p>

<p>Selon la volonté exprimée par l’ACHETEUR, la livraison peut s’effectuer dans l’immédiat ou par échelonnement.</p>

<p>L’ACHETEUR s’engage à prendre livraison des produits vendus dans la période convenue.</p>
<p>L’ACHETEUR prendra livraison des produits dans les magasins du VENDEUR situés sur toute l’étendue du territoire togolais.</p>

<p>Le VENDEUR s’engage à livrer les produits vendus à l’ACQUEREUR, à la date (ou aux dates) de livraison convenue(s)</p>

<p>Tout enlèvement de produit par l’ACHETEUR est subordonné à la présentation d’une copie de l’‘’ENGAGEMENT DE LIVRAISON IRREVOCABLE’’ et d’une reconnaissance de la quantité enlevée.</p>

<p style="margin-left:45px;font-weight:bold;text-decoration:underline">3.4.2 - La livraison des produits aux clients de l’ACHETEUR</p>
<p>L’ACHETEUR peut décider que tous les produits (ou une quantité) soient levés par ses clients.
Le cas échéant, le VENDEUR est tenu de livrer les produits auxdits clients, pourvu qu’ils lui
présentent un ‘’BON’’ émanant de l’<span style="color:#aa325f;">ESMC</span>, équivalant à la quantité à leur livrer.</p>
';

$htmlpdf .= '     <p>Le VENDEUR gardera une copie du ‘’BON’’, contre livraison de la quantité correspondante.</p>
      
<p style="margin-left:45px;font-weight:bold;text-decoration:underline">3.4.3 - Le chargement des produits</p>

<p>Le chargement sera assuré par le VENDEUR à ses frais et sous sa responsabilité <input type="checkbox"></p>

<p>Le chargement sera assuré par l’ACHETEUR (ou ses clients) à ses (leur) frais et sous sa (ou leur) responsabilité <input type="checkbox"></p>

<p>Au cas où le chargement des produits est assuré par le VENDEUR, les frais seront incorporés au prix de vente.</p>

<p style="margin-left:45px;font-weight:bold;text-decoration:underline">Article 4 - Règlement des litiges</p>

<p>Tout litige pouvant survenir entre les parties et relatif à l’interprétation ou à l’exécution du présent contrat sera réglé à l’amiable.</p>

<p>A défaut de règlement à l’amiable, il sera soumis à l’arbitrage sous l’égide de la Cour d’Arbitrage
du Togo (CATO), et sera définitivement tranché suivant son règlement d’arbitrage tel qu’il est en vigueur à la date de signature du présent contrat. Le nombre d’arbitre est fixé à un (01).</p>

<p>Article 5 - L’entrée en vigueur</p>
<p>Le présent contrat prend effet à compter de la date de sa validation sur le site internet de l’<span style="color:#aa325f;">ESMC</span>ou de sa signature en cas de besoin./.</p>

';

if (in_array(substr($codemembre,-1), array('M')) && $countsearchelimembre > 0){
  $nomdurepresentantdelapersonnemorale = $dbsearchelimembre[0]->civilite;
  $bpdelapersonnemorale = $dbsearchelimembre[0]->bp;
  $demeure = $dbsearchelimembre[0]->demeure;
  $quartier = $dbsearchelimembre[0]->quartier;
  $descriptiondelastructure = $dbsearchelimembre[0]->description_structure;
  $descriptiondubps = $dbsearchelimembre[0]->description_bps;
  
  $numerodetelephone = $dbsearchelimembre[0]->telephone;

  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';
  $htmlpdf .= '<p>&nbsp;</p>';

  

  $htmlpdf .= ' <h2 style="font-size: 25px;text-align: center;text-decoration: underline;font-weight:bold;display:block;">ENGAGEMENT DE LIVRAISON IRREVOCABLE (ELI) </h2>
  <span style="display:block;font-size:20px;text-align: center;margin-top:-10px">(VALANT ENGAGEMENT DE FOURNITURE CONTINUE DE BIENS, PRODUITS ET SERVICES)</span>
  <p>
   <strong>
   Je soussigné (e) M./Mme 
   </strong>
   <span>'.$nomdurepresentantdelapersonnemorale.'</span>
   </p>
   <p> <strong> Demeurant à (ville/village) :</strong> '.$demeure.'</p>
   <p><strong>Quartier :</strong>'.$quartier.'</p>
   <p> <strong>BP:</strong> '.$bpdelapersonnemorale.'</p>
   <p><strong>Numéros de téléphone :</strong>'.$numerodetelephone.'</p>';

if ($descriptiondelastructure == ""){
  $htmlpdf .='
  <p>
    <strong> Description de la structure : raison sociale, numéro d’identification, siège social … ) :</strong>
     Aucune
  </p>';
}

if ($descriptiondelastructure != ""){
  $htmlpdf .='
  <p>
    <strong> Representant de la structure : raison sociale, numéro d’identification, siège social … ) :</strong>
    <p>'.$descriptiondelastructure.'</p>
  </p>';
}


$htmlpdf .='<p><strong>
En exécution du ‘’contrat de livraison irrévocable contre OPI’’ signé avec ESMC SARLU,
M’engage irrévocablement { fournir { cette dernière de façon continue les Biens, Produits et
Service ci-après ( désigner les BPS )</strong> : 
</p>
<p>'. $descriptiondubps.'</p>

<p> <i>En foi de quoi je signe le présent Engagement de Livraison Irrévocable (ELI) pour servir et valoir
 ce que de droit.</i>
</p>
<p style="position: relative;margin-left:361px">
<strong>Fait à Lomé le </strong>'.$true_date_eli.'>
</p>
<p style="margin-left:361px;">
<img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" />
</p>
<p style="position: relative;margin-left:361px;margin-top:56px">
<strong>M/Mme : '.$nomdurepresentantdelapersonnemorale.'</strong> 
</p>';
}


$htmlpdf .= '</page>';

  $filename = '../public/engagementdelivraisonirrevocable.html';
  $somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}


$file = $filename;
if (!is_dir("../../webfiles/pdf_engagementdelivraisonirrevocable/")) {
mkdir("../../webfiles/pdf_engagementdelivraisonirrevocable/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_engagementdelivraisonirrevocable/ELI_".$codemembre."_.html";
$newnom = "ELI_".$codemembre."_";
$newchemin = "../../webfiles/pdf_engagementdelivraisonirrevocable/";

copy($file, $newfile);

ob_start();
include($newfile);
$content = ob_get_clean();

// convert to PDF
require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
try
{
    $html2pdf = new HTML2PDF('P', 'A4', 'fr');
    $html2pdf->pdf->SetDisplayMode('fullpage');
    $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
    //$html2pdf->writeHTML($content);
    $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
}
catch(HTML2PDF_exception $e) {
    echo $e;
    exit;
}

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';
unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
  $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
}else{
  $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
}

*/
    return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);
}

public static function genererPdfFranchise($codemembre){
  ini_set('memory_limit', '512M');

  $db = Zend_Db_Table::getDefaultAdapter();

	$dbtselect = "SELECT *
	              FROM eu_franchise, eu_membre_morale
	              WHERE eu_franchise.code_membre_franchise = eu_membre_morale.code_membre_morale
	              AND eu_franchise.code_membre_franchise = '$codemembre'";
  $db->setFetchMode(Zend_Db::FETCH_OBJ);
  $stmt = $db->query($dbtselect);
	$dbsearchfranchisemembre = $stmt->fetchAll();
	
  $countdbsearchfranchisemembre = count($dbsearchfranchisemembre);
  
  $month = array('01'=>'Janvier','02'=>'Fevrier','03'=>'Mars','04'=>'Avril','05'=>'Mai','06'=>'Juin','07'=>'Juillet','08'=>'Aout','09'=>'Septembre','10'=>'Octobre','11'=>'Novembre','12'=>'Decembre');
  $true_month = "";
  $ex_date = explode('-',$dbsearchfranchisemembre[0]->create_date);
  
  foreach ($month as $key => $value) {
    if($ex_date[1] == $key){
      $true_month = $value;
    }
  }
  $next_ex_date = explode(' ', $ex_date[2]);
  $last_ex_date = explode(':', $next_ex_date[1]);
  
  $true_date_franchise = $next_ex_date[0]." ".$true_month." ".$ex_date[0]." ". "à"." ".$last_ex_date[0]."h"." ".$last_ex_date[1]."min"." ".$last_ex_date[2]."secondes";
  
  $htmlpdf .= '
    <page backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/backimage.png" backleft="10mm" backright="7mm" backbottom="15mm" backtop="20mm">
    ';

  $htmlpdf .= '
  <style>
  #franchise_article_title{
    color: #c30c60;
    font-weight: bold;
    text-decoration: underline;
  }

  p{
    font-size:19px;
    letter-spacing:5px;
    margin-top:15px
  }
  #franchise_title{
    text-align: center;
    font-size: 2.9em;
    font-weight: lighter;
  }
  #franchise_article_title{
      color: #c30c60;
      font-weight: bold;
      text-decoration: underline;
  }
  #franchise_sus_article_title{
      color: #1c92f6;          
      font-weight: lighter;
      text-decoration: underline;
      
  }
  #sigle_color{
    color: #c30c60;
    font-weight: bold;
      
  }
  #second_sigle_color{
    color: #1c92f6;      
    font-weight: bold;
  }
  li{
    margin-top:25px
  }
  </style>
  ';
  $htmlpdf .= '<h1 style="text-align:center;font-size:60px;color:#c30c60;margin-top:150px;font-weight:bold"><i><p style="font-size:40px">CONTRAT DE</p><span style="margin-top:-40px;margin-left:-100px"><strong>FRANCHISE</strong></span></i></h1>';

  $htmlpdf .= '<p style="font-weight:lighter;text-align:center;text-transform:uppercase;font-size:35px">Guichets uniques d\'integration universelle</p>';

  $htmlpdf .= '<div style="border-style:dashed;padding:10px;margin-bottom:300px">
  <table style="width:100%;border-spacing:0;margin-bottom:20px;border:1px solid #2e2e2e;padding:10px;font-size:17px;background-color:#ccc">
                 <tr style="padding-top:35px">
                   <td style="border-right:1px solid #2e2e2e;width:50%;padding-top:15px;"><input type="radio" name="GUIUC/OE/OP" checked><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUC/OE/OP</span></td>
                   <td style="width:50%;padding-left:10px;padding-top:15px><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU PBF/AP-OPI</span></td>                   
                 </tr>
                 <tr style="padding-top:35px">
                   <td style="border-right:1px solid #2e2e2e;width:50%;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUC/OE/PPP</span></td>
                   <td style="width:50%;padding-left:10px;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU PBF/B</span></td>                   
                 </tr>
                 <tr style="padding-top:35px">
                   <td style="border-right:1px solid #2e2e2e;width:50%;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUC/OSE</span></td>
                   <td style="width:50%;padding-left:10px;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU PBF/PS-OPI</span></td>                   
                 </tr>
                 <tr style="padding-top:35px">
                   <td style="border-right:1px solid #2e2e2e;width:50%;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU/BPS/B</span></td>
                   <td style="width:50%;padding-left:10px;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU/PBF/SFD</span></td>                   
                 </tr>
                 <tr style="padding-top:35px">
                   <td style="border-right:1px solid #2e2e2e;width:50%;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU/BPS/P</span></td>
                   <td style="width:50%;padding-left:10px;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIU/PODD/POE/FE</span></td>                   
                 </tr>
                 <tr style="padding-top:35px">
                   <td style="border-right:1px solid #2e2e2e;width:50%;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU/BPS/S</span></td>
                   <td style="width:50%;padding-left:10px;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIU/PODD/POE/FS</span></td>                   
                 </tr>
                 <tr style="padding-top:35px">
                   <td style="border-right:1px solid #2e2e2e;width:50%;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU/BPS/S</span></td>
                   <td style="width:50%;padding-left:10px;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIU/PODD/POE/FS</span></td>                   
                 </tr>
                 <tr style="padding-top:35px">
                   <td style="border-right:1px solid #2e2e2e;width:50%;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIUU/PBF/A-OPI</span></td>
                   <td style="width:50%;padding-left:10px;padding-top:15px"><span style="color:#c30c60;">ESMC</span> <span style="display:inline-block;color:#1c92f6">GUIU/PODD/POSE</span></td>                   
                 </tr>
                </table></div>';
  $htmlpdf .= '
  <page_footer>
  <table>
      <tr>
          <td align="center">
              <hr>
              <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          </td>
      </tr>
  </table>
  </page_footer>';
  
  $htmlpdf .= '<p id="franchise_article_title">Entre les soussignés :</p>';
  $htmlpdf .= '<p style="letter-spacing:5px">
                <span id="sigle_color">ESMC</span> (Entreprise Sociale de Marché Commun) SARL U au capital de 1 000 000
  FCFA ; Siège social : Lomé (TOGO), Wuiti-Atchati, Angle rues Sagouda, Kiyéou
  et Bandjéli,03 BP 30038 ; Immatriculée au RCCM sous le numéro TG-LOM 2018
  M203 ;Représentée par son Gérant Monsieur <strong>Essohamlon SAMA</strong>,
</p>';
  
  $htmlpdf .= '<p>Ci-après dénommée « Franchiseur » « <span id="sigle_color">ESMC</span> »,</p>';

  $htmlpdf .= '<p style="text-align:right">D’une part</p><p>et</p>';

    if ($dbsearchfranchisemembre > 0) {
      $htmlpdf .= '<p><span style="font-weight:bold;color:#c30c60;">Raison sociale du franchisé: '.$dbsearchfranchisemembre[0]->raison_sociale.'</span> </p>';
    }
  $htmlpdf .= '<p>Les Parties ont signé la convention intitulée : ‘’Convention de collaboration entre
  l’<span id="sigle_color;font-weight:bold">ESMC</span> et les Fournisseurs de biens, produits et services : Utilisateurs, Fournisseurs
  Spécifiques et Fournisseurs Externes pour la réalisation par le marché des 17
  Objectifs de Développement Durable ‘’</p>
  <p>Pour assurer la mise en œuvre de la Production Commune et satisfaire autant que
   faire se peut tous ses Utilisateurs, la société <span id="sigle_color">ESMC</span> a mis en place une marque
   dénommée Guichet Unique d’Intégration Universelle Interface Communautés
   Opérateurs Economiques Offreurs de projets <span id="second_sigle_color">('.$dbsearchfranchisemembre[0]->type_franchise.')</span>.</p>
 <p>
   Pour une utilisation efficiente de la marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>, <span id="sigle_color">ESMC</span> a décidé de
   franchiser ladite marque en confiant son exploitation à des personnes morales
   autonomes qui le désirent
   Pour une utilisation efficiente de la marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>, <span id="sigle_color">ESMC</span> a décidé de
   franchiser ladite marque en confiant son exploitation à des personnes morales
   autonomes qui le désirent
 </p>';

 $htmlpdf .= '   <p>
 La personne morale <strong>'.$dbsearchfranchisemembre[0]->raison_sociale.'</strong> étant intéressée par la
franchise de <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>, les deux parties ont convenu et arrêté ce qui suit :
 </p>';

 $htmlpdf .= '<p id="franchise_article_title">Article 1. Concession de franchise</p>
 <p>Le franchiseur, donne au franchisé, le droit d’exploiter des Guichets Uniques
 d’Intégration Universelle Interface Communautés Opérateurs Economiques
 Offreurs de Projets <span id="second_sigle_color">('.$dbsearchfranchisemembre[0]->type_franchise.')</span> qui doivent être destinés essentiellement à la
 souscription aux deux (02) activités de la plateforme <span id="sigle_color">ESMC</span> que sont : souscriptions
 pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation et
 Prestataires de la Production Commune.</p>
 <p id="franchise_article_title">Article 2. Marque et Enseigne</p>
 <p id="franchise_sus_article_title">2.1. Licence de marque</p>
 <p>Le franchiseur est le seul et unique propriétaire de la marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>.</p>
 <p>La franchise octroyée implique licence à titre d’enseigne de la marque dénominative
 et figurative, ainsi que de tous les procédés, formules, éléments publicitaires, slogans
 établis par les soins du franchiseur, et ce pour la durée du contrat dans le point
 d’exploitation désigné <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span></p>
 <p id="franchise_sus_article_title">2.2. Conditions d’utilisations</p>
 <p>Le franchisé aura à sa charge, le coût de la réalisation de l’infrastructure devant
 abriter le <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>. L’infrastructure doit être réalisée selon le format uniforme
 décidé par le franchiseur. En conséquence, à l’expiration du contrat et en cas de non
 renouvellement, le franchisé aura l’obligation, entre autres, de changer les couleurs
 des locaux ayant abrité le GUIU. Bref, le franchisé devra supprimer toutes traces
 représentant la franchise <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>.</p>
 <p>La marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> et les enseignes <span id="sigle_color">ESMC</span> ne pourront être inscrites au
 Registre de Commerce et du Crédit mobilier du franchisé sous quelque rubrique
 que ce soit. Elles seront utilisées par le franchisé à titre d’enseigne ainsi que comme
 signe de ralliement de sa clientèle sans qu’elles puissent être confondues avec sa
 dénomination propre.</p>';

 $htmlpdf .= '<p>Le franchisé sera tenu de faire état de sa propre raison sociale ainsi que de sa qualité
 de franchisé de la plateforme <span id="sigle_color">ESMC</span> sur ses documents commerciaux ainsi que sur
 sa vitrine.</p>
 <p>Le franchisé sera tenu de faire état de sa propre raison sociale ainsi que de sa qualité
 de franchisé de la plateforme <span id="sigle_color">ESMC</span> sur ses documents commerciaux ainsi que sur
 sa vitrine.</p>
 <p id="franchise_article_title">Article 3. Exploitation</p>
 <p>L’exploitation de cette franchise se fera notamment :</p>
 <p>
 <ul>
 <li>Par la présentation du <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> selon une architecture bien définie par le
 franchiseur.</li>
 <li>Par la fourniture d’une liste du matériel devant équiper le <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span></li>
 <li>Par la formation du personnel du franchisé</li>
 </ul></p>';

 $htmlpdf .= '<p>En toute circonstance, le franchisé traite en son nom personnel et en qualité de
 commerçant indépendant. Il sera donc seul responsable des conséquences de la
 réalisation et de l’exploitation des <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> du franchisé.</p>
 <p>L’affectio-societatis est à cet effet exclu. Cela veut dire que chacun supporte seul ses
 propres charges ; en aucun cas, le franchiseur ne peut donc être considéré comme
 associé de fait à la gestion ou à l’exploitation des <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> du franchisé.</p>
 <p>Le franchisé devra appliquer strictement la méthode d’utilisation de la plateforme
 <span id="sigle_color">ESMC</span>.</p>
 
 <p id="franchise_article_title">Article 4. Aspect général de l’image de marque</p>
 
 <p>Le franchisé déclare expressément avoir conscience de faire partie d’un ensemble de
 franchisés dont chacun doit assurer un service et une présentation aussi uniforme
 que possible et de la meilleure qualité possible, de telle sorte à être, pour le public,
 un standard de prestation de qualité.</p>
 
 <p>Ce standard doit s’appliquer à tous les niveaux de ce qu’un Utilisateur peut attendre
 d’un GUIU, qu’il s’agisse de l’architecture du local, du positionnement des affiches
 que de la qualité des services.</p>
 
 <p id="franchise_article_title">Article 5. Obligations du franchiseur</p>
 <p id="franchise_sus_article_title">5.1. Services apportés par le franchiseur pour l’ouverture du '.$dbsearchfranchisemembre[0]->type_franchise.'</p>
 
 <p style="margin-top:45px">A la signature des présentes, le franchiseur mettra à la disposition du franchisé, le
 savoir-faire nécessaire à l’exploitation des <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>.</p>
 <p>Le savoir-faire s’accompagne, à la demande du franchisé, d’une formation de son
 personnel. Le cas échéant, le coût de la formation sera entièrement supporté par le
 franchisé.</p>';

 $htmlpdf .= '<p>Le savoir-faire sera, en cas de besoin, périodiquement mis au point et renouvelé</p>

 <p>Le franchiseur mettra à la disposition du franchisé, une ou des personnes à l’ouverture
 et au cours de l’exécution du présent contrat, à l’effet de contrôler le respect des
 conditions d’utilisation et d’exploitation du <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span></p>
 
 <p id="franchise_sus_article_title">5.2. Services apportés par le franchiseur après l’ouverture du '.$dbsearchfranchisemembre[0]->type_franchise.'</p>
 <p>Pendant toute la durée du présent contrat, le franchiseur s’engage à mettre à la
 disposition du franchisé, les services suivants :</p>
 <p>
 <ul>
 <li>A assurer périodiquement l’assistance technique et les applications informatiques
 nécessaires à l’exploitation, l’assistance commerciale du franchisé, notamment en
 lui faisant bénéficier des perfectionnements dont il disposerait et en éditant des brochures et des prospectus commerciaux de diffusion générale qu’il remettra
 au franchisé.</li></ul><ul>
 <li>A communiquer régulièrement au franchisé les perfectionnements et/ou lui
 fournir les informations dont il aurait besoin, notamment afin d’éviter des dérives
 de procédé.</li>
 <li>Toutes prestations de services non prévus au présent contrat et que le franchiseur
 viendra à fournir au franchisé sur sa demande et, après accord de ce dernier,
 seront facturées a un prix convenu d’avance.</li>
 </ul></p>';

 $htmlpdf .= '<p></p>
 <p id="franchise_article_title">Article 6. Obligations du franchisé : Respect des procédures, de l’image de la
 marque</p>
 <p>Il est bien vrai que le présent contrat n’implique aucune restriction quelconque à
 la liberté du franchisé dans la direction et l’exploitation de son fonds de commerce
 qui est entièrement sous sa responsabilité, à ses seuls avantages et risques et dont
 il reste seul juge.</p>
 <p>Cependant, les parties conviennent expressément que, pour obtenir une meilleure
 organisation et une promotion plus dynamique de la chaîne de franchise, et pour
 une bonne exécution du contrat, il est dans l’intérêt des parties au présent contrat
 que les méthodes et les procédures édictées par le franchiseur soient, par tous
 moyens, mises à la disposition du franchisé.</p>
 <p>En tout état de cause, le franchisé s’engage à :</p>
 <p><ul>
 <li>Consacrer le temps et les activités nécessaires à l’exploitation de franchise
 qui lui est consentie et à ne pas s’intéresser directement ou indirectement, à
 l’exploitation d’un savoir-faire concurrent à celui du franchiseur dans un domaine
 semblable.</li>
 <li>Mener son exploitation commerciale, conformément aux règles, méthodes et
 procédures définies par le franchiseur.</li>
 <li>A respecter scrupuleusement les prix, les normes de qualité dictées par le
 franchiseur</li>
 <li>A mettre en place au voisinage, à l’entrée et à l’intérieur du <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>, des
 éléments d’identification tels que des enseignes, des affiches et autres qui lui
 seront indiqués par le franchiseur.</li>
 <li>A respecter l’unité de style (couleurs, matériaux, etc.…) défini par le franchiseur,</li>
 <li>A entretenir régulièrement les <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'.</span></li>
 <li>A respecter l’image de marque, de qualité en veillant à l’excellente présentation
 du personnel, à ce que le personnel respecte scrupuleusement les normes de
 qualité et applique strictement les méthodes faisant l’originalité du savoir-faire et respecte la législation prévue pour l’exploitation de <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>.</li></ul>
 <ul><li>A inscrire impérativement sur son papier en tête, ses documents commerciaux,
ainsi que sur tous supports de communication à l’égard de sa clientèle quelle
qu’elle soit ainsi que sur sa porte d’entrée et sa vitrine, sa qualité de commerçant
indépendant, franchisé de l’<span id="sigle_color">ESMC</span>.</li>
<li>A respecter toutes les directives données par le franchiseur et à adapter
immédiatement toute modification apportée par le franchiseur.</li>
</ul>
 </p>
 ';

$htmlpdf .= '<p id="franchise_article_title" style="margin-top:100px">Article 7. Dispositions financières à la charge du franchisé</p>

<p id="franchise_sus_article_title">7.1. Droit de franchise.</p>
<p>Le droit de franchise, élément incorporel temporaire correspond :</p>
<p>
<ul>
<li>Au droit d’accès à la plateforme <span id="sigle_color">ESMC</span> équivalent au droit de bénéficier de la
notoriété acquise par la marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'.</span></li>
<li>Au droit pour le franchisé de bénéficier pour son exploitation, pendant la durée
du contrat, des méthodes commerciales innovantes et d’une clientèle fidèle du
franchiseur.</li>
</ul>
</p>

<p id="franchise_sus_article_title">7.2. Redevance de franchise</p>
<p>En contrepartie des droits qui lui sont accordés pour l’utilisation de la marque
<span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> et de la mise à disposition du savoir-faire, le franchisé versera au
franchiseur, une redevance correspondant à ……% des commissions à lui payer par
ce dernier</p>
<p>Cette redevance sera retenue par le franchiseur lors du paiement des commissions
à verser au franchisé.</p>

<p id="franchise_article_title">Article 8. Dispositions financières à la charge du franchiseur</p>

<p>En contrepartie de la souscription des Utilisateurs aux deux (02) activités précitées
disponibles sur la plateforme <span id="sigle_color">ESMC</span>, le franchiseur paiera au franchisé, des
commissions dont les modalités sont fixées à l’article 7.1.4 alinéas 2 et 3 de la
convention sus visée.</p>

<p id="franchise_article_title">Article 9. Secret et confidentialité</p>

<p>Par les présentes, le franchisé reconnaît :</p>';

$htmlpdf .= '<p style="margin-top:100px"><ul>
<li>Que les droits du franchiseur sur tous les éléments protégés ou non afférents au
savoir-faire sont réputés lui être communiqués à titre confidentiel.</li>
<li>Que le savoir-faire est un ensemble de secrets commerciaux et de technique dont il n’est que dépositaire et qui lui sont révélés à titre confidentiel uniquement
pour l’assister dans l’exploitation de sa structure sous franchise <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>.</li>
</ul>
<ul>
<li>En conséquence, le franchisé s’engage durant toute la durée du présent contrat et
à l’expiration de celui-ci, quelle qu’en soit la cause :</li>
<li>A respecter scrupuleusement le secret sur le présent contrat, sur la méthode
d’exploitation du <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>, sur les documents qui lui sont adressés par
le franchiseur, sur le Compte Marchand des Utilisateurs de la plateforme <span id="sigle_color">ESMC</span>
dont il pourrait avoir connaissance.</li>
<li>A n’utiliser directement ou indirectement aucun de ces secrets dans une
entreprise autre que celle habilitée à exploiter un <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'.</span>
</li>
<li>A obtenir de ses employés, dirigeants et associés qu’ils ne divulguent pas le
savoir-faire qui leur sera communiqué.</li>
</ul>
</p>';

$htmlpdf .= '<p>A cet effet, il devra notamment inclure dans les contrats de travail de ses employés
une clause de confidentialité</p>
<p id="franchise_article_title">Article 10. Responsabilité</p>
<p>Il est expressément convenu que le franchisé sera tenu pour seul responsable de
tout sinistre ou dommage susceptible d’intervenir à l’occasion de l’installation ou
de l’exploitation des <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> ainsi que des dommages causés par des actes
ou des omissions du franchisé ou de l’un quelconque de ses agents employés,
préposés, mandataires, contractants ou autres en rapport avec les prestations de
services effectuées dans ses <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'.</span></p>
<p>Il assumera seul la charge, les frais et conséquences des procès en cas d’action
en dommages et intérêt intentés ou de réclamation formulée par un client en vue
d’obtenir la réparation notamment de dommages matériels ou corporels provoqués
directement ou indirectement par les dits actes ou omissions.</p>
<p id="franchise_article_title">Article 11. Durée du contrat</p>
<p>Le présent contrat est conclu pour une durée de un (01) an qui commence à courir
à la signature du présent contrat. A défaut de préavis de deux (02) mois avant
l’expiration du terme, il se renouvellera par tacite reconduction sans donner lieu à
contrepartie financière, pour de nouvelles périodes successives de un (01) an.</p>
<p>La résiliation anticipée du présent contrat interviendra sans préjudice des dommages
et intérêts qui pourront être réclamés à la partie fautive, en réparation de l’intégralité
du préjudice causé.</p>
<p>Le franchiseur ne remboursera aucune somme d’argent au franchisé en cas de
rupture du contrat par ce dernier.</p>
<p>En cas de rupture du contrat de la part du franchiseur pour cause de non-respect</p>';

$htmlpdf .= '<p>du franchisé des obligations inhérentes au présent contrat, le franchisé ne pourra
prétendre, ni à un remboursement, ni au paiement d’une indemnité.</p>
<p id="franchise_article_title">Article 12. Résiliation du contrat</p>
<p>En cas d’inexécution ou de violation par l’une des Parties de l’une quelconque des
dispositions de la convention, celle-ci pourra être résiliée unilatéralement et de
plein droit par l’autre partie, trente (30) jours après l’envoi d’une mise en demeure
restée sans effet.</p>
<p>La présente convention sera résiliée automatiquement et de plein droit dans
l’hypothèse où, par suite d’une modification législative ou règlementaire concernant
ses activités, l’une ou l’autre partie se trouverait dans l’impossibilité de poursuivre
la convention.</p>
<p id="franchise_article_title">Article 13. Cessation du contrat de franchise</p>
<p>A son expiration, sa résiliation ou sa cessation pour quelque cause que ce soit :
Le franchisé cessera immédiatement d’exploiter la franchise <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> et ne
pourra plus se présenter ou se prévaloir de la qualité de cette franchise.
Le franchisé cessera immédiatement toute utilisation, de quelque manière que ce
soit, des méthodes, techniques et formules liées à la franchise <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> qui
lui avaient été communiquées par le franchiseur.</p>
<p>Le franchisé cessera immédiatement toute utilisation, à quelque titre que ce soit,
de la marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> ainsi que des posters, affiches et de tout élément
publicitaire ou promotionnel distinctif lié à la franchise et en particulier, de tout
matériel ou documents portant la marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'.</span></p>
<p>Dans tous les cas, le franchisé devra procéder au retrait de l’enseigne <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>. Le franchiseur peut, en cas d’inaction du franchisé, supprimer en ses lieux et
place la ou les enseignes physiques revêtant la marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span> ainsi que
le droit de récupérer et d’enlever l’ensemble des éléments, articles, installation
et meubles spécifiques à la franchise et notamment : les enseignes et affiches
extérieures portant la marque <span id="second_sigle_color">'.$dbsearchfranchisemembre[0]->type_franchise.'</span>, tout panneau ou signe relatif à la
qualité ou à la nature des activités <span id="sigle_color">ESMC</span>.</p>
<p>Dès la cessation du contrat, pour quelque raison que ce soit, le franchisé procédera
aux modifications nécessaires, de telle sorte qu’aucun risque de confusion n’existe
entre lui et le franchiseur.</p>
<p id="franchise_article_title">Article 14. Indépendance des parties</p>
<p>Le franchisé est, et demeure un commerçant indépendant qui assure personnellement
avec le concours de tout préposé de son choix la pleine et entière liberté de
gestion et d’exploitation de son entreprise et conserve, en conséquence, l’exclusive
responsabilité des résultats de son exploitation.</p>';

$htmlpdf .= '<p>Le franchisé veillera à ce qu’il ne puisse y avoir, en aucun cas aucune confusion
entre le franchiseur et lui</p>
<p>Le franchisé s’engage à justifier de sa qualité de commerçant indépendant par :</p>
<p>
<ul>
  <li>La production de son inscription au registre du commerce et du crédit mobilier</li>
  <li>La production de sa carte d’opérateur économique,</li>
  <li>La production de son acte de propriété ou de son bail commercial,</li>
  <li>La production, le cas échéant, des statuts de sa société.</li>
</ul>
</p>
<p>Le franchisé devra veiller au parfait respect des dispositions légales de toutes sortes,
et notamment des réglementations applicables à son activité, à propos de l’hygiène,
de la sécurité, de l’urbanisme et autre ; étant seul responsable de toute violation de
la réglementation.</p>
<p id="franchise_article_title" style="margin-top:100px">Article 15. Modification du contrat</p>
<p>Au cas où, en raison de la promulgation d’une nouvelle loi ou réglementation, une
obligation quelconque serait mise à la charge du franchisé comme au cas où un
droit quelconque serait accordé au franchiseur, les parties s’engagent à modifier le
contrat à l’effet de le rendre compatible avec les nouvelles dispositions légales.</p>

<p id="franchise_article_title">Article 16. Enregistrement</p>

<p>Le présent contrat sera enregistré par le franchiseur et supporté par moitié par les
parties.</p>

<p id="franchise_article_title">Article 17. Intégration du présent contrat</p>

<p>Outre les conditions spécifiques ci-dessus nécessaires au partenariat entre
l’ESMC et le franchisé, le présent contrat s’intègre entièrement à la Convention de
collaboration sus visée.</p>

<p id="franchise_article_title">Article 18. Clause compromissoire d’arbitrage</p>
<p>Les parties conviennent de tout mettre en œuvre pour résoudre par des négociations
amiables, toutes contestations pouvant surgir à l’occasion de l’exécution ou de
l’interprétation du présent contrat.</p>
<p>A défaut de règlement amiable, les parties conviennent de soumettre le litige à
l’arbitrage sous l’égide de la Cour d’Arbitrage du Togo (CATO) à laquelle elles
déclarent expressément se référer.</p>
<p style="margin-top:350px">Le nombre d’arbitre est fixé à un (01).</p>';

$htmlpdf .= '<p style="text-align:right">Fait à Lomé en deux (02) exemplaires originaux,</p>
<p style="text-align:right">Le '.$true_date_franchise.'</p>
<p>
<span tyle="display:inline-block;text-align:left"><strong>Le Franchiseur </strong></span>
<span style="display:block;margin-left:350px;margin-top:50px"><strong>Le Franchisé</strong></span>
</p>
<p>M. SAMA Essohamlon</p>
<p style="display:block;text-align:right"><strong>M/Mme </strong> '.$dbsearchfranchisemembre[0]->representant.'</p>
<img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" />
';
$htmlpdf .= '</page>';
  

  $filename = '../public/franchisesdumembre.html';
  $somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}


$file = $filename;
if (!is_dir("../../webfiles/pdf_franchise/")) {
mkdir("../../webfiles/pdf_franchise/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_franchise/FRANCHISE_".$codemembre."_.html";
$newnom = "FRANCHISE_".$codemembre."_";
$newchemin = "../../webfiles/pdf_franchise/";

copy($file, $newfile);

ob_start();
include($newfile);
$content = ob_get_clean();

// convert to PDF
require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
try
{
    $html2pdf = new HTML2PDF('P', 'A4', 'fr');
    $html2pdf->pdf->SetDisplayMode('fullpage');
    $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
    //$html2pdf->writeHTML($content);
    $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
}
catch(HTML2PDF_exception $e) {
    echo $e;
    exit;
}

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';
unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
  $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
}else{
  $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
}

*/
    return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);
}


public static function genererPdfConvention($codemembre){
  ini_set('memory_limit', '512M');

  $dbcv = new Application_Model_DbTable_EuConvention();
  $cv = new Application_Model_EuConvention();
  $mpcv = new Application_Model_EuConventionMapper();


  $db = Zend_Db_Table::getDefaultAdapter();


	$dbtselect = "SELECT *
	              FROM eu_convention
	              WHERE eu_convention.code_membre = '$codemembre'
	              AND eu_convention.signature_new_convention = 1";
  $db->setFetchMode(Zend_Db::FETCH_OBJ);
  $stmt = $db->query($dbtselect);
	$dbsearchconventionmembre = $stmt->fetchAll();
	
	$countdbsearchconventionmembre = count($dbsearchconventionmembre);

  $month = array('01'=>'Janvier','02'=>'Fevrier','03'=>'Mars','04'=>'Avril','05'=>'Mai','06'=>'Juin','07'=>'Juillet','08'=>'Aout','09'=>'Septembre','10'=>'Octobre','11'=>'Novembre','12'=>'Decembre');
  $true_month = "";
  $ex_date = explode('-',$dbsearchconventionmembre[0]->date_convention);
  
  foreach ($month as $key => $value) {
    if($ex_date[1] == $key){
      $true_month = $value;
    }
  }
  $next_ex_date = explode(' ', $ex_date[2]);
  $last_ex_date = explode(':', $next_ex_date[1]);
  
  $true_date = $next_ex_date[0]." ".$true_month." ".$ex_date[0]." ". "à"." ".$last_ex_date[0]."h"." ".$last_ex_date[1]."min"." ".$last_ex_date[2]."secondes";
  

  $htmlpdf = "";
  $htmlpdf .= '<page backleft="10mm" backright="7mm" backbottom="15mm" backtop="7mm">';
  $htmlpdf .= '
  <style>
  #convention_header_title{
  font-size: 25px;
  line-height: 52px;
  text-align: justify;
  margin-left: 0px;
  font-weight:bold;
  margin-bottom:15px;
  border: 3px solid #000;
  padding: 20px;
  border-radius: 11px;}

  p{
    text-align:justify;
  }
  </style>
  ';
  $htmlpdf .= '
  <page_footer>
  <table>
      <tr>
          <td align="center">
              <hr>
              <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
          </td>
      </tr>
  </table>
  </page_footer>';
  $htmlpdf .= '<p id="convention_header_title" style="font-family:"Times New Roman";border-style:solid">
                 CONVENTION DE COLLABORATION ENTRE L’<span  style="color: #7030a0;"><span  style="color: #7030a0;">ESMC</span></span>
  ET LES FOURNISSEURS DE BIENS, PRODUITS ET SERVICES :<span >Utilisateurs, </span>Fournisseurs Spécifiques et Fournisseurs Externes pour la réalisation par le marché des 17 objectifs de développement durable</p>';
  

  $htmlpdf .= '
     <p>
       <strong><span  style="color: #7030a0;">ESMC</span> (Entreprise Sociale de Marché Commun) SARL U </strong>, au capital de 1 000 000 F CFA ; Siège social : Lomé (TOGO), Nukafu, Angle rue Sagouda, Kiyeou et Bandjeli, BP 30038, immatriculée au RCCM, sous le numéro TG-LOM 2014 B514, représentée par son Gérant <strong>Monsieur Essohamlon SAMA</strong> 
     </p>

  <p style="margin-top:-10px">
     <p style="margin-bottom:30px">
     Ci-après dénommée <strong>« L’EXPLOITANT DU PROGICIEL<span><span  style="color: #FF0000;">MCNP</span></span> »</strong> ou <strong>« L’EXPLOITANT »</strong> ou 
     <strong>«  L’EXPLOITANT <span><span  style="color: #7030a0;">ESMC</span></span> »</strong>
     </p>
     <p><strong>D’une part</strong></p>
  </p>';
  if (in_array(substr($codemembre,-1), array('P')) && $countdbsearchconventionmembre > 0){
    
        $nometprenoms = $dbsearchconventionmembre[0]->nom;
        $libelle_demeure = $dbsearchconventionmembre[0]->libelle_demeure;
        $quartier = $dbsearchconventionmembre[0]->quartier;
        $bp = $dbsearchconventionmembre[0]->boite_postale;
        $telephone = $dbsearchconventionmembre[0]->telephone;		
        $htmlpdf .= '<p><p><strong>Mme/M : </strong>'.$nometprenoms.'</p><p> <strong>Demeurant à (ville/village):</strong> '.$libelle_demeure.'</p><p><strong>Quartier: </strong>'.$quartier.'</p>';
  
        if ($bp != ""){
          $htmlpdf .= '<p><strong>BP:</strong> '.$bp.'</p>';
        }
  
        if ($bp == ""){
          $htmlpdf .= '<p><strong>BP:</strong> Aucune</p>';
        }
    
        $htmlpdf .= '<p><strong>Numéro de téléphone: </strong> '.$telephone.'</p> </p>';
    }
    if (in_array(substr($codemembre,-1), array('M')) && $countdbsearchconventionmembre > 0){
     if ($dbsearchconventionmembre[0]->civilite == "Etablissement"){
         $nometablissement = $dbsearchconventionmembre[0]->nom;
         $rue_etablissement = $dbsearchconventionmembre[0]->rue;
         $bp_etablissement = $dbsearchconventionmembre[0]->boite_postale;
         $libelle_demeure_etablissement = $dbsearchconventionmembre[0]->libelle_situation;
         $quartier_etablissement = $dbsearchconventionmembre[0]->quartier;
         $nom_representant_etablissement = $dbsearchconventionmembre[0]->nom_representant;
         $telephone_etablissement = $dbsearchconventionmembre[0]->telephone;
         $numcarteoperateur_etablissement = $dbsearchconventionmembre[0]->carte_operateur;
      

      $htmlpdf .= '<p>
                     <p>
                       <strong>Nom Etablissement : </strong>'.$nometablissement.'
                     </p>
                    <p>
                       <strong>Situé à (ville/village):</strong> '.$libelle_demeure_etablissement.'
                    </p>
                  <p>
                    <strong>Quartier: </strong>'.$quartier_etablissement.'
                    </p>
                  <p>
                    <strong>Rue de l\'établissement :</strong> '.$rue_etablissement.'
                  </p>
                  <p>
                    <strong>Représenté par Mme/M '.$nom_representant.'</strong>
                  </p>';
                  if ($bp_etablissement != ""){
                    $htmlpdf .= '<p><strong>BP:</strong> '.$bp_etablissement.'</p>';
                  }
            
                  if ($bp_etablissement == ""){
                    $htmlpdf .= '<p><strong>BP:</strong> Aucune</p>';
                  }
                  $htmlpdf .= '<p>
                    <strong>Numéro de téléphone:</strong>'.$telephone_etablissement.'
                  </p>
                  <p>
                    <strong>Numéro de la carte d\'opérateur économique:</strong> '.$numcarteoperateur_etablissement.'                 
                  </p></p>
                  ';

                }
                if ($dbsearchconventionmembre[0]->civilite == "Société" || $dbsearchconventionmembre[0]->civilite == "societe" ) {
                    $nomsociete = $dbsearchconventionmembre[0]->nom;
                    $nom_representant_societe = $dbsearchconventionmembre[0]->nom_representant;
                    $numrecipice_societe = $dbsearchconventionmembre[0]->numero_recipice;
                    $siege_societe = $dbsearchconventionmembre[0]->siege;
                    $htmlpdf .= '
                        <p><strong>Nom de la societe:</strong> '.$nomsociete.'</p>
                        <p><strong>Immatriculée au RCCM sous le numéro: </strong> '.$numrecipice_societe.'</p>
                        <p><strong>Le siège social est :</strong> '.$siege_societe.'</p>
                        <p><strong>Représenté par : </strong> '.$nom_representant_societe.'</p>
                    ';
                }

                if ($dbsearchconventionmembre[0]->civilite == "Groupement") {
                  $nomgroupement = $dbsearchconventionmembre[0]->nom;
                  $htmlpdf .= '
                      <p><strong>Nom du groupement:</strong> '.$nomgroupement.'</p>';
               }

               if ($dbsearchconventionmembre[0]->civilite == "Reseau"  || $dbsearchconventionmembre[0]->civilite == "RÃ©seau") {
                $nomreseau = $dbsearchconventionmembre[0]->nom;
                $htmlpdf .= '
                    <p><strong>Nom du groupement:</strong> '.$nomreseau.'</p>';
                }


                if ($dbsearchconventionmembre[0]->civilite == "ONG") {
                  $nomong = $dbsearchconventionmembre[0]->nom;
                  $htmlpdf .= '
                      <p><strong>Nom du groupement:</strong> '.$nomong.'</p>';
                }
  

  }
  
  $htmlpdf .= '
  <p><strong>D’autre part</strong></p>
  
  <p>Il a été préalablement exposé ce qui suit :</p>
  
  <p style="text-align:center;text-decoration:underline;font-size:25px;"> PREAMBULE </p>

  <p>Créée le 30 Juin 2014,  l’Entreprise Sociale de Marché Commun (<span  style="color: #7030a0;"><span  style="color: #7030a0;">ESMC</span></span>) a pour objet : <i>« conseils en organisation des affaires commerciales, recherche et développement de logiciels, exploitation du progiciel <span  style="color: #FF0000;">MCNP</span>, commerce sur internet »</i>. 
  L’<span  style="color: #7030a0;">ESMC</span>, se basant sur son objet ci-dessus, met en place la <strong>Production Commune</strong> à travers le Progiciel du nom de  <span  style="color: #FF0000;">MCNP</span> (Marché de Crédit en Nature Pérenne). 
  </p>';



  $htmlpdf .= '

  <p style="margin-top:20px">
  Le Progiciel <span  style="color: #FF0000;">MCNP</span> est une mise en commun d’une centrale d’achat, d’une centrale de production, d’une centrale de transformation et d’une centrale de vente. A ces quatre centrales sont rattachées des <strong>Comptes d’Activités Marchandes</strong> à usage personnel pour une action commune et coordonnée du marché commun, c’est-à-dire la Production Commune. 
  </p>

  <p>
  Ce dispositif vient en complément au marché classique. En effet, selon le model <span  style="color: #7030a0;">ESMC</span>, ce qui manque à l’économie, c’est rien qu’une action commune qui se résume à l’achat et vente réciproques entre les acteurs de l’industrie,  du commerce et leur clientèle composée de tout le reste des personnes physiques et morales par tout dans le monde. Pour cela, où qu’elle soit partout dans le monde, cette clientèle est obligée de disposer de son industrie et de son commerce pour être capable de produire la contrepartie de ce qu’elle achète auprès des autres. 
  </p>

  <p>  
    C’est une innovation qui a, pour effet de permettre à chacun, sans exclusion, d’être un opérateur économique formel, solvable et une clientèle fidèle de façon durable au profit de tous les opérateurs économiques, grâce à son usage personnel de Compte Marchand rattaché aux quatre centrales sur la plateforme <span  style="color: #7030a0;">ESMC</span>. 
  </p>
  <p>
    Cela a, par la même occasion, pour effet de réduire les coûts de production et d’assurer à tous l’action commune qui élimine les faibles revenus, le chômage et l’extrême pauvreté. 
  </p>';

  $htmlpdf .= '
  <p>
    L’ère du progrès industriel, des Technologie de l’Information et de la Communication (TIC) et de l’intelligence artificielle notamment la robotique industrielle à grande vitesse, conduisent le monde à une capacité croissante de productivité jusqu’ici inégalée. Paradoxalement, le monde est confronté au manque généralisé de clientèle solvable, face à cette capacité croissante de productivité, tandis que les faibles revenus, le chômage et la pauvreté gagnent de plus en plus du terrain. 
  </p>

  <p>
  C’est dans ce contexte que, succédant aux OMD mis en place en 2000, à New York, le 25 septembre 2015, les 193 Etats-membres de l’Organisation des Nations Unies (ONU) ont adopté dix-sept (17) Objectifs de Développement Durable (ODD), qui sont des objectifs universels visant un développement humain intégral « sans laisser personne de côté » à l’horizon 2030. A cet effet, un appel a été lancé à tous : gouvernants, société civile, secteur privé et toute personne de bonne volonté de chaque nation pour œuvrer ensemble pour l’atteinte desdits objectifs. Pour ce faire, vingt-et-un (21) pays pilotes volontaires dont le Togo ont été choisis pour la mise en œuvre de ce Programme des Nations Unies. 
  </p>

    <p>
      En réponse à cet appel et soucieuse de jouer sa partition, l’<span  style="color: #7030a0;">ESMC</span>, bénéficiant du cadre de la politique de libéralisation et de promotion des activités socio-économiques établi par les Gouvernements visant la réalisation de ces objectifs onusiens, et, s’inscrivant particulièrement dans l’ODD N° 9 : « Mettre en place une infrastructure résiliente, promouvoir une industrialisation soutenable qui profite à tous et encourager l’innovation », entend contribuer par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span>, à la mise en œuvre effective des 17 ODD.
    </p>
     <p>
      <strong>
       QU’EST-CE QUE L’EXPLOITATION DU PROGICIEL 
        <span  style="color: #FF0000;">MCNP</span> ?
      </strong>
     </p>';

     $htmlpdf .= '<p>
   L’exploitation du Progiciel <span  style="color: #FF0000;">MCNP</span> est la gestion numérique de l’ensemble des activités marchandes regroupées en Centrales Communes d’Achat, de Vente, de Production et de Transformation que confère l’usage de <strong>supports marchands</strong> <span  style="color: #FF0000;">MCNP</span>, Bons et Ordres de Prélèvement Irrévocable. C’est une activité de marché portée par les TIC, en vue des traitements instantanés et dynamiques des échanges. Le Progiciel <span  style="color: #FF0000;">MCNP</span> est une technologie qui est destinée à apporter à l’économie de marché actuelle des gains de productivité jusqu’ici insoupçonnés.
  </p>

  <p>
   <strong>
    GAINS DE PRODUCTIVITE LIES A L’EXPLOITATION DU PROGICIEL <span  style="color: #FF0000;">MCNP</span> SUR LA PLATEFORME <span  style="color: #7030a0;">ESMC</span>
   </strong>
  </p>
  
  <p style="margin-top:1">
  Le gain de productivité est la chose que l’on ne peut obtenir sans le moyen qui en est la cause. Le progiciel <span  style="color: #FF0000;">MCNP</span> est le moyen qui est la cause des gains de productivité de la Production Commune. Cependant, sur la plateforme <span  style="color: #7030a0;">ESMC</span>, tout gain de productivité est compté, non pas en argent mais en gains en nature, c’est-à-dire en biens, en produits et en services additionnels. 
  L’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> est la cause qui produit donc, des effets-gains de productivité économique par la Production Commune sur la plateforme <span  style="color: #7030a0;">ESMC</span> dont voici quelques-uns : 
  </p>

  <p style="text-decoration:underline">
    <strong>
      <i>Effet entonnoir</i>
    </strong>
  </p>';

  $htmlpdf .= '
  <p>
    En utilisant les bons <span  style="color: #FF0000;">MCNP</span> pour leurs achats immédiats et futurs, les acheteurs concèdent à la plateforme <span  style="color: #7030a0;">ESMC</span> le mode de payement d’argent par avance, tandis qu’en utilisant les Ordres de Prélèvement Irrévocable (OPI) <span  style="color: #FF0000;">MCNP</span>, les vendeurs concèdent à la plateforme <span  style="color: #7030a0;">ESMC</span> des délais de <strong>payement fractionné</strong>.
  </p>';

  $htmlpdf .= '

  <p>
    L’achat à travers le payement d’argent par avance couplé à la vente contre le mode de payement fractionné fait un effet entonnoir par rapport à l’entrée et à la  sortie de l’argent. Par exemple, un souscripteur paye par avance <strong>224</strong> pour la consommation mensuelle de <strong>10</strong>. Le fournisseur du bien affecté par cette consommation de <strong>10</strong> par période de trente jours ouvrés est payé par fraction de <strong>10/12</strong>. L’effet entonnoir à la première période est de : <strong>224</strong> à l’entrée contre <strong>0.8</strong>, c’est-à-dire <strong>10/12</strong> à la sortie. La sortie devient le double à la période suivante, puis le triple, ainsi de suite jusqu’à se stabiliser à <strong>10</strong> à la douzième période, où l’entrée <strong>(224)</strong>, au lieu de servir à payer cette sortie va, plutôt, produire, en s’amortissant, de façon indéterminée la contrepartie de la sortie de <strong>10</strong>, en biens, produits et services. 
  </p>
  
  <p>
    Par cet effet entonnoir, l’<span  style="color: #7030a0;">ESMC</span> dispose de l’argent sur ses comptes en banque grâce aux payements d’avance concédés à lui par ses acheteurs pour <strong>cautionner</strong> ses achats à crédit auprès de ses grands fournisseurs et rembourser les montants fractionnés de tous les OPI à ses vendeurs à chaque échéance. C’est cela les gains de productivité d’effet entonnoir rendus possibles par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> qui permet à la plateforme <span  style="color: #7030a0;">ESMC</span> de disposer des ressources propres, en vue de  constituer des cautions robustes pour la Production Commune, grâce à l’entrée de beaucoup d’argent sur ses comptes bancaires, contre peu d’argent qui en sort par fraction.
  </p>
  

  <p style="text-decoration:underline">
    <strong>
      <i>Effet  levier</i>
    </strong>
  </p>
  <p>
    L’effet entonnoir, c’est également un effet <strong>levier</strong> de marchandises pour la production, la transformation et la distribution sur la plateforme <span  style="color: #7030a0;">ESMC</span>. Par exemple, pour implanter les industries de la Production Commune, la plateforme <span  style="color: #7030a0;">ESMC</span> émet aux fournisseurs des OPI dont les échéances sont assurées par l’argent cumulé par l’effet entonnoir susmentionné. La  plateforme <span  style="color: #7030a0;">ESMC</span> dispose alors, de délais de payements fractionnés concédés à lui par ces fournisseurs pour acheter, produire, transformer et distribuer à l’échelle de dernier ressort. C’est l’effet levier qui permet à la plateforme de lever des biens, produits et services pour créer toutes formes d’industries partout où besoin est, sans rencontrer la moindre résistance liée au manque d’argent. C’est cela les gains de productivité d’effet levier de biens, produits et services rendus possibles par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  </p>';

  $htmlpdf .= '
  <p style="text-decoration:underline">
    <strong>
     <i>Effet réciprocité des achats et des ventes</i>
    </strong>
  </p>
  <p>
  La possibilité d’utiliser les OPI sans attendre forcément leur échéance pour commander des biens, des produits et des services sur la plateforme ramène tous les achats des fournisseurs détenteurs des OPI sur les centrales de la Production Commune. La réduction des coûts que concède la centrale d’achat commune à ses acheteurs qui payent au comptant leur consommation et ceux qui prépayent pour le renouvellement de leur consommation à durée déterminée ou non, fait également ramener l’argent de montant supérieur ou égal au montant de l’argent des OPI encaissés par les fournisseurs de la plateforme.  Exemple : Une industrie vend des produits sur la plateforme contre OPI. Elle utilise une partie des OPI sans attendre les échéances pour se faire livrer par commande des matières premières et, l’autre partie, après encaissement à l’échéance,  pour acheter à moindre coût son équipement sur la plateforme. L’équivalant de l’argent issu des OPI qu’il a encaissé revient alors sur la plateforme. C’est l’effet réciprocité des achats et des ventes entre la plateforme et ses fournisseurs. Acheter des marchandises à crédit auprès de ses fournisseurs pour produire, transformer et leur vendre ses produits en retour grâce aux avantages exceptionnels que l’on offre à ses clients est un pouvoir de bouclage du circuit économique unique en son genre que le <span  style="color: #FF0000;">MCNP</span> s’est octroyé. Par cet effet, la plateforme <span  style="color: #7030a0;">ESMC</span> constitue le cercle vertueux qui engendre à plus ou moins long terme, sa solvabilité absolue ou sa balance commerciale à somme nulle. C’est cela qui, aussi engendre des gains de productivité, d’où l’effet gains de productivité dits réciprocité des achats et des ventes, rendus possibles par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  </p>

  <p style="text-decoration:underline">
    <strong>
      <i>Effet achat et vente en dernier ressort</i>
    </strong>
  </p>
  <p>
  Les centrales communes d’achat, de vente, de transformation et de production permettent aux Utilisateurs d’agir ensemble par le biais de la plateforme pour acheter à tout vendeur en centrale et vendre à tout acheteur en centrale. Exemple : Tous les utilisateurs de Comptes Marchands <span  style="color: #FF0000;">MCNP</span> consomment de l’électricité par le biais de leur Bons de Consommation. Seule la plateforme paye leurs factures au fournisseur de l’électricité au moyen de l’argent.                               Ce fournisseur, par souci de compétitivité paye sur la plateforme <span  style="color: #7030a0;">ESMC</span> ses fournisseurs à moindre coût. Ces derniers qui, pour ce faire, doivent disposer de leur Compte Marchand et, pour les mêmes raisons de compétitivité vont, sur la plateforme, assurer également leurs achats à moindre coût. C’est l’effet achat et vente en dernier ressort face  aux fournisseurs, effet qui ajoute des gains de productivité aux précédents sur la plateforme. En effet, cela permet à la plateforme <span  style="color: #7030a0;">ESMC</span> de disposer de toutes les marges de manœuvre pour ajuster ses prix de vente à la réduction des coûts faite à ses clients. Ayant la capacité absolue d’ajuster ses prix de vente à la réduction des coûts faite à ses clients, la plateforme <span  style="color: #7030a0;">ESMC</span> se dote de la main invisible régulatrice de son marché qui lui évite toute possibilité de faillite. C’est cela les gains de productivité d’effet achat et vente en dernier ressort rendus possibles par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> sur la plateforme <span  style="color: #7030a0;">ESMC</span>. 
  </p>';

  $htmlpdf .= '
  <p style="text-decoration:underline">
    <strong>
     <i>Effet économie de marché numérisé</i>
    </strong>
  </p>
  <p>
  Le traitement instantané et dynamique des échanges basés sur les Supports Marchands <span  style="color: #FF0000;">MCNP</span> est un relais qui permet à l’argent de se cumuler sur les comptes bancaires de la plateforme <span  style="color: #7030a0;">ESMC</span> auprès des banques. Tandis que les Supports Marchands <span  style="color: #FF0000;">MCNP</span> permettent aux échanges de se dérouler convenablement, l’argent de plus en plus robuste sur les comptes bancaires de la plateforme lui confère un pouvoir d’achat sans débourser de l’espèce. Exemple : L’argent sur les comptes bancaires de la plateforme a servi de garantie pour une lettre de crédit à un fournisseur de pétrole contre une commande ferme ou contre le payement d’avance fait par des acheteurs sur la plateforme <span  style="color: #7030a0;">ESMC</span>. Pour ce faire, il a fallu émettre des Bons et des OPI respectivement aux acheteurs contre leur argent et aux vendeurs contre leurs marchandises. Ceci a permis ou va permettre d’assurer leurs échanges en l’absence de l’argent. Cet argent disponible sur les comptes bancaires assure au même moment les payements au fournisseur du pétrole selon les clauses de payements morcelés et domiciliés auprès des banques grâce à la caution sur les comptes bancaires de l’<span  style="color: #7030a0;">ESMC</span>.  Ce double rôle de l’argent sur la plateforme est dû à la numérisation ou à l’informatisation du  marché qui tisse un lien direct  entre les Supports Marchands <span  style="color: #FF0000;">MCNP</span> et l’argent sur les comptes de l’<span  style="color: #7030a0;">ESMC</span> auprès des banques. C’est l’effet économie de marché numérisé. Cet effet permet à l’<span  style="color: #7030a0;">ESMC</span> de dépasser les limites du pouvoir d’achat basé sur l’argent pour s’offrir grâce aux TIC des biens, des produits et des services à coûts d’argent nuls (à crédit assorti de solvabilité absolue). Ceci, parce qu’elle ne payera le prix de ses marchandises de façon morcelée par voie d’OPI aux fournisseurs que lorsque l’acheteur, l’importateur ou le grossiste qui a payé l’argent par avance, les aura consommées réellement. De plus, comme il a été démontré plus haut, par souci de compétitivité des fournisseurs, ces OPI peuvent être ramenés sur la plateforme par leur usage direct ou en argent après leur encaissement. C’est cela les gains de productivité d’effet économie de marché numérisé rendus possibles par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span>, gains de productivité qui  s’ajoutent aux précédents sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  </p>
  

  <p style="text-decoration:underline">
    <strong>
      <i>Effet économie d’échelle</i>
    </strong>
  </p>
  <p>
    Plus le nombre d’Utilisateurs de Comptes Marchands <span  style="color: #FF0000;">MCNP</span> grandit, plus la Production Commune est optimale, plus ses coûts marginaux tendent vers zéro, plus les profits de la plateforme <span  style="color: #7030a0;">ESMC</span> sont de plus en plus grands. C’est l’effet économie d’échelle. Exemple : Une industrie de la plateforme qui fonctionne sur un régime de 100 pour produire 1000, si elle n’a qu’une demande de 300 pour le même régime de 100, elle aura un manque à gagner de 700. Le coût marginal de 700 serait égal à 0, si elle avait une demande de 1000. La vente en dernier ressort ayant pour vocation de converger le grand nombre possible de demandes vers la plateforme <span  style="color: #7030a0;">ESMC</span>, cela lui permet à moyen et long termes d’aboutir aux coûts marginaux qui tendent vers zéro. Ceci se fera dans tous les domaines d’investissement industriels et commerciaux, du fait qu’elle ait une ambition multinationale et une couverture universelle ne laissant personne de côté. Au moment où les marges bénéficiaires qui sont obtenues n’engendrent plus de coûts additionnels, la plateforme gagnera de plus en plus de marges tout en dépensant de moins en moins d’argent. C’est cela les gains de productivité d’effet économie d’échelle qui s’ajoutent également aux précédents dont la cause est l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  </p>

  <p style="text-decoration:underline">
    <strong>
      <i>Effet économie de richesses immatérielles inépuisables</i>
    </strong>
  </p>';
  
  $htmlpdf .= '
  <p>Le progiciel <span  style="color: #FF0000;">MCNP</span> est l‘intelligence artificielle porteuse des idées et mesures qui fondent les principes de la participation de tous aux activités du marché pour la répartition des richesses sans laisser personne de   côté. Il est également l’artificiel savoir-faire relatif aux Supports Marchands de comptes, d’échanges et de réserve de valeurs, artificiel savoir-faire qui était exclusivement assuré par l’argent. Il est enfin, le pouvoir-faire artificiel capable de former toutes sortes d’industries créatrices de biens, de produits et de services, chose qui était exclusivement dévolue à la monnaie du secteur bancaire et financier classiques. 
  L’intelligence artificielle de la répartition optimale des richesses, le savoir-faire artificiel  de Supports Marchands de compte, de Supports Marchands d’échange et de Supports Marchands de réserve qui aboutit au pouvoir-faire artificiel, formateur de l’industrie, constitue la richesse immatérielle ayant la particularité d’être inépuisable. Exemple : Le progiciel <span  style="color: #FF0000;">MCNP</span> mis en exploitation est à la disposition de toutes les communautés du monde. Chaque localité dans le monde est appelée à l’adopter pour le développement durable sans aucune possibilité d’user ou d’épuiser le progiciel <span  style="color: #FF0000;">MCNP</span>. Le savoir, le savoir-faire et le pouvoir-faire que représente le progiciel <span  style="color: #FF0000;">MCNP</span> sont diffusés au monde pour toujours. C’est l’effet économie de richesses immatérielles inépuisables. Cet effet permet à la plateforme <span  style="color: #7030a0;">ESMC</span> de disposer de façon inépuisable la capacité de répartition des richesses sans laisser personne de côté, la capacité de faire le marché au-delà des limites de l’argent et la capacité de produire suffisamment de façon optimale et efficiente les biens, les produits et les services par la voie industrielle. C’est cela les gains de productivité de l’économie de richesses immatérielles inépuisables rendus possibles par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> qui s’ajoutent aux précédents sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  </p>
  
  <p style="text-decoration:underline">
    <strong>
      <i>Effet modèle économique de gratuité rentable</i>
    </strong>
  </p>
  <p>
    A côté des avantages accordés aux souscripteurs acheteurs, vendeurs, producteurs et transformateurs sur la plateforme <span  style="color: #7030a0;">ESMC</span>, avantages qui semblent être de la gratuité, se trouvent en filigrane : 
    <ul>
      <li>les frais de souscriptions aux Comptes Marchands à payer par toutes personnes physiques et morales, membres des communautés dont la plateforme <span  style="color: #7030a0;">ESMC</span> constitue un outil solution pour les résultats attendus des 17 ODD dans tous les pays du monde. Ces frais sont équivalants à 70 000 FCFA dans les pays à pouvoir d’achat faible (frais plus élevés selon que l’on se trouve dans les pays à pouvoir d’achat moyen ou dans les pays à pouvoir d’achat fort),</li>
      <li>les frais d’exploitation tirés sur chaque transaction des Utilisateurs,</li>
      <li>les frais de la prestation de publicité facturée aux Utilisateurs bénéficiaires de la publicité sur la plateforme,</li>
      <li>les profits de l’exploitation de données des Utilisateurs en guise du BIG DATA et </li>
      <li>les profits sous la forme d’infrastructures industrielles de la Production Commune après leur amortissement. </li>
    </ul>
    Tous ces gains ne sont obtenus que par la gratuité que semble offrir la plateforme aux Utilisateurs. Exemple : S’il n’y avait pas des avantages concédés immédiatement aux acheteurs et aux vendeurs, aucune somme ne serait payée sur les comptes de la plateforme <span  style="color: #7030a0;">ESMC</span>, aucun support marchand ne peut être émis, donc aucun des gains de productivité sus indiqués ne serait réalisable. La plateforme amène les Utilisateurs à rechercher leurs propres avantages immédiats et par ce fait, ils réalisent indirectement, en contrepartie à court, à moyen et à long terme, des gains de productivité sus mentionnés. C’est comme la plateforme Google qui offre un moteur de recherche gratuit à ses utilisateurs. Malgré la gratuité apparente de son activité, elle est l’une des entreprises les plus cotées sur les marchés boursiers. C’est l’effet modèle économique de gratuité rentable. Cet effet permet à la plateforme <span  style="color: #7030a0;">ESMC</span> d’anticiper le partage des gains de sa productivité aux Utilisateurs sous les formes ci-dessous mentionnées par rapport à leur réalisation effective. C’est cela l’effet gains de productivité de modèle économique de gratuité rentable rendus possibles par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> qui a entrainé les précédents sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  </p>

  <p>
    PARTAGE DES GAINS DE PRODUCTIVITE DE L’EXPLOITATION DU PROGICIEL <span  style="color: #FF0000;">MCNP</span> SUR LA PLATEFORME <span  style="color: #7030a0;">ESMC</span></p>
  <p>Etre Utilisateur de Compte Marchand <span  style="color: #FF0000;">MCNP</span>, c’est participer aux activités des centrales communes d’achat, de production et de transformation qui se traduisent par la vente sur la plateforme <span  style="color: #7030a0;">ESMC</span>, de la même manière que toute activité sur le marché finit par la distribution donc par la vente. C’est à ce titre que le progiciel <span  style="color: #FF0000;">MCNP</span> pose à toute personne physique et morale, les bases d’un type nouveau de pouvoir, le pouvoir de vente commune. Ce pouvoir de vente est fondé sur le rattachement aux  quatre centrales de la Production Commune des Comptes d’Activités Marchandes individuels, accessibles à toutes personnes physiques et morales sur la plateforme <span  style="color: #7030a0;">ESMC</span>. En effet les centrales de la Production Commune jouent les rôles de pouvoir de vente et d’achat en dernier ressort en faveur de tous ses Utilisateurs. 
   Pour cela la somme des gains de productivité de l’effet entonnoir, de l’effet levier, de l’effet réciprocité des achats et des ventes, de l’effet achat et vente en dernier ressort, de l’effet économie de marché numérisé, de l’effet économie d’échelle, de l’effet économie de richesses immatérielles inépuisables et de l’effet modèle économique de gratuité rentable, tous regroupés sont directement partagés aux souscripteurs de la manière suivante :
  
  <ul>
        <li>Le souscripteur aux Bons d’Achat non récurrent bénéficie des réductions des coûts sur ses achats, </li>
        <li>Le souscripteur aux Bons d’Achat récurrent bénéficie d’un renouvellement de Bons de Consommation au-delà des montants de sa souscription et</li>
        <li>Le souscripteur au mode de vente des marchandises contre le payement fractionné bénéficie d’une augmentation du montant de ses ventes. </li>
  </ul>
  </p>
  
  ';
  
  $htmlpdf .= '
  <p>LE POUVOIR DE VENTE COMMUNE, FONDEMENT DE LA SOLVABILITE ABSOLUE DE TOUT TITULAIRE DE COMPTE D’ACTIVITES MARCHANDES <span  style="color: #FF0000;">MCNP</span></p>
  <ul>
        <li>Le Bon de Consommation issu du Bon d’Achat récurrent a la particularité d’être renouvelable chaque trente jours, à durée déterminée ou indéterminée. </li>
        <li>Les OPI au nombre de 12 minimum sont émis chaque trente jours ouvrés.</li>
  </ul>

  <p>La possibilité de prélever les redevances sur les Bons de Consommation récurrente et sur les OPI à leur échéance garantit le remboursement du fonds de commerce à celui qui prête, crédite ou alloue les montants de souscriptions aux activités sur la plateforme <span  style="color: #7030a0;">ESMC</span> pour le compte de tiers. Ceci pose un fondement dont les effets positifs peuvent aisément atteindre tous les êtres humains sur la terre. En effet, la répartition universelle du pouvoir de vente peut facilement se réaliser grâce aux fonds d’investissement, aux fonds d’aide au développement et surtout, au pouvoir de création monétaire dont dispose toute communauté à travers son secteur bancaire. Ces fonds et le crédit bancaire peuvent alors être utilisés pour la participation de tous aux activités génératrices de revenus non négligeables grâce à la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>

  <p>ACTIVITES INTEGREES DANS L’EXPLOITATION DU PROGICIEL <span  style="color: #FF0000;">MCNP</span> EN FAVEUR DES COMMUNAUTES D’UTILISATEURS</p>
  <p>Plusieurs activités sont conçues à l’endroit de toute communauté pour doter chacun de ses membres de son pouvoir de vente, sans laisser personne de côté, dans le cadre du partage des gains de productivité de la Production Commune sur la plateforme <span  style="color: #7030a0;">ESMC</span>.  Il s’agit de :</p>

  <p style="text-decoration:underline"><strong><i>Activités de souscriptions pour soi et pour tiers aux comptes marchands et aux bons de consommation <span  style="color: #FF0000;">MCNP</span></i></strong></p>
  <p>Chaque communauté, en dehors de la souscription autonome de ceux qui, en son sein, disposent de leurs propres moyens (souscriptions pour soi), peut mobiliser ses sources de financement : épargne locale, crédit bancaire aux mains de ses banques, bailleurs de fonds, fonds d’aide au développement,  fonds transférés par sa diaspora au pays et l’épargne étrangère pour souscrire aux Comptes Marchands et aux Bons de Consommation récurrente pour tous ses membres sans laisser personne de côté. C’est l’activité dénommée souscriptions pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation <span  style="color: #FF0000;">MCNP</span>. </p>
  <p>La possibilité de prélever les créances sur les Bons de Consommation récurrente sur le Compte Marchand de tout utilisateur garantit à tout souscripteur pour tiers le remboursement des montants de ses souscriptions. </p>

  <p style="text-decoration:underline"><strong><i>Activités Acheteurs-Revendeurs en ligne contre OPI <span  style="color: #FF0000;">MCNP</span></i></strong></p>
  <p>Toute personne de chaque communauté peut souscrire en ligne aux Bons d’Achat neutres en tant qu’acheteur-revendeur auprès des Centrales d’Achat et Vente Communes, pour y dégager des bénéfices, à la fois sur son achat en mode d’achat non récurrent et sur sa vente contre payement fractionné par voie d’OPI. C’est l’activité dénommée acheteurs-revendeurs en ligne contre OPI. Elle est mise en place pour la participation de tous au commerce sur internet sur la plateforme <span  style="color: #7030a0;">ESMC</span>. </p>
  <p>La possibilité de prélever ses créances sur les OPI issus de cette activité garantit le remboursement d’éventuels prêts bancaires en faveur des acheteurs-revendeurs, clients des banques partenaires de la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>';
  
  $htmlpdf .= '
  <p style="text-decoration:underline"><strong><i>Activités d’achat- vente réciproques</i></strong></p>
  <p>Tout opérateur économique de chaque communauté, pour assurer ses achats et ses ventes, signe sur la plateforme <span  style="color: #7030a0;">ESMC</span>, son Engagement de Livraison Irrévocable (ELI) contre l’émission anticipée ou non de Bons d’Achat neutres (BAn), de Bons d’Achat Internes (BAi) et d’Ordre de Prélèvement Irrévocable (OPI). Ces Supports Marchands <span  style="color: #FF0000;">MCNP</span> seront utilisés pour : obtenir de l’argent auprès des souscripteurs (cas du BAn), sur les comptes bancaires de l’<span  style="color: #7030a0;">ESMC</span> auprès des banques à chaque échéance de 30 jours, faire au-delà de la plateforme <span  style="color: #7030a0;">ESMC</span> ses commandes, ses consommations directes ou honorer ses engagements vis-à-vis de ses créanciers (cas des OPI) et acquérir en réciproque sur la plateforme <span  style="color: #7030a0;">ESMC</span> des marchandises et les services (cas du BAi). C’est l’activité  dénommée achat-vente réciproques. Elle constitue pour chaque acteur économique, le procédé idéal pour équilibrer ses ventes à ses achats en guise de preuve de sa solvabilité vis-à-vis de tous.</p>
  

  <p style="text-decoration:underline"><strong><i>Activités de prestataires de la Production Commune contre OPI</i></strong></p>
  <p>Dans le souci de réaliser le plein emploi des ressources humaines et matérielles, pour le compte de la Production Commune, toute communauté peut mobiliser tous les projets utiles en son sein et le travail aux mains de tout travailleur en chômage, par les Comptes Marchands des Prestataires de la Production Commune personnes physiques, personnes morales. C’est l’activité dénommée prestataires de la Production Commune contre OPI. Ces prestataires adoptent le payement fractionné par voie d’OPI. 
  Dans le but de la bonne gouvernance, les <strong>prestataires de la Production Commune </strong>contre OPI sont les coresponsables des industries et entreprises de la Production Commune qui abritent leurs activités sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  </p>

  <p>LOCALISATION DES 17 ODD DANS CHAQUE COMMUNAUTE </p>
  <p>Toutes ses activités ci-dessus mentionnées ont pour finalité de permettre à chaque communauté de mobiliser ses forces productrices pour l’atteinte des 17 Objectifs de Développement Durable. L’appropriation locale de l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> sur la plateforme <span  style="color: #7030a0;">ESMC</span> pour  ces objectifs visera les quatre  volets suivants :</p>

  <p style="text-decoration:underline"><strong><i>ODD volet social</i></strong></p>
  <p>L’activité de souscriptions pour tiers aux Comptes Marchands et aux Bons de Consommation <span  style="color: #FF0000;">MCNP</span> va donner l’accès au montant de souscriptions au pouvoir d’achat récurrent à durée indéterminée pour tous. Cette souscription doit s’orienter surtout vers l’ensemble des Objectifs de Développement Durable qui visent le volet social. </p>

  <p style="text-decoration:underline"><strong><i>ODD volet économique</i></strong></p>
  <p>L’accès au travail décent pour tous, l’accès aux activités commerciales pour tous, et l’accès à la mévente zéro de ses marchandises pour tout vendeur va entraîner une mobilisation générale des forces productrices. Cette mobilisation générale des ressources humaines, matérielles et financières, facteurs de production doit s’orienter vers les Objectifs de Développement Durable qui visent le volet économique. </p>';

  $htmlpdf .= '

  <p style="text-decoration:underline"><strong><i>ODD volet environnement</i></strong></p>
  <p>La technologie <span  style="color: #FF0000;">MCNP</span> permet à chaque communauté d’agir en action commune dans l’approche de l’appropriation et localisation des 17 Objectifs de Développement Durable. Cette gestion d’action commune prend en compte le volet environnemental des ODD.</p>

  <p style="text-decoration:underline"><strong><i>ODD volet gouvernance et partenariat</i></strong></p>
  <p>Dans le contexte de la réciprocité des achats et des ventes sur la plateforme <span  style="color: #7030a0;">ESMC</span>, l’équilibre de la balance commerciale entre les communautés est systématique et structurelle grâce aux centrales communes sur la plateforme <span  style="color: #7030a0;">ESMC</span>. Il n’y aura plus de communauté excédentaire face à une communauté déficitaire puisque ce sont les excédents des uns qui font les déficits des autres.  Une gouvernance locale-globale va s’instaurer et va aboutir au partenariat automatique entre les communautés pour répondre au volet gouvernance et partenariat visé par les ODD. </p>

  <p>
  Les quatre volets des ODD à savoir, social, économique, environnement puis gouvernance et partenariat  se voient alors pris en compte par l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> sur la plateforme <span  style="color: #7030a0;">ESMC</span>. 
  </p>

  <p>LA SOLVABILITE DE L’EXPLOITATION DU PROGICIEL <span  style="color: #FF0000;">MCNP</span> SUR LA PLATEFORME <span  style="color: #7030a0;">ESMC</span></p>
  <p>Pour que l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> sur la plateforme <span  style="color: #7030a0;">ESMC</span> soit viable ou durable, il faut qu’elle soit solvable. Pour qu’elle soit solvable il faut qu’elle respecte des règles suivantes </p>
  <p><strong>Première règle :</strong> La règle de base est que l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span> (Marché de Crédit en Nature Pérenne) se rapporte à la Production Commune. La Production Commune requiert quatre (04) centrales marchandes en ligne (Centrale d’Achat Commune, Centrale de Production Commune, Centrale de Transformation Commune et Centrale de Vente Commune). A ces centrales sont rattachés des Comptes d’Activités Marchandes personnels universels dans lesquels circulent des Supports Marchands <span  style="color: #FF0000;">MCNP</span>. Ce dispositif de la Production Commune est destiné à l’usage des personnes physiques ou morales, dénommées ‘’Utilisateurs’’. </p>
  <p>Les Supports Marchands <span  style="color: #FF0000;">MCNP</span> sont les suivants : </p>
  <ul>
        <li>Bon d’Achat neutre (BAn), </li>
        <li>Bon de Consommation récurrente (BCr), </li>
        <li>Bon de Consommation non récurrente (BCnr), </li>
        <li>Bon de Livraison (BL), </li>
        <li>Bon de Commande (BC), </li>
        <li>Bon d’Achat interne (BAi), </li>
        <li>Ordre de Prélèvement Irrévocable (OPI), </li>
        <li>Engagement de livraison irrévocable (ELI) et </li>
        <li>Cartes.</li>
  </ul>
  <p><strong>Deuxième règle :</strong> L’<span  style="color: #7030a0;">ESMC</span> est une entreprise innovante dans le domaine des TIC et surtout celui du commerce sur internet. Elle s’est engagée dans l’économie de connaissance en se dotant d’une nouvelle forme d’organisation des affaires commerciales. Elle se base sur la recherche & le développement de logiciel en l’occurrence, le progiciel <span  style="color: #FF0000;">MCNP</span>. Le progiciel <span  style="color: #FF0000;">MCNP</span> a déjà à son actif 182 marques déposées dont l’<span  style="color: #7030a0;">ESMC</span> détient les certificats. A ce titre, elle met, comme produits, à la disposition de ses souscripteurs abonnés, c’est-à-dire  ses Utilisateurs, ses Comptes  d’Activités Marchandes pour leur servir à faire ses quatre (04) Activités Marchandes suivantes : </p>
  <ul>
  <li>Souscriptions pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation, </li>
  <li>Acheteurs-Revendeurs en ligne contre OPI, </li>
  <li>Achat-Vente Réciproques et</li>
  <li>Prestataires de la Production Commune. </li>
  </ul>
  <p><strong>Troisième règle :</strong> Toutes ces Activités de l’<span  style="color: #7030a0;">ESMC</span> se font dans le cadre exclusif du commerce de biens, de produits et de services réels, c’est-à-dire que ces activités se font dans le cadre exclusif d’achat, de vente  ou de revente (échange) de marchandises réelles sur sa plateforme.  
  Toute vente sur la plateforme est faite à l’<span  style="color: #7030a0;">ESMC</span> en dernier ressort par ses utilisateurs vendeurs et revendeurs. C’est l’<span  style="color: #7030a0;">ESMC</span> qui aussi, en dernier ressort, revend les Biens, les Produits et les Services à tout utilisateur acheteur, puisque c’est elle qui encaisse le payement de tout acheteur et paye tout  vendeur sur sa plateforme.
  </p>
  <p><strong>Quatrième règle : </strong> Pour revendre sur la plateforme <span  style="color: #7030a0;">ESMC</span>, les souscripteurs qui n’ont pas préalablement leurs marchandises sont d’abord obligés de les y acheter avec leurs fonds. Quant aux souscripteurs qui disposent préalablement de leurs biens, de leurs produits ou de leurs services, ils les y vendent directement. </p>
  <p>Aux premiers sont destinées les Activités :</p>
  <p>
  <ul>
        <li>Souscriptions pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation et </li>
        <li>Acheteurs-Revendeurs en ligne contre OPI. </li>
      
  </ul>
  </p>';
  $htmlpdf .= '
  <p>Et aux seconds sont destinées les activités : 
  <ul>
        <li>Achat-Vente Réciproques et</li>
        <li>Prestataires de la Production Commune. </li>
  </ul>
  </p>
  <p><strong>Cinquième règle :</strong> La cible commerciale prioritaire de l’<span  style="color: #7030a0;">ESMC</span> est toute communauté ayant souscrit aux 17 ODD que le monde s’est assigné d’ici à 2030. Ceci, à cause des vertus de l’<span  style="color: #7030a0;">ESMC</span> :  </p>
  <ul>
  <li>Concilier l’efficacité du marché et l’esprit de partage sans laisser personne de côté, </li>
  <li>Prendre en compte les questions d’élimination de la pauvreté et du respect de l’environnement. </li>
  </ul>
  
  <p>- <strong>Sixième règle :</strong> Cette règle consiste à traduire dans les faits le concept <span  style="color: #7030a0;">ESMC</span>. Ce concept est dénommé « la Philanthropie Industrielle et Commerciale ». C’est le fait d’assurer par l’<span  style="color: #7030a0;">ESMC</span> la clientèle fidèle et pérenne sur sa plateforme. Cela se fait par la mise en place des Kits de solvabilité universelle et des Kits technopole qui font de chaque être humain un consommateur-producteur absolument solvable. Le procédé est d’intégrer ces Kits dans les Activités marchandes : Souscriptions pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation et d’y proposer des revenus ou autres avantages sensibles aux souscripteurs. </p>
  <p>Les Kits de solvabilité universelle concernent:</p>';
  
  $htmlpdf .= '
  <p>
     <ul>
       <li>TIC universelles. Il s’agit de la couverture totale des localités incluant les ménages et les individus en matière des Technologies de l’Information et de la Communication : </li>
       <li>Centres de données (systèmes et réseaux informatiques),</li>
       <li>Connectivités (connections internet, intranet et téléphonie) et</li>
       <li>Périphériques (utilisateurs : ordinateurs, tablettes, téléphones, cartes magnétiques, cartes acoustiques, …),</li>
       
       <li>Bancarisation universelle. Il s’agit de coupler le Compte Marchand et un compte bancaire ou équivalant pour tous, sans laisser personne de côté, en vue de leur Montant de Souscription aux Comptes Marchands et aux Bons de Consommation récurrente renouvelable à durée illimitée sur la plateforme de la Production Commune <span  style="color: #7030a0;">ESMC</span> et</li>
       <li>Assurances et protections sociales universelles. Il s’agit d’un bouquet de polices d’assurance pour tous sans laisser personne pour compte.</li>
     </ul>
  </p>
  <p>Les Kits technopole concernent les bourses d’étude et de formation: 
  <span>Les Kits technopole concernent les bourses d’étude et de formation: </span>
  </p>
  
  <p><strong>Septième règle :</strong> TouPar ailleurs, l’article 7 te souscription en argent sur la plateforme de l’<span  style="color: #7030a0;">ESMC</span> passe par le payement sur ses comptes auprès des partenaires bancaires et financiers pour déboucher sur l’émission des Bons d’Achat neutre au souscripteur. 
  L’existence du Bon d’Achat neutre est conditionnée par son affectation à un Bien, un Produit ou un Service.
  </p>';

  $htmlpdf .= '
  
  <p><strong>Huitième règle :</strong> Pour son affectation aux marchandises, le Bon d’Achat neutre débouche sur le Bon de Consommation récurrente (BCr) ou sur le Bon de Consommation non récurrente (BCnr).
  <ul>
  <li>Les Bons de Consommation récurrente (BCr) ont une durée de vie de 30 jours. Ils sont renouvelables à durée déterminée ou illimitée. Au-delà de ces 30 jours, ils sont renouvelés au montant initial lorsqu’ils sont utilisés. Le renouvellement automatique n’augmente jamais les BCr au-delà de leur montant initial. Autrement dit, les bons de consommation récurrente non utilisés s’annulent trente (30) jours après leur émission au moment du renouvellement des nouveaux Bons. En aucun cas, les Bons de Consommation récurrente ne peuvent être dus en monnaie bancaire. L’avantage pour le souscripteur est qu’il dispose d’un droit d’achat de marchandises au montant défini, dans un délai de 30 jours sur la plateforme <span  style="color: #7030a0;">ESMC</span> et ce, à durée déterminée ou illimitée.  </li>
  </ul>
  </p>
  <p>Les éventuels problèmes d’insolvabilité monétaire liés au renouvellement à durée illimitée du Bon de Consommation récurrente, ne se posent pas aux quatre centrales réunies sur la plateforme de la Production Commune, parce qu’il ne s’agit pas de l’espèce bancaire mais des biens, des produits et des services réels. 
  </p>
  <ul>
  <li>Les Bons de Consommation non récurrente (BCnr) s’émettent en une seule fois. Ils peuvent être affectés aux marchandises déjà produites (consommation immédiate) et aux marchandises à produire par les fournisseurs (consommation future). Ils sont cumulables. En aucun cas, les Bons de Consommation non récurrente ne peuvent être dus en monnaie bancaire. L’avantage pour le souscripteur est qu’il obtient une réduction des coûts de ses achats sur les centrales <span  style="color: #7030a0;">ESMC</span>.</li>
  </ul>
  <p>Les éventuels problèmes d’insolvabilité monétaire liés aux réductions des coûts du Bon de Consommation non récurrente ne se posent pas aux quatre centrales réunies sur la plateforme de la Production Commune. Parce qu’il ne s’agit pas de l’espèce bancaire mais, dans la pratique <span  style="color: #7030a0;">ESMC</span>, cela correspond à une augmentation des biens, des produits ou des services réels accordée à l’acheteur. 
  </p>';

  $htmlpdf .= '
  
  <p><strong>Neuvième règle :</strong> Les Biens acquis à partir des Bons <span  style="color: #FF0000;">MCNP</span> sont destinés, soit à la consommation finale, soit à la production, soit à la transformation, soit à la distribution ou à la revente sur la plateforme <span  style="color: #7030a0;">ESMC</span>. </p>
  <p><strong>Dixième règle :</strong> Lorsque le souscripteur dispose d’une unité industrielle, d’un entrepôt, d’un magasin, d’une boutique, d’un Guichet Unique d’Intégration Universelle ou d’un stand, toute souscription pour soi aboutit à sa propre consommation finale ou à son activité de production, de transformation ou de distribution. </p>
  <p>Lorsque le souscripteur ne fait pas usage d’unité industrielle, d’entrepôt, de magasin, de boutique, de Guichet Unique d’Intégration Universelle ou de stand, pour revendre les marchandises issues de sa souscription, il doit passer par la souscription pour tiers. La souscription pour tiers aux Bons <span  style="color: #FF0000;">MCNP</span> est faite à travers le Compte d’Activités Marchandes d’un autre Utilisateur que soi. Aussi, est-elle faite par voie des Bons de consommation récurrente. 
  Le souscripteur peut également, lorsqu’il est une personne physique, revendre les marchandises issues de sa souscription à travers les Comptes d’Activités Marchandes Communs des Centrales de la Production Commune. En ce moment, la souscription est faite par voie des Bons de consommation non récurrente.
  </p>
  <p><strong>Onzième règle :</strong> Tout paiement en argent effectué par l’<span  style="color: #7030a0;">ESMC</span> aux Utilisateurs de sa plateforme se fait par voie d’Ordres de Prélèvement Irrévocable (OPI) échelonnés sur une durée de 12 périodes de 30 jours ouvrés minimum. Ils (les OPI) sont émis aux personnes physiques et morales fournisseurs, vendeurs et revendeurs contre leurs ventes de biens, de produits et de services réels à travers les quatre (04) Activités <span  style="color: #7030a0;">ESMC</span>.  </p>
  <p>Les détenteurs des OPI ont le choix :
  <ul>
  <li>d’attendre les échéances de ces OPI pour obtenir les virements respectifs sur leur compte auprès des banques auxquelles <span  style="color: #7030a0;">ESMC</span> a émis lesdits ordres ;</li>
  <li>de payer leurs dettes en renonçant au virement au profit de tout créancier ;</li>
  <li>de procéder à l’annulation de ces OPI au profit de leurs achats de Biens, de Produits et de Services sur la plateforme <span  style="color: #7030a0;">ESMC</span> ou</li>
  <li>de procéder à l’annulation de ces OPI au profit des commandes de Biens, de Produits et de Services, sur la plateforme <span  style="color: #7030a0;">ESMC</span>, pour leurs activités de production, de transformation ou de distribution.</li>
  </ul>
  <p>L’avantage pour le souscripteur est que, pour cause de concession des délais d’attente des échéances des OPI, l’<span  style="color: #7030a0;">ESMC</span>, en retour, lui concède une compensation sensible en Bons de Livraison (BL) à l’émission de ces OPI.
  </p>
  </p>
  <p>Les éventuels problèmes d’insolvabilité monétaire liés à la compensation en Bons de livraison ne se posent pas aux quatre centrales réunies sur la plateforme de la Production Commune, parce qu’il ne s’agit pas de l’espèce bancaire mais des biens, des produits et des services réels. Car, dans la pratique sur la plateforme, la compensation en Bons de livraison n’est qu’une augmentation des Biens accordée aux vendeurs qui les y abandonnent contre des payements périodiques par voie d’OPI. </p>
  <p>L’EXPLOITATION DU PROGICIEL <span  style="color: #FF0000;">MCNP</span>, ACTIVITE COMMERCIALE NON FINANCIERE</p>
  <p><strong><i>Caractère commercial des Activités </i></strong></p>
  <p>Aux termes de l’article 3 de l’Acte Uniforme portant sur le Droit Commercial Général, a le caractère d’acte de commerce par nature, « l’achat de biens, meubles ou immeubles, en vue de leur revente ».
  <span>Or, le souscripteur à l’une et/ou à l’autre des deux (02) activités que sont : ‘’souscriptions pour soi et pour tiers aux comptes marchands et aux bons de consommation ‘’ et ‘’ Acheteur-Revendeur en ligne contre OPI ‘’, achète des marchandises et les revend sur la plateforme <span  style="color: #7030a0;">ESMC</span>. 
  Les deux (02) activités sont donc sans nul doute des actes de commerce par nature fait par <span  style="color: #7030a0;">ESMC</span>.
  </span>
  </p>';

  $htmlpdf .= '
  
  <p><strong><i>Caractère non financier des activités</i></strong></p>
  <p>Le Marché de Crédit en Nature Pérenne, <span  style="color: #FF0000;">MCNP</span>, malgré le mot <strong>crédit</strong> que comporte son nom, n’a le sens ni d’emprunt, ni de prêt, ni d’épargne, ni de dépôt, ni de placement, ni d’action, ni d’assurance, ni d’aucune collecte ou réception de fonds, ni d’appel de fonds, ni d’aucun transfert de fonds, ni de moyen de payement. Le Marché de Crédit en Nature Pérenne, <span  style="color: #FF0000;">MCNP</span> n’est donc pas une activité financière.</p>
  <p>En effet, le Vocabulaire juridique de Gérard CORNU définit le mot ‘’financier’’ comme étant ce <i>«qui a trait aux capitaux, à leur gestion, aux activités et opérations qui s’y rapportent, spécialement aux mouvements et placements de fonds ; en ce sens, financier englobe boursier ».</i>
  Il ressort de cette définition que les activités financières englobent celles exercées par le secteur bancaire, les systèmes financiers décentralisés, les secteurs d’assurance et de bourse.   
  Les activités <span  style="color: #7030a0;">ESMC</span> ne sont pas assimilables aux activités bancaires, de micro finance,  d’assurance et de bourse pour des raisons ci-après : 
    </p>
  <ul>
  <li>Le caractère non bancaire des activités <span  style="color: #7030a0;">ESMC</span></li>
  </ul>
  <p>Aux termes de l’article 2, alinéa 2 de la loi N°2009-019 du 07.09.09 portant réglementation bancaire, <i>« Constituent des opérations de banque, au sens de la présente loi, la réception de fonds du public, les opérations de crédit, ainsi que la mise à disposition de la clientèle et la gestion de moyens de paiement ».</i>
  Les Activités <span  style="color: #7030a0;">ESMC</span> ne sont pas bancaires dans la mesure où :
  <ul>
  <li>D’une part, l’article 5 de ladite loi dispose que « sont considérés comme fonds reçus du public, les fonds qu’une personne recueille d’un tiers, notamment sous forme de dépôts, avec le droit d’en disposer pour son propre compte, mais à charge pour elle de les restituer ».</li>
  </ul>
  <p>Conformément à la pratique bancaire, le déposant dépose son argent sur son compte ouvert dans les livres d’une institution financière qui a l’obligation de le restituer. Ce fait est dénommé recevoir l’argent ou les fonds du public.
  </p>
  <strong><i>L’argent utilisé par le souscripteur sur la plateforme est versé sur les comptes de l’<span  style="color: #7030a0;">ESMC</span> ouverts dans les livres des institutions bancaires de la place, tout comme le fait un acheteur qui paye à son vendeur. Aussi, les frais de souscriptions à ses activités qui débouchent forcément sur un bien, un produit ou un service ne sauraient être restitués par <span  style="color: #7030a0;">ESMC</span>.</i></strong>
  <ul>
  <li>D’autre part, d’après l’article 6 de la même loi, <i>« Constitue une opération de crédit, pour l’application de la présente loi, tout acte par lequel une personne, agissant à titre  onéreux :</i>
  <ul>
  <li><i>met ou promet de mettre des fonds à la disposition d’une autre personne ;</i> </li>
  <li><i>prend, dans l’intérêt de celle-ci, un engagement par signature tel qu’un aval, un cautionnement ou une garantie. Sont assimilés à des opérations de crédit, le crédit-bail et, de manière générale, toute opération de location assortie d’une option d’achat ».</i></li>
  </ul>
  </li>
  </ul>
  <strong><i>Les OPI émis à l’ordre du souscripteur ne sont pas des fonds mis à sa disposition ; ce sont plutôt des paiements consécutifs à la vente en centrale de ses marchandises sur la plateforme <span  style="color: #7030a0;">ESMC</span>.  </i></strong>
  <ul>
  <li>Par ailleurs, l’article 7 de ladite loi dispose que « sont considérés comme moyens de paiement, tous les instruments qui, quel que soit le support ou le procédé technique utilisé, permettent à toute personne de transférer des fonds. Il s’agit notamment des chèques bancaires, chèques de voyage, cartes de paiement et de retrait, virements ou avis de prélèvement, cartes de crédit et transferts électroniques de fonds ». </li>
  </ul>
  <strong><i><span  style="color: #7030a0;">ESMC</span> n’émet aucun de ces moyens de paiement. Les Bons et cartes pour l’achat et les ordres de paiement (OPI) émis lors de l’exercice des Activités <span  style="color: #7030a0;">ESMC</span> sont, comme démontré plus haut, respectivement admis par l’article 14 5) de la loi N°2009-019 du 07.09.09 portant réglementation bancaire et l’article 1er du règlement N° 15/2002/CM/UEMOA relatif aux systèmes de paiement dans les Etats membres de l’Union Economique et Monétaire Ouest Africaine. </i></strong>
  Eu égard aux développements qui précèdent, il échoit qu’aucune activité <span  style="color: #7030a0;">ESMC</span> n’est bancaire. 
  </p>';
  $htmlpdf .= '
  <p>
  <ul>
  <li>Les activités <span  style="color: #7030a0;">ESMC</span> ne relèvent pas des systèmes financiers décentralisés</li>
  </ul>
  <p><strong>L’article 1er 21°) de la loi N°2011-009 du 12/12/2011 portant réglementation des systèmes financiers décentralisés</strong> définit le système financier décentralisé comme étant <i>l’«institution dont l’objet principal est d’offrir des services financiers à des personnes qui n’ont généralement pas accès aux opérations des banques et établissements financiers tels que définis par la loi portant réglementation bancaire et habilitée aux termes de la présente loi à fournir des prestations ». </i>
  </p>
  <p>Selon <strong>l’article 4</strong> de ladite loi, ces services financiers sont de trois ordres, à savoir : la collecte de dépôts, les opérations de prêts et les opérations d’engagement par signature.
  </p>
  <ul>
  <li>Relativement à l’opération de collecte de dépôts, <strong>l’article 4 1°)</strong> dispose que « sont considérés comme dépôts, les fonds autres que les cotisations et contributions obligatoires, recueillis par le système financier décentralisé auprès de ses membres ou de sa clientèle avec le droit d’en disposer dans le cadre de son activité, à charge pour lui de les restituer à la demande des déposants selon les termes convenus ».  </li>
  <li>S’agissant des opérations de prêts, <strong>l’article 4 2°)</strong> dit qu’ « est considérée comme une opération de prêts, tout acte par lequel un système financier décentralisé met, à titre onéreux, des fonds à la disposition d’un membre ou d’un client à charge pour ce dernier de les rembourser à l’échéance convenue" ».</li>
  <li>Concernant les opérations d’engagement par signature, <strong>l’article 4 3°)</strong> dispose qu’ « est considérée comme une opération d’engagement par signature, tout acte par lequel un système financier décentralisé prend, dans l’intérêt d’un membre ou d’un client, un aval, une caution ou une autre garantie ». </li>
  </ul>
  A la lumière des <strong>articles 4 1°), 4 2°) et 4 3°)</strong> précités, <strong>les activités <span  style="color: #7030a0;">ESMC</span> ne s’exercent, ni dans le cadre de la collecte des dépôts, ni dans le cadre des opérations de prêts, ni dans le cadre des opérations d’engagement par signature.</strong>
  Il échoit qu’aucune des activités <span  style="color: #7030a0;">ESMC</span> ne relève des opérations du système financier décentralisé.  
  </p>';

  $htmlpdf .= '
  <p>
  <ul>
  
  <li>Les activités <span  style="color: #7030a0;">ESMC</span> ne sont pas des opérations d’assurances</li>
  
  </ul>
  <i>Le Vocabulaire juridique de Gérard CORNU</i> définit l’assurance comme étant l’ <i>« opération par laquelle une partie, l’assuré, se fait promettre, moyennant une rémunération, la prime (ou cotisation), pour lui ou pour un tiers, en cas de réalisation d’un risque, une prestation (pécuniaire) par une autre partie, l’assureur (société d’assurance), qui, prenant en charge un ensemble de risques, les compense conformément aux lois de la statistique ».</i>
  C’est ainsi que le Code CIMA distingue trois sortes d’assurances : les assurances de dommages non maritimes, les assurances de personnes et aux contrats de capitalisation, puis les assurances de groupe.
  <ul>
  <li>Les assurances de dommages non maritimes sont, d’après l’article 31 dudit Code, celles qui sont relatives aux dommages causés aux biens en général. Il s’agit des assurances contre incendie, des assurances de responsabilité et des assurances des risques agricoles. </li>
  <li>Suivant les articles 58 et 64 dudit Code, il y a assurance sur la vie lorsque la vie d’une personne est assurée par elle-même ou par un tiers pour un capital déterminé dont le montant et les conditions de remboursement sont déterminés à partir d’un contrat de capitalisation.  </li>
  <li>L’article 95 dispose : <i>« Est un contrat d’assurance de groupe le contrat souscrit par une personne morale ou un chef d’entreprise en vue de l’adhésion d’un ensemble de personnes répondant à des conditions définies au contrat, pour la couverture des risques dépendant de la durée de la vie humaine, des risques portant atteinte à l’intégrité physique de la personne ou liés à la maternité, des risques d’incapacité de travail ou d’invalidité ou du risque de chômage ».</i> </li>
  </ul>
  <strong><i>Les activités <span  style="color: #7030a0;">ESMC</span> n’ont aucun lien avec ces trois types d’assurances définis par le Code CIMA.</i></strong>
  <strong>Par conséquent, elles ne sont pas des opérations d’assurances.</strong>
  </p>';

  $htmlpdf .= '
  <p>
  <ul>
  <li>Les activités <span  style="color: #7030a0;">ESMC</span> ne sont pas des opérations boursières</li>
  </ul>
  Dans le <i>Lexique de banque et de bourse,</i> Mme Blanche SOUSI-ROUBI déclare qu’ <i>« aujourd’hui, lorsqu’on parle de bourse c’est pour désigner la bourse de valeurs » que le Vocabulaire juridique de Gérard CORNU définit comme « la réunion des agents de change qui a pour objet la négociation et la constatation du cours des valeurs mobilières ».</i> 
  Il ressort de <strong>l’article 744 et suivants de l’Acte uniforme relatif au droit des sociétés commerciales et du groupement d’intérêt économique</strong> que les valeurs mobilières sont, soit des actions, soit des obligations, soit les deux (cas des valeurs mobilières composées).
  <strong><i>L’exercice des activités <span  style="color: #7030a0;">ESMC</span> ne porte en aucun moment sur des actions ou des obligations.</i></strong>
  Par conséquent, aucune des Activités <span  style="color: #7030a0;">ESMC</span> ne saurait être classée au rang des opérations boursières. 
  <strong><i>Au regard de ce qui précède, les activités <span  style="color: #7030a0;">ESMC</span> ne sont donc pas assimilables aux activités bancaires, de micro finance,  d’assurance et de bourse.  </i></strong>
  <p>
  <ul>
  <li>Les activités <span  style="color: #7030a0;">ESMC</span> ne sont pas un appel public à l’épargne </li>
  </ul>
  <strong>L’Article 83 de l’Acte uniforme relatif au droit des sociétés commerciales et du groupement d’intérêt économique dispose : </strong>
  <i>« L’offre au public de valeurs mobilières est constituée par l’une des opérations suivantes : une communication adressée sous quelque forme et par quelque moyen que ce soit à des personnes et présentant une information suffisante sur les conditions de l’offre et sur les valeurs mobilières à offrir, de manière à mettre une personne en mesure d’envisager d’acheter ou de souscrire ces valeurs ; un placement de valeurs mobilières par des intermédiaires financiers dans le cadre soit d’une émission soit d’une cession ».</i>
  A titre de rappel, les souscriptions faites par les Utilisateurs sur la plateforme <span  style="color: #7030a0;">ESMC</span> sont destinées aux opérations d’achat prépayées et aux opérations de vente post-payées liées aux biens, produits et services qui n’ont aucun rapport avec les valeurs mobilières.
  Comme exposé plus haut, <strong><i>les activités <span  style="color: #7030a0;">ESMC</span> ne portent en aucun moment ni sur des actions ni sur des obligations ni sur les deux qui font partie des valeurs mobilières offertes au public à l’occasion des appels publics à l’épargne.</i></strong>
  Par conséquent, aucune des Activités <span  style="color: #7030a0;">ESMC</span> ne saurait être classée au rang des opérations d’appel public à l’épargne. 
  </p>
  </p>';

  $htmlpdf .= '
  <p style="color:#FF0000">Notons Bien pour résumer que, les activités innovées par <span  style="color: #7030a0;">ESMC</span> se rapportent essentiellement :</p>
  <p>
  <ul>
   <li>Au prépaiement et au payement au comptant par les acheteurs de biens, de produits et de services sur la plateforme <span  style="color: #7030a0;">ESMC</span>, </li>
   <li>Au payement morcelé en 12 OPI minimum par <span  style="color: #7030a0;">ESMC</span>  à ses utilisateurs  contre leurs ventes de biens, de produits et de services et  </li>
   <li>A l’achat et vente réciproques entre <span  style="color: #7030a0;">ESMC</span>, ses Utilisateurs et Partenaires. </li>
  </ul>
  </p>
  <p><strong>En conclusion,</strong> la Production Commune est, pour le compte de tous les souscripteurs Utilisateurs, l’acheteur, le producteur, le transformateur et le vendeur en dernier ressort. 
  Elle représente également, l’outil intégrateur par excellence au moyen des <strong>facteurs de production : travail, argent et matières,</strong> outil qui est désormais mis à la disposition de toute communauté. Son marché <span  style="color: #FF0000;">MCNP</span> au circuit économique bouclé est, à cet effet, l’alternative qui a la capacité de transformer le marché linéaire mondial de bulles spéculatives, de dettes impayables, de crises multiples récurrents, de déséquilibre vicier, d’inégalité notoire et du chômage incurable, en marché structuré, circulaire, solvable, universel. Sa mise en application permet de concilier de façon formelle le social et l’efficacité du marché pour ne plus jamais avoir de pauvreté face au manque de clientèle sur le marché mondial. 
  </p>
  <p>Voilà pourquoi l’<span  style="color: #7030a0;">ESMC</span>, l’EXPLOITANT DU PROGICIEL <span  style="color: #FF0000;">MCNP</span>, promoteur de la Production Commune se propose comme l’Outil de Développement Durable (ODD) pour l’atteinte des résultats attendus des 17 ODD que le monde s’est assignés d’ici à 2030. </p>
  <p>C’est dans ce cadre qu’elle met en place avec ses Fournisseurs Utilisateurs, ses Fournisseurs spécifiques et ses Fournisseurs externes, cette présente convention pour réguler leur collaboration. </p>
  <p>Etant attendu que le préambule fait partie intégrante du contrat, il a été convenu ce qui suit :</p>';

  $htmlpdf .= '

  <p><strong><i>Article 1 : Définitions et explications</i></strong></p>
  <p>
  <ul>
  <li> <strong>Plateforme <span  style="color: #7030a0;">ESMC</span> :</strong> C’est l’ensemble de mesures et d’idées qui fondent les principes du modèle économique de l’Entreprise Sociale de Marché Commun (<span  style="color: #7030a0;">ESMC</span>) et du système, Marché de Crédit en Nature Pérenne (<span  style="color: #FF0000;">MCNP</span>) sur lesquelles est bâtie sa convention de collaboration avec ses Utilisateurs. </li>
  <li>C’est aussi l’ensemble logistique : Centres de données, réseaux informatiques, réseaux de télécommunication, site internet et les périphériques (ordinateurs, boitiers, tablettes, téléphones, cartes individuelles d’accès et autres) qui permettent l’exploitation du Progiciel <span  style="color: #FF0000;">MCNP</span>. </li>
  <li>C’est, enfin, le marché numérique de quatre centrales communes virtuelles, Comptes d’Activités Marchandes Communes : centrales communes d’achat, de vente, de production  et de transformation auxquelles sont rattachés des Comptes d’Activités Marchandes Personnels universels.</li>
  <li><span  style="color: #FF0000;">MCNP</span> : Marché de Crédit en Nature Pérenne. C’est l’ensemble de Comptes d’Administration et d’Animation d’Activités Marchandes qui logent les supports marchands numériques à l’usage des individus, des ménages, des personnes physiques et morales et qui aboutissent à l’action commune à travers la Centrale d’Achat Commune, la Centrale de Vente Commune, la Centrale de Transformation Commune et la Centrale de Production Commune sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</li>
  <li> <strong>Progiciel <span  style="color: #FF0000;">MCNP</span> :</strong> Ensemble complet de programmes informatiques et la documentation qui l’accompagne. Il est porteur de quatre Activités innovées qui s’exercent à travers ses Supports Marchands contenus dans ses Comptes Marchands, mis en place pour la souscription de différents Utilisateurs, en vue d’une gestion professionnelle commune du marché. </li>
  <li> <strong>Comptes Marchands :</strong> Comptes portés par le Progiciel <span  style="color: #FF0000;">MCNP</span> qui logent les Supports Marchands : les Bons de Livraison, les Bons d’Achat, les Bons de Consommation, les Bons de Commande et les Ordres de Prélèvement Irrévocable.</li>
  <li> <strong>Supports marchands <span  style="color: #FF0000;">MCNP</span>:</strong> Ce sont les Bons de Consommation, les Bons de Livraison, les Bons d’Achat, les Bons de Commande et les Ordres de Prélèvement Irrévocable, émis automatiquement par le Progiciel <span  style="color: #FF0000;">MCNP</span> dans les Comptes Marchands des Utilisateurs, de même que dans les Comptes Marchands dédiés aux partenaires.  </li>
  <li> <strong>Engagement de Livraison Irrévocable :</strong> C’est un engagement pris par les fournisseurs de l’<span  style="color: #7030a0;">ESMC</span> en vue de livrer ou de fournir en continu sur sa plateforme, leurs Biens, Produits et Services.</li>
  <li> <strong>Carte :</strong> Support plastique magnétique, acoustique ou à puce électronique servant à identifier et à authentifier le porteur, dans le cadre de l’usage de son Compte Marchand et des Supports Marchands y afférents.</li>
  <li> <strong>Consommation récurrente :</strong> Modalité de la consommation périodique répétitive à durée indéterminée ou déterminée. </li>
  <li><strong>Consommation récurrente :</strong> Modalité de la consommation périodique répétitive à durée indéterminée ou déterminée. </li>
  <li><strong>Consommation non récurrente : </strong>Modalité de consommation une fois pour de bon. </li>
  <li><strong>Utilisateur :</strong> Toute personne physique ou morale, titulaire d’un Compte Marchand qui utilise les Supports Marchands <span  style="color: #FF0000;">MCNP</span> sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</li>
  <li><strong>Production Commune :</strong> C’est l’ensemble des activités marchandes des centrales <span  style="color: #7030a0;">ESMC</span> au profit impartageable. Elle est destinée à combler tous les écarts créés par les réductions des coûts, le renouvellement pérenne ou non aux consommateurs et les concessions de bénéfice aux vendeurs.</li>
  <li><strong>Consommateur :</strong> Toute personne physique ou morale qui achète des Biens, Produits et Services par voie de Bons de Consommation sur la plateforme <span  style="color: #7030a0;">ESMC</span>. </li>
  <li><strong>Fournisseur spécifique :</strong>  Personne à qui la loi impose le règlement de ses ventes au comptant et uniquement en espèce bancaire.</li>
  <li><strong>Fournisseur externe :</strong> Producteur et transformateur ayant le monopole sur ses biens, ses produits ou ses services. </li>
  <li><strong>Centrale d’Achat Commune :</strong> Centrale où s’opèrent les achats de tout UTILISATEUR sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</li>
  <li><strong>Centrale de Vente Commune :</strong> Centrale où s’opèrent les ventes de tout fournisseur et distributeur sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</li>
  <li><strong>Centrale de Production Commune :</strong> Centrale où s’opère la production sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</li>
  <li><strong>Centrale de Transformation Commune :</strong> Centrale où s’opère la transformation sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</li>
  </ul>
  </p>';

  
  $htmlpdf .= '

  <p><strong style="text-decoration:underline">Article 2 : Objet de la convention</strong></p>
  <p>Pour produire, transformer et distribuer, les producteurs, les transformateurs et les distributeurs consomment les Biens, Produits et Services.</p>
  <p>Ces Biens, Produits et Services à consommer sont proposés sur la plateforme <span  style="color: #7030a0;">ESMC</span> par d’autres acteurs producteurs, transformateurs, distributeurs, dans le cadre de leur souscription à la Production Commune.</p>
  <p>Cette Production Commune est organisée en Centrale d’Achat Commune, en Centrale de Vente Commune, en Centrale de Transformation Commune et en Centrale de Production Commune pour combler les écarts. </p>
  <p>La présente convention a pour objet de définir les conditions de la mise en œuvre de la collaboration étroite entre l’<span  style="color: #7030a0;">ESMC</span> et les Fournisseurs Utilisateurs, spécifiques et externes dans le cadre de l’observation des règles indispensables au fonctionnement du système et du modèle de l’<span  style="color: #7030a0;">ESMC</span> qui sont engagés dans l’alternative à l’économie classique, souscrivant aux 17 Objectifs de Développement Durable pour lesquels la plateforme se propose d’être <strong>l’outil de marché intégrateur de chaque être humain dans la répartition optimale des bienfaits de l’économie de marché mondialisée, sans laisser personne de côté.</strong> </p>
  
  <p>
  <strong style="text-decoration:underline">Article 3 : Fonctionnement des Centrales Communes sur la plateforme <span  style="color: #7030a0;">ESMC</span> </strong>
  </p>
  <p><strong style="text-decoration:underline;margin-left:35px"> 3.1. Centrale de Vente Commune </strong>
  </p>
  <p>C’est la centrale qui est chargée de consommer les biens, produits et services matières premières, produits semi-finis et finis  sur la plateforme <span  style="color: #7030a0;">ESMC</span> pour leur vente en dernier ressort aux exportateurs, importateurs, grossistes, semi-grossistes, détaillants et consommateurs finaux. Cette centrale permet l’écoulement rapide des marchandises de tout vendeur puisqu’il lui suffit de les lui confier contre le mode de payement morcelé par voie d’OPI. Elle encourage la participation de tous aux activités : Prestataires de la Production Commune contre OPI, Acheteurs-revendeurs en ligne contre OPI,                        Achat-vente réciproques par voie d’ELI contre OPI et la souscription aux Comptes Marchands et aux Bons de Consommation pour tiers contre OPI.  Pour ce faire, on recense les offres des uns et des autres en matière de distribution puis on tente de leur apporter la demande correspondante sur la plateforme <span  style="color: #7030a0;">ESMC</span>. Ainsi, tout ce qui est acheté, produit, transformé et distribué contre le mode de payement fractionné par voie d’OPI est vendu par la centrale de vente commune en dernier ressort à tous les acheteurs. 
  Comme dans le cas de toutes les centrales, la centralisation de la vente et de l’achat est basée sur la mise à disposition de biens infrastructures et logistiques des achats et ventes, aux organisateurs, têtes de divisions des différentes sortes de filières d’achat et de vente dans les communautés. 
  Par ailleurs, les biens de production acquis dans toutes les divisions de toutes les centrales contre la production future par  ses divisions, dans le cadre de la mise en œuvre des industries et entreprises  constituent le patrimoine de la Production Commune.   
  </p>
  <p><strong style="text-decoration:underline">3.2 : Centrale d’Achat Commune </strong></p>
  <p>C’est elle qui est chargée d’apporter  l’argent payé contre des Bons par les souscripteurs sur les Comptes bancaires de <span  style="color: #7030a0;">ESMC</span> auprès des banques et d’assurer le payement morcelé par voie d’Ordres de Prélèvement Irrévocable (OPI) aux fournisseurs de marchandises consommées par les souscripteurs, avant que les autres centrales de la plateforme <span  style="color: #7030a0;">ESMC</span> ne soient utilisées pour consommer et investir. La centralisation des achats et du payement morcelé à la centrale des achats par voie d’OPI permet de réduire les coûts de production et donc de consommation aux souscripteurs et d’augmenter les montants de vente aux fournisseurs en raison des gains de productivité qu’ils engendrent. La réduction des coûts est aussi et surtout destinée à  retourner sur les comptes de <span  style="color: #7030a0;">ESMC</span> auprès des banques, l’argent payé par voie d’OPI aux fournisseurs importateurs-exportateurs, industries, entreprises, distributeurs grossistes, semis- grossistes et détaillants. L’augmentation des montants de vente pour cause de  payement morcelé accroît le pouvoir d’achat des fournisseurs qui utilisent directement les OPI pour faire leurs commandes aboutissant par ce fait à la compensation interne qui renforce le cumule de l’argent sur les comptes bancaires destinés à assurer la solvabilité de <span  style="color: #7030a0;">ESMC</span>. La fiabilité et la liquidité des OPI <span  style="color: #7030a0;">ESMC</span> dépendent du cumul de plus en plus grand de l’argent sur ses comptes bancaires qui assure la disponibilité en quantité et en qualité des biens, produits et services matières premières, manufacturés et prestations de tous genres  traduisant donc la solvabilité de la plateforme <span  style="color: #7030a0;">ESMC</span> face à ses engagements vis-à-vis de ses consommateurs intermédiaires et finaux.
  Cette centrale concerne les acheteurs abonnés, Utilisateurs de Comptes Marchands <span  style="color: #FF0000;">MCNP</span> qui ont souscrit aux Bons d’Achat pour leurs commandes ou consommations de biens, de produits et de services sur la plateforme <span  style="color: #7030a0;">ESMC</span>. Autrement dit, la souscription aux Bons émis sur la plateforme <span  style="color: #7030a0;">ESMC</span> constitue un <strong>abonnement</strong>. 
  L’achat de biens, de produits et de services est fait par la modalité de <strong>payement au comptant</strong> ou par la modalité de <strong>prépaiement</strong>. 
  L’abonnement (souscriptions aux Bons) pour la consommation des marchandises vendues en centrale sur la plateforme <span  style="color: #7030a0;">ESMC</span> se fait en mode récurrent et non récurrent.  
  Le mode d’achat récurrent se traduit par la modalité <strong>de prépaiement</strong> et le mode d’achat non récurrent se traduit, lui, par la modalité de <strong>payement au comptant.</strong>
  </p>
  <p><strong>La modalité de consommation récurrente concerne :</strong>
  <ul>
  <li>Le prépaiement pour la livraison quotidienne de marchandises à une durée de 30 jours (mode d’achat récurrent journalier), </li>
  <li>Le prépaiement pour la livraison de marchandises pendant 11.2 périodes de 30 jours (mode d’achat récurrent limité à 11.2 périodes), </li>
  <li>Le prépaiement pour la livraison de marchandises pendant 22.4 périodes de 30 jours (mode d’achat récurrent limité à 22.4 périodes) et</li>
  <li>Le prépaiement pour la livraison de marchandises dont le montant de souscriptions se renouvèle chaque 22.4 périodes de 30 jours (mode d’achat récurrent à période de renouvellement illimité).</li>
  </ul>
  </p>';

  $htmlpdf .= '
  
  <p><strong>La modalité de consommation non récurrente concerne </strong>
  <ul>
  <li>Le payement au comptant pour la livraison immédiate des marchandises (mode d’achat non récurrent) et</li>
  <li>Le payement au comptant pour la livraison des marchandises à réaliser (mode d’achat Période de Reconstitution Effective).</li>
  </ul>
  </p>
  <p>
  Les facilités accordées par ces modes de payement sur la plateforme <span  style="color: #7030a0;">ESMC</span> sont <strong>la réduction des coûts </strong>concédée aux abonnés acheteurs lorsque la souscription est faite en argent.
  La réduction des coûts d’achat en argent se fonde sur le calcul selon lequel : l’argent prépayé ou payé au comptant sur les comptes bancaires de la plateforme sert essentiellement à un robuste levier de facteurs de production sur les centrales de la Production Commune. Plus la quantité de consommation périodique de marchandises est petite, plus le nombre de périodes est grand et plus le coût de la marchandise consommée périodiquement est réduit. 
  Le calcul du montant de souscriptions aux Bons de Consommation et de commande en mode récurrent et non récurrent est disponible sur le site internet <span  style="color: #7030a0;">ESMC</span>.
  
  </p>';

  $htmlpdf .= '

  <p><strong style="text-decoration:underline">3.3 : Centrale de transformation commune</strong></p>
  <p>C’est la centrale qui est chargée de consommer les biens, produits et services matières premières  sur la plateforme <span  style="color: #7030a0;">ESMC</span> pour les transformer en produits semi-finis et finis. Elle encourage la création de valeur ajoutée et offre les facilités de transformer les matières premières en produits semi-finis et finis. Sur la base de la participation des individus des communautés en tant que prestataires de la Production Commune contre une rémunération en mode de payement fractionné par voie d’OPI, la centralisation de la transformation est basée sur la mise à disposition de biens de transformation de matières premières, dans les communautés, aux organisateurs des différentes sortes de filières de transformation de matières premières. Grâce à cette centrale on peut transformer du mais, de l’arachide, de l’ananas respectivement en farine, en huile ou en jus. Pour ce faire, les têtes de divisions organisent leurs acteurs, recensent leurs besoins en matière de transformation de matières premières, en vue de les satisfaire sur la plateforme <span  style="color: #7030a0;">ESMC</span>. Par exemple, des transformateurs organisés en coopératives, en groupements, et les transformateurs entreprises et industries pour leurs besoins en moyens modernes de transformation vont adresser une demande à la plateforme pour l’acquisition. En retour, ils vont signer à la centrale d’achat commune un Engagement de Livraison Irrévocable de leurs produits. La fiabilité de ses engagements assure la disponibilité en quantité et en qualité des biens, produits et services manufacturés et donc la solvabilité de la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>
  <p><strong style="text-decoration:underline">3.4 : Centrale de production commune</strong></p>
  <p>C’est la centrale qui est chargée de consommer les biens, les produits et les services, matières premières sur la plateforme <span  style="color: #7030a0;">ESMC</span> pour produire des marchandises destinées à combler les écarts dus aux avantages concédés aux souscripteurs. Cette centrale encourage à produire les biens- matières premières par la participation des individus des communautés en tant que prestataires de la Production Commune contre une rémunération en mode de payement fractionné par voie d’OPI. La centralisation de la production est basée sur la mise à disposition de biens de production de matières premières, dans les communautés, aux organisateurs des différentes sortes de filières de production de matières premières.  Pour ce faire, les têtes de divisions organisent leurs acteurs, recensent leurs besoins en matière de production de matières premières, en vue de les satisfaire sur la plateforme <span  style="color: #7030a0;">ESMC</span>. Par exemple, des producteurs organisés en coopératives, en groupements, et des producteurs entreprises et industries pour leurs besoins en moyens de production vont adresser une demande à la plateforme pour l’acquisition. En retour, ils vont signer à la centrale d’achat commune un Engagement de Livraison Irrévocable (ELI) de leurs produits. La fiabilité de ses engagements assure la disponibilité en quantité et en qualité des biens, produits et services matières premières et donc la solvabilité de la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>
  <p><strong style="text-decoration:underline">3.5 : Comptes marchands reliés aux centrales</strong></p>
  <p>Les personnes physiques et morales qui vendent, transforment, achètent et produisent pour leur propre compte ou pour le compte de la Production Commune disposent dans leur Compte Marchand d’un Terminal d’Echange (TE) relié aux Comptes Marchands des centrales. Ces Comptes Marchands équipés de TE sont des Utilisateurs.</p>
  <ul>
  
  <li>Pour activer leur TE, les acteurs personnes physiques ouvrent leur Compte Marchand à 70 000 FCFA plus 21 875 FCFA minimum pours tiers et les acteurs personnes morales ouvrent le leur à 70 000 FCFA plus 218 750 FCFA pour tiers. </li>
  <li>L’échange de biens, produits et services entre TE se termine par une série de 12 OPI minimum émis en faveur des titulaires au niveau des centrales  sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</li>
  </ul>

  <p><strong style="text-decoration:underline">Article 4 : Avantages attendus </strong>
  </p>
  <p><strong style="text-decoration:underline;margin-left:25px">4.1 : Coïncidence / Echange / Mévente zéro</strong>
  </p>
  <p>L’accès optimal à l’information se traduit par la coïncidence des besoins en biens, en produits et en services contre les marchandises n’ayant pas trouvé de preneurs immédiats débouchant, par ce fait, sur la mévente zéro.</p>
  <p><strong style="text-decoration:underline;margin-left:25px">4.2 : Désendettement</strong>
  </p>
  <p>L’accès à la domiciliation sur la plateforme, de marchandises ou de la productivité potentielle n’ayant pas trouvé de preneurs pour se désendetter complètement vis-à-vis de ses créances se traduit par le désendettement. La plateforme <span  style="color: #7030a0;">ESMC</span> se servira de cet avantage pour se désendetter complètement vis-à-vis de ses créanciers conformément à la clause d’achat et de vente réciproques.</p>
  <p ><strong style="text-decoration:underline;margin-left:25px">4.3 : Solvabilité absolue</strong></p>
  <p>
  L’accès à la souscription pour soi et pour tiers qui se traduit par le prépaiement de ses consommations enlève toute possibilité d’insolvabilité au consommateur sur la plateforme.
  </p>
  <p><strong style="text-decoration:underline;margin-left:25px">4.4 : Gaspillage zéro</strong></p>';

  $htmlpdf .= '
  
  <p>Le gaspillage zéro correspond :
  <ul>
  <li>Au plein emploi des ressources humaines et matérielles.</li>
  <li>Au plein usage des Biens, Produits et Services.</li>
  <li>Au recyclage optimal des déchets.</li>
  </ul>
  
  </p>
  <p><strong style="text-decoration:underline;margin-left:25px">4.5 : Transparence optimale</strong></p>
  <p>La transparence optimale comprend : 
  <ul>
  <li>Le service d’alerte, </li>
  <li>Le service de réclamation, </li>
  <li>Le service de recouvrement, </li>
  <li>Le service de règlement, </li>
  <li>Le service de traçabilité effective et </li>
  <li>Le service de gestion à l’amiable de contentieux marchands.</li>
  </ul>
  
  </p>';

  $htmlpdf .= '
  <p><strong style="text-decoration:underline">Article 5 : Caractéristiques des différents produits </strong></p>
  <p><strong style="text-decoration:underline;margin-left:25px">5.1	: Compte Marchand</strong></p>
  <ul>
  <li style="text-decoration:underline;font-weight:bold">Souscriptions</li>
  </ul>
  <p>Le Compte Marchand des personnes physiques ou morales s’acquiert par voie de souscriptions moyennant des frais non remboursables.</p>
  <ul>
  <li style="text-decoration:underline;font-weight:bold">Interdépendance du Compte Marchand</li>
  </ul>
  <p>Le Compte Marchand  est interdépendant entre ses détenteurs Utilisateurs et partenaires. </p>
  <ul>
  <li style="text-decoration:underline;font-weight:bold">Durée de vie </li>
  </ul>
  <p>La durée de vie du Compte Marchand est égale à celle de la société exploitante. Toutefois, la disparition, le décès, la liquidation et le renoncement du détenteur entrainent la caducité du compte. 
  Le contenu du compte devenu caduque demeure tel et assujetti à la reconstitution des éventuels Supports Marchands qu’il contient, exclusivement en Bons d’Achat internes, au profit des héritiers s’il y en a.
  </p>
  <ul>
  <li style="text-decoration:underline;font-weight:bold">Usage </li>
  </ul>
  <p>Le Compte Marchand est à usage personnel ; contrairement aux supports Marchands qu’il contient, il est inaliénable.</p>
  <p style="font-weight:bold;text-decoration:underline">5.2 : Supports Marchands contenus dans le Compte Marchand</p>
  <p>En cas d’absence catégorique des biens, de pénurie des biens ou en cas de suspension des activités des fournisseurs sur la plateforme, le cumul de tous les Supports Marchands devient des Bons de Consommation et s’échangera, à la reprise requise, contre des marchandises disponibles. Les Supports Marchands cumulés peuvent également servir de Bons de Commande pour une nouvelle production (consommation future). </p>
  
  <p><strong><u>5.2.1 : Bons de Consommation récurrente</u></strong></p>
  <p style="margin-left:25px"><strong><u><i>Période d’affectation </i></u></strong></p>
  <p>Le Bon de Consommation récurrente est affecté par période de trente (30) jours, période qui peut se prolonger en cas de pénurie généralisée des Biens, Produits et Services réels sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  L’affectation peut être limitée ou non limitée dans le temps selon le type de Bons de Consommation récurrente. 
  </p>
  <p style="margin-left:25px"><strong><u><i>Spécificité d’affectation  </i></u></strong></p>
  <p>Le Bon de Consommation récurrente est exclusivement affecté à des types de Biens, Produits ou Services spécifiques. Cette affectation spécifique peut s’élargir à d’autres biens en cas de pénurie généralisée des produits spécifiques auxquels il est affecté. </p>
  <p style="margin-left:25px"><strong><u><i>Aspect non cumulable  </i></u></strong></p>
  <p>Le Bon de Consommation récurrente n’est pas cumulable.</p>
  <p>En cas de suspension du Bon de Consommation récurrente, pour des fins de reconstitution et sur demande du titulaire, il se cumule compte tenu de la Période de Constitution du Montant de Souscriptions au Bon de Consommation qui est de 22.4 périodes de 30 jours. Le cumul devient un Bon d’Achat interne égal à 11.2 fois le Montant de Souscriptions pour soi, lorsque la période de jouissance est égale à 22.4 période de 30 jours. Une proportion est faite pour le cas des périodes de jouissance inférieure ou  supérieure à 22.4 périodes de 30 jours.</p>
  <p style="margin-left:25px"><strong><u><i>Aspect non redevable en monnaie bancaire </i></u></strong></p>';

  $htmlpdf .= '
  <p>
  En aucun cas, le Bon de Consommation récurrente ne peut être dû en monnaie bancaire. 
  </p>
  <p><strong><u><i>5.2.2 : Bons de Consommation non récurrente</i></u></strong></p>
  
  <p style="margin-left:25px"><strong><u><i> Période </i></u></strong></p>
  <p>Le Bon de Consommation non récurrente s’exprime une fois pour de bon. Il peut être affecté aux marchandises déjà produites (consommation immédiate) et aux marchandises à produire par les fournisseurs (consommation future).</p>
  <p style="margin-left:25px"><strong><u><i> Spécificité d’affectation  </i></u></strong></p>
  <p>Le Bon de Consommation non récurrente est exclusivement affecté à des types de Biens, Produits ou Services spécifiques. Cette affectation spécifique peut s’élargir à d’autres biens en cas de pénurie généralisée des produits spécifiques auxquels il est affecté.  </p>
  <p style="margin-left:25px"><strong><u><i>Aspect cumulable </i></u></strong></p>
  <p>Le Bon de Consommation non récurrente est cumulable dans le cas où il est affectable aux biens futurs.</p>
  <p style="margin-left:25px"><strong><u><i>Aspect non redevable en monnaie bancaire </i></u></strong></p>
  
  <p>En aucun cas, le Bon de Consommation non récurrente ne peut être dû en monnaie bancaire. </p>
  <p><strong><u> 5.2.3 : Bons de commande</u></strong></p>
  <p style="margin-left:25px"><strong><u><i> Période </i></u></strong></p>
  <p>Les Bons de Commande sont issus des OPI non matures. Ils sont affectés par commande aux Biens, Produits ou Services selon les échéances des OPI dont ils sont issus. A cet effet les périodes de livraison des commandes varient selon les séries de 12, 18, 24, 30, 36 ... OPI et selon les tranches cumulées de 3 OPI égalent à 90 jours ouvrés, 6 OPI égalent à 180 jours ouvrés, 12 OPI égalent à 360 jours ouvrés ainsi de suite.</p>
  <p style="margin-left:25px"><strong><u><i>Spécificité d’affectation </i></u></strong></p>
  <p>Les Bons de Commande sont destinés à la commande auprès des centrales de la Production Commune et auprès de  fournisseurs prestataires de travaux, industries de production et de transformation, importateurs et exportateurs.  
  Les Bons de Commande s’échangent, à l’échéance des OPI de leur provenance, le cas échéant, contre des Bons d’Achat internes. 
  </p>
  <p style="margin-left:25px"><strong><u><i>Aspect cumulable</i></u></strong></p>
  <p>Les Bons de Commande sont cumulables.</p>
  <p><strong><u>5.2.4 : Bons d’Achat</u></strong></p>
  <p style="margin-left:25px"><strong><u><i>5.2.4.1 : Bons d’Achat neutres</i></u></strong></p>
  <p>Ils sont émis aux souscripteurs contre l’argent payé sur l’un des comptes bancaires de l’<span  style="color: #7030a0;">ESMC</span>. </p>
  <p style="margin-left:25px"><strong><u><i>Période </i></u></strong></p>
  <p>Les Bons d’Achat neutres sont émis instantanément ou 24 à 72 heures selon la banque et le mode de payement utilisé, après enregistrement sur le formulaire de souscriptions <span  style="color: #7030a0;">ESMC</span> des renseignements contenus par les fiches de versement bancaires. Ils sont valables à durée indéterminée. </p>
  <p style="margin-left:25px"><strong><u><i>Spécificité d’affectation</i> </u></strong></p>
  <p>Les Bons d’Achat neutres sont affectés à la souscription aux Activités : Souscriptions pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation et Acheteurs-Revendeurs en ligne contre OPI.</p>
  <p style="margin-left:25px"><strong><u><i>Aspect cumulable</i></u></strong></p>';

  $htmlpdf .= '
  
  <p>Les Bons d’Achat neutres sont cumulables.</p>
  
  <p style="margin-left:25px"><strong><u><i>Aspect non redevable en monnaie bancaire</i></u></strong></p>
  <p>En aucun cas, le Bon d’Achat neutre ne peut être dû en monnaie bancaire. </p>
  
  <p><strong><u>5.2.4.2 : Bons d’Achat internes</u></strong></p>
  <p>Ils sont émis contre la souscription aux Activités d’Achat et vente réciproques et celles de Prestataires de la Production Commune. De mêmes, les Bons d’Achat internes sont émis contre des Bons de Consommation reconstitués et contre des Bons de Commande et des OPI non exprimés à leur échéance. Ils pourraient aussi être émis en apurement du passif engendré par l’exploitation antérieure du progiciel <span  style="color: #FF0000;">MCNP</span>. </p>
  <p style="margin-left:25px"><strong><u><i> Période </i></u></strong></p>
  <p>Les Bons d’Achat internes sont valables pour une durée indéterminée. Ils sont émis après la validation des Engagements de Livraison Irrévocable (cas des activités Achat et vente Réciproques et Prestataires de la Production Commune), à la reconstitution de Bons de Consommation dès la demande du titulaire et à l’échéance des Bons de Commande et des OPI non exprimés.
  Ils sont émis lorsque les conditions le permettent (cas du passif de l’exploitation du progiciel <span  style="color: #FF0000;">MCNP</span>), 
  </p>
  <p style="margin-left:25px"><strong><u><i>Spécificité d’affectation </i></u></strong></p>
  <p>Les Bons d’Achat internes, tout comme les Bons d’Achat neutres, sont affectés à la souscription aux Activités : Souscriptions pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation et Acheteurs-Revendeurs en ligne contre OPI.</p>
  
  <p style="margin-left:25px"><strong><u><i>Aspect cumulable</i></u></strong></p>
  
  <p>Les Bons d’Achat internes sont cumulables.</p>
  <p style="margin-left:25px;font-weight:bold"><u><i>Aspect non redevable en monnaie bancaire</i></u></p>
  
  <p>En aucun cas, le Bon d’Achat interne ne peut être dû en monnaie bancaire.   </p>
  <p style="margin-top:20px"><strong><u>5.2.5 : Bons de livraison</u></strong></p>
  <p>Les Bons de Livraison sont émis contre la vente de tous Biens, Produits et Services et contre toute souscription aux Activités payées par voie d’OPI sur la plateforme <span  style="color: #7030a0;">ESMC</span>.
  
  Ces Bons sont également émis aux FOURNISSEURS EXTERNES et SPECIFIQUES via les Comptes Marchands dédiés aux partenaires en vue de l’émission des OPI en leur faveur tirés sur les comptes de l’<span  style="color: #7030a0;">ESMC</span>. 
  Les Bons de livraison s’échangent contre des OPI ou contre des Bons d’Achat neutres.
  </p>
  <p style="margin-left:25px;font-weight:bold"><u><i>Période </i></u></p>
  <p>Les Bons de Livraison sont émis instantanément après la livraison de marchandises. </p>
  <p style="margin-left:25px;font-weight:bold"><u><i>Spécificité d’affectation </i></u></p>
  <p>Les Bons de Livraison sont affectés aux Bons de Consommation non récurrente,  aux Bons d’Achat neutres et aux OPI.</p>
  <p style="margin-left:25px;font-weight:bold"><u><i>Aspect cumulable</i></u></p>
  <p>Les Bons de Livraison sont cumulables.</p>
  <p style="margin-left:25px;font-weight:bold"><u><i>Aspect non redevable en monnaie bancaire</i></u></p>
  <p>En aucun cas, les Bons de Livraison ne peuvent être dus en monnaie bancaire.</p>
  <p><u><strong> 5.2.6 : Ordres de Prélèvement Irrévocable (OPI)</strong></u></p>
  <p>Les OPI sont émis aux personnes physiques et morales contre la souscription aux Activités : Souscriptions pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation, Acheteurs-Revendeurs en ligne contre OPI, Achat et Vente Réciproques et Prestataire de la Production Commune. S’agissant de la Production Commune, les OPI ne sont émis qu’en faveur des prestataires personnes physiques.</p>
  <p style="margin-left:25px;font-weight:bold"><u><i>Période </i></u></p>
  <p>
  La période de (30) jours ouvrés sépare un Ordre de Prélèvement Irrévocable à l’autre, à compter du premier qui, lui, peut être instantané. 
  </p>
  <p style="margin-left:25px;font-weight:bold"><strong><u><i>Modalités d’utilisation des OPI </i></u></strong></p>
  <p>Pour rendre liquide les OPI aux mains des bénéficiaires, ceux-ci ont le choix entre les quatre (04) modes d’utilisation ci-après : </p>';

  $htmlpdf .= '
  <p>
  <ul>
  <li>Attendre les échéances pour obtenir le virement sur son compte bancaire ouvert nécessairement dans les livres des banques, des micros finances ou sur les plateformes des systèmes de payement partenaires de la plateforme <span  style="color: #7030a0;">ESMC</span> ; </li>
  <li>Choisir de se désendetter (payer ses dettes) au moyen de ses OPI auprès des banques ou auprès de tout créancier ; </li>
  <li>S’approvisionner par commande de Biens, Produits et Services de consommation finale sur la plateforme <span  style="color: #7030a0;">ESMC</span> ;</li>
  <li>S’approvisionner par commande de Biens, Produits et Services de production sur la plateforme <span  style="color: #7030a0;">ESMC</span>.  </li>
  </ul>
  </p>
  
  <p style="margin-left:25px;margin-top:30px"><strong><u><i>Aspect cumulable</i></u></strong></p>
  <p>Les OPI sont cumulables tant qu’ils ne sont pas exprimés suivant les quatre (04) modes d’utilisation sus évoqués. </p>
  <p><strong><u><i>Aspect non redevable en monnaie bancaire</i></u></strong></p>
  <p>Les OPI arrivés à maturité en cours d’activité sont payés en monnaie bancaire. Dans le cas contraire, ils sont affectés aux Bons d’Achat neutres ou aux Bons d’Achat internes.
  Comme décrit plus haut, les acteurs des activités souscription pour soi et pour tiers aux Comptes Marchands et aux Bons de Consommation et des activités Acheteurs-Revendeurs en Ligne contre OPI ne disposent pas au départ de Biens, Produits et Services. Pour cela, ils doivent les acheter d’abord sur la plateforme avant de les y revendre. Le prix qu’ils payent est considéré comme un fonds de roulement de leurs activités d’achat et de vente sur la plateforme et soumis à un Engagement de Livraison Irrévocable.   
  Par conséquent, même le premier mode d’utilisation des OPI s’achève par l’observation de la règle achats-ventes réciproques.
  </p>
  <p><strong><u>5.2.7 : Engagement de Livraison Irrévocable (ELI)</u></strong></p>
  <p style="margin-left:25px"><strong><u><i>Types d’ELI</i></u></strong></p>
  <p>Il existe deux types d’ELI : 
  <ul>
  <li>Le premier consiste à fournir sans rupture ses Biens, Produits et Service à <span  style="color: #7030a0;">ESMC</span></li>
  <li>Le second consiste à livrer à <span  style="color: #7030a0;">ESMC</span>, la totalité de la quantité convenue de Biens, Produits et Service pour laquelle elle lui avait servi par avance des OPI, BAi ou des BAn.</li>
  </ul>
  </p>
  <p style="margin-left:25px"><strong><u><i>Signature du Contrat d’Engagement de Livraison Irrévocable</i></u></strong></p>
  <p>Avant d’exercer sur la plateforme, le Fournisseur doit s’assurer qu’il a préalablement signé le Contrat d’Engagement de Livraison Irrévocable avec l’EXPLOITANT.
  Par rapport au second type d’ELI, le fournisseur doit s’assurer qu’en plus de la signature du contrat d’ELI, l’EXPLOITANT lui a également servi des OPI, BAi ou des BAn par avance. 
  </p>
  <p><strong><u>Article 6 : Montant de Souscriptions (MS)</u></strong></p>
  <p  style="margin-left:25px"><strong><u>6.1 : Montant de Souscriptions aux Comptes Marchands (MSCM) pour soi et pour   
                         tiers
  </u></strong></p>
  <p>Les  Montants de Souscriptions aux Comptes Marchands sont fonction du pouvoir d’achat de la monnaie en cours dans chaque pays. </p>
  
  <p style="margin-left:25px"><strong><u>  6.2 : Montant de souscriptions aux Bons de Consommation pour soi et pour tiers 
             (MSBC)
  </u></strong></p>';

  $htmlpdf .= '
  
  <p>Les  Montants de Souscriptions aux Bons de Consommation sont fonction du pouvoir d’achat de la monnaie en cours dans chaque pays. Ils sont également fonction des deux modalités de souscriptions : pour soi et pour tiers marchands et non marchands.
  </p>
  <p style="margin-left:25px"><strong><u><i>Consommation récurrente</i></u></strong></p>
  <p> Le Montant de Souscriptions aux Bons de Consommation récurrente se calcule en fonction des paramètres suivants :</p>
  <ul>
  <li>Le Montant du bon périodique que multiplie la PCMSBC (Période de Constitution du Montant de Souscriptions aux Bons de Consommation) ;</li>
  <li>La PCMSBC, le multiplicateur, est fonction du pouvoir d’achat de la monnaie en cours dans chaque pays.</li>
  </ul>
  <p style="margin-left:25px"><strong><u><i>Consommation non récurrente</i></u></strong></p>
  <p style="margin-top:20px">Le Montant de Souscriptions aux Bons de Consommation non récurrente se calcule en fonction des paramètres suivants intégrés à la table des calculs mis en ligne sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>
  <p><strong><u>6.3 : Retombées de la souscription pour tiers </u></strong></p>
  <p><strong><u>6.3.1 : Les retombées de la souscription aux Comptes Marchands pour tiers</u></strong></p>
  
  <p>Le montant de souscriptions aux comptes marchands pour tiers bénéficie du</p>
  <p style="margin-left:35px">-	payement par OPI égal à 2.565 fois le montant du Bon d’Achat neutre, morcelé en 22,4 périodes de trente jours ouvrés indexé au compte bancaire des souscripteurs (cas des souscripteurs personnes physiques) et</p>
  <p style="margin-left:35px">-	1.42 fois le montant du Bon d’Achat neutre, morcelé en 22,4 périodes de trente jours ouvrés par voie d’OPI indexé au compte bancaire des souscripteurs (cas des souscripteurs personnes morales).</p>
  <p><strong><u>6.3.2 : Les retombées de la souscription aux Bons de Consommation pour tiers  </u></strong></p>
  <p>Le montant de souscriptions aux Bons de Consommation pour tiers bénéficie du</p>
  <p style="margin-left:35px">-	payement par OPI égal à 2.565 fois le montant du Bon d’Achat neutre, morcelé en 22,4 périodes de trente jours ouvrés indexé au compte bancaire des souscripteurs (cas des souscripteurs personnes physiques) et</p>
  <p style="margin-left:35px">-	1.42 fois le montant du Bon d’Achat neutre, morcelé en 22,4 périodes de trente jours ouvrés par voie d’OPI indexé au compte bancaire des souscripteurs (cas des souscripteurs personnes morales).</p>
  <p><strong><u>Article 7 : Obligations des Parties</u></strong></p>
  <p style="margin-left:25px"><strong><u>7.1 : Obligations de l’EXPLOITANT</u></strong></p>
  <p  style="margin-left:35px"><strong><u>  7.1.1 : Obligations générales de l’<span  style="color: #7030a0;">ESMC</span></u></strong></p>
  <p>L’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> se met d’accord avec les Utilisateurs, les FOURNISSEURS SPECIFIQUES et EXTERNES, pour consommer continuellement sur sa plateforme leurs  </p>';

  $htmlpdf .= '
  
  <div class="span4" style="margin-left:-13px">
        <label class="checkbox">
                    <span style="font-size:1.2em;float:left">Biens : </span>
                    <input type="checkbox" style="margin-top:7px" name="biens_contractant" id="bien_contractant" value="Biens">
  
        </label>
  </div>
  <div class="span4">
        <label class="checkbox">
                    <span style="font-size:1.2em;float:left">Produits :</span>
                    <input type="checkbox" style="margin-top:7px" name="produit_contractant" id="produit_contractant" value="Produits">
  
        </label>
  </div>
  <div class="span4">
        <label class="checkbox">
                    <span style="font-size:1.2em;float:left">Service :</span>
                    <input type="checkbox" style="margin-top:7px" name="service_contractant" id="service_contractant" value="Service">
  
        </label>
  </div>
  <small>(Cocher la case correspondante).</small>';

  $htmlpdf .= '
  <p>L’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> s’engage à mettre à la disposition des Utilisateurs, des Fournisseurs spécifiques et externes, les Biens, Produits et Services de consommation Entreprise et Industrie à travers la Centrale d’Achat Commune par le biais de leur type de Comptes Marchands  qui doit être ouvert sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>
  <p>L’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> s’engage à mettre à la disposition des Utilisateurs, des Fournisseurs spécifiques et externes, les deux types de souscriptions (pour soi et pour tiers) aux Bons de Consommation dans les modalités de consommation : la consommation en mode récurrent destinée à la pérennité de leur consommation et la consommation en mode non récurrent, destinée à la diminution de leurs coûts de production dans le but de leur assurer la compétitivité requise pour le développement durable de leurs activités sur le marché global, de même que les avantages de vente en mode non récurrent. </p>
  <p>Par ailleurs, l’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> s’engage à fournir aux Utilisateurs, aux Fournisseurs Spécifiques et Externes en temps utile, tout élément d’information nécessaire au bon déroulement des présentes, afin que les échanges en Centrale d’Achat et de Vente se déroulent dans des conditions optimales.</p>
  <p style="margin-top:20px">Enfin, l’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> s’engage à fournir aux Utilisateurs, aux Fournisseurs spécifiques et externes, tous conseils appropriés au déroulement des échanges dans les Centrales.</p>
  <p style="margin-left:35px"><strong><u>7.1.2 : Obligations spécifiques de l’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> </u></strong></p>
  <p>L’EXPLOITANT s’engage : à ouvrir des comptes auprès des banques, des institutions de microfinances, des services de transfert d’argent et des services de payement pour le payement en temps normal, des OPI arrivés à maturité. </p>
  <p><strong style="margin-left:35px"><u>7.1.3 : Obligations logistiques de l’EXPLOITANT vis-à-vis des détenteurs de Comptes
               Marchands
  </u></strong></p>
  <p>Au titre de la présente Convention, les prestations offertes par l’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> à tout détenteur de Compte Marchand comprennent :</p>
  <ul>
  <li>L’accès au <span  style="color: #FF0000;">MCNP</span> pour toutes ses transactions marchandes disponibles répondant à son type de Compte Marchand (Personne Physique ou Morale, Opératrice Economique ou Non Opératrice Economique) ;</li>
  <li>Les dénouements des difficultés des transactions liées aux dysfonctionnements éventuels du <span  style="color: #FF0000;">MCNP</span> ;</li>
  <li>L’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> s’engage à renouveler les supports marchands physiques, la carte ou code, les périphériques par lui fournis aux détenteurs de Comptes Marchands, en cas de vol, de perte ou défectuosité, aux frais du bénéficiaire;</li>
  <li>L’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> met à la disposition de ses Utilisateurs et non Utilisateurs, un service d’assistance pour le bon fonctionnement de leur interface utilisée.</li>
  <li>L’EXPLOITANT s’engage à gérer les réclamations, les recouvrements et les règlements dans la mesure où les opérations concernées sont lisibles sur la plateforme <span  style="color: #7030a0;">ESMC</span>. </li>
  </ul>
  <p style="margin-left:35px"><strong><u>7.1.4: Obligations de l’EXPLOITANT vis-à-vis des Guichets Uniques d’Intégration  
  Universelle (GUIU)
  </u></strong></p>
  <p>Les GUIU sont des marques de l’<span  style="color: #7030a0;">ESMC</span> destinées à jouer le rôle anciennement dévolu aux intégrateurs fixes et ambulants. </p>
  <p>Toute personne désireuse d’utiliser ces marques est tenue de signer un contrat de franchise avec l’EXPLOITANT.  </p>
  <p>L’EXPLOITANT s’engage à payer aux prestataires des GUIU signataire d’un contrat de franchise, les commissions ci-après :</p>
  <ul>
  <li>une commission de 200 FCFA par activation de Compte Marchand personne physique comme personne morale à travers son espace personnel d’intégrateur ; </li>
  <li>une commission de 5% sur les Bons d’Achat neutres prépayés servant à l’approvisionnement des souscripteurs  aux Activités de <span  style="color: #7030a0;">ESMC</span> dans leur guichet ; </li>
  </ul>';

  $htmlpdf .= '

  <p>Les paiements sont faits par OPI étalés sur douze (12) périodes de trente (30) jours ouvrés, à l’instar de tout prestataire et fournisseur sur la plateforme <span  style="color: #7030a0;">ESMC</span>. </p>
  <p style="margin-left:25px"><strong><u>7.2. Obligations spécifiques aux prestataires des GUIU</u></strong></p>
  
  <p>La mission des prestataires des GUIU se limite à l’activation et à la souscription aux quatre (04) activités disponibles sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>
  <p>En aucun cas, l’appellation prestataires de GUIU ne peut être utilisée comme titre professionnel pour solliciter, contracter ou obtenir quelques avantages que ce soient. Le cas échéant, l’acte de tout prestataire des guichets uniques d’intégration  n’engagera aucunement l’<span  style="color: #7030a0;">ESMC</span> vis-à-vis de ceux qui en seraient éventuellement victimes. </p>
  <p>Sans préjudice à l’action judiciaire des éventuelles victimes, l’<span  style="color: #7030a0;">ESMC</span> se réserve le droit de rayer le prestataire des guichets uniques d’intégration  fautif de la liste des prestataires et/ou d’exercer une action judiciaire contre lui.</p>
  <p>Les prestataires des guichets uniques d’intégration  sont responsables des ressources humaines, matérielles et techniques qu’ils utilisent.</p>
  <p style="margin-left:25px"><strong><u>7.3 : Obligations des détenteurs de Comptes Marchands</u></strong></p>
  <p>Dès la réception de sa carte, son code, ses supports et périphériques d’accès à son interface <span  style="color: #FF0000;">MCNP</span>, le détenteur est entièrement responsable de son utilisation qu’elle soit par lui-même ou par un tiers, sur son terminal ou non ;</p>
  <p>En cas de désagrément, de perte ou de vol, le détenteur s’engage à avertir immédiatement l’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> ;</p>
  <p>Le détenteur prend toutes les mesures propres à assurer la sécurité de sa carte, son code, ses supports et périphériques d’accès à son interface <span  style="color: #FF0000;">MCNP</span> ;</p>
  <p>Le détenteur s’engage à utiliser le Compte Marchand et est tenu de se conformer aux règles de confidentialité et de bon usage en général sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>
  <p>Pour participer aux activités qui débouchent sur le payement par OPI, chaque utilisateur de Compte Marchand doit disposer d’un compte bancaire ou d’un compte auprès des structures de micro finances ou des systèmes de transferts d’argent et de payement aux partenaires de <span  style="color: #7030a0;">ESMC</span>. </p>
  <p style="margin-left:25px"><strong><u>7.4 : Obligations des FOURNISSEURS</u></strong></p>
  <p>Pour vendre leurs Biens, Produits et Services sur la plateforme <span  style="color: #7030a0;">ESMC</span>, les FOURNISSEURS disposent d’un Compte Marchand qui à la fois leur permet d’y faire tous leurs achats, consommations usuelles d’entreprises : charges, biens, produits et services de production, d’achat de matières premières, d’investissements additionnels, de réapprovisionnement de leurs marchandises pour la distribution. </p>
  <p>En contrepartie des prestations de la plateforme <span  style="color: #7030a0;">ESMC</span> faites aux FOURNISSEURS et conformément à l’article 2 de la présente, ceux-ci collaborent étroitement avec l’<span  style="color: #7030a0;">ESMC</span> dans le cadre de l’observation des règles indispensables au fonctionnement de son système et modèle qui sont engagés dans l’alternative à l’économie classique, souscrivant aux 17 Objectifs de Développement Durable pour lesquels la plateforme se propose d’être l’outil intégrateur de chaque être humain sans laissés-pour-compte dans le marché. </p>
  <p>Les FOURNISSEURS s’engagent à payer les frais de prestation de service à l’Exploitant d’un montant supérieur ou égal au montant de bénéfice accordé à la vente en mode non récurrent contre OPI et aux avantages accordés aux consommateurs en aval, en contrepartie de l’économie d’échelle, de la solvabilité et de la clientèle garantie  dont ils bénéficient. Ces frais de prestation ou frais de transaction sont prélevés de façon égalitaire par émission automatique de Bons de Livraison aux fins de Production Commune sans toucher directement  aux ressources des Utilisateurs.</p>
  <p>Les Fournisseurs s’engagent à assurer la disponibilité de leur production selon les normes et qualités requises. </p>
  <p>En cas de difficultés à remplir ce dernier engagement de façon autonome, les FOURNISSEURS peuvent souscrire à l’activité de Prestataires de la Production Commune sur la plateforme <span  style="color: #7030a0;">ESMC</span>.</p>
  <p style="margin-left:25px"><strong><u>7.5. Obligations spécifiques aux BANQUES et aux MICROFINANCES </u></strong></p>
  <p>Pour pouvoir assurer les services d’encaissement des montants de souscriptions aux produits de la plateforme et de décaissement pour le payement des OPI à ses fournisseurs, les institutions financières s’engagent à tenir l’interface de l’<span  style="color: #7030a0;">ESMC</span>. Cette interface évite toutes lourdeurs dans les  traitements et les supports physiques (papiers). </p>
  <p>Elle est appelée Partenaires Bancaires et Financiers (PBF) et assure l’instantanéité des opérations de souscriptions aux Bons d’Achat neutres par voie de monnaie bancaire de même que les payements des OPI émis en faveur des fournisseurs par <span  style="color: #7030a0;">ESMC</span>, libellés au nom de l’institution détentrice de l’interface sur la plateforme <span  style="color: #7030a0;">ESMC</span>.  </p>
  <p>L’EXPLOITANT, pourra conclure avec les partenaires bancaires et financiers des contrats de prépaiement dans le cadre de ses services dénommés « Approvisionnement BAn ». </p>
  <p>Chacune de ces institutions conclura avec L’EXPLOITANT, leurs contrats d’entreprise contenant leurs clauses d’encaissement, de décaissement, de caution, de crédits documentaires et éventuellement de fourniture d’autres services. </p>
  <p>Chacune de ces institutions pourra également,  conclure des contrats de crédits liés aux Supports Marchands avec les fournisseurs sur la plateforme de l’EXPLOITANT dans le cadre de ses services dénommés : « Approvisionnement BAn »,  « crédits contre OPI »… </p>
  <p>Article 8 : Mode de règlement</p>';

  $htmlpdf .= '
  <p>Les fournitures seront réglées, selon le type d’acteurs :</p>
  <ul>
  <li>FOURNISSEURS SPECIFIQUES : Ordres de virement,… tirés sur les comptes de l’<span  style="color: #7030a0;">ESMC</span>. </li>
  <li>FOURNISSEURS EXTERNES : Ordres de Prélèvement Irrévocable (OPI) tirés sur les comptes de l’<span  style="color: #7030a0;">ESMC</span>. </li>
  <li>FOURNISSEURS UTILISATEURS : Bons de livraison. </li>
  </ul>
  <p><strong><u>Article 9 : Règlement litigieux de créance </u></strong></p>
  <p>Conformément à l’esprit de collaboration qui régit le fonctionnement de la plateforme <span  style="color: #7030a0;">ESMC</span>, le règlement des créances en difficulté aux Utilisateurs, aux Fournisseurs Spécifiques et Externes doit se faire par équivalent de Biens, Produits et Services disponibles ou à rendre disponibles sur la plateforme suivant la règle de la solvabilité absolue requise pour le bon fonctionnement durable de l’<span  style="color: #7030a0;">ESMC</span>.   </p>
  <p>En cas de litige, l’exigence de paiement exclusivement en monnaie de banque, par le FOURNISSEUR, qu’il soit Utilisateur, Fournisseur spécifique ou Externe, serait un refus du respect de cette règle objet de la présente convention.  </p>
  <p>En cas de cessation des activités ou en cas de crise grave, la reprise des activités est et reste, le seul gage de solvabilité, étant entendu que, la solvabilité n’est réelle qu’en nature, c’est-à-dire en Biens, Produits et Services présents ou futurs. </p>

  <p>L’exigence de paiement des créances en monnaie de banque exclusivement sur la plateforme <span  style="color: #7030a0;">ESMC</span> en cas de litige, serait une cause principale de l’endettement généralisé qui paralyserait le développement durable des activités du marché et des Utilisateurs.   </p>
  
  <p><strong><u>Article 10 : Durée de la convention</u></strong></p>
  <p>La présente convention est établie sur une période d’un (01) an renouvelable par tacite reconduction. 
  La partie qui n’entend pas renouveler la convention doit le signifier à l’autre par Acte d’Huissier ou par tout moyen permettant d’établir la réception effective par le destinataire au moins un (01) mois à l’avance.  
  </p>
  <p><strong><u>Article 11 : Lieu d’exécution de la convention</u></strong></p>
  <p>Les ventes et achats de Biens, Produits et Services en Centrale d’Achat et de Vente entre les parties se feront sur l’ensemble du Territoire National. </p>
  <p><strong><u>Article 12 : Confidentialité </u></strong></p>
  <p>Les parties s’interdisent notamment d’utiliser ou de divulguer, directement ou indirectement à quelque tiers que ce soit, les informations échangées à l’occasion de la négociation, de la conclusion, de l’exécution et/ou après la cessation des présentes.</p>
  <p>Sont considérées comme confidentielles toutes les informations commerciales, financières ou techniques qui ne seraient pas dans le domaine public.</p>
  
  <p style="margin-top:20px">Ne seront cependant pas considérées comme confidentielles, les informations connues du public ou qui seraient, postérieurement à la présente convention, connues du public de façon licite ou dont la divulgation aura expressément été autorisée par les parties.
  </p>
  <p><strong><u>Article 13 : Résiliation</u></strong></p>
  <p>En cas d’inexécution ou de violation par l’une des Parties de l’une quelconque des dispositions de la convention, celle-ci pourra être résiliée unilatéralement et de plein droit par l’autre partie 30 jours après l’envoi d’une mise en demeure par lettre recommandée avec accusé de réception, restée sans effet. 
  La présente convention sera résiliée automatiquement et de plein droit dans l’hypothèse où, par suite d’une modification législative ou règlementaire concernant ses activités, l’une ou l’autre partie se trouverait dans l’impossibilité de poursuivre la convention.
  </p>';
  

  $htmlpdf .= '
  <p><strong><u>Article 14 : Révision</u></strong></p>
  <p>Dans l’intérêt des parties, la présente convention pourra être révisée à tout moment et ceci à la demande de l’une des parties.
  Toute révision devra donner lieu à un avenant signé par chacune des parties.
  </p>
  <p><strong><u>Article 15 : Force majeure</u></strong></p>
  <p>La force majeure s’entend d’un événement imprévisible, irrésistible et indépendant des parties (guerre déclarée ou non, épidémies ou mesures de quarantaine, tremblement de terre…) qui les met dans l’impossibilité de poursuivre le cours normal de l’exécution de la convention. La preuve de la force majeure appartient à celui qui l’invoque.</p>
  <p>Aucune des parties ne sera tenue pour responsable vis-à-vis de l’autre, de l’inexécution ou des retards dans l’exécution de leurs obligations prévues à la présente convention, et qui seraient dus à la survenance d’un cas de force majeure.</p>

  <p><strong><u>Article 16 : Arbitrage de litiges</u></strong></p>
  <p>L’EXPLOITANT <span  style="color: #7030a0;">ESMC</span> s’engage à se rendre disponible en vue du dénouement heureux des difficultés éventuelles de transactions liées au dysfonctionnement du système.</p>
  <p>
  Sous réserve de l’existence en la matière de dispositions légales d’ordre public, toute contestation, tout litige ou quelque différend que ce soit sur l’interprétation ou l’exécution de la présente convention sera réglé à l’amiable. 
  </p>
  <p>En cas d’échec du règlement à l’amiable, le différend sera soumis à la Cour d’Arbitrage du Togo (CATO).</p>
  <p><strong><u>Article 17 : Election de domiciles</u></strong></p>
  <p>Les parties font élection de leur domicile à leurs adresses respectives indiquées dans la présente convention.</p>
  <p><strong><u>Article 18 : Documents annexés à la convention </u></strong></p>
  <p>';

  $htmlpdf .= '
  
  <div class="span4" style="margin-left:-13px">
        <label class="checkbox">
                    <span style="font-size:1.2em;float:left">L’UTILISATEUR </span>
                    <input type="checkbox" style="margin-top:7px" name="check_contractant" id="bien_contractant" value="L’UTILISATEUR">
  
        </label>
  </div>
  <div class="span4">
        <label class="checkbox">
                    <span style="font-size:1.2em;float:left">le FOURNISSEUR SPECIFIQUE</span>
                    <input type="checkbox" style="margin-top:7px" name="check_contractant" id="produit_contractant" value="FOURNISSEUR SPECIFIQUE">
  
        </label>
  </div>
  <div class="span4">
        <label class="checkbox">
                    <span style="font-size:1.2em;float:left">le  FOURNISSEUR EXTERNE        </span>
                    <input type="checkbox" style="margin-top:7px" name="check_contractant" id="service_contractant" value="FOURNISSEUR EXTERNE">
  
        </label>
  </div>
  <small>(Cocher la case correspondante)</small>
  </p>
  <p>
    déclare avoir pris entièrement connaissance des informations, de même que  la table de calcul automatique mis sur le site internet de l’<span  style="color: #7030a0;">ESMC</span>.</p>
  <p>
    <strong>
      <u>Article 19 : Entrée en vigueur</u>
    </strong>
  </p>
  <p>
    La présente convention entre en vigueur à la date de sa validation sur le site internet de L’EXPLOITANT, et tient lieu de loi aux parties qui doivent l’exécuter de bonne foi conformément à l’article 1104 du Code Civil français. 
  </p>
  <p>
    <strong>
      <u>Article 20 : Réactualisation</u>
    </strong>
  </p>
  <p>
    L’utilisateur est tenu de valider la présente convention à chaque fois qu’elle est réactualisée.
  </p>
  <p>
   <strong>Date de signature de la convention:</strong>
   '.$true_date.'
  </p>

  <img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" />
  ';
  $htmlpdf .= '</page>';

  $filename = '../public/conventions.html';
  $somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}


$file = $filename;
if (!is_dir("../../webfiles/pdf_convention/")) {
mkdir("../../webfiles/pdf_convention/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_convention/CONVENTION_".$codemembre."_.html";
$newnom = "CONVENTION_".$codemembre."_";
$newchemin = "../../webfiles/pdf_convention/";

copy($file, $newfile);

ob_start();
include($newfile);
$content = ob_get_clean();

// convert to PDF
require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
try
{
    $html2pdf = new HTML2PDF('P', 'A4', 'fr');
    $html2pdf->pdf->SetDisplayMode('fullpage');
    $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
    //$html2pdf->writeHTML($content);
    $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
}
catch(HTML2PDF_exception $e) {
    echo $e;
    exit;
}

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';
unlink($newfile);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
  $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
}else{
  $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
}

*/
    return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);        
  
}






public static function genererPdfCertificatPP($code_membre) {

   ini_set('memory_limit', '512M');

                    if (substr($code_membre, -1) == "P") {
   $membre = new Application_Model_EuMembre();
   $membreM = new Application_Model_EuMembreMapper();
   $membreM->find($code_membre, $membre);
   $numero_membre = $membre->code_membre;
                    } else if (substr($code_membre, -1) == "M") {
   $membre = new Application_Model_EuMembreMorale();
   $membreM = new Application_Model_EuMembreMoraleMapper();
   $membreM->find($code_membre, $membre);
   $numero_membre = $membre->code_membre_morale;

   $representationM = new Application_Model_EuRepresentationMapper();
   $representation = $representationM->findbyrep($numero_membre);

   $membre2 = new Application_Model_EuMembre();
   $membre2M = new Application_Model_EuMembreMapper();
   $membre2M->find($representation->code_membre, $membre2);
                    }


$date_id = new Zend_Date(Zend_Date::ISO_8601);

$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/CM3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td colspan="2" align="center"><strong><em><u>CERTIFICAT DE COMPTE MARCHAND</u></em></strong></td>
    <td align="center"><barcode type="C39" value="'.$numero_membre.'" label="none"></barcode></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" align="right"><barcode type="C39" value="'.$numero_membre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
       */

                    if (substr($numero_membre, -1) == "P") {

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Nom & Prénom(s)</u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
                    } else if (substr($numero_membre, -1) == "M") {

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Raison sociale </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre->raison_sociale.'</em></strong></td>
  </tr>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Représentant</u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre2->nom_membre.' '.$membre2->prenom_membre.'</em></strong></td>
  </tr>
  ';
                    }



$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Téléphone Portable </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre->portable_membre.'</em></strong></td>
  </tr>
';

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>E-mail </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre->email_membre.'</em></strong></td>
  </tr>
';

$htmlpdf .= '
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Code Membre </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$numero_membre.'</em></strong></td>
  </tr>
';

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Login </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$numero_membre.'</em></strong></td>
  </tr>
';

//Bienvenue dans le rÃ©seau mcnp! Votre numÃ©ro de membre est: 0010010010010000001M. Votre Code Secret est: A6GbGIiC
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010010000002P. Votre Code Secret est: GGrcxrzN
//Bienvenue dans le reseau mcnp!!! Votre numero de membre est: 0010010010020000001M. Votre Code Secret est: AwodjX0H
//Bienvenue dans le reseau mcnp! Votre numero de membre est : 0010010010020000004M. Votre Code Secret est: DPlj99w0
//Bienvenue dans le reseau mcnp! Votre numero de membre est: 0010010010020000008M. Votre Code Secret est: HJrCD0zy
//Bienvenue dans le reseau mcnp!!! Votre numero de membre est: 0010010010020000009M. Votre Code Secret est: GWF5YWxy
//Bienvenue dans le reseau mcnp! Votre numero de membre est: 0010010010020000010M. Votre Code Secret est: 8PBJOGZr
//Bienvenue dans le reseau MCNP !!!  Votre numero de membre est: 0010010010020000006P. Votre Code Secret est:
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010020000007P  Votre Code Secret est : 3F0jcG12
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010010000011P  Votre Code Secret est : cwW2kL5i
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010010000004M. Votre Code Secret est: LzWZlRdq
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000015P  Votre Code Secret est : phGTxwbc
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000016P  Votre Code Secret est : vJ3QI6AW
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010010000004P. Votre Code Secret est: ZJfkbZc9
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000017P  Votre Code Secret est : 2YcO7BgR
//Bienvenue dans le reseau ESMC !!!  Votre numero de membre est: 0010010010010000018P. Votre Code Secret est: MQu9erDi
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000019P  Votre Code Secret est : fuaSKW63
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000007M  Votre Code Secret est : QglLEmGB

                        $eusms = new Application_Model_DbTable_EuSms();
                        $select = $eusms->select();
                        $select->where("smsbody LIKE '%Votre Code Secret est%'");
                        $select->where("smsbody LIKE '%".$numero_membre."%'");
                        //$select->where("recipient = ? ", $membre->portable_membre);
                        $select->order(array('neng ASC'));
                        $select->limit(1);
                        $rowseusms = $eusms->fetchRow($select);
                        if(count($rowseusms) > 0) {
        $pos = strripos($rowseusms->smsbody, "est");
        $code_secret = substr($rowseusms->smsbody, ($pos + strlen("est") + 2), strlen($rowseusms->smsbody) - ($pos + strlen("est") + 2));

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Code Secret </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$code_secret.'</em></strong></td>
  </tr>
';
                        } else {
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Code Secret </u>: </em></td>
    <td align="left" colspan="2"><strong><em>Code Secret non trouvé</em></strong></td>
  </tr>
';
                        }

/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */



$htmlpdf .= '
  <tr>
    <td align="right">&nbsp;</td>
    <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($membre->date_identification).'</em></strong></td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';

////////////////////////////////////////////////////////////////////////////////
$filename = '../public/certificats.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_certificat/")) {
mkdir("../../webfiles/pdf_certificat/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_certificat/CERTIFICAT_".$numero_membre."_.html";
$newnom = "CERTIFICAT_".$numero_membre."_";
$newchemin = "../../webfiles/pdf_certificat/";

copy($file, $newfile);

    ob_start();

    include(dirname(__FILE__).'/../'.$newfile);

    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

/*

         if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}







public static function genererPdfCertificatPPQRCODE($code_membre) {

   ini_set('memory_limit', '512M');

                    if (substr($code_membre, -1) == "P") {
   $membre = new Application_Model_EuMembre();
   $membreM = new Application_Model_EuMembreMapper();
   $membreM->find($code_membre, $membre);
   $numero_membre = $membre->code_membre;
                    } else if (substr($code_membre, -1) == "M") {
   $membre = new Application_Model_EuMembreMorale();
   $membreM = new Application_Model_EuMembreMoraleMapper();
   $membreM->find($code_membre, $membre);
   $numero_membre = $membre->code_membre_morale;

   $representationM = new Application_Model_EuRepresentationMapper();
   $representation = $representationM->findbyrep($numero_membre);

   $membre2 = new Application_Model_EuMembre();
   $membre2M = new Application_Model_EuMembreMapper();
   $membre2M->find($representation->code_membre, $membre2);
                    }


$date_id = new Zend_Date(Zend_Date::ISO_8601);

$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/CM3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td colspan="2" align="center"><strong><em><u>CERTIFICAT DE COMPTE MARCHAND</u></em></strong></td>
    <td align="center"><barcode type="C39" value="'.$numero_membre.'" label="none"></barcode></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" align="right"><barcode type="C39" value="'.$numero_membre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
       */

                    if (substr($numero_membre, -1) == "P") {

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Nom & Prénom(s)</u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
                    } else if (substr($numero_membre, -1) == "M") {

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Raison sociale </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre->raison_sociale.'</em></strong></td>
  </tr>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Représentant</u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre2->nom_membre.' '.$membre2->prenom_membre.'</em></strong></td>
  </tr>
  ';
                    }



$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Téléphone Portable </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre->portable_membre.'</em></strong></td>
  </tr>
';

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>E-mail </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$membre->email_membre.'</em></strong></td>
  </tr>
';

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Code Membre </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$numero_membre.'</em></strong></td>
  </tr>
';
/*
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Login </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$numero_membre.'</em></strong></td>
  </tr>
';
*/
//Bienvenue dans le rÃ©seau mcnp! Votre numÃ©ro de membre est: 0010010010010000001M. Votre Code Secret est: A6GbGIiC
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010010000002P. Votre Code Secret est: GGrcxrzN
//Bienvenue dans le reseau mcnp!!! Votre numero de membre est: 0010010010020000001M. Votre Code Secret est: AwodjX0H
//Bienvenue dans le reseau mcnp! Votre numero de membre est : 0010010010020000004M. Votre Code Secret est: DPlj99w0
//Bienvenue dans le reseau mcnp! Votre numero de membre est: 0010010010020000008M. Votre Code Secret est: HJrCD0zy
//Bienvenue dans le reseau mcnp!!! Votre numero de membre est: 0010010010020000009M. Votre Code Secret est: GWF5YWxy
//Bienvenue dans le reseau mcnp! Votre numero de membre est: 0010010010020000010M. Votre Code Secret est: 8PBJOGZr
//Bienvenue dans le reseau MCNP !!!  Votre numero de membre est: 0010010010020000006P. Votre Code Secret est:
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010020000007P  Votre Code Secret est : 3F0jcG12
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010010000011P  Votre Code Secret est : cwW2kL5i
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010010000004M. Votre Code Secret est: LzWZlRdq
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000015P  Votre Code Secret est : phGTxwbc
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000016P  Votre Code Secret est : vJ3QI6AW
//Bienvenue dans le reseau MCNP! Votre numero de membre est: 0010010010010000004P. Votre Code Secret est: ZJfkbZc9
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000017P  Votre Code Secret est : 2YcO7BgR
//Bienvenue dans le reseau ESMC !!!  Votre numero de membre est: 0010010010010000018P. Votre Code Secret est: MQu9erDi
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000019P  Votre Code Secret est : fuaSKW63
//Bienvenue dans le reseau ESMC ! Votre numero de membre est: 0010010010010000007M  Votre Code Secret est : QglLEmGB
/*
                        $eusms = new Application_Model_DbTable_EuSms();
                        $select = $eusms->select();
                        $select->where("smsbody LIKE '%Votre Code Secret est%'");
                        $select->where("smsbody LIKE '%".$numero_membre."%'");
                        //$select->where("recipient = ? ", $membre->portable_membre);
                        $select->order(array('neng ASC'));
                        $select->limit(1);
                        $rowseusms = $eusms->fetchRow($select);
                        if(count($rowseusms) > 0) {
        $pos = strripos($rowseusms->smsbody, "est");
        $code_secret = substr($rowseusms->smsbody, ($pos + strlen("est") + 2), strlen($rowseusms->smsbody) - ($pos + strlen("est") + 2));

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Code Secret </u>: </em></td>
    <td align="left" colspan="2"><strong><em>'.$code_secret.'</em></strong></td>
  </tr>
';
                        } else {
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td align="left"><em><u>Code Secret </u>: </em></td>
    <td align="left" colspan="2"><strong><em>Code Secret non trouvé</em></strong></td>
  </tr>
';
                        }
*/
/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */



$bio = ',biometrie';
$htmlpdf .= '
  <tr>
    <td align="right">&nbsp;</td>
    <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($membre->date_identification).'</em></strong></td>
    <td align="center" colspan="2">&nbsp;</td>
  </tr>
';

$htmlpdf .= '
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="right" colspan="2"><qrcode value="'.$numero_membre.$bio.'" ec="L" style="border: none; width: 30mm;"></qrcode></td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';

/*
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" align="center">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" align="center">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" align="center">&nbsp;</td>
  </tr>
';

$bio = ',biometrie';
$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><qrcode value="'.$numero_membre.$bio.'" ec="L" style="border: none; width: 100mm;"></qrcode></td>
  </tr>
';
*/
/*
include(dirname(__FILE__).'/../controllers/Classes/phpqrcode/qrlib.php');
  $code_membre = $numero_membre;
  //set it to writable location, a place for temp generated PNG files
  $PNG_TEMP_DIR = dirname(__FILE__).DIRECTORY_SEPARATOR.'../../public/qrcode_cache'.DIRECTORY_SEPARATOR;
  //html PNG location prefix
  $filename = $PNG_TEMP_DIR.''.$code_membre.'.png';
  $codeContents = '12345';
  // generating
  // $text = QRcode::png($codeContents, false, '../qrcode.png');
  QRcode::png ($code_membre.',biometrie', $filename, QR_ECLEVEL_L, 300, 4, false);
  //  chmod($filename , 0777);
  //echo "<center>Code membre : ".$code_membre."<br/><br/> <img src='/qrcode_cache/".$code_membre.".png'/></center>";

         if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = Util_Utils::getParamEsmcLib(9);
    }else{
      $domaine = Util_Utils::getParamEsmcLib(10);
    }

$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><img src="http://'.$domaine.'/qrcode_cache/'.$code_membre.'.png"/></td>
  </tr>
';
*/

/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';

////////////////////////////////////////////////////////////////////////////////
$filename = '../public/certificats.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_certificat/")) {
mkdir("../../webfiles/pdf_certificat/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_certificat/CERTIFICAT_".$numero_membre."_.html";
$newnom = "CERTIFICAT_".$numero_membre."_";
$newchemin = "../../webfiles/pdf_certificat/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

$domaine = "esmcgie.com";

/*
    if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {

      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));

    }else{

      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));

    }
  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}
















public static function genererPdfBAn($bon_neutre_id = 0, $bon_neutre_code = "") {

   ini_set('memory_limit', '512M');


if($bon_neutre_id > 0){
   $bon_neutre = new Application_Model_EuBonNeutre();
   $bon_neutreM = new Application_Model_EuBonNeutreMapper();
   $bon_neutreM->find($bon_neutre_id, $bon_neutre);
}else if($bon_neutre_code != ""){
   $bon_neutre2M = new Application_Model_EuBonNeutreMapper();
   $bon_neutre2 = $bon_neutre2M->fetchAllByCode($bon_neutre_code);

   $bon_neutre = new Application_Model_EuBonNeutre();
   $bon_neutreM = new Application_Model_EuBonNeutreMapper();
   $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
}else{
    return;
}

$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'sm_images/1-MABAn.png">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';

  $htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';

/*$htmlpdf .= '
  <tr>
    <td colspan="4" align="center"><strong><em><u>BON D\'ACHAT neutre (BAn) : '.$bon_neutre->bon_neutre_code.'</u></em></strong></td>
  </tr>';*/
  $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
  $htmlpdf .= '
  <tr>
    <td colspan="3" align="center"><strong><em><u>BON D\'ACHAT neutre (BAn)</u></em> : '.$bon_neutre->bon_neutre_code.'</strong></td>
    <td align="center"><barcode type="C39" value="'.$bon_neutre->bon_neutre_code.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
   $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

                    if ($bon_neutre->bon_neutre_nom != "" && $bon_neutre->bon_neutre_nom != NULL) {

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Nom & Prénom(s)</u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$bon_neutre->bon_neutre_nom.' '.$bon_neutre->bon_neutre_prenom.'</em></strong></td>
  </tr>
  ';
                    }
                    if ($bon_neutre->bon_neutre_raison != "" && $bon_neutre->bon_neutre_raison != NULL) {

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Raison sociale </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$bon_neutre->bon_neutre_raison.'</em></strong></td>
  </tr>
';
                    }
$htmlpdf .= '
  <tr>
    <td align="left" colspan="4">
        <em><u>Téléphone Portable </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$bon_neutre->bon_neutre_mobile.'</em></strong> &nbsp;&nbsp;&nbsp;&nbsp;
        <em><u>E-mail </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$bon_neutre->bon_neutre_email.'</em></strong>
    </td>
  </tr>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';


/*
$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Téléphone Portable </u>: </em></td>
    <td align="left" colspan="3"><strong><em>'.$bon_neutre->bon_neutre_mobile.'</em></strong></td>
  </td>
  </tr>
';

$htmlpdf .= '
  <tr>
    <td align="left"><em><u>E-mail </u>: </em></td>
    <td align="left" colspan="3"><strong><em>'.$bon_neutre->bon_neutre_email.'</em></strong></td>
  </tr>
';

$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Code BAn </u>: </em></td>
    <td align="left" colspan="3"><strong><em>'.$bon_neutre->bon_neutre_code.'</em></strong></td>
  </tr>
';
*/
$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Libellé</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Coût unitaire</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><strong><em>Quantité</em></strong></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Total</strong></em></td>
        </tr>';

$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Achat de Bon d\'Achat neutre (BAn)</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon_neutre->bon_neutre_montant), 0, ',', ' ').'</em></td>
                <td align="center" style="border:#000 1px solid;"><em>1</em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon_neutre->bon_neutre_montant), 0, ',', ' ').'</em></td>
        </tr>';
/*
$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Montant </u>: </em></td>
    <td align="left" colspan="3"><strong><em>'.number_format(($bon_neutre->bon_neutre_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
';*/
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($bon_neutre->bon_neutre_montant), 250).' CFA</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */

$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon_neutre->bon_neutre_date).'</em></strong></td>
    <td align="left">&nbsp;</td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/achats.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_achat/")) {
mkdir("../../webfiles/pdf_achat/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_achat/BON_ACHAT_NEUTRE_".$bon_neutre->bon_neutre_id."_.html";
$newnom = "BON_ACHAT_NEUTRE_".$bon_neutre->bon_neutre_id."_";
$newchemin = "../../webfiles/pdf_achat/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*

    if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}



public static function genererRecuPdfBAn($id) {

  ini_set('memory_limit', '512M');
  

if($id != "") {
  $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
  $bon_neutre_detailM = new Application_Model_EuBonNeutreDetailMapper();
  $bon_neutre_detailM->find($id,$bon_neutre_detail);

  $bon_neutre = new Application_Model_EuBonNeutre();
  $bon_neutreM = new Application_Model_EuBonNeutreMapper();
  $bon_neutreM->find($bon_neutre_detail->bon_neutre_id, $bon_neutre);
  
  
} else {
   return;
}

$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
   <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/BAn3.gif">
   ';

$htmlpdf .= '
<page_footer>
<table>
   <tr>
       <td align="center">
           <hr>
           <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
           <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       </td>
   </tr>
</table>
</page_footer>
   ';

 $htmlpdf .= '
<table width="738" border="0">
<tbody>
 <tr>
   <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
 </tr>';

/*$htmlpdf .= '
 <tr>
   <td colspan="4" align="center"><strong><em><u>BON D\'ACHAT neutre (BAn) : '.$bon_neutre->bon_neutre_code.'</u></em></strong></td>
 </tr>';*/
 $htmlpdf .= '
 <tr>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
 </tr>';
 $htmlpdf .= '
 <tr>
   <td colspan="3" align="center"><strong><em><u>Reçu d\'achat du BON D\'ACHAT neutre (BAn)</u></em> : '.$bon_neutre_detail->bon_neutre_detail_code.'</strong></td>
   <td align="center"><barcode type="C39" value="'.$bon_neutre_detail->bon_neutre_detail_code.'" label="none"></barcode></td>
 </tr>';// style="width:150mm; height:10mm;"
  $htmlpdf .= '
 <tr>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
 </tr>';

                   if ($bon_neutre->bon_neutre_nom != "" && $bon_neutre->bon_neutre_nom != NULL) {

$htmlpdf .= '
 <tr>
   <td align="left" colspan="4"><em><u>Nom & Prénom(s)</u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$bon_neutre->bon_neutre_nom.' '.$bon_neutre->bon_neutre_prenom.'</em></strong></td>
 </tr>
 ';
                   }
                   if ($bon_neutre->bon_neutre_raison != "" && $bon_neutre->bon_neutre_raison != NULL) {

$htmlpdf .= '
 <tr>
   <td align="left" colspan="4"><em><u>Raison sociale </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$bon_neutre->bon_neutre_raison.'</em></strong></td>
 </tr>
';
                   }
$htmlpdf .= '
 <tr>
   <td align="left" colspan="4">
       <em><u>Téléphone Portable </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$bon_neutre->bon_neutre_mobile.'</em></strong> &nbsp;&nbsp;&nbsp;&nbsp;
   </td>
 </tr>
';
$htmlpdf .= '
 <tr>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
 </tr>';


/*
$htmlpdf .= '
 <tr>
   <td align="left"><em><u>Téléphone Portable </u>: </em></td>
   <td align="left" colspan="3"><strong><em>'.$bon_neutre->bon_neutre_mobile.'</em></strong></td>
 </td>
 </tr>
';

$htmlpdf .= '
 <tr>
   <td align="left"><em><u>E-mail </u>: </em></td>
   <td align="left" colspan="3"><strong><em>'.$bon_neutre->bon_neutre_email.'</em></strong></td>
 </tr>
';

$htmlpdf .= '
 <tr>
   <td align="left"><em><u>Code BAn </u>: </em></td>
   <td align="left" colspan="3"><strong><em>'.$bon_neutre->bon_neutre_code.'</em></strong></td>
 </tr>
';
*/
$htmlpdf .= '
       <tr>
               <td align="left" style="border:#000 1px solid;"><em><strong>Libellé</strong></em></td>
               <td align="center" style="border:#000 1px solid;"><em><strong>Coût unitaire</strong></em></td>
               <td align="center" style="border:#000 1px solid;"><strong><em>Quantité</em></strong></td>
               <td align="center" style="border:#000 1px solid;"><em><strong>Total</strong></em></td>
       </tr>';

$htmlpdf .= '
       <tr>
               <td align="left" style="border:#000 1px solid;"><em><strong>Achat de Bon d\'Achat neutre (BAn)</strong></em></td>
               <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon_neutre_detail->bon_neutre_detail_montant), 0, ',', ' ').'</em></td>
               <td align="center" style="border:#000 1px solid;"><em>1</em></td>
               <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon_neutre_detail->bon_neutre_detail_montant), 0, ',', ' ').'</em></td>
       </tr>';
/*
$htmlpdf .= '
 <tr>
   <td align="left"><em><u>Montant </u>: </em></td>
   <td align="left" colspan="3"><strong><em>'.number_format(($bon_neutre->bon_neutre_montant), 0, ',', ' ').' FCFA</em></strong></td>
 </tr>
';*/
$htmlpdf .= '
 <tr>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
 </tr>';
$htmlpdf .= '
 <tr>
   <td align="left" colspan="4"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($bon_neutre_detail->bon_neutre_detail_montant), 250).' CFA</em></strong></td>
 </tr>
';


/*$htmlpdf .= '
 <tr>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;</td>
   <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
 </tr>'; */

$htmlpdf .= '
 <tr>
   <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon_neutre_detail->bon_neutre_detail_date).'</em></strong></td>
   <td align="left">&nbsp;</td>
   <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
 </tr>
';


/*$htmlpdf .= '
 <tr>
   <td align="center" colspan="4">
   <hr>
   Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
 </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/achats.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

   // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
   // Le pointeur de fichier est placé à la fin du fichier
   // c'est là que $somecontent sera placé
   if (!$handle = fopen($filename, 'w+')) {
        echo "Impossible d'ouvrir le fichier ($filename)";
        exit;
   }

   // Ecrivons quelque chose dans notre fichier.
   if (fwrite($handle, $somecontent) === FALSE) {
      echo "Impossible d'écrire dans le fichier ($filename)";
      exit;
   }

   //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

   fclose($handle);

} else {
   echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_achat/")) {
mkdir("../../webfiles/pdf_achat/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_achat/BON_ACHAT_NEUTRE_".$bon_neutre->bon_neutre_id."_.html";
$newnom = "BON_ACHAT_NEUTRE_".$bon_neutre->bon_neutre_id."_";
$newchemin = "../../webfiles/pdf_achat/";

copy($file, $newfile);

   ob_start();
   include(dirname(__FILE__).'/../'.$newfile);
   $content = ob_get_clean();

   // convert to PDF
   require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
   try
   {
       $html2pdf = new HTML2PDF('L', 'A5', 'fr');
       $html2pdf->pdf->SetDisplayMode('fullpage');
       $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
       //$html2pdf->writeHTML($content);
       $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
   }
   catch(HTML2PDF_exception $e) {
       echo $e;
       exit;
   }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);


$domaine = Util_Utils::getParamEsmc(9);

/*

       if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
     $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
   }else{
     $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
   }

   */
       return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}










public static function genererPdfOPI($traite_id, $id_compte = 0, $code_banque = "", $num_compte_bancaire = "") {
         ini_set('memory_limit', '512M');

        if($id_compte > 0){
        $comptebancaire = new Application_Model_EuCompteBancaire();
         $comptebancaireM = new Application_Model_EuCompteBancaireMapper();
         $comptebancaireM->find($id_compte, $comptebancaire);

         $comptebancaire_code_banque = $comptebancaire->code_banque;
         $comptebancaire_num_compte_bancaire = $comptebancaire->num_compte_bancaire;
        
        }else if($code_banque != ""){
         $comptebancaire_code_banque = $code_banque;
         $comptebancaire_num_compte_bancaire = $num_compte_bancaire;

        }else {
         $comptebancaire_code_banque = "";
         $comptebancaire_num_compte_bancaire = "";
        }

        $date_id = new Zend_Date(Zend_Date::ISO_8601);

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


         $donnees = $tpagcp;

         $banque = new Application_Model_EuBanque();
         $banqueM = new Application_Model_EuBanqueMapper();
         $banqueM->find($traite->traite_code_banque, $banque);

         $date_id = new Zend_Date(Zend_Date::ISO_8601);
         $date_traite = new Zend_Date(Zend_Date::ISO_8601);
         $date_deb = new Zend_Date($traite->traite_date_debut, Zend_Date::ISO_8601);
         $date_fin = new Zend_Date($traite->traite_date_fin, Zend_Date::ISO_8601);
         $periodes = Util_Utils::getParametre('periode', 'valeur');


  if (substr($donnees->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($donnees->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($donnees->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($donnees->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }


$numero_opi = substr($donnees->code_membre, 9, -1).$traite->traite_id;
$numero_opi2 = substr($donnees->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$donnees->ntf."/".substr($donnees->date_deb, 8, 2)."-".substr($donnees->date_deb, 5, 2)."-".substr($donnees->date_deb, 0, 4);


/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($traite->traite_id, $traite);
*/
        $traite->setMode_paiement($comptebancaire_code_banque);
        $traite->setReference_paiement($comptebancaire_num_compte_bancaire);
        if($traite->getTraite_numero() == "" || $traite->getTraite_numero() == NULL){
        $traite->setTraite_numero($numero_opi);
        }
        //$traite->setTraite_imprimer(1);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($tpagcp->id_tpagcp, $tpagcp);
*/
        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    //$tpagcpM->update($tpagcp);


/////telephone
$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($donnees->code_membre);
$portable_membre = "";
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);


$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/OPI3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="2" align="center"><strong>ORDRE DE PRELEVEMENT IRREVOCABLE N° :'.$numero_opi2.'</strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td align="center"><div style="text-align: center; border: solid 2px #000000; width:200px; height:15px; margin: 3px;"><strong>'.$donnees->code_membre.'</strong> &nbsp;</div></td>
    <td align="center"><barcode type="C39" value="'.$numero_opi.'" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">En règlement du Bon de Livraison (<strong>BL</strong>) <strong>'.$donnees->type_bl.'</strong> N° <strong>'.$donnees->numero_bl.'</strong><br /><br /></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">Nous soussignés, <strong>M. SAMA Essohamlon</strong></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">Agissant en qualité de <strong>Gérant</strong></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="justify">De l\'ESMC (Entreprise Sociale de  Marché Commun) SARL U au capital de 1&nbsp;000&nbsp;000 F CFA&nbsp;; Siège  social&nbsp;: Lomé(TOGO), Wuiti-Atchati, Angle rue Sagouda, Kiyéou et Bandjéli  03BP 30038, immatriculé au RCCM sous le numéro TG-LOM 2014 B514, Tél 22 19 32  71</td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left"><strong>Donnons  ordre, de façon irrévocable, à MONSIEUR LE DIRECTEUR GENERAL DE LA BANQUE  '.$banque->libelle_banque.' ('.$banque->code_banque.')</strong></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">D\'effectuer un prélèvement de la somme de <strong>'.number_format($donnees->mont_tranche,0,',',' ').' FCFA</strong> ('.Util_Utils::lettre($donnees->mont_tranche,0).')</td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">Le prélèvement devant intervenir à la date du : <strong>'.datefr($traite->traite_date_fin).'</strong></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="2" align="left">Au profit de <div style="text-align: center; border: solid 1px #000000; width:80%; margin: 5px; padding: 10px;">&nbsp; <strong>'.$designation_membre.' - Mobile : '.$portable_membre.'</strong> &nbsp;</div></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="justify">En vue d\'assurer l\'exécution de cet ordre, nous autorisons la banque à prélever à l\'échéance de la date de prélèvement ci-dessus indiquée les provisions correspondantes à la somme de prélèvement ci-dessus indiquée sur le compte N° <div style="text-align: center; border: solid 1px #000000; width:200px; margin: 5px; padding: 10px;">&nbsp; <strong>'.$banque->compte_banque.'</strong> &nbsp;</div></td>
  </tr>
  <tr>
    <td colspan="2" align="justify">Ces instructions ne pourront être  révoquées sans l\'accord écrit et formel du donneur d\'ordre. <br>
Nous vous prions d\'agréer, Monsieur le Directeur Général,  l\'expression de nos sentiments distingués.</td>
  </tr>
  <tr>
    <td align="left">&nbsp;</td>
    <td align="left">&nbsp;</td>
  </tr>
  <tr>
    <td align="center"><h4><strong>N.B. : FRAIS A LA CHARGE DU BENEFICIAIRE</strong></h4><!--<strong>Visa et cachet du Bénéficiaire</strong>-->
';
if($id_compte > 0){
$htmlpdf .= '
      <h2><strong>'.$comptebancaire_code_banque.' : '.$comptebancaire_num_compte_bancaire.'</strong></h2>
';
}else if($code_banque != ""){
$htmlpdf .= '
      <h2><strong>'.$comptebancaire_code_banque.' : '.$comptebancaire_num_compte_bancaire.'</strong></h2>
';
}else if($traite->mode_paiement != "" && $traite->reference_paiement != ""){
$htmlpdf .= '
      <h2><strong>'.$traite->mode_paiement.' : '.$traite->reference_paiement.'</strong></h2>
';
}else{
$htmlpdf .= '
';
  }
$htmlpdf .= '
        </td>
    <td align="center"><strong>Signature  du donneur d\'ordre</strong></td>
  </tr>
<tr>
    <td align="center">&nbsp;</td>
    <td align="center"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/traite.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_traite/")) {
mkdir("../../webfiles/pdf_traite/", 0777);
}

$newfile = "../../webfiles/pdf_traite/OPI_".str_replace("-", "_", str_replace("/", "_", $numero_opi2))."_".$donnees->code_membre."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "OPI_".str_replace("-", "_", str_replace("/", "_", $numero_opi2))."_".$donnees->code_membre."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_traite/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);


}





  public static function genererPdfOPIold($traite_id, $id_compte = 0, $code_banque = "", $num_compte_bancaire = "") {
         ini_set('memory_limit', '512M');

        if($id_compte > 0){
        $comptebancaire = new Application_Model_EuCompteBancaire();
         $comptebancaireM = new Application_Model_EuCompteBancaireMapper();
         $comptebancaireM->find($id_compte, $comptebancaire);

         $comptebancaire_code_banque = $comptebancaire->code_banque;
         $comptebancaire_num_compte_bancaire = $comptebancaire->num_compte_bancaire;
        
        }else if($code_banque != ""){
         $comptebancaire_code_banque = $code_banque;
         $comptebancaire_num_compte_bancaire = $num_compte_bancaire;

        }else {
         $comptebancaire_code_banque = "";
         $comptebancaire_num_compte_bancaire = "";
        }

        $date_id = new Zend_Date(Zend_Date::ISO_8601);

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


         $donnees = $tpagcp;

         $banque = new Application_Model_EuBanque();
         $banqueM = new Application_Model_EuBanqueMapper();
         $banqueM->find($traite->traite_code_banque, $banque);

         $date_id = new Zend_Date(Zend_Date::ISO_8601);
         $date_traite = new Zend_Date(Zend_Date::ISO_8601);
         $date_deb = new Zend_Date($traite->traite_date_debut, Zend_Date::ISO_8601);
         $date_fin = new Zend_Date($traite->traite_date_fin, Zend_Date::ISO_8601);
         $periodes = Util_Utils::getParametre('periode', 'valeur');


         $detail_tpagcpM = new Application_Model_EuDetailTpagcpMapper();
         $detail_tpagcp = $detail_tpagcpM->findDetailTpagcpTpagcp($id_tpagcp);

if(count($detail_tpagcp) == 0){
  if (substr($donnees->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($donnees->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($donnees->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($donnees->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }

}else if (count($detail_tpagcp) == 1) {
$row = $detail_tpagcp[0];
$tegc = new Application_Model_EuTegc();
$tegcM = new Application_Model_EuTegcMapper();
$tegcM->find($row->code_tegc, $tegc);
$designation_membre = $tegc->nom_tegc;

}else if (count($detail_tpagcp) > 1) {
  if (substr($donnees->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($donnees->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($donnees->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($donnees->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }

}

$numero_opi = substr($donnees->code_membre, 9, -1).$traite->traite_id;
$numero_opi2 = substr($donnees->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$donnees->ntf."/".substr($donnees->date_deb, 8, 2)."-".substr($donnees->date_deb, 5, 2)."-".substr($donnees->date_deb, 0, 4);


/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($traite->traite_id, $traite);
*/
        $traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(1);
        $traite->setMode_paiement($comptebancaire_code_banque);
        $traite->setReference_paiement($comptebancaire_num_compte_bancaire);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($tpagcp->id_tpagcp, $tpagcp);
*/
        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);


/////telephone
$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($donnees->code_membre);
$portable_membre = "";
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);


$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/OPI3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège Social: Wuiti-Atsati, Angle rues, Sagouda, Kiyéou et Bandjéli  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="2" align="center"><strong>ORDRE DE PRELEVEMENT IRREVOCABLE N° :'.$numero_opi2.'</strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td align="center"><div style="text-align: center; border: solid 2px #000000; width:200px; height:15px; margin: 3px;"><strong>'.$donnees->code_membre.'</strong> &nbsp;</div></td>
    <td align="center"><barcode type="C39" value="'.$numero_opi.'" label="none"></barcode></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">En règlement du Bon de Livraison (<strong>BL</strong>) <strong>'.$donnees->type_bl.'</strong> N° <strong>'.$donnees->numero_bl.'</strong><br /><br /></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">Nous soussignés, <strong>M. SAMA Essohamlon</strong></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">Agissant en qualité de <strong>Gérant</strong></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="justify">De l\'ESMC (Entreprise Sociale de  Marché Commun) SARL U au capital de 1&nbsp;000&nbsp;000 F CFA&nbsp;; Siège  social&nbsp;: Lomé(TOGO), Wuiti-Atchati, Angle rue Sagouda, Kiyéou et Bandjéli  03BP 30038, immatriculé au RCCM sous le numéro TG-LOM 2014 B514, Tél 22 19 32  71</td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left"><strong>Donnons  ordre, de façon irrévocable, à MONSIEUR LE DIRECTEUR GENERAL DE LA BANQUE  '.$banque->libelle_banque.' ('.$banque->code_banque.')</strong></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">D\'effectuer un prélèvement de la somme de <strong>'.number_format($donnees->mont_tranche,0,',',' ').' FCFA</strong> ('.Util_Utils::lettre($donnees->mont_tranche,0).')</td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="left">Le prélèvement devant intervenir à la date du : <strong>'.datefr($traite->traite_date_fin).'</strong></td>
  </tr>
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>';
if($id_compte > 0){
$htmlpdf .= '
  <tr>
    <td colspan="2" align="left">Au profit de <div style="text-align: center; border: solid 1px #000000; width:80%; margin: 5px; padding: 10px;">&nbsp; <strong>'.$designation_membre.' - Mobile : '.$portable_membre.'</strong> &nbsp;</div></td>
  </tr>';
}else if($code_banque != ""){
$htmlpdf .= '
  <tr>
    <td colspan="2" align="left">Au profit de <div style="text-align: center; border: solid 1px #000000; width:80%; margin: 5px; padding: 10px;">&nbsp; <strong>'.$designation_membre.' - Mobile : '.$portable_membre.'</strong> &nbsp;</div></td>
  </tr>';
}else{
$htmlpdf .= '
  <tr>
    <td colspan="2" align="left">Au profit de <div style="text-align: center; border: solid 1px #000000; width:80%; margin: 5px; padding: 10px;">&nbsp; <strong>'.$designation_membre.' - Mobile : '.$portable_membre.'</strong> &nbsp;</div></td>
  </tr>';
}
$htmlpdf .= '
  <tr>
    <td colspan="2" align="left">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" align="justify">En vue d\'assurer l\'exécution de cet ordre, nous autorisons la banque à prélever à l\'échéance de la date de prélèvement ci-dessus indiquée les provisions correspondantes à la somme de prélèvement ci-dessus indiquée sur le compte N° <div style="text-align: center; border: solid 1px #000000; width:200px; margin: 5px; padding: 10px;">&nbsp; <strong>'.$banque->compte_banque.'</strong> &nbsp;</div></td>
  </tr>
  <tr>
    <td colspan="2" align="justify">Ces instructions ne pourront être  révoquées sans l\'accord écrit et formel du donneur d\'ordre. <br>
Nous vous prions d\'agréer, Monsieur le Directeur Général,  l\'expression de nos sentiments distingués.</td>
  </tr>
  <tr>
    <td align="left">&nbsp;</td>
    <td align="left">&nbsp;</td>
  </tr>
  <tr>
    <td align="center"><h4><strong>N.B. : FRAIS A LA CHARGE DU BENEFICIAIRE</strong></h4><!--<strong>Visa et cachet du Bénéficiaire</strong>-->
';
if($id_compte > 0){
$htmlpdf .= '
      <h2><strong>'.$comptebancaire_code_banque.' : '.$comptebancaire_num_compte_bancaire.'</strong></h2>
';
}else if($code_banque != ""){
$htmlpdf .= '
      <h2><strong>'.$comptebancaire_code_banque.' : '.$comptebancaire_num_compte_bancaire.'</strong></h2>
';
}else{
$htmlpdf .= '
';
  }
$htmlpdf .= '
        </td>
    <td align="center"><strong>Signature  du donneur d\'ordre</strong></td>
  </tr>
  <tr>
    <td align="center">&nbsp;</td>
    <td align="center"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/traite.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_traite/")) {
mkdir("../../webfiles/pdf_traite/", 0777);
}

$newfile = "../../webfiles/pdf_traite/OPI_".str_replace("-", "_", str_replace("/", "_", $numero_opi2))."_".$donnees->code_membre."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "OPI_".str_replace("-", "_", str_replace("/", "_", $numero_opi2))."_".$donnees->code_membre."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_traite/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);


}















public static function genererPdfBA($bon_id = 0, $bon_numero = "") {

   ini_set('memory_limit', '512M');


if($bon_id > 0){
   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon_id, $bon);
}else if($bon_numero != ""){
   $bon2M = new Application_Model_EuBonMapper();
   $bon2 = $bon2M->fetchAllByNumero($bon_numero);

   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon2->bon_id, $bon);
}else{
    return;
}

$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/BA3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège Social: Wuiti-Atsati, Angle rues, Sagouda, Kiyéou et Bandjéli  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : (00228) 93 76 61 90/79 82 60 86 E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';

  $htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';

  $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
  $htmlpdf .= '
  <tr>
    <td colspan="3" align="center"><strong><em><u>BON D\'ACHAT  (BA)</u></em> : '.$bon->bon_numero.'</strong></td>
    <td align="center"><barcode type="C39" value="'.$bon->bon_code_barre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
   $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

if (substr($bon->bon_code_membre_emetteur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_emetteur, $membre);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Nom & Prénom(s)</u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_emetteur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_emetteur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Raison sociale </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Montant Total</u>: </em></td>
    <td align="left"><strong><em>'.number_format(($bon->bon_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
';
/**/

if (substr($bon->bon_code_membre_distributeur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_distributeur, $membre);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Nom & Prénom(s) du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_distributeur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_distributeur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Raison sociale  du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
  ';

}
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';


$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Libellé</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Coût unitaire</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><strong><em>Quantité</em></strong></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Total</strong></em></td>
        </tr>';

$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Achat de Bon d\'Achat (BA)</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
                <td align="center" style="border:#000 1px solid;"><em>1</em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($bon->bon_montant), 250).' CFA</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */

$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon->bon_date).'</em></strong></td>
    <td align="left">&nbsp;</td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/achats.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_achat/")) {
mkdir("../../webfiles/pdf_achat/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_achat/BON_ACHAT_".$bon->bon_id."_.html";
$newnom = "BON_ACHAT_".$bon->bon_id."_";
$newchemin = "../../webfiles/pdf_achat/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*
        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}







public static function genererPdfBCr($bon_id = 0, $bon_numero = "") {

   ini_set('memory_limit', '512M');


if($bon_id > 0){
   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon_id, $bon);
}else if($bon_numero != ""){
   $bon2M = new Application_Model_EuBonMapper();
   $bon2 = $bon2M->fetchAllByNumero($bon_numero);

   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon2->bon_id, $bon);
}else{
    return;
}

$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/BCr3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège Social: Wuiti-Atsati, Angle rues, Sagouda, Kiyéou et Bandjéli  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : (00228) 93 76 61 90/79 82 60 86 E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';

  $htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';

  $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
  $htmlpdf .= '
  <tr>
    <td colspan="3" align="center"><strong><em><u>BON DE CONSOMMATION récurrent  (BCr)</u></em> : '.$bon->bon_numero.'</strong></td>
    <td align="center"><barcode type="C39" value="'.$bon->bon_code_barre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
   $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

if (substr($bon->bon_code_membre_emetteur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_emetteur, $membre);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Nom & Prénom(s)</u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_emetteur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_emetteur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Raison sociale </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Montant Total</u>: </em></td>
    <td align="left"><strong><em>'.number_format(($bon->bon_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
';
/**/

if (substr($bon->bon_code_membre_distributeur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_distributeur, $membre);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Nom & Prénom(s) du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_distributeur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_distributeur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Raison sociale  du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
  ';

}
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';


$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Libellé</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Coût unitaire</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><strong><em>Quantité</em></strong></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Total</strong></em></td>
        </tr>';

$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Achat de Bon de Consommation récurrent (BCr)</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
                <td align="center" style="border:#000 1px solid;"><em>1</em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($bon->bon_montant), 250).' CFA</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */

$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon->bon_date).'</em></strong></td>
    <td align="left">&nbsp;</td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/consommations.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_consommation/")) {
mkdir("../../webfiles/pdf_consommation/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_consommation/BON_CONSOMMATION_recurrent_".$bon->bon_id."_.html";
$newnom = "BON_CONSOMMATION_recurrent_".$bon->bon_id."_";
$newchemin = "../../webfiles/pdf_consommation/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmcLib(9);

/*

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}







public static function genererPdfBCnr($bon_id = 0, $bon_numero = "") {

   ini_set('memory_limit', '512M');


if($bon_id > 0){
   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon_id, $bon);
}else if($bon_numero != ""){
   $bon2M = new Application_Model_EuBonMapper();
   $bon2 = $bon2M->fetchAllByNumero($bon_numero);

   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon2->bon_id, $bon);
}else{
    return;
}

$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/BCnr3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège Social: Wuiti-Atsati, Angle rues, Sagouda, Kiyéou et Bandjéli  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : (00228) 93 76 61 90/79 82 60 86 E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';

  $htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';

  $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
  $htmlpdf .= '
  <tr>
    <td colspan="3" align="center"><strong><em><u>BON DE CONSOMMATION non récurrent  (BCnr)</u></em> : '.$bon->bon_numero.'</strong></td>
    <td align="center"><barcode type="C39" value="'.$bon->bon_code_barre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
   $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

if (substr($bon->bon_code_membre_emetteur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_emetteur, $membre);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Nom & Prénom(s)</u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_emetteur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_emetteur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Raison sociale </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Montant Total</u>: </em></td>
    <td align="left"><strong><em>'.number_format(($bon->bon_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
';
/**/

if (substr($bon->bon_code_membre_distributeur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_distributeur, $membre);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Nom & Prénom(s) du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_distributeur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_distributeur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Raison sociale  du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
  ';

}
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';


$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Libellé</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Coût unitaire</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><strong><em>Quantité</em></strong></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Total</strong></em></td>
        </tr>';

$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Achat de Bon de Consommation non récurrent (BCnr)</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
                <td align="center" style="border:#000 1px solid;"><em>1</em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($bon->bon_montant), 250).' CFA</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */

$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon->bon_date).'</em></strong></td>
    <td align="left">&nbsp;</td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/consommations.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_consommation/")) {
mkdir("../../webfiles/pdf_consommation/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_consommation/BON_CONSOMMATION_non_recurrent_".$bon->bon_id."_.html";
$newnom = "BON_CONSOMMATION_non_recurrent_".$bon->bon_id."_";
$newchemin = "../../webfiles/pdf_consommation/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*


        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

    */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}







public static function genererPdfBC($bon_id = 0, $bon_numero = "") {

   ini_set('memory_limit', '512M');


if($bon_id > 0){
   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon_id, $bon);
}else if($bon_numero != ""){
   $bon2M = new Application_Model_EuBonMapper();
   $bon2 = $bon2M->fetchAllByNumero($bon_numero);

   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon2->bon_id, $bon);
}else{
    return;
}

$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/BC3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège Social: Wuiti-Atsati, Angle rues, Sagouda, Kiyéou et Bandjéli  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : (00228) 93 76 61 90/79 82 60 86 E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';

  $htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';

  $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
  $htmlpdf .= '
  <tr>
    <td colspan="3" align="center"><strong><em><u>BON DE COMMANDE  (BC)</u></em> : '.$bon->bon_numero.'</strong></td>
    <td align="center"><barcode type="C39" value="'.$bon->bon_code_barre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
   $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

if (substr($bon->bon_code_membre_emetteur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_emetteur, $membre);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Nom & Prénom(s)</u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_emetteur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_emetteur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Raison sociale </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Montant Total</u>: </em></td>
    <td align="left"><strong><em>'.number_format(($bon->bon_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
';
/**/

if (substr($bon->bon_code_membre_distributeur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_distributeur, $membre);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Nom & Prénom(s) du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_distributeur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_distributeur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Raison sociale  du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
  ';

}
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';


$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Libellé</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Coût unitaire</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><strong><em>Quantité</em></strong></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Total</strong></em></td>
        </tr>';

$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Achat de Bon de Commande (BC)</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
                <td align="center" style="border:#000 1px solid;"><em>1</em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($bon->bon_montant), 250).' CFA</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */

$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon->bon_date).'</em></strong></td>
    <td align="left">&nbsp;</td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/commandes.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_commande/")) {
mkdir("../../webfiles/pdf_commande/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_commande/BON_COMMANDE_".$bon->bon_id."_.html";
$newnom = "BON_COMMANDE_".$bon->bon_id."_";
$newchemin = "../../webfiles/pdf_commande/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);


        return tr_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}








public static function genererPdfBS($bon_id = 0, $bon_numero = "") {

   ini_set('memory_limit', '512M');


if($bon_id > 0){
   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon_id, $bon);
}else if($bon_numero != ""){
   $bon2M = new Application_Model_EuBonMapper();
   $bon2 = $bon2M->fetchAllByNumero($bon_numero);

   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon2->bon_id, $bon);
}else{
    return;
}

$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/BS3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège Social: Wuiti-Atsati, Angle rues, Sagouda, Kiyéou et Bandjéli  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : (00228) 93 76 61 90/79 82 60 86 E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';

  $htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';

  $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
  $htmlpdf .= '
  <tr>
    <td colspan="3" align="center"><strong><em><u>BON DE SALAIRE  (BS)</u></em> : '.$bon->bon_numero.'</strong></td>
    <td align="center"><barcode type="C39" value="'.$bon->bon_code_barre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
   $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

if (substr($bon->bon_code_membre_emetteur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_emetteur, $membre);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Nom & Prénom(s)</u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_emetteur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_emetteur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Raison sociale </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Montant Total</u>: </em></td>
    <td align="left"><strong><em>'.number_format(($bon->bon_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
';
/**/

if (substr($bon->bon_code_membre_distributeur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_distributeur, $membre);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Nom & Prénom(s) du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_distributeur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_distributeur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Raison sociale  du distributeur</u>: </em></td>
    <td align="left"><strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
  ';

}
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';


$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Libellé</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Coût unitaire</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><strong><em>Quantité</em></strong></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Total</strong></em></td>
        </tr>';

$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Achat de Bon de Salaire (BS)</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
                <td align="center" style="border:#000 1px solid;"><em>1</em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($bon->bon_montant), 0, ',', ' ').'</em></td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($bon->bon_montant), 250).' CFA</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */

$htmlpdf .= '
  <tr>
    <td align="left"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon->bon_date).'</em></strong></td>
    <td align="left">&nbsp;</td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/salaires.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_salaire/")) {
mkdir("../../webfiles/pdf_salaire/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_salaire/BON_SALAIRE_".$bon->bon_id."_.html";
$newnom = "BON_SALAIRE_".$bon->bon_id."_";
$newchemin = "../../webfiles/pdf_salaire/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}







public static function genererPdfBL($bon_id = 0, $bon_numero = "") {

   ini_set('memory_limit', '512M');


if($bon_id > 0){
   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon_id, $bon);
}else if($bon_numero != ""){
   $bon2M = new Application_Model_EuBonMapper();
   $bon2 = $bon2M->fetchAllByNumero($bon_numero);

   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon2->bon_id, $bon);
}else{
    return;
}

$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/BL3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège Social: Wuiti-Atsati, Angle rues, Sagouda, Kiyéou et Bandjéli  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : (00228) 93 76 61 90/79 82 60 86 E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';

  $htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="5"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';

  $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
  $htmlpdf .= '
  <tr>
    <td colspan="3" align="center"><strong><em><u>BON DE LIVRAISON  (BL)</u></em> : '.$bon->bon_numero.'</strong></td>
    <td colspan="2" align="center"><barcode type="C39" value="'.$bon->bon_code_barre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
   $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

if (substr($bon->bon_code_membre_distributeur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_distributeur, $membre);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="5"><em><u>Distributeur </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_distributeur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_distributeur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="5"><em><u>Distributeur </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}


if (substr($bon->bon_code_membre_emetteur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_emetteur, $membre);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="5"><em><u>Acheteur </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_emetteur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_emetteur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="5"><em><u>Acheteur </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}

/*
$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Montant Total</u>: </em></td>
    <td align="left"><strong><em>'.number_format(($bon->bon_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
';
*/

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';



$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em><strong>Réf.</strong></em></td>
                <td align="left" style="border:#000 1px solid;"><em><strong>Désignation</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>P.U.</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><strong><em>Qté.</em></strong></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Total</strong></em></td>
        </tr>';


$article_vendu_M = new Application_Model_EuArticlesVenduMapper();
$article_vendu = $article_vendu_M->fetchAllByBonDistributeur($bon->bon_id, "");

$total = 0;

foreach ($article_vendu as $article) {

$htmlpdf .= '
        <tr>
                <td align="left" style="border:#000 1px solid;"><em>'.$article->reference.'</em></td>
                <td align="left" style="border:#000 1px solid;"><em>'.$article->designation.'</em></td>
				<td align="center" style="border:#000 1px solid;"><em>'.$article->prix_unitaire.'</em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.$article->quantite.'</em></td>
                <td align="center" style="border:#000 1px solid;"><em>'.number_format(($article->quantite * $article->prix_unitaire), 0, ',', ' ').'</em></td>
        </tr>';
$total = $total + ($article->quantite * $article->prix_unitaire);
}

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

$htmlpdf .= '
        <tr>
                <td align="center" colspan="3">&nbsp;</td>
                <td align="center"><em>Total</em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>'.number_format(($total), 0, ',', ' ').'</strong></em></td>
        </tr>';

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="left" colspan="5"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($total), 250).' CFA</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */

$htmlpdf .= '
  <tr>
    <td align="left" colspan="3"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon->bon_date).'</em></strong></td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/livraisons.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_livraison/")) {
mkdir("../../webfiles/pdf_livraison/", 0777);
}

/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_livraison/BON_LIVRAISON_".$bon->bon_id."_.html";
$newnom = "BON_LIVRAISON_".$bon->bon_id."_";
$newchemin = "../../webfiles/pdf_livraison/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
*/

        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

/*        $tab = explode(".", $_SERVER['SERVER_NAME']);
$domaine = $tab[count($tab)-2].".".$tab[count($tab)-1];
if($domaine != "gacsource.net"){$domaine = "esmcgie.com";}
        return str_replace("../../webfiles/", "https://webfiles.".$domaine."/", $file);
*/
}







public static function genererPdfBLG($bon_id = 0, $bon_numero = "") {

   ini_set('memory_limit', '512M');


if($bon_id > 0){
   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon_id, $bon);
}else if($bon_numero != ""){
   $bon2M = new Application_Model_EuBonMapper();
   $bon2 = $bon2M->fetchAllByNumero($bon_numero);

   $bon = new Application_Model_EuBon();
   $bonM = new Application_Model_EuBonMapper();
   $bonM->find($bon2->bon_id, $bon);
}else{
    return;
}


            $t_tpagcp = new Application_Model_DbTable_EuTpagcp();
            $tpagcp_select = $t_tpagcp->select();
            $tpagcp_select->where('numero_bl like ?', $bon->bon_numero);
            $tpagcp = $t_tpagcp->fetchRow($tpagcp_select);



$date_id = new Zend_Date(Zend_Date::ISO_8601);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/BL3.gif">
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège Social: Wuiti-Atsati, Angle rues, Sagouda, Kiyéou et Bandjéli  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : (00228) 93 76 61 90/79 82 60 86 E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';

  $htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="4"><img src="'.Util_Utils::getParamEsmc(2).'sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';

  $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
  $htmlpdf .= '
  <tr>
    <td colspan="2" align="center"><strong><em><u>BON DE LIVRAISON GROUPE  (BLG)</u></em> : '.$bon->bon_numero.'</strong></td>
    <td colspan="2" align="center"><barcode type="C39" value="'.$bon->bon_code_barre.'" label="none"></barcode></td>
  </tr>';// style="width:150mm; height:10mm;"
   $htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';

if (substr($bon->bon_code_membre_distributeur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_distributeur, $membre);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Distributeur </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_distributeur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_distributeur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em><u>Distributeur </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}


if (substr($bon->bon_code_membre_emetteur, -1) == "P") {
$membreM = new Application_Model_EuMembreMapper();
$membre = new Application_Model_EuMembre();
$membreM->find($bon->bon_code_membre_emetteur, $membre);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="4"><em><u>Acheteur </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membre->nom_membre.' '.$membre->prenom_membre.'</em></strong></td>
  </tr>
  ';

} else if (substr($bon->bon_code_membre_emetteur, -1) == "M") {
$membremoraleM = new Application_Model_EuMembreMoraleMapper();
$membremorale = new Application_Model_EuMembreMorale();
$membremoraleM->find($bon->bon_code_membre_emetteur, $membremorale);

$htmlpdf .= '
  <tr>
    <td align="right" colspan="4"><em><u>Acheteur </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.$membremorale->raison_sociale.'</em></strong></td>
  </tr>
';

}

/*
$htmlpdf .= '
  <tr>
    <td align="right" colspan="3"><em><u>Montant Total</u>: </em></td>
    <td align="left"><strong><em>'.number_format(($bon->bon_montant), 0, ',', ' ').' FCFA</em></strong></td>
  </tr>
';
*/

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>';



$htmlpdf .= '
        <tr>
                <td align="center" style="border:#000 1px solid;"><em><strong>Numéro du BLG</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Montant Gcp</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Montant Majoré</strong></em></td>
                <td align="center" style="border:#000 1px solid;"><em><strong>Montant Tranche</strong></em></td>
        </tr>';


$htmlpdf .= '
        <tr>
                <td align="right" style="border:#000 1px solid;"><em>'.$bon->bon_numero.'</em></td>
                <td align="right" style="border:#000 1px solid;"><em>'.number_format($tpagcp->mont_gcp, 0, ',', ' ').'</em></td>
                <td align="right" style="border:#000 1px solid;"><em>'.number_format($tpagcp->mont_gcp_maj, 0, ',', ' ').'</em></td>
                <td align="right" style="border:#000 1px solid;"><em>'.number_format($tpagcp->mont_tranche, 0, ',', ' ').'</em></td>
        </tr>';

$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';


$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td align="left" colspan="4"><em>Montant en  lettres : </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.Util_Utils::lettre(($tpagcp->mont_gcp_maj), 250).' CFA</em></strong></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>'; */

$htmlpdf .= '
  <tr>
    <td align="left" colspan="2"><em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datejourfr($bon->bon_date).'</em></strong></td>
    <td align="center" colspan="2"><img src="'.Util_Utils::getParamEsmc(2).'/sm_images/Logo-signature.png" width="150" height="88" /></td>
  </tr>
';


/*$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = '../public/livraisons.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_livraison/")) {
mkdir("../../webfiles/pdf_livraison/", 0777);
}

/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_livraison/BON_LIVRAISON_GROUPE_".$bon->bon_id."_.html";
$newnom = "BON_LIVRAISON_GROUPE_".$bon->bon_id."_";
$newchemin = "../../webfiles/pdf_livraison/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('L', 'A5', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

/*        $tab = explode(".", $_SERVER['SERVER_NAME']);
$domaine = $tab[count($tab)-2].".".$tab[count($tab)-1];
if($domaine != "gacsource.net"){$domaine = "esmcgie.com";}
        return str_replace("../../webfiles/", "https://webfiles.".$domaine."/", $file);
*/
}








public function verifSmsBancaire2($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero, $bon_neutre_montant, $bon_neutre_libelle, $relevebancairedetail_id) {
         //$mcnp_error = "";
/////////////////controle montant
                        if($bon_neutre_banque == "BOA" || $bon_neutre_banque == "UTB" || $bon_neutre_banque == "BAT" || $bon_neutre_banque == "ECOBANK" || $bon_neutre_banque == "ORABANK") {

                            $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                            if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate21_($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero, $relevebancairedetail_id)) {
                                if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                //$db->rollback();
                                //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                $mcnp_error = "Montant";
                                //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                //return;
                                }
                            }else{

                                if($bon_neutre_banque == "BAT"){

                            //$libellebanques = array(split(' ', strtolower($bon_neutre_libelle)));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate52_($bon_neutre_banque, $bon_neutre_date_numero, $relevebancairedetail_id);
                                foreach ($relevebancairedetail as $value) {
                                    $pos2 = stripos($bon_neutre_libelle, $value->relevebancairedetail_libelle);
                                    $pos3 = stripos($value->relevebancairedetail_libelle, $bon_neutre_libelle);
                                    if(($pos2 !== false || $pos3 !== false) && $value->relevebancairedetail_date == $bon_neutre_date_numero && $value->relevebancairedetail_montant == $bon_neutre_montant){
                                        $mcnp_error = $value->relevebancairedetail_id;
                                        break;
                                    }else{
                                        $mcnp_error = "renseignements3";
                                    }
                                }

                                } else if($bon_neutre_banque == "ECOBANK"){
                                    $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                    if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate61_($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero, $relevebancairedetail_id)) {
                                        if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                        //$db->rollback();
                                        //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $mcnp_error = "Montant";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                        }
                                    }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                    }

                                } else if($bon_neutre_banque == "ORABANK"){

                            //$libellebanques = array(split(' ', strtolower($bon_neutre_libelle)));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate52_($bon_neutre_banque, $bon_neutre_date_numero, $relevebancairedetail_id);
                                foreach ($relevebancairedetail as $value) {
                                    $pos2 = stripos($bon_neutre_libelle, $value->relevebancairedetail_libelle);
                                    $pos3 = stripos($value->relevebancairedetail_libelle, $bon_neutre_libelle);
                                    if(($pos2 !== false || $pos3 !== false) && $value->relevebancairedetail_date == $bon_neutre_date_numero && $value->relevebancairedetail_montant == $bon_neutre_montant){
                                        $mcnp_error = $relevebancairedetail->relevebancairedetail_id;
                                        break;
                                    }else{
                                        $mcnp_error = "renseignements";
                                    }
                                }

                                }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                }
                            }
                        } else {

                                    //$db->rollback();
                                    //$mcnp_error = "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ...";
                                    $mcnp_error = "banque";
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    //return;
                        }
if (!isset($mcnp_error)){

    return $relevebancairedetail->relevebancairedetail_id;
}else{
    return $mcnp_error;
}


    }



    public function verifSmsBancaire2old($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero, $bon_neutre_montant, $bon_neutre_libelle, $relevebancairedetail_id) {
         //$mcnp_error = "";
/////////////////controle montant
                        if($bon_neutre_banque == "BOA" || $bon_neutre_banque == "UTB" || $bon_neutre_banque == "BAT" || $bon_neutre_banque == "ECOBANK" || $bon_neutre_banque == "ORABANK") {

                            $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                            $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate21($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero);
                            if(count($relevebancairedetail) > 0) {
                                if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                //$db->rollback();
                                //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                $mcnp_error = "Montant";
                                //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                //return;
                                }
                            }else{

                                if($bon_neutre_banque == "BAT"){

                            //$libellebanques = array(split(' ', strtolower($bon_neutre_libelle)));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate52($bon_neutre_banque, $bon_neutre_date_numero);
                                foreach ($relevebancairedetail as $value) {
                                    $pos2 = stripos($bon_neutre_libelle, $value->relevebancairedetail_libelle);
                                    if($pos2 !== false && $value->relevebancairedetail_date == $bon_neutre_date_numero && $value->relevebancairedetail_montant == $bon_neutre_montant){
                                        $mcnp_error = $value->relevebancairedetail_id;
                                        break;
                                    }else{
                                        $mcnp_error = "renseignements3";
                                    }
                                }

                                } else if($bon_neutre_banque == "ECOBANK"){
                                    $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                    $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate61($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero);
                                    if(count($relevebancairedetail) > 0) {
                                        if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                        //$db->rollback();
                                        //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $mcnp_error = "Montant";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                        }
                                    }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                    }

                                } else if($bon_neutre_banque == "ORABANK"){

                            //$libellebanques = array(split(' ', strtolower($bon_neutre_libelle)));
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate52($bon_neutre_banque, $bon_neutre_date_numero);
                                foreach ($relevebancairedetail as $value) {
                                    $pos2 = stripos($bon_neutre_libelle, $value->relevebancairedetail_libelle);
                                    if($pos2 !== false && $value->relevebancairedetail_date == $bon_neutre_date_numero && $value->relevebancairedetail_montant == $bon_neutre_montant){
                                        //$mcnp_error = $relevebancairedetail->relevebancairedetail_id;
                                        break;
                                    }else{
                                        $mcnp_error = "renseignements";
                                    }
                                }

                                }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                }
                            }
                        } else {

                                    //$db->rollback();
                                    //$mcnp_error = "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ...";
                                    $mcnp_error = "banque";
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    //return;
                        }
if (!isset($mcnp_error)){

    return $relevebancairedetail->relevebancairedetail_id;
}else{
    return $mcnp_error;
}


    }





public function verifReleveBancaire2($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero, $bon_neutre_montant, $bon_neutre_libelle, $relevebancairedetail_id) {
        //$mcnp_error = "";
/////////////////controle montant
                        if($bon_neutre_banque == "BOA" || $bon_neutre_banque == "UTB" || $bon_neutre_banque == "BAT" || $bon_neutre_banque == "ECOBANK" || $bon_neutre_banque == "ORABANK") {

                            $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                            if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate21_($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero, $relevebancairedetail_id)) {
                                if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                //$db->rollback();
                                //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                $mcnp_error = "Montant";
                                //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                //return;
                                }
                            }else{

                                if($bon_neutre_banque == "BAT"){
                            //$libellebanques = array(split(' ', strtolower($bon_neutre_libelle)));
                            $libellebanques = $bon_neutre_libelle;
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate51_($bon_neutre_banque, $libellebanques, $bon_neutre_date_numero, $relevebancairedetail_id)) {
                                        if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                        //$db->rollback();
                                        //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $mcnp_error = "Montant";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                        }
                                    }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                    }

                                } else if($bon_neutre_banque == "ECOBANK"){
                                    $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                    if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate61_($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero, $relevebancairedetail_id)) {
                                        if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                        //$db->rollback();
                                        //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $mcnp_error = "Montant";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                        }
                                    }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                    }

                                } else if($bon_neutre_banque == "ORABANK"){
                            //$libellebanques = array(split(' ', strtolower($bon_neutre_libelle)));
                            $libellebanques = $bon_neutre_libelle;
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                if($relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate51_($bon_neutre_banque, $libellebanques, $bon_neutre_date_numero, $relevebancairedetail_id)) {
                                        if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                        //$db->rollback();
                                        //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $mcnp_error = "Montant";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                        }
                                    } else {
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                    }

                                }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                }
                            }
                        } else {

                                    //$db->rollback();
                                    //$mcnp_error = "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ...";
                                    $mcnp_error = "banque";
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    //return;
                        }
if (!isset($mcnp_error)){
    return $relevebancairedetail->relevebancairedetail_id;

}else{
    return $mcnp_error;
}


    }


public function verifReleveBancaire2old($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero, $bon_neutre_montant, $bon_neutre_libelle, $relevebancairedetail_id) {
        //$mcnp_error = "";
/////////////////controle montant
                        if($bon_neutre_banque == "BOA" || $bon_neutre_banque == "UTB" || $bon_neutre_banque == "BAT" || $bon_neutre_banque == "ECOBANK" || $bon_neutre_banque == "ORABANK") {

                            $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                            $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate21($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero);
                            if(count($relevebancairedetail) > 0) {
                                if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                //$db->rollback();
                                //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                $mcnp_error = "Montant";
                                //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                //return;
                                }
                            }else{

                                if($bon_neutre_banque == "BAT"){
                            //$libellebanques = array(split(' ', strtolower($bon_neutre_libelle)));
                            $libellebanques = $bon_neutre_libelle;
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate51($bon_neutre_banque, $libellebanques, $bon_neutre_date_numero);
                                    if(count($relevebancairedetail) > 0) {
                                        if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                        //$db->rollback();
                                        //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $mcnp_error = "Montant";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                        }
                                    }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                    }

                                } else if($bon_neutre_banque == "ECOBANK"){
                                    $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                    $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate61($bon_neutre_banque, $bon_neutre_numero, $bon_neutre_date_numero);
                                    if(count($relevebancairedetail) > 0) {
                                        if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                        //$db->rollback();
                                        //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $mcnp_error = "Montant";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                        }
                                    }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                    }

                                } else if($bon_neutre_banque == "ORABANK"){
                            //$libellebanques = array(split(' ', strtolower($bon_neutre_libelle)));
                            $libellebanques = $bon_neutre_libelle;
                                $relevebancairedetailM = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail = $relevebancairedetailM->fetchAllByBanqueNumeroDate51($bon_neutre_banque, $libellebanques, $bon_neutre_date_numero);
                                    if(count($relevebancairedetail) > 0) {
                                        if($bon_neutre_montant > $relevebancairedetail->relevebancairedetail_montant) {
                                        //$db->rollback();
                                        //$mcnp_error = "Montant saisi non conforme au montant du versement. Veuillez bien vérifier le montant du reçu de banque ou de la transaction ...";
                                        $mcnp_error = "Montant";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                        }
                                    } else {
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                    }

                                }else{
                                        //$db->rollback();
                                        //$mcnp_error = "Les renseignements concernant le versement sont erronés ou ne sont pas encore vérifiables. Veuillez bien vérifier ces informations ou revenez plus tard dans les 24 heures. Merci ...";
                                        $mcnp_error = "renseignements";
                                        //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                        //return;
                                }
                            }
                        } else {

                                    //$db->rollback();
                                    //$mcnp_error = "La banque choisie n'est pas dans la liste des banques autorisées pour la souscription du Bon d'Achat neutre (BAn). Veuillez apporter votre reçu bancaire à la direction de l'ESMC. Merci ...";
                                    $mcnp_error = "banque";
                                    //$this->_redirect('/souscriptionbon/addsouscriptionban/paramban/'.$paramban);
                                    //return;
                        }
if (!isset($mcnp_error)){
    return $relevebancairedetail->relevebancairedetail_id;

}else{
    return $mcnp_error;
}


    }

    public static function sendpublicexternemail($emeteur,$recepteur,$numeroticket,$dateticket){
      $sender = Util_Utils::getParamEsmc(3);
      $config = array(
        'auth' => 'login',
        'username' => Util_Utils::getParamEsmc(3),
        'password' => Util_Utils::getParamEsmc(4));
      $transport = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
      $mail = new Zend_Mail();

      $mail->setBodyHtml("Bonjour Mr/Mme $emeteur, le ticket n° $numeroticket que vous avez émis le $dateticket est traité.Veuillez vous connecter à votre espace personnelle pour sa confirmation");
      $mail->setFrom($sender, 'ESMC');
      $mail->addTo($recepteur, 'MCNP');
      $mail->setSubject("Traitement du ticket N° $numeroticket");
      $mail->send($transport);
    }

    public static function sendpublicexternemailrecommandation($emeteur,$recepteur,$numeroticket,$dateticket,$observation){
      $sender = Util_Utils::getParamEsmc(3);
      $config = array(
        'auth' => 'login',
        'username' => Util_Utils::getParamEsmc(3),
        'password' => Util_Utils::getParamEsmc(4));
      $transport = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
      $mail = new Zend_Mail();

      $mail->setBodyHtml("Bonjour Mr/Mme $emeteur, le ticket n° $numeroticket que vous avez émis le $dateticket est traité.");
      $mail->setFrom($sender, 'ESMC');
      $mail->addTo($recepteur, 'MCNP');
      $mail->setSubject("Traitement du ticket N° $numeroticket");
      $mail->send($transport);
    }

    public static function sendprivateinternemail($recepteur,$emeteur){
      $sender = Util_Utils::getParamEsmc(3);
      $config = array(
        'auth' => 'login',
        'username' => Util_Utils::getParamEsmc(3),
        'password' => Util_Utils::getParamEsmc(4));
      $transport = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
      $mail = new Zend_Mail();
      $mail->setBodyHtml("Bonjour Mr/Mme $emeteur Un nouveau ticket de support est disponible dans votre espace.Veuillez vous connecter pour son traitement");
      $mail->setFrom($sender, 'ESMC');
      $mail->addTo($recepteur, 'MCNP');
      $mail->setSubject("Traitement de ticket en ligne");
      $mail->send($transport);
    }



    public  static  function  genererExcelTbdMsbc($date_debut, $date_fin, $code_banque, $id_guichet) {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        ini_set('memory_limit', '512M');
		
		$t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
			
			$select = $t_bon_neutre_utilise->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
			$select->setIntegrityCheck(false);
			$select->join(array('b' => 'eu_bon_neutre'),'eu_bon_neutre_utilise.bon_neutre_id = b.bon_neutre_id');
			$select->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_utilise.bon_neutre_detail_id = d.bon_neutre_detail_id');
			
			$select->where('(eu_bon_neutre_utilise.bon_neutre_utilise_libelle like ?',"Souscription au Bon d'Achat");
            $select->orwhere('eu_bon_neutre_utilise.bon_neutre_utilise_libelle like ?)',"BC");
			
		    if(!empty($date_debut) && !empty($date_fin)) {	
				$date_debut = new Zend_Date($date_debut,Zend_Date::ISO_8601);
				//$date_debut->addDay(-1);
				$date_fin = new Zend_Date($date_fin,Zend_Date::ISO_8601);
				$date_fin->addDay(1);
				$select->where("eu_bon_neutre_utilise.bon_neutre_utilise_date BETWEEN '".$date_debut->toString('yyyy-MM-dd')."' AND '".$date_fin->toString('yyyy-MM-dd')."'  ");				
		    }
			$select->order('eu_bon_neutre_utilise.bon_neutre_utilise_date desc');
            $entries = $t_bon_neutre_utilise->fetchAll($select);
			
			require_once 'PHPExcel/PHPExcel.php';
		    //////////////////////////////
            $objPHPExcel = new PHPExcel();
	  
	        $objPHPExcel->getProperties()->setCreator("ESMC")
                        ->setLastModifiedBy($sessionutilisateur->login)
                        ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                        ->setSubject("JOURNAUX RELATIFS AUX VERSEMENTS ESPECES DE SOUSCRIPTION AU BON DE CONSOMMATION")
                        ->setDescription("Export en excel des journaux relatifs au MSBC")
                        ->setKeywords("")
                        ->setCategory("");
					
		    $objPHPExcel->setActiveSheetIndex(0);
		
		    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(28);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(10);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(10);
	        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
	        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
	        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(50);
	        $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
		    $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
		    $objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
		
		    $objPHPExcel->getActiveSheet()->getStyle('A1:J1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
		
		    $objPHPExcel->getActiveSheet()->setCellValue('A1', "JOUR°");
            $objPHPExcel->getActiveSheet()->setCellValue('B1', "N°PIECE");
            $objPHPExcel->getActiveSheet()->setCellValue('C1', "N°FACTURE");
            $objPHPExcel->getActiveSheet()->setCellValue('D1', "REFERENCE");
	        $objPHPExcel->getActiveSheet()->setCellValue('E1', "N°COMPTE GENERAL");
	        $objPHPExcel->getActiveSheet()->setCellValue('F1', "N°COMPTE TIERS");
	        $objPHPExcel->getActiveSheet()->setCellValue('G1', "LIBELLE ECRITURE");
	        $objPHPExcel->getActiveSheet()->setCellValue('H1', "DATE");
	        $objPHPExcel->getActiveSheet()->setCellValue('I1', "DEBIT");
	        $objPHPExcel->getActiveSheet()->setCellValue('J1', "CREDIT");
		
		    $objPHPExcel->getActiveSheet()->getStyle('A1:J1')->applyFromArray(array('font' => array('bold' => true)));
		    $y = 2;
		
		    $i = 1;	
            $nom = "";
            $prenom = "";
            $raison = "";
			
			foreach($entries as $entry):
			
			    $eubanappro = new Application_Model_EuBonNeutreAppro();
                $eubanapproM = new Application_Model_EuBonNeutreApproMapper();
							
			    $association = new Application_Model_EuAssociation();
                $associationM = new Application_Model_EuAssociationMapper();
			    $membre_guichet = "0";
							
			    if($id_guichet != "") {
				    $associationM->find($this->id_guichet,$association);
				    $membre_guichet = $association->code_membre;
			    }
							
			    $euban = new Application_Model_EuBonNeutre();
                $eubanM = new Application_Model_EuBonNeutreMapper();
			    $eubanM->find($entry->bon_neutre_id,$euban);
					  
                $membremorale = new Application_Model_EuMembreMorale();
                $membremoraleM = new Application_Model_EuMembreMoraleMapper();
			    $membre = new Application_Model_EuMembre();
                $membreM = new Application_Model_EuMembreMapper();
							
		        $origine = "";
			    $apporteur = "";
			    $libelle = "";
				$compte_general = "";
				
				if($entry->bon_neutre_utilise_libelle == "BC") {						
			        $libelle = " SOUSCRIPTION AU BC POUR TIERS DE ".$entry->bon_neutre_nom." ".$entry->bon_neutre_prenom." ".$entry->bon_neutre_raison ; 
			        $compte_general = "1681001181";
				} else { 
			        $libelle = $entry->bon_neutre_utilise_libelle." DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison ; 
			        $compte_general = "4712001181";
				}
			
			    $date_bon_neutre_detail = new Zend_Date($entry->bon_neutre_detail_date,Zend_Date::ISO_8601);
			    $date_bon_neutre_utilise = new Zend_Date($entry->bon_neutre_utilise_date,Zend_Date::ISO_8601);
					  
			    $id_appro = $entry->bon_neutre_appro_id;
			    if($id_appro > 0)   {
				    $eubanapproM->find($id_appro,$eubanappro);
				    $apporteur = $eubanappro->bon_neutre_appro_apporteur;
				    if(substr($apporteur, -1) == "P") {
					    $membreM->find($apporteur,$membre);
				        $origine = $membre->nom_membre." ".$membre->prenom_membre; 
				    } else {
					    $membremoraleM->find($apporteur,$membremorale);
					    $origine = $membremorale->raison_sociale;
				    }
			    } else  {
				    $origine = $entry->bon_neutre_detail_banque;
			    }
			
			    if($code_banque == $origine)   {
	                $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "521".$origine);
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_detail_montant);
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	                $y++;
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'',$entry->bon_neutre_detail_montant);
	                $y++;
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBC".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',$libelle);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_utilise_montant);
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	                $y++;
				
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBC".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $compte_general);
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $libelle);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', $entry->bon_neutre_utilise_montant);
	                $y++;
	   
	   
            } else if($membre_guichet == $apporteur)  {
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "521".$origine);
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_detail_montant);
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	                $y++;
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'',$entry->bon_neutre_detail_montant);
	                $y++;
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBC".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',$libelle);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_utilise_montant);
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	                $y++;
				
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBC".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $compte_general);
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $libelle);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', $entry->bon_neutre_utilise_montant);
	                $y++;
				
			} else if($code_banque == "" && $id_guichet == "") {
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "521".$origine);
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_detail_montant);
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	                $y++;
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'',$entry->bon_neutre_detail_montant);
	                $y++;
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBC".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',$libelle);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_utilise_montant);
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	                $y++;
				
				
				    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBC".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                    $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $compte_general);
		            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		            $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $libelle);
		            $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				    $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				    $objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', $entry->bon_neutre_utilise_montant);
	                $y++;
				
				
			}
			
			$i++;
	    endforeach;
		
		$objPHPExcel->getActiveSheet()->setTitle("JOURNAUX");
        $objPHPExcel->setActiveSheetIndex(0);
	   
	    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
        $callEndTime = microtime(true);
        $callTime = $callEndTime - $callStartTime;
		
		
		$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

        if(!is_dir("../../webfiles/excel_exports/JOURNAUX/")) {
          mkdir("../../webfiles/excel_exports/JOURNAUX/", 0777);
        }
		
		$newfile = "../../webfiles/excel_exports/JOURNAUX/JOURNAL_".$origine."_.xlsx";
        $newnom = "JOURNAL_".$origine."_";
        $newchemin = "../../webfiles/excel_exports/JOURNAUX/";

        copy($file, $newfile);

        unlink($file);

        $file = $newchemin.$newnom.'.xlsx';
        $filena = $newnom.'.xlsx';
      
        $domaine = Util_Utils::getParamEsmc(9);

        /*

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
        } else {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
        }

        */

        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

    }



    public  static function genererExcelTbdMscm($date_debut, $date_fin, $code_banque, $id_guichet) {
	    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        ini_set('memory_limit', '512M');
		
		$t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
			
	    $select = $t_bon_neutre_utilise->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
	    $select->setIntegrityCheck(false);
		//$select->join(array('b' => 'eu_bon_neutre'), 'eu_bon_neutre_utilise.bon_neutre_id = b.bon_neutre_id');
		$select->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_utilise.bon_neutre_detail_id = d.bon_neutre_detail_id');
		$select->where('(eu_bon_neutre_utilise.bon_neutre_utilise_libelle like ?',"Activation PP");
        $select->orwhere('eu_bon_neutre_utilise.bon_neutre_utilise_libelle like ?',"Activation PM");
	    $select->orwhere('eu_bon_neutre_utilise.bon_neutre_utilise_libelle like ?',"Re-activation PM");
		$select->orwhere('eu_bon_neutre_utilise.bon_neutre_utilise_libelle like ?',"Activation du Compte Marchand BioCarte");
        $select->orwhere('eu_bon_neutre_utilise.bon_neutre_utilise_libelle like ?)',"CMFH");
			
		if(!empty($date_debut) && !empty($date_fin)) {	
		    $date_debut = new Zend_Date($date_debut,Zend_Date::ISO_8601);
			//$date_debut->addDay(-1);
			$date_fin = new Zend_Date($date_fin,Zend_Date::ISO_8601);
			$date_fin->addDay(1);
			$select->where("eu_bon_neutre_utilise.bon_neutre_utilise_date BETWEEN '".$date_debut->toString('yyyy-MM-dd')."' AND '".$date_fin->toString('yyyy-MM-dd')."'  ");				
		}
			
		$select->order('eu_bon_neutre_utilise.bon_neutre_utilise_date desc');
        $entries = $t_bon_neutre_utilise->fetchAll($select);
	
	    require_once 'PHPExcel/PHPExcel.php';
		//////////////////////////////
        $objPHPExcel = new PHPExcel();
	  
	    $objPHPExcel->getProperties()->setCreator("ESMC")
                    ->setLastModifiedBy($sessionutilisateur->login)
                    ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                    ->setSubject("JOURNAUX RELATIFS AUX VERSEMENTS ESPECES DE SOUSCRIPTION AUX COMPTES MARCHANDS")
                    ->setDescription("Export en excel des journaux relatifs au MSCM")
                    ->setKeywords("")
                    ->setCategory("");
					
		$objPHPExcel->setActiveSheetIndex(0);
		
		$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(5);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(28);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(10);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(10);
	    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
	    $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
	    $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(50);
	    $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(10);
		$objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(10);
		$objPHPExcel->getActiveSheet()->getColumnDimension('J')->setWidth(10);
		
		$objPHPExcel->getActiveSheet()->getStyle('A1:J1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
		
		$objPHPExcel->getActiveSheet()->setCellValue('A1', "JOUR°");
        $objPHPExcel->getActiveSheet()->setCellValue('B1', "N°PIECE");
        $objPHPExcel->getActiveSheet()->setCellValue('C1', "N°FACTURE");
        $objPHPExcel->getActiveSheet()->setCellValue('D1', "REFERENCE");
	    $objPHPExcel->getActiveSheet()->setCellValue('E1', "N°COMPTE GENERAL");
	    $objPHPExcel->getActiveSheet()->setCellValue('F1', "N°COMPTE TIERS");
	    $objPHPExcel->getActiveSheet()->setCellValue('G1', "LIBELLE ECRITURE");
	    $objPHPExcel->getActiveSheet()->setCellValue('H1', "DATE");
	    $objPHPExcel->getActiveSheet()->setCellValue('I1', "DEBIT");
	    $objPHPExcel->getActiveSheet()->setCellValue('J1', "CREDIT");
		
		$objPHPExcel->getActiveSheet()->getStyle('A1:J1')->applyFromArray(array('font' => array('bold' => true)));
		$y = 2;
		
		$i = 1;	
        $nom = "";
        $prenom = "";
        $raison = "";
		
		foreach($entries as $entry):
		    $eubanappro = new Application_Model_EuBonNeutreAppro();
            $eubanapproM = new Application_Model_EuBonNeutreApproMapper();
							
			$association = new Application_Model_EuAssociation();
            $associationM = new Application_Model_EuAssociationMapper();
			$membre_guichet = "0";
							
			if($id_guichet != "") {
				$associationM->find($this->id_guichet,$association);
				$membre_guichet = $association->code_membre;
			}
							
			$euban = new Application_Model_EuBonNeutre();
            $eubanM = new Application_Model_EuBonNeutreMapper();
			$eubanM->find($entry->bon_neutre_id,$euban);
					  
            $membremorale = new Application_Model_EuMembreMorale();
            $membremoraleM = new Application_Model_EuMembreMoraleMapper();
			$membre = new Application_Model_EuMembre();
            $membreM = new Application_Model_EuMembreMapper();
							
		    $origine = "";
			$apporteur = "";
			$libelle = "";
			
			if($entry->bon_neutre_utilise_libelle == "CMFH") {						
			    $libelle = "SOUSCRIPTION POUR TIERS AUX COMPTES MARCHANDS"." DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison ; 
			} else { 
			    $libelle = $entry->bon_neutre_utilise_libelle." DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison ; 
			}
							
			$date_bon_neutre_detail = new Zend_Date($entry->bon_neutre_detail_date,Zend_Date::ISO_8601);
			$date_bon_neutre_utilise = new Zend_Date($entry->bon_neutre_utilise_date,Zend_Date::ISO_8601);
					  
			$id_appro = $entry->bon_neutre_appro_id;
		    if($id_appro > 0)   {
				$eubanapproM->find($id_appro,$eubanappro);
				$apporteur = $eubanappro->bon_neutre_appro_apporteur;
				if(substr($apporteur, -1) == "P") {
					$membreM->find($apporteur,$membre);
					$origine = $membre->nom_membre." ".$membre->prenom_membre; 
				} else {
					$membremoraleM->find($apporteur,$membremorale);
					$origine = $membremorale->raison_sociale;
				}
			} else {
				$origine = $entry->bon_neutre_detail_banque;
			}
			
			if($code_banque == $origine)   {
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "521".$origine);
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_detail_montant);
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	            $y++;
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'',$entry->bon_neutre_detail_montant);
	            $y++;
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALCM".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',$libelle);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_utilise_montant);
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	            $y++;
				
				
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALCM".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "7078");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $libelle);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', $entry->bon_neutre_utilise_montant);
	            $y++;
				
	        } else if($membre_guichet == $apporteur) {
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "521".$origine);
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_detail_montant);
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	            $y++;
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'',$entry->bon_neutre_detail_montant);
	            $y++;
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALCM".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',$libelle);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_utilise_montant);
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	            $y++;
				
				
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALCM".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "7078");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $libelle);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', $entry->bon_neutre_utilise_montant);
	            $y++;
				
				
			} else if($code_banque == "" && $id_guichet == "") {
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "521".$origine);
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_detail_montant);
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	            $y++;
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'',$date_bon_neutre_detail->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALBAn".$origine.$date_bon_neutre_detail->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',"VERSEMENT ESPECE DE ".$euban->bon_neutre_nom." ".$euban->bon_neutre_prenom." ".$euban->bon_neutre_raison);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_detail->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'',$entry->bon_neutre_detail_montant);
	            $y++;
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALCM".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "4112");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',$libelle);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $entry->bon_neutre_utilise_montant);
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', "");
	            $y++;
				
				
				
				$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $date_bon_neutre_utilise->toString('dd'));
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', "JOURNALCM".$origine.$date_bon_neutre_utilise->toString('ddMMyyyy').$i);
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', "");
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', "7078");
		        $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', "");
		        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $libelle);
		        $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $date_bon_neutre_utilise->toString('ddMMyyyy'));
				$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', "");
				$objPHPExcel->getActiveSheet()->setCellValue('J'.$y.'', $entry->bon_neutre_utilise_montant);
	            $y++;
				
				
			}
	        $i++;
	    endforeach;
		
		$objPHPExcel->getActiveSheet()->setTitle("JOURNAUX");
        $objPHPExcel->setActiveSheetIndex(0);
	   
	    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
        $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
        $callEndTime = microtime(true);
        $callTime = $callEndTime - $callStartTime;
		
		
		$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

        if(!is_dir("../../webfiles/excel_exports/JOURNAUX/")) {
          mkdir("../../webfiles/excel_exports/JOURNAUX/", 0777);
        }
		
		$newfile = "../../webfiles/excel_exports/JOURNAUX/JOURNAL_".$origine."_.xlsx";
        $newnom = "JOURNAL_".$origine."_";
        $newchemin = "../../webfiles/excel_exports/JOURNAUX/";

        copy($file, $newfile);

        unlink($file);

        $file = $newchemin.$newnom.'.xlsx';
        $filena = $newnom.'.xlsx';
      
        $domaine = Util_Utils::getParamEsmc(9);

        /*

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
        } else {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
        }
        */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/
	
    }
	
	
	
	


public static function genererExcelBAn($date_debut, $date_fin) {

    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
    ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

            $t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
                $select = $t_bon_neutre_detail->select();

                if(!empty($date_debut) && !empty($date_fin)) {
                    $date_fin = new Zend_Date($date_fin);
                    $date_fin->addDay(1);
                    $select->where('(bon_neutre_detail_date >= ?',$date_debut)->where('bon_neutre_detail_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                } elseif(!empty($date_debut)) {
                    $select->where('bon_neutre_detail_date >= ?',$date_debut);
                } elseif(!empty($date_fin)) {
                    $date_fin = new Zend_Date($date_fin);
                    $date_fin->addDay(1);
                    $select->where('bon_neutre_detail_date <= ?',$date_fin->toString('yyyy-MM-dd'));
                }
            
                $select->where('bon_neutre_detail_banque is not null');
                $select->order('bon_neutre_detail_date desc');
                $entries = $t_bon_neutre_detail->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats quotidiens des BAn")
                             ->setDescription("Export en excel les états quotidiens des BAn")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(24);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(21);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(24);
$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(21);

$objPHPExcel->getActiveSheet()->getStyle('A1:G1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens des BAn de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

$objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Référence Reçu");
$objPHPExcel->getActiveSheet()->setCellValue('F2', "Date d'expression");
$objPHPExcel->getActiveSheet()->setCellValue('G2', "Montant BAn");

$objPHPExcel->getActiveSheet()->getStyle('A2:G2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
    
                    $euban = new Application_Model_DbTable_EuBonNeutre();
                    $select = $euban->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuban = $euban->fetchRow($select);

if($rowseuban->bon_neutre_nom != NULL)  { 
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
} else {
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_raison);
}
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entry->bon_neutre_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->bon_neutre_detail_code);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->bon_neutre_detail_banque);
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->bon_neutre_detail_numero);
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($entry->bon_neutre_detail_date_numero));
$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $entry->bon_neutre_detail_montant);

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("BAn");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/BAn/")) {
mkdir("../../webfiles/excel_exports/BAn/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/BAn/BAn_".$date_debut."_".$date_fin."_.xlsx";
$newnom = "BAn_".$date_debut."_".$date_fin."_";
$newchemin = "../../webfiles/excel_exports/BAn/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);



/*
if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}




public static function genererExcelBAnAppro($date_debut, $date_fin) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

            $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
            $select = $t_bon_neutre_utilise->select();
           
            $select->where('bon_neutre_utilise_libelle like ?',"Approvisionnement de BAn"."%");
           
            if (!empty($date_debut) && !empty($date_fin)) {
               $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin);  
            } elseif(!empty($date_debut)) {
               $select->where('bon_neutre_utilise_date >= ?',$date_debut);
            } elseif(!empty($date_fin)) {
               $select->where('bon_neutre_utilise_date <= ?',$date_fin);
            }
            
            $select->order('bon_neutre_utilise_date desc');
            $entries = $t_bon_neutre_utilise->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats quotidiens des BAn issus des approvisionnements")
                             ->setDescription("Export en excel les états quotidiens d'expression des BAn issus des approvisionnements")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(24);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(24);
//$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(21);

$objPHPExcel->getActiveSheet()->getStyle('A1:D1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens d'expression des BAn issus des approvisionnements de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

$objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Montant BAn Approvisionné");
//$objPHPExcel->getActiveSheet()->setCellValue('E2', "Date d'expression");

$objPHPExcel->getActiveSheet()->getStyle('A2:D2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
    
                       $euban = new Application_Model_DbTable_EuBonNeutre();
                    $select = $euban->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuban = $euban->fetchRow($select);
                       
                    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
                    $select = $euband->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuband = $euband->fetchRow($select);

if($rowseuban->bon_neutre_nom != NULL) {
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
} else  { 
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_raison);
}
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $rowseuband->bon_neutre_detail_code);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->bon_neutre_utilise_montant);
//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("BAn Approvisionnement");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/BAn_Appro/")) {
mkdir("../../webfiles/excel_exports/BAn_Appro/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/BAn_Appro/BAn_Appro_".$date_debut."_".$date_fin."_.xlsx";
$newnom = "BAn_Appro_".$date_debut."_".$date_fin."_";
$newchemin = "../../webfiles/excel_exports/BAn_Appro/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/


$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}





  public static function genererExcelBAnKACM($date_debut, $date_fin) {

         $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
         ini_set('memory_limit', '512M');    

         //include("Transfert.php");
        
         $date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

            $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
            //$select = $t_bon_neutre->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		   
		    $select = $t_bon_neutre_utilise->select();
		   
            //$select->setIntegrityCheck(false);
            //$select->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre.bon_neutre_id = d.bon_neutre_id');
            //$select->join(array('u' => 'eu_bon_neutre_utilise'),'eu_bon_neutre.bon_neutre_id = u.bon_neutre_id');
            
            $select->where('(bon_neutre_utilise_libelle like ?',"Activation PP");
            $select->orwhere('bon_neutre_utilise_libelle like ?',"Activation PM");
			$select->orwhere('bon_neutre_utilise_libelle like ?',"Re-activation PM");
			$select->orwhere('bon_neutre_utilise_libelle like ?',"Activation du Compte Marchand BioCarte");
            $select->orwhere('bon_neutre_utilise_libelle like ?)',"CMFH");
		   
		    if (!empty($date_debut) && !empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
		       $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			   $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			} elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			}
			$select->order('bon_neutre_utilise_date desc');
            $entries = $t_bon_neutre_utilise->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats quotidiens des BAn en KACM")
                             ->setDescription("Export en excel les états quotidiens d'expression des BAn en KACM")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(24);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(24);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(21);

$objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens d'expression des BAn en KACM de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

$objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'expression");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant BAn en KACM");

$objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
    
                       $euban = new Application_Model_DbTable_EuBonNeutre();
                       $select = $euban->select();
                       $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                       $select->limit(1);
                       $rowseuban = $euban->fetchRow($select);
                       
                       $euband = new Application_Model_DbTable_EuBonNeutreDetail();
                       $select = $euband->select();
                       $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                       $select->limit(1);
                       $rowseuband = $euband->fetchRow($select);

$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($rowseuban->bon_neutre_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $rowseuban->bon_neutre_code);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->bon_neutre_utilise_montant);

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("BAn en KACM");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/BAn_KACM/")) {
mkdir("../../webfiles/excel_exports/BAn_KACM/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/BAn_KACM/BAn_KACM_".$date_debut."_".$date_fin."_.xlsx";
$newnom = "BAn_KACM_".$date_debut."_".$date_fin."_";
$newchemin = "../../webfiles/excel_exports/BAn_KACM/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}





public static function genererExcelBAnKACMDetails($date_debut, $date_fin) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

            $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
            //$select = $t_bon_neutre->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		   
		    $select = $t_bon_neutre_utilise->select();
		   
            //$select->setIntegrityCheck(false);
            //$select->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre.bon_neutre_id = d.bon_neutre_id');
            //$select->join(array('u' => 'eu_bon_neutre_utilise'),'eu_bon_neutre.bon_neutre_id = u.bon_neutre_id');
            
            $select->where('(bon_neutre_utilise_libelle like ?',"Activation PP");
            $select->orwhere('bon_neutre_utilise_libelle like ?',"Activation PM");
			$select->orwhere('bon_neutre_utilise_libelle like ?',"Activation du Compte Marchand BioCarte");
			$select->orwhere('bon_neutre_utilise_libelle like ?',"Re-activation PM");
            $select->orwhere('bon_neutre_utilise_libelle like ?)',"CMFH");
		   
		    if (!empty($date_debut) && !empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
		       $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			   $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			} elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			}
			$select->order('bon_neutre_utilise_date desc');
            $entries = $t_bon_neutre_utilise->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Details - Etats quotidiens des BAn en KACM")
                             ->setDescription("Export en excel les états quotidiens d'expression des BAn en KACM et les détails")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);/**/

$objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens d'expression des BAn en KACM de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." et les détails");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

/*$objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'expression");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant BAn en KACM");*/

$objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):

$id = $entry->bon_neutre_id;

$ban = new Application_Model_EuBonNeutre();
        $m_ban  = new Application_Model_EuBonNeutreMapper();
        $findban = $m_ban->find($id,$ban);
        
        $t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
        $select = $t_bon_neutre_detail->select();    
        $select->where('bon_neutre_id = ?',$id);
        $select->where('bon_neutre_appro_id is null');
        $select->order('bon_neutre_detail_date desc');
        $entriesdetail = $t_bon_neutre_detail->fetchAll($select);
        
        $t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
        $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $selection->setIntegrityCheck(false);
        //$selection->from('eu_bon_neutre_appro_detail',array('*'));
        $selection->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
        $selection->where('d.bon_neutre_id = ?',$id);
        $approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
        



    
                       $euban = new Application_Model_DbTable_EuBonNeutre();
                       $select = $euban->select();
                       $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                       $select->limit(1);
                       $rowseuban = $euban->fetchRow($select);
                       
                       $euband = new Application_Model_DbTable_EuBonNeutreDetail();
                       $select = $euband->select();
                       $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                       $select->limit(1);
                       $rowseuband = $euband->fetchRow($select);

/*$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($rowseuban->bon_neutre_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $rowseuban->bon_neutre_code);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->bon_neutre_utilise_montant);*/
$styleThinBlackBorderOutline = array(
    'borders' => array(
        'outline' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN,
            'color' => array('argb' => 'FF000000'),
        ),
    ),
);

$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', "Détails BAn Numéro ".$rowseuban->bon_neutre_code." du Membre ".$rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
//$objPHPExcel->getActiveSheet()->mergeCells('A'.$y.':E'.$y.'');
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

$w=$y;
//$x = $y+2;
$x=0;
if (count($entriesdetail)>0) {
    $x=count($entriesdetail) + 2;
//$y++;
$i=$y;

$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Détail BAn venant directement des banques");
$objPHPExcel->getActiveSheet()->mergeCells('B'.($y).':F'.($y).'');
$y++;
$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Date opération");
$objPHPExcel->getActiveSheet()->setCellValue('C'.($y).'', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('D'.($y).'', "Référence Versement");
$objPHPExcel->getActiveSheet()->setCellValue('E'.($y).'', "Montant versé");
$objPHPExcel->getActiveSheet()->setCellValue('F'.($y).'', "Date versement");
$y++;
foreach ($entriesdetail as $entrydetail){
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entrydetail->bon_neutre_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entrydetail->bon_neutre_detail_banque);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entrydetail->bon_neutre_detail_numero);
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entrydetail->bon_neutre_detail_montant);
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($entrydetail->bon_neutre_detail_date_numero));
$y++;
}
$objPHPExcel->getActiveSheet()->getStyle('B'.($i).':F'.($y-1).'')->applyFromArray($styleThinBlackBorderOutline);
}

//$z = $x+2;
$z=0;
if (count($approlignes)>0) {
    $z=count($approlignes) + 2;
//$y++;
$i=$y;

$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Détail BAn venant des approvisionnements");
$objPHPExcel->getActiveSheet()->mergeCells('B'.($y).':F'.($y).'');
$y++;
$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Date approvisionnement");
$objPHPExcel->getActiveSheet()->setCellValue('C'.($y).'', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('D'.($y).'', "Référence Versement");
$objPHPExcel->getActiveSheet()->setCellValue('E'.($y).'', "Montant Versé");
$objPHPExcel->getActiveSheet()->setCellValue('F'.($y).'', "Date Versement");
$y++;
foreach ($approlignes as $entryappro){
    $euban = new Application_Model_DbTable_EuBonNeutre();
    $rowseuban;             
    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
	$eubanapprod = new Application_Model_DbTable_EuBonNeutreApproDetail();
	$appro_id ="";
	
	if($entryappro->bon_neutre_appro_id == NULL || $entryappro->bon_neutre_appro_id == "") {
       $select = $euband->select();
       $select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
       $select->limit(1);
       $rowseuband = $euband->fetchRow($select);
       if(count($rowseuband) > 0) {
          $select = $euban->select();
          $select->where("bon_neutre_id = ? ", $rowseuband->bon_neutre_id);
          $select->limit(1);
          $rowseuban = $euban->fetchRow($select);
       }
	
	} else {
	   $appro_id = $entryappro->bon_neutre_appro_id;
	   while($appro_id > 0) {
            $selection = $eubanapprod->select();
            $selection->where("bon_neutre_appro_id = ? ", $appro_id);
			$selection->order("bon_neutre_appro_detail_montant DESC");
            $selection->limit(1);
            $rowseubanapprod = $eubanapprod->fetchRow($selection);

            $select = $euband->select();
            $select->where("bon_neutre_detail_id = ? ", $rowseubanapprod->bon_neutre_detail_id);
			$select->order("bon_neutre_detail_montant DESC");
            $select->limit(1);
            $rowseuband = $euband->fetchRow($select);
            $appro_id = $rowseuband->bon_neutre_appro_id;						   
        }
	}
	
	
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entryappro->bon_neutre_appro_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entryappro->bon_neutre_appro_detail_banque);
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $rowseuband->bon_neutre_detail_numero);
}

if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $rowseuband->bon_neutre_detail_montant);
}

if(count($rowseuband) > 0) { 
//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $rowseuban->bon_neutre_code);
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($rowseuband->bon_neutre_detail_date_numero));
}
$y++;
}
$objPHPExcel->getActiveSheet()->getStyle('B'.($i).':F'.($y-1).'')->applyFromArray($styleThinBlackBorderOutline);
}


$objPHPExcel->getActiveSheet()->mergeCells('A'.$w.':A'.($w + $x + $z - 1).'');
$objPHPExcel->getActiveSheet()->getStyle('A'.$w.':A'.($w + $x + $z - 1).'')->applyFromArray($styleThinBlackBorderOutline);










$y++;
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("Details - BAn en KACM");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/BAn_KACM/")) {
mkdir("../../webfiles/excel_exports/BAn_KACM/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/BAn_KACM/BAn_KACM_Details_".$date_debut."_".$date_fin."_.xlsx";
$newnom = "BAn_KACM_Details_".$date_debut."_".$date_fin."_";
$newchemin = "../../webfiles/excel_exports/BAn_KACM/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);

/*

    if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    } else {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */

    return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}


    public  static  function genererExcelOpiAr($code_membre,$date_debut,$date_fin)   {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       ini_set('memory_limit', '512M'); 
	  
	   $date_id = new Zend_Date(Zend_Date::ISO_8601);
	   $t_traite = new Application_Model_DbTable_EuTraite();
	   $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
       $select->setIntegrityCheck(false);
	   $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	   $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	   $select->where('eu_traite.traite_disponible = ?',1);
	   $select->where('eu_tpagcp.type_bl like ?',"PP Acheteur-Revendeur");
	   $select->where('eu_tpagcp.ntf = ?',12);
	   $select->order('eu_traite.traite_date_fin desc');
	       
	   if(!empty($code_membre)) {
		 $select->where('eu_tpagcp.code_membre like ?',$code_membre); 
	   }
	   
	   if(!empty($date_debut) && !empty($date_fin)) {
		  $date_fin = new Zend_Date($date_fin);
		  $date_fin->addDay(1);
		  $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)
			     ->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
	   }
	   
	   
	   $entries = $t_traite->fetchAll($select);
	   
	   require_once 'PHPExcel/PHPExcel.php';
        
      //////////////////////////////
      $objPHPExcel = new PHPExcel();
	  
	  $objPHPExcel->getProperties()->setCreator("ESMC")
                  ->setLastModifiedBy($sessionutilisateur->login)
                  ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                  ->setSubject("Etats des OPI des Intégrateurs")
                  ->setDescription("Export en excel des OPI Acheteurs Revendeurs")
                  ->setKeywords("")
                  ->setCategory("");
							 
	   $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(60);
       $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
       $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
       $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A1:H1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
	   $objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des OPI Acheteurs Revendeurs :  ".$code_membre);
	   $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $objPHPExcel->getActiveSheet()->setCellValue('A2', "O.P.I n°");
       $objPHPExcel->getActiveSheet()->setCellValue('B2', "ECHEANCE");
       $objPHPExcel->getActiveSheet()->setCellValue('C2', "CODE MEMBRE");
       $objPHPExcel->getActiveSheet()->setCellValue('D2', "BENEFICIAIRE");
	   $objPHPExcel->getActiveSheet()->setCellValue('E2', "CONTACT");
	   $objPHPExcel->getActiveSheet()->setCellValue('F2', "BANQUE");
	   $objPHPExcel->getActiveSheet()->setCellValue('G2', "COMPTE BANCAIRE");
	   $objPHPExcel->getActiveSheet()->setCellValue('H2', "MONTANT");
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A2:H2')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $y = 3;
	   $montant = 0;
	   foreach($entries as $entry):
	       if($entry->mode_paiement == "FAIP") {
			  $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id;
		   } else {
			  $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id."/".Util_Utils::ajoute1zero($entry->traiter)."-".$entry->ntf."/".
			  substr($entry->date_deb, 8, 2)."-".substr($entry->date_deb, 5, 2)."-".substr($entry->date_deb, 0, 4);
		   }
				
           $designation_membre = "";
           $portable = "";				
		   if(substr($entry->code_membre, -1) == "P") {
              $membre = new Application_Model_EuMembre();
              $membreM = new Application_Model_EuMembreMapper();
              $membreM->find($entry->code_membre, $membre);
              $designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
		      $portable = $membre->portable_membre;
           } else if (substr($entry->code_membre, -1) == "M") {
              $membre = new Application_Model_EuMembreMorale();
              $membreM = new Application_Model_EuMembreMoraleMapper();
              $membreM->find($entry->code_membre, $membre);
              $designation_membre = $membre->raison_sociale;
			  $portable = $membre->portable_membre;
           }
	   
	       $t_gcpprelever = new Application_Model_DbTable_EuGcpPrelever();
	       $select = $t_gcpprelever->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		   $select->setIntegrityCheck(false);
	       $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_gcp_prelever.id_tpagcp');
		   $select->join('eu_gcp', 'eu_gcp.id_gcp = eu_gcp_prelever.id_gcp');
		   $select->where('(eu_gcp.type_gcp like ?',"COM");
		   $select->orwhere('eu_gcp.bon_id is null)');
		   $select->where('eu_tpagcp.id_tpagcp = ?',$entry->id_tpagcp);
				
		   $results = $t_gcpprelever->fetchAll($select);
		   //if(count($results) > 0) {		
	           $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi);
               $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datefr($entry->traite_date_fin));
               $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->code_membre);
               $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $designation_membre);
		       $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $portable);
		       $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $entry->mode_paiement);
		       $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $entry->reference_paiement);
		       $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $entry->traite_montant);
		       $montant = $montant + $entry->traite_montant;
	           $y++;
			//}
	   
	   endforeach;
	   
	   $n = $y + 2;
	   
	   $objPHPExcel->getActiveSheet()->getStyle('G'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->getStyle('H'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->setCellValue('G'.$n.'',"MONTANT TOTAL");
	   $objPHPExcel->getActiveSheet()->setCellValue('H'.$n.'',($montant));
	   
	   $objPHPExcel->getActiveSheet()->setTitle("OPI Acheteurs Revendeurs");
       $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
       $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
       $callEndTime = microtime(true);
       $callTime = $callEndTime - $callStartTime;

       ////////////////////////////////////////////////////////////////////////////

       $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

       if(!is_dir("../../webfiles/excel_exports/OPI_RE/")) {
          mkdir("../../webfiles/excel_exports/OPI_RE/", 0777);
       } 

       $newfile = "../../webfiles/excel_exports/OPI_RE/OPI_AR_".$code_membre."_.xlsx";
       $newnom = "OPI_AR_".$code_membre."_";
       $newchemin = "../../webfiles/excel_exports/OPI_RE/";

       copy($file, $newfile);

       unlink($file);

       $file = $newchemin.$newnom.'.xlsx';
       $filena = $newnom.'.xlsx';
       /**/

       $domaine = Util_Utils::getParamEsmc(9);

       /*

       if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
       } else {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
       }

       */

       return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/ 
	   
   }


   public  static  function genererExcelOpiComPp($code_membre)   {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       ini_set('memory_limit', '512M'); 
	  
	   $date_id = new Zend_Date(Zend_Date::ISO_8601);
	   $t_traite = new Application_Model_DbTable_EuTraite();
	   $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
       $select->setIntegrityCheck(false);
	   $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	   $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	   //$select->where('eu_traite.traite_disponible = ?',1);
	   $select->where('eu_tpagcp.type_bl like ?',"PP Prestataire");
	   $select->order('eu_traite.traite_date_fin desc');
	       
	   if(!empty($code_membre)) {
		 $select->where('eu_tpagcp.code_membre like ?',$code_membre); 
	   }
	   $entries = $t_traite->fetchAll($select);
	   
	   require_once 'PHPExcel/PHPExcel.php';
        
      //////////////////////////////
      $objPHPExcel = new PHPExcel();
	  
	  $objPHPExcel->getProperties()->setCreator("ESMC")
                  ->setLastModifiedBy($sessionutilisateur->login)
                  ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                  ->setSubject("Etats des OPI des Intégrateurs")
                  ->setDescription("Export en excel des OPI des Intégrateurs")
                  ->setKeywords("")
                  ->setCategory("");
							 
	   $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(60);
       $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
       $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
       $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A1:H1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
	   $objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des OPI Commissions des Intégrateurs :  ".$code_membre);
	   $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $objPHPExcel->getActiveSheet()->setCellValue('A2', "O.P.I n°");
       $objPHPExcel->getActiveSheet()->setCellValue('B2', "ECHEANCE");
       $objPHPExcel->getActiveSheet()->setCellValue('C2', "CODE MEMBRE");
       $objPHPExcel->getActiveSheet()->setCellValue('D2', "BENEFICIAIRE");
	   $objPHPExcel->getActiveSheet()->setCellValue('E2', "CONTACT");
	   $objPHPExcel->getActiveSheet()->setCellValue('F2', "BANQUE");
	   $objPHPExcel->getActiveSheet()->setCellValue('G2', "COMPTE BANCAIRE");
	   $objPHPExcel->getActiveSheet()->setCellValue('H2', "MONTANT");
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A2:H2')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $y = 3;
	   $montant = 0;
	   foreach($entries as $entry):
	       if($entry->mode_paiement == "FAIP") {
			  $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id;
		   } else {
			  $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id."/".Util_Utils::ajoute1zero($entry->traiter)."-".$entry->ntf."/".
			  substr($entry->date_deb, 8, 2)."-".substr($entry->date_deb, 5, 2)."-".substr($entry->date_deb, 0, 4);
		   }
				
           $designation_membre = "";
           $portable = "";				
		   if(substr($entry->code_membre, -1) == "P") {
              $membre = new Application_Model_EuMembre();
              $membreM = new Application_Model_EuMembreMapper();
              $membreM->find($entry->code_membre, $membre);
              $designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
		      $portable = $membre->portable_membre;
           } else if (substr($entry->code_membre, -1) == "M") {
              $membre = new Application_Model_EuMembreMorale();
              $membreM = new Application_Model_EuMembreMoraleMapper();
              $membreM->find($entry->code_membre, $membre);
              $designation_membre = $membre->raison_sociale;
			  $portable = $membre->portable_membre;
           }
	   
	       $t_gcpprelever = new Application_Model_DbTable_EuGcpPrelever();
	       $select = $t_gcpprelever->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		   $select->setIntegrityCheck(false);
	       $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_gcp_prelever.id_tpagcp');
		   $select->join('eu_gcp', 'eu_gcp.id_gcp = eu_gcp_prelever.id_gcp');
		   $select->where('(eu_gcp.type_gcp like ?',"COM");
		   $select->orwhere('eu_gcp.bon_id is null)');
		   $select->where('eu_tpagcp.id_tpagcp = ?',$entry->id_tpagcp);
				
		   $results = $t_gcpprelever->fetchAll($select);
		   if(count($results) > 0) {		
	           $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi);
               $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datefr($entry->traite_date_fin));
               $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->code_membre);
               $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $designation_membre);
		       $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $portable);
		       $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $entry->mode_paiement);
		       $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $entry->reference_paiement);
		       $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $entry->traite_montant);
		       $montant = $montant + $entry->traite_montant;
	           $y++;
			}
	   
	   endforeach;
	   
	   $n = $y + 2;
	   
	   $objPHPExcel->getActiveSheet()->getStyle('G'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->getStyle('H'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->setCellValue('G'.$n.'',"MONTANT TOTAL");
	   $objPHPExcel->getActiveSheet()->setCellValue('H'.$n.'',($montant));
	   
	   $objPHPExcel->getActiveSheet()->setTitle("OPI COMMISSIONS INTEGRATEURS");
       $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
       $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
       $callEndTime = microtime(true);
       $callTime = $callEndTime - $callStartTime;

       ////////////////////////////////////////////////////////////////////////////

       $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

       if(!is_dir("../../webfiles/excel_exports/OPI_RE/")) {
          mkdir("../../webfiles/excel_exports/OPI_RE/", 0777);
       } 

       $newfile = "../../webfiles/excel_exports/OPI_RE/OPI_COMPP_".$code_membre."_.xlsx";
       $newnom = "OPI_COMPP_".$code_membre."_";
       $newchemin = "../../webfiles/excel_exports/OPI_RE/";

       copy($file, $newfile);

       unlink($file);

       $file = $newchemin.$newnom.'.xlsx';
       $filena = $newnom.'.xlsx';
       /**/

       $domaine = Util_Utils::getParamEsmc(9);

 /*      

       if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
       } else {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
       }

  */
       return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/ 
	   
   }




   public  static  function genererExcelOpiComPm($code_membre,$date_debut,$date_fin)   {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       ini_set('memory_limit', '512M'); 
	  
	   $date_id = new Zend_Date(Zend_Date::ISO_8601);
	   $t_traite = new Application_Model_DbTable_EuTraite();
	   $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
       $select->setIntegrityCheck(false);
	   $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	   $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	   //$select->where('eu_traite.traite_disponible = ?',1);
	   $select->where('eu_tpagcp.type_bl like ?',"PM");
	   $select->order('eu_traite.traite_date_fin desc');
	       
	   if(!empty($code_membre)) {
		 $select->where('eu_tpagcp.code_membre like ?',$code_membre); 
	   }
	   if(!empty($date_debut) && !empty($date_fin)) {
		      $date_fin = new Zend_Date($date_fin);
		      $date_fin->addDay(1);
		      $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)
			         ->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
	   }
	   
	   $entries = $t_traite->fetchAll($select);
	   
	   require_once 'PHPExcel/PHPExcel.php';
        
      //////////////////////////////
      $objPHPExcel = new PHPExcel();
	  
	  $objPHPExcel->getProperties()->setCreator("ESMC")
                  ->setLastModifiedBy($sessionutilisateur->login)
                  ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                  ->setSubject("Etats des OPI des GUUI")
                  ->setDescription("Export en excel des OPI des GUUI")
                  ->setKeywords("")
                  ->setCategory("");
							 
	   $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(60);
       $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
       $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
       $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A1:H1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
	   $objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des OPI Commissions des GUUI :  ".$code_membre);
	   $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $objPHPExcel->getActiveSheet()->setCellValue('A2', "O.P.I n°");
       $objPHPExcel->getActiveSheet()->setCellValue('B2', "ECHEANCE");
       $objPHPExcel->getActiveSheet()->setCellValue('C2', "CODE MEMBRE");
       $objPHPExcel->getActiveSheet()->setCellValue('D2', "BENEFICIAIRE");
	   $objPHPExcel->getActiveSheet()->setCellValue('E2', "CONTACT");
	   $objPHPExcel->getActiveSheet()->setCellValue('F2', "BANQUE");
	   $objPHPExcel->getActiveSheet()->setCellValue('G2', "COMPTE BANCAIRE");
	   $objPHPExcel->getActiveSheet()->setCellValue('H2', "MONTANT");
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A2:H2')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $y = 3;
	   $montant = 0;
	   foreach($entries as $entry):
	       if($entry->mode_paiement == "FAIP") {
			  $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id;
		   } else {
			  $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id."/".Util_Utils::ajoute1zero($entry->traiter)."-".$entry->ntf."/".
			  substr($entry->date_deb, 8, 2)."-".substr($entry->date_deb, 5, 2)."-".substr($entry->date_deb, 0, 4);
		   }
				
           $designation_membre = "";
           $portable = "";				
		   if(substr($entry->code_membre, -1) == "P") {
              $membre = new Application_Model_EuMembre();
              $membreM = new Application_Model_EuMembreMapper();
              $membreM->find($entry->code_membre, $membre);
              $designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
		      $portable = $membre->portable_membre;
           } else if (substr($entry->code_membre, -1) == "M") {
              $membre = new Application_Model_EuMembreMorale();
              $membreM = new Application_Model_EuMembreMoraleMapper();
              $membreM->find($entry->code_membre, $membre);
              $designation_membre = $membre->raison_sociale;
			  $portable = $membre->portable_membre;
           }
	   
	       $t_gcpprelever = new Application_Model_DbTable_EuGcpPrelever();
	       $select = $t_gcpprelever->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		   $select->setIntegrityCheck(false);
	       $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_gcp_prelever.id_tpagcp');
		   $select->join('eu_gcp', 'eu_gcp.id_gcp = eu_gcp_prelever.id_gcp');
		   $select->where('eu_gcp.type_gcp like ?',"COM");
		   $select->where('eu_tpagcp.id_tpagcp = ?',$entry->id_tpagcp);
				
		   $results = $t_gcpprelever->fetchAll($select);
		   if(count($results) > 0) {		
	           $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi);
               $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datefr($entry->traite_date_fin));
               $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->code_membre);
               $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $designation_membre);
		       $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $portable);
		       $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $entry->mode_paiement);
		       $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $entry->reference_paiement);
		       $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $entry->traite_montant);
		       $montant = $montant + $entry->traite_montant;
	           $y++;
			}
	   
	   endforeach;
	   
	   $n = $y + 2;
	   
	   $objPHPExcel->getActiveSheet()->getStyle('G'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->getStyle('H'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->setCellValue('G'.$n.'',"MONTANT TOTAL");
	   $objPHPExcel->getActiveSheet()->setCellValue('H'.$n.'',($montant));
	   
	   $objPHPExcel->getActiveSheet()->setTitle("OPI COMMISSIONS GUUI");
       $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
       $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
       $callEndTime = microtime(true);
       $callTime = $callEndTime - $callStartTime;

       ////////////////////////////////////////////////////////////////////////////

       $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

       if(!is_dir("../../webfiles/excel_exports/OPI_RE/")) {
          mkdir("../../webfiles/excel_exports/OPI_RE/", 0777);
       } 

       $newfile = "../../webfiles/excel_exports/OPI_RE/OPI_COMPM_".$code_membre."_.xlsx";
       $newnom = "OPI_COMPM_".$code_membre."_";
       $newchemin = "../../webfiles/excel_exports/OPI_RE/";

       copy($file, $newfile);

       unlink($file);

       $file = $newchemin.$newnom.'.xlsx';
       $filena = $newnom.'.xlsx';
       /**/

       $domaine = Util_Utils::getParamEsmcLib(9);

 /*      

       if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
       } else {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
       }
  */
       return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/ 
	   
   }


   public  static  function genererExcelOpiFrs($code_membre,$date_debut,$date_fin)   {
	   $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
       ini_set('memory_limit', '512M'); 
	  
	   $date_id = new Zend_Date(Zend_Date::ISO_8601);
	   $t_traite = new Application_Model_DbTable_EuTraite();
	   $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
       $select->setIntegrityCheck(false);
	   $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
	   $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
	   $select->where('eu_traite.traite_disponible = ?',1);
	   $select->where('eu_tpagcp.type_bl like ?',"PM");
	   $select->order('eu_traite.traite_date_fin desc');
	       
	   if(!empty($code_membre)) {
		 $select->where('eu_tpagcp.code_membre like ?',$code_membre); 
	   }
	   if(!empty($date_debut) && !empty($date_fin)) {
		      $date_fin = new Zend_Date($date_fin);
		      $date_fin->addDay(1);
		      $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)
			         ->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
	   }
	   
	   $entries = $t_traite->fetchAll($select);
	   
	   require_once 'PHPExcel/PHPExcel.php';
        
      //////////////////////////////
      $objPHPExcel = new PHPExcel();
	  
	  $objPHPExcel->getProperties()->setCreator("ESMC")
                  ->setLastModifiedBy($sessionutilisateur->login)
                  ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                  ->setSubject("Etats des OPI des Fournisseurs de BPS")
                  ->setDescription("Export en excel des OPI des Fournisseurs de BPS")
                  ->setKeywords("")
                  ->setCategory("");
							 
	   $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(60);
       $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
       $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
       $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(30);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(30);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(30);
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A1:H1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
	   $objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des OPI Fournisseurs de BPS :  ".$code_membre);
	   $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $objPHPExcel->getActiveSheet()->setCellValue('A2', "O.P.I n°");
       $objPHPExcel->getActiveSheet()->setCellValue('B2', "ECHEANCE");
       $objPHPExcel->getActiveSheet()->setCellValue('C2', "CODE MEMBRE");
       $objPHPExcel->getActiveSheet()->setCellValue('D2', "BENEFICIAIRE");
	   $objPHPExcel->getActiveSheet()->setCellValue('E2', "CONTACT");
	   $objPHPExcel->getActiveSheet()->setCellValue('F2', "BANQUE");
	   $objPHPExcel->getActiveSheet()->setCellValue('G2', "COMPTE BANCAIRE");
	   $objPHPExcel->getActiveSheet()->setCellValue('H2', "MONTANT");
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A2:H2')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $y = 3;
	   $montant = 0;
	   foreach($entries as $entry):
	       if($entry->mode_paiement == "FAIP") {
			  $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id;
		   } else {
			  $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id."/".Util_Utils::ajoute1zero($entry->traiter)."-".$entry->ntf."/".
			  substr($entry->date_deb, 8, 2)."-".substr($entry->date_deb, 5, 2)."-".substr($entry->date_deb, 0, 4);
		   }
				
           $designation_membre = "";
           $portable = "";				
		   if(substr($entry->code_membre, -1) == "P") {
              $membre = new Application_Model_EuMembre();
              $membreM = new Application_Model_EuMembreMapper();
              $membreM->find($entry->code_membre, $membre);
              $designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
		      $portable = $membre->portable_membre;
           } else if (substr($entry->code_membre, -1) == "M") {
              $membre = new Application_Model_EuMembreMorale();
              $membreM = new Application_Model_EuMembreMoraleMapper();
              $membreM->find($entry->code_membre, $membre);
              $designation_membre = $membre->raison_sociale;
			  $portable = $membre->portable_membre;
           }
	   
	       $t_gcpprelever = new Application_Model_DbTable_EuGcpPrelever();
	       $select = $t_gcpprelever->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		   $select->setIntegrityCheck(false);
	       $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_gcp_prelever.id_tpagcp');
		   $select->join('eu_gcp', 'eu_gcp.id_gcp = eu_gcp_prelever.id_gcp');
		   $select->where('eu_gcp.type_gcp like ?',"COM");
		   $select->where('eu_tpagcp.id_tpagcp = ?',$entry->id_tpagcp);
				
		   $results = $t_gcpprelever->fetchAll($select);
		   if(count($results) == 0) {		
	           $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi);
               $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datefr($entry->traite_date_fin));
               $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->code_membre);
               $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $designation_membre);
		       $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $portable);
		       $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $entry->mode_paiement);
		       $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $entry->reference_paiement);
		       $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $entry->traite_montant);
		       $montant = $montant + $entry->traite_montant;
	           $y++;
			}
	   
	   endforeach;
	   
	   $n = $y + 2;
	   
	   $objPHPExcel->getActiveSheet()->getStyle('G'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->getStyle('H'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->setCellValue('G'.$n.'',"MONTANT TOTAL");
	   $objPHPExcel->getActiveSheet()->setCellValue('H'.$n.'',($montant));
	   
	   $objPHPExcel->getActiveSheet()->setTitle("OPI Fournisseurs BPS");
       $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
       $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
       $callEndTime = microtime(true);
       $callTime = $callEndTime - $callStartTime;

       ////////////////////////////////////////////////////////////////////////////

       $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

       if(!is_dir("../../webfiles/excel_exports/OPI_RE/")) {
          mkdir("../../webfiles/excel_exports/OPI_RE/", 0777);
       } 

       $newfile = "../../webfiles/excel_exports/OPI_RE/OPI_BPS_".$code_membre."_.xlsx";
       $newnom = "OPI_BPS_".$code_membre."_";
       $newchemin = "../../webfiles/excel_exports/OPI_RE/";

       copy($file, $newfile);

       unlink($file);

       $file = $newchemin.$newnom.'.xlsx';
       $filena = $newnom.'.xlsx';
       /**/

  $domaine = Util_Utils::getParamEsmc(9);

  /*

       if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
       } else {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
       }

    */
       return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/ 
	   
   }



   public  static  function genererExcelBAnSous($date_debut, $date_fin) {
	  $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
      ini_set('memory_limit', '512M'); 
	  
	  $date_id = new Zend_Date(Zend_Date::ISO_8601);
	  
	  $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	  $select = $db_bondetail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
      $select->setIntegrityCheck(false);
      $select->join(array('b' => 'eu_bon_neutre'), 'eu_bon_neutre_detail.bon_neutre_id = b.bon_neutre_id');
			
	  if(!empty($date_debut) && !empty($date_fin)) {
		$date_fin = new Zend_Date($date_fin);
		$date_fin->addDay(1);
		$select->where('(eu_bon_neutre_detail.bon_neutre_detail_date >= ?',$date_debut)->where('eu_bon_neutre_detail.bon_neutre_detail_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
	  } elseif(!empty($date_debut)) {
	    $select->where('eu_bon_neutre_detail.bon_neutre_detail_date >= ?',$date_debut);
      } elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('eu_bon_neutre_detail.bon_neutre_detail_date <= ?',$date_fin->toString('yyyy-MM-dd'));
	  }
			
      $select->order('eu_bon_neutre_detail.bon_neutre_detail_date desc');
      $entries = $db_bondetail->fetchAll($select);
	  
	  require_once 'PHPExcel/PHPExcel.php';
        
      //////////////////////////////
      $objPHPExcel = new PHPExcel();
	  
	  $objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats des BAn Souscrits")
                             ->setDescription("Export en excel des BAn Souscrits")
                             ->setKeywords("")
                             ->setCategory("");
							 
	   $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
       $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(24);
       $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
       $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(27);
	   $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(30);
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
	   $objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des  BAn Souscrits de  ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
	   $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $objPHPExcel->getActiveSheet()->setCellValue('A2', "Souscripteur");
       $objPHPExcel->getActiveSheet()->setCellValue('B2', "Code BAn");
       $objPHPExcel->getActiveSheet()->setCellValue('C2', "Date Opération");
       $objPHPExcel->getActiveSheet()->setCellValue('D2', "Montant BAn");
	   $objPHPExcel->getActiveSheet()->setCellValue('E2', "Origine BAn");
	   
	   $objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));
	   
	   $y = 3;
	   $montant = 0;
       foreach($entries as $entry):
	     $eubanappro = new Application_Model_EuBonNeutreAppro();
         $eubanapproM = new Application_Model_EuBonNeutreApproMapper();
					  
         $membremorale = new Application_Model_EuMembreMorale();
         $membremoraleM = new Application_Model_EuMembreMoraleMapper();
		 $membre = new Application_Model_EuMembre();
         $membreM = new Application_Model_EuMembreMapper();
		 $origine = "";
		 $apporteur = "";
					  
		 $id_appro = $entry->bon_neutre_appro_id;
		 if($id_appro > 0) {
			 $eubanapproM->find($id_appro,$eubanappro);
			 $apporteur = $eubanappro->bon_neutre_appro_apporteur;
			 if(substr($apporteur, -1) == "P") {
			    $membreM->find($apporteur,$membre);
				$origine = $membre->nom_membre." ".$membre->prenom_membre; 
			 } else {
				$membremoraleM->find($apporteur,$membremorale);
				$origine = $membremorale->raison_sociale;
			 }
						  
		  } else {
			   $origine = $entry->bon_neutre_detail_banque;
						  
		  }
	   
	     $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $entry->bon_neutre_nom." ".$entry->bon_neutre_prenom." ".$entry->bon_neutre_raison);
         $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $entry->bon_neutre_code);
         $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', datejourfr($entry->bon_neutre_detail_date));
         $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->bon_neutre_detail_montant);
		 $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $origine);
		 $montant = $montant + $entry->bon_neutre_detail_montant;
	     $y++;   
       endforeach;
	   
	   $n = $y + 2;
	   
	   $objPHPExcel->getActiveSheet()->getStyle('C'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->getStyle('D'.$n)->applyFromArray(array('font' => array('bold' => true)));
	   $objPHPExcel->getActiveSheet()->setCellValue('C'.$n.'',"MONTANT TOTAL");
	   $objPHPExcel->getActiveSheet()->setCellValue('D'.$n.'',($montant));
	   
	   $objPHPExcel->getActiveSheet()->setTitle("BAn Souscrits");
       $objPHPExcel->setActiveSheetIndex(0);
	   
	   $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
       $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
       $callEndTime = microtime(true);
       $callTime = $callEndTime - $callStartTime;

       ////////////////////////////////////////////////////////////////////////////

       $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

       if(!is_dir("../../webfiles/excel_exports/BAn_Sous/")) {
            mkdir("../../webfiles/excel_exports/BAn_Sous/", 0777);
       } /**/
         /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

       $newfile = "../../webfiles/excel_exports/BAn_Sous/BAn_Sous_".$date_debut."_".$date_fin."_.xlsx";
       $newnom = "BAn_Sous_".$date_debut."_".$date_fin."_";
       $newchemin = "../../webfiles/excel_exports/BAn_Sous/";

       copy($file, $newfile);

       unlink($file);

       $file = $newchemin.$newnom.'.xlsx';
       $filena = $newnom.'.xlsx';
       /**/

       $domaine = Util_Utils::getParamEsmc(9);


/*
       if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
       } else {
          $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
       }

  */
       return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/
	   
   }
   
   
   public static function genererExcelDetailBAnSous($date_debut, $date_fin) {

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        ini_set('memory_limit', '512M');    
        //include("Transfert.php");
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        $db_bondetail = new Application_Model_DbTable_EuBonNeutreDetail();
	    $select = $db_bondetail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
        $select->join(array('b' => 'eu_bon_neutre'), 'eu_bon_neutre_detail.bon_neutre_id = b.bon_neutre_id');
			
	    if(!empty($date_debut) && !empty($date_fin)) {
		   $date_fin = new Zend_Date($date_fin);
		   $date_fin->addDay(1);
		   $select->where('(eu_bon_neutre_detail.bon_neutre_detail_date >= ?',$date_debut)->where('eu_bon_neutre_detail.bon_neutre_detail_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
	    } elseif(!empty($date_debut)) {
	       $select->where('eu_bon_neutre_detail.bon_neutre_detail_date >= ?',$date_debut);
        } elseif(!empty($date_fin)) {
		   $date_fin = new Zend_Date($date_fin);
		   $date_fin->addDay(1);
		   $select->where('eu_bon_neutre_detail.bon_neutre_detail_date <= ?',$date_fin->toString('yyyy-MM-dd'));
	    }
			
        $select->order('eu_bon_neutre_detail.bon_neutre_detail_date desc');
        $entries = $db_bondetail->fetchAll($select);
			
        require_once 'PHPExcel/PHPExcel.php';
        
            //////////////////////////////

            $objPHPExcel = new PHPExcel();

            $objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Details - BAn Souscrits")
                             ->setDescription("Export en excel des BAn Souscrits et détails")
                             ->setKeywords("")
                             ->setCategory("");

            $objPHPExcel->setActiveSheetIndex(0);                                         

            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(11);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
            $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);/**/

            $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
            $objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des BAn Souscrits de".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." et détails");
            $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

            $objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

            $y = 3;
            foreach($entries as $entry):
               $id = $entry->bon_neutre_id;
               $ban = new Application_Model_EuBonNeutre();
               $m_ban  = new Application_Model_EuBonNeutreMapper();
               $findban = $m_ban->find($id,$ban);
        
               $t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
               $select = $t_bon_neutre_detail->select();    
               $select->where('bon_neutre_id = ?',$id);
               $select->where('bon_neutre_appro_id is null');
               $select->order('bon_neutre_detail_date desc');
               $entriesdetail = $t_bon_neutre_detail->fetchAll($select);
        
               $t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
               $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
               $selection->setIntegrityCheck(false);
               //$selection->from('eu_bon_neutre_appro_detail',array('bon_neutre_appro_id','bon_neutre_detail_id'));
               $selection->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
               $selection->where('d.bon_neutre_id = ?',$id);
               $approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
		
               $euban = new Application_Model_DbTable_EuBonNeutre();
               $select = $euban->select();
               $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
               $select->limit(1);
               $rowseuban = $euban->fetchRow($select);
                       
               $euband = new Application_Model_DbTable_EuBonNeutreDetail();
               $select = $euband->select();
               $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
               $select->limit(1);
               $rowseuband = $euband->fetchRow($select);


                $styleThinBlackBorderOutline = array(
                'borders' => array(
                'outline' => array(
                'style' => PHPExcel_Style_Border::BORDER_THIN,
                'color' => array('argb' => 'FF000000'),
                ),
                ),
                );

                $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', "Détails BAn Numéro ".$rowseuban->bon_neutre_code." du Membre ".$rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom." ".$rowseuban->bon_neutre_raison);
                //$objPHPExcel->getActiveSheet()->mergeCells('A'.$y.':E'.$y.'');
                $objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY);
                $objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

                $w=$y;
                //$x = $y+2;
                $x=0;
                if(count($entriesdetail) > 0) {
                   $x=count($entriesdetail) + 2;
                   //$y++;
                   $i=$y;

                   $objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Détail BAn venant directemen des banques");
                   $objPHPExcel->getActiveSheet()->mergeCells('B'.($y).':F'.($y).'');
                   $y++;
                   $objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Date opération");
                   $objPHPExcel->getActiveSheet()->setCellValue('C'.($y).'', "Banque");
                   $objPHPExcel->getActiveSheet()->setCellValue('D'.($y).'', "Référence Versement");
                   $objPHPExcel->getActiveSheet()->setCellValue('E'.($y).'', "Montant Versé");
                   $objPHPExcel->getActiveSheet()->setCellValue('F'.($y).'', "Date versement");
                   $y++;
                   foreach($entriesdetail as $entrydetail) {
                      $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entrydetail->bon_neutre_detail_date));
                      $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entrydetail->bon_neutre_detail_banque);
                      $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entrydetail->bon_neutre_detail_numero);
                      $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entrydetail->bon_neutre_detail_montant);
                      $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($entrydetail->bon_neutre_detail_date_numero));
                      $y++;
                   }
                   $objPHPExcel->getActiveSheet()->getStyle('B'.($i).':F'.($y-1).'')->applyFromArray($styleThinBlackBorderOutline);
                 }

                 //$z = $x+2;
                 $z=0;
                 if(count($approlignes)>0) {
                     $z=count($approlignes) + 2;
                     //$y++;
                     $i=$y;

                     $objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Détail BAn venant des approvisionnements");
                     $objPHPExcel->getActiveSheet()->mergeCells('B'.($y).':F'.($y).'');
                     $y++;
                     $objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Date approvisionnement");
                     $objPHPExcel->getActiveSheet()->setCellValue('C'.($y).'', "Banque");
                     $objPHPExcel->getActiveSheet()->setCellValue('D'.($y).'', "Référence Versement");
                     $objPHPExcel->getActiveSheet()->setCellValue('E'.($y).'', "Montant Versé");
                     $objPHPExcel->getActiveSheet()->setCellValue('F'.($y).'', "Date Versement");
                     $y++;

                     $t = 0;
                     foreach($approlignes as $entryappro) {
	                    $euban = new Application_Model_DbTable_EuBonNeutre();
                        $rowseuban;             
                        $euband = new Application_Model_DbTable_EuBonNeutreDetail();
	                    $eubanapprod = new Application_Model_DbTable_EuBonNeutreApproDetail();
	                    $appro_id ="";
	
	                    if($entryappro->bon_neutre_appro_id == NULL || $entryappro->bon_neutre_appro_id == "") {
                           $select = $euband->select();
                           $select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
                           $select->limit(1);
                           $rowseuband = $euband->fetchRow($select);
                           if(count($rowseuband) > 0) {
                              $select = $euban->select();
                              $select->where("bon_neutre_id = ? ", $rowseuband->bon_neutre_id);
                              $select->limit(1);
                              $rowseuban = $euban->fetchRow($select);
                           }
	
	                     } else {
	                        $appro_id = $entryappro->bon_neutre_appro_id;
		                    $table[$t] = $entryappro->bon_neutre_appro_id;
		                    $bon_neutre_detail_id = $entryappro->bon_neutre_detail_id;
		                    $v = 0;
	                        while($appro_id > 0) {
                              $selection = $eubanapprod->select();
                              $selection->where("bon_neutre_appro_id = ? ", $appro_id);
			                  if($v == 0) {
			                    $selection->where("bon_neutre_appro_detail_montant = ? ",$entryappro->bon_neutre_appro_detail_montant);
		                      }
			                  if($t > 0) {
			                      if($table[$t-1] != $table[$t]) {
			                           $selection->order("bon_neutre_appro_detail_montant DESC");
			                      } elseif($table[$t-1] == $table[$t]) { 
			                      $selection->order("bon_neutre_appro_detail_montant ASC");
			                      }
			                  } else {
			                     $selection->order("bon_neutre_appro_detail_montant DESC");
			                  }
                      $selection->limit(1);
                      $rowseubanapprod = $eubanapprod->fetchRow($selection);

                      $select = $euband->select();
                      $select->where("bon_neutre_detail_id = ? ", $rowseubanapprod->bon_neutre_detail_id);
			          //$select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
			          $select->order("bon_neutre_detail_montant DESC");
                      $select->limit(1);
                      $rowseuband = $euband->fetchRow($select);
                      $appro_id = $rowseuband->bon_neutre_appro_id;
                     $v++;			
                 }
	          }
	
              if($t > 0)  {
				  $ref[$t] = $rowseuband->bon_neutre_detail_numero;
				  if($ref[$t-1] != $ref[$t]) {	
	
                        $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entryappro->bon_neutre_appro_detail_date));
                        $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entryappro->bon_neutre_appro_detail_banque);
                        if(count($rowseuband) > 0) { 
                             $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $rowseuband->bon_neutre_detail_numero);
                        }
                        if(count($rowseuband) > 0) { 
                            $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $rowseuband->bon_neutre_detail_montant);
                        }
                        if(count($rowseuband) > 0) { 
                            $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($rowseuband->bon_neutre_detail_date_numero));
                        }

                   }
               } else {
	
                  $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entryappro->bon_neutre_appro_detail_date));
                  $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entryappro->bon_neutre_appro_detail_banque);
                  if(count($rowseuband) > 0) { 
                     $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $rowseuband->bon_neutre_detail_numero);
                  }
                  if(count($rowseuband) > 0) { 
                     $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $rowseuband->bon_neutre_detail_montant);
                  }
                  if(count($rowseuband) > 0) { 
                     $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($rowseuband->bon_neutre_detail_date_numero));
                  }	
	
              }

              $y++;
              $t++;

           }
           $objPHPExcel->getActiveSheet()->getStyle('B'.($i).':F'.($y-1).'')->applyFromArray($styleThinBlackBorderOutline);
       }

       $objPHPExcel->getActiveSheet()->mergeCells('A'.$w.':A'.($w + $x + $z - 1).'');
       $objPHPExcel->getActiveSheet()->getStyle('A'.$w.':A'.($w + $x + $z - 1).'')->applyFromArray($styleThinBlackBorderOutline);

       $y++;
       endforeach;

       $objPHPExcel->getActiveSheet()->setTitle("Details - BAn en BC");
       $objPHPExcel->setActiveSheetIndex(0);

       $callStartTime = microtime(true);

       $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
       $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
       $callEndTime = microtime(true);
       $callTime = $callEndTime - $callStartTime;

       ////////////////////////////////////////////////////////////////////////////

       $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

       if(!is_dir("../../webfiles/excel_exports/BAn_Sous/")) {
            mkdir("../../webfiles/excel_exports/BAn_Sous/", 0777);
       }
	   

       $newfile = "../../webfiles/excel_exports/BAn_Sous/BAn_Sous_Details_".$date_debut."_".$date_fin."_.xlsx";
       $newnom = "BAn_Sous_Details_".$date_debut."_".$date_fin."_";
       $newchemin = "../../webfiles/excel_exports/BAn_Sous/";

       copy($file, $newfile);

       unlink($file);

       $file = $newchemin.$newnom.'.xlsx';
       $filena = $newnom.'.xlsx';

       $domaine = Util_Utils::getParamEsmc(9);

 /*      
       if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
           $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
       } else {
           $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
       }

  */
       return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

  }


   public static function genererExcelBAnBC($date_debut, $date_fin) {

           $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

           //include("Transfert.php");
        
           $date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

            $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
            $select = $t_bon_neutre_utilise->select();
           
            $select->where("bon_neutre_utilise_libelle like ?","Souscription au Bon d'Achat");
			
			//$select->orwhere('bon_neutre_utilise_libelle like ?)',"BC");
           
		    /*
            if (!empty($date_debut) && !empty($date_fin)) {
               $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin);  
            } elseif(!empty($date_debut)) {
               $select->where('bon_neutre_utilise_date >= ?',$date_debut);
            } elseif(!empty($date_fin)) {
               $select->where('bon_neutre_utilise_date <= ?',$date_fin);
            }
            $select->order('bon_neutre_utilise_date desc');
			*/
			
			if (!empty($date_debut) && !empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
		       $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			   $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			} elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			}
			$select->order('bon_neutre_utilise_date desc');
			
			
            $entries = $t_bon_neutre_utilise->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats quotidiens des BAn en BC dont les OPI Echélonnés sur 12 périodes")
                             ->setDescription("Export en excel les états quotidiens d'expression des BAn en Bons de Consommation (BC) dont les OPI Echélonnés sur 12 périodes")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(24);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(24);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(21);

$objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens d'expression des BAn en Bons de Consommation (BC) dont les OPI Echélonnés sur 12 périodes de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

$objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'expression");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant BAn en BC");

$objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
    
                       $euban = new Application_Model_DbTable_EuBonNeutre();
                    $select = $euban->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuban = $euban->fetchRow($select);
                       
                    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
                    $select = $euband->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuband = $euband->fetchRow($select);

$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($rowseuban->bon_neutre_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $rowseuban->bon_neutre_code);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->bon_neutre_utilise_montant);

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("BAn en BC");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/BAn_BC/")) {
mkdir("../../webfiles/excel_exports/BAn_BC/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/BAn_BC/BAn_BC_".$date_debut."_".$date_fin."_.xlsx";
$newnom = "BAn_BC_".$date_debut."_".$date_fin."_";
$newchemin = "../../webfiles/excel_exports/BAn_BC/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}







public static function genererExcelBAnBCDetails($date_debut, $date_fin) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

            $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
            $select = $t_bon_neutre_utilise->select();
           
            $select->where("bon_neutre_utilise_libelle like ? ","Souscription au Bon d'Achat");
			//$select->orwhere('bon_neutre_utilise_libelle like ?)',"BC");
           
            /*if (!empty($date_debut) && !empty($date_fin)) {
               $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin);  
            } elseif(!empty($date_debut)) {
               $select->where('bon_neutre_utilise_date >= ?',$date_debut);
            } elseif(!empty($date_fin)) {
               $select->where('bon_neutre_utilise_date <= ?',$date_fin);
            }
            $select->order('bon_neutre_utilise_date desc');
			*/
			
			if (!empty($date_debut) && !empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
		       $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			   $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			} elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			}
			$select->order('bon_neutre_utilise_date desc');
			
            $entries = $t_bon_neutre_utilise->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Details - Etats quotidiens des BAn en BC")
                             ->setDescription("Export en excel les états quotidiens d'expression des BAn en Bons de Consommation (BC) dont les OPI Echélonnés sur 12 périodes et détails")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);/**/

$objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens d'expression des BAn en Bons de Consommation (BC) dont les OPI Echélonnés sur 12 périodes de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." et détails");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

/*$objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'expression");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant BAn en BC");*/

$objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):

$id = $entry->bon_neutre_id;

$ban = new Application_Model_EuBonNeutre();
        $m_ban  = new Application_Model_EuBonNeutreMapper();
        $findban = $m_ban->find($id,$ban);
        
        $t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
        $select = $t_bon_neutre_detail->select();    
        $select->where('bon_neutre_id = ?',$id);
        $select->where('bon_neutre_appro_id is null');
        $select->order('bon_neutre_detail_date desc');
        $entriesdetail = $t_bon_neutre_detail->fetchAll($select);
        
        $t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
        $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $selection->setIntegrityCheck(false);
        //$selection->from('eu_bon_neutre_appro_detail',array('bon_neutre_appro_id','bon_neutre_detail_id'));
        $selection->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
        $selection->where('d.bon_neutre_id = ?',$id);
        $approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
		
		
		//$t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
        //$selection = $t_bon_neutre_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        //$selection->setIntegrityCheck(false);
        //$selection->from('eu_bon_neutre_appro_detail',array('bon_neutre_appro_id','bon_neutre_detail_id'));
        //$selection->join(array('d' => 'eu_bon_neutre_appro_detail'), 'eu_bon_neutre_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_detail_id','bon_neutre_appro_id',
		//'bon_neutre_appro_detail_date','bon_neutre_appro_detail_banque'));
        //$selection->where('eu_bon_neutre_detail.bon_neutre_id = ?',$id);
        //$approlignes = $t_bon_neutre_detail->fetchAll($selection);
        
        


    
                       $euban = new Application_Model_DbTable_EuBonNeutre();
                    $select = $euban->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuban = $euban->fetchRow($select);
                       
                    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
                    $select = $euband->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuband = $euband->fetchRow($select);

/*$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($rowseuban->bon_neutre_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $rowseuban->bon_neutre_code);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->bon_neutre_utilise_montant);*/
$styleThinBlackBorderOutline = array(
    'borders' => array(
        'outline' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN,
            'color' => array('argb' => 'FF000000'),
        ),
    ),
);

$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', "Détails BAn Numéro ".$rowseuban->bon_neutre_code." du Membre ".$rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
//$objPHPExcel->getActiveSheet()->mergeCells('A'.$y.':E'.$y.'');
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

$w=$y;
//$x = $y+2;
$x=0;
if (count($entriesdetail)>0) {
    $x=count($entriesdetail) + 2;
//$y++;
$i=$y;

$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Détail BAn venant directement des banques");
$objPHPExcel->getActiveSheet()->mergeCells('B'.($y).':F'.($y).'');
$y++;
$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Date opération");
$objPHPExcel->getActiveSheet()->setCellValue('C'.($y).'', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('D'.($y).'', "Référence Versement");
$objPHPExcel->getActiveSheet()->setCellValue('E'.($y).'', "Montant Versé");
$objPHPExcel->getActiveSheet()->setCellValue('F'.($y).'', "Date versement");
$y++;
foreach ($entriesdetail as $entrydetail){
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entrydetail->bon_neutre_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entrydetail->bon_neutre_detail_banque);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entrydetail->bon_neutre_detail_numero);
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entrydetail->bon_neutre_detail_montant);
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($entrydetail->bon_neutre_detail_date_numero));
$y++;
}
$objPHPExcel->getActiveSheet()->getStyle('B'.($i).':F'.($y-1).'')->applyFromArray($styleThinBlackBorderOutline);
}

//$z = $x+2;
$z=0;
if (count($approlignes)>0) {
    $z=count($approlignes) + 2;
//$y++;
$i=$y;

$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Détail BAn venant des approvisionnements");
$objPHPExcel->getActiveSheet()->mergeCells('B'.($y).':F'.($y).'');
$y++;
$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Date approvisionnement");
$objPHPExcel->getActiveSheet()->setCellValue('C'.($y).'', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('D'.($y).'', "Référence Versement");
$objPHPExcel->getActiveSheet()->setCellValue('E'.($y).'', "Montant Versé");
$objPHPExcel->getActiveSheet()->setCellValue('F'.($y).'', "Date Versement");
$y++;

$t = 0;
foreach ($approlignes as $entryappro) {
	
     /*$euban = new Application_Model_DbTable_EuBonNeutre();
    $rowseuban;         
    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
    $select = $euband->select();
    $select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
    $select->limit(1);
    $rowseuband = $euband->fetchRow($select);
    if(count($rowseuband) > 0) {
      $select = $euban->select();
      $select->where("bon_neutre_id = ? ", $rowseuband->bon_neutre_id);
      $select->limit(1);
      $rowseuban = $euban->fetchRow($select);
    }*/
	
	$euban = new Application_Model_DbTable_EuBonNeutre();
    $rowseuban;             
    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
	$eubanapprod = new Application_Model_DbTable_EuBonNeutreApproDetail();
	$appro_id ="";
	
	if($entryappro->bon_neutre_appro_id == NULL || $entryappro->bon_neutre_appro_id == "") {
        $select = $euband->select();
        $select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
        $select->limit(1);
        $rowseuband = $euband->fetchRow($select);
        if(count($rowseuband) > 0) {
          $select = $euban->select();
          $select->where("bon_neutre_id = ? ", $rowseuband->bon_neutre_id);
          $select->limit(1);
          $rowseuban = $euban->fetchRow($select);
        }
	
	} else {
	    $appro_id = $entryappro->bon_neutre_appro_id;
		$table[$t] = $entryappro->bon_neutre_appro_id;
		$bon_neutre_detail_id = $entryappro->bon_neutre_detail_id;
		$v = 0;
	    while($appro_id > 0) {
            $selection = $eubanapprod->select();
            $selection->where("bon_neutre_appro_id = ? ", $appro_id);
			if($v == 0) {
			    $selection->where("bon_neutre_appro_detail_montant = ? ",$entryappro->bon_neutre_appro_detail_montant);
		    }
			if($t > 0) {
			if($table[$t-1] != $table[$t]) {
			   $selection->order("bon_neutre_appro_detail_montant DESC");
			} elseif($table[$t-1] == $table[$t]) { 
			   $selection->order("bon_neutre_appro_detail_montant ASC");
			}
			} else {
			  $selection->order("bon_neutre_appro_detail_montant DESC");
			}
            $selection->limit(1);
            $rowseubanapprod = $eubanapprod->fetchRow($selection);

            $select = $euband->select();
            $select->where("bon_neutre_detail_id = ? ", $rowseubanapprod->bon_neutre_detail_id);
			//$select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
			$select->order("bon_neutre_detail_montant DESC");
            $select->limit(1);
            $rowseuband = $euband->fetchRow($select);
            $appro_id = $rowseuband->bon_neutre_appro_id;
            $v++;			
        }
	}
	
	
	
	
	/*
	$euban = new Application_Model_DbTable_EuBonNeutre();
    $rowseuban;				
	$euband = new Application_Model_DbTable_EuBonNeutreDetail();
	$eubanapprod = new Application_Model_DbTable_EuBonNeutreApproDetail();
	$appro_id ="";
				
	$appro_id = $entryappro->bon_neutre_detail_id;
	while($appro_id > 0) {
       $selection = $eubanapprod->select();
       $selection->where("bon_neutre_appro_id = ? ", $entryappro->bon_neutre_detail_id);
	   $selection->order("bon_neutre_appro_detail_montant DESC");
       $selection->limit(1);
       $rowseubanapprod = $eubanapprod->fetchRow($selection);

       $select = $euband->select();
       $select->where("bon_neutre_detail_id = ? ", $rowseubanapprod->bon_neutre_detail_id);
	   $select->order("bon_neutre_detail_montant DESC");
       $select->limit(1);
       $rowseuband = $euband->fetchRow($select);
       $appro_id = $rowseuband->bon_neutre_appro_id;						   
    }*/
	
	
if($t > 0)  {
				    $ref[$t] = $rowseuband->bon_neutre_detail_numero;
				    if($ref[$t-1] != $ref[$t]) {	
	
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entryappro->bon_neutre_appro_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entryappro->bon_neutre_appro_detail_banque);
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $rowseuband->bon_neutre_detail_numero);
}
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $rowseuband->bon_neutre_detail_montant);
}
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($rowseuband->bon_neutre_detail_date_numero));
}

}} else {
	
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entryappro->bon_neutre_appro_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entryappro->bon_neutre_appro_detail_banque);
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $rowseuband->bon_neutre_detail_numero);
}
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $rowseuband->bon_neutre_detail_montant);
}
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($rowseuband->bon_neutre_detail_date_numero));
}	
	
}

$y++;
$t++;

}
$objPHPExcel->getActiveSheet()->getStyle('B'.($i).':F'.($y-1).'')->applyFromArray($styleThinBlackBorderOutline);
}


$objPHPExcel->getActiveSheet()->mergeCells('A'.$w.':A'.($w + $x + $z - 1).'');
$objPHPExcel->getActiveSheet()->getStyle('A'.$w.':A'.($w + $x + $z - 1).'')->applyFromArray($styleThinBlackBorderOutline);



$y++;
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("Details - BAn en BC ");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/BAn_BC/")) {
mkdir("../../webfiles/excel_exports/BAn_BC/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/BAn_BC/BAn_BC_Details_".$date_debut."_".$date_fin."_.xlsx";
$newnom = "BAn_BC_Details_".$date_debut."_".$date_fin."_";
$newchemin = "../../webfiles/excel_exports/BAn_BC/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);

/*

    if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    } else {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
    return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}




public static function genererExcelBAnBCTiers($date_debut, $date_fin) {

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        ini_set('memory_limit', '512M');    
        //include("Transfert.php");
        
        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        //$date_debut = $request->getParam("date_debut");
        //$date_fin = $request->getParam("date_fin");

        $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
        $select = $t_bon_neutre_utilise->select();
           
        $select->where("bon_neutre_utilise_libelle like ? ", "BC");
	    //$select->orwhere('bon_neutre_utilise_libelle like ?)',"BC");
           
		/*
        if (!empty($date_debut) && !empty($date_fin)) {
               $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin);  
            } elseif(!empty($date_debut)) {
               $select->where('bon_neutre_utilise_date >= ?',$date_debut);
            } elseif(!empty($date_fin)) {
               $select->where('bon_neutre_utilise_date <= ?',$date_fin);
            }
            $select->order('bon_neutre_utilise_date desc');
		*/
			
			if (!empty($date_debut) && !empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
		       $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			   $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			} elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			}
			$select->order('bon_neutre_utilise_date desc');
			
            $entries = $t_bon_neutre_utilise->fetchAll($select);

            require_once 'PHPExcel/PHPExcel.php';
        
            //////////////////////////////

            $objPHPExcel = new PHPExcel();

            $objPHPExcel->getProperties()->setCreator("ESMC")
                        ->setLastModifiedBy($sessionutilisateur->login)
                        ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                        ->setSubject("Etats quotidiens des BAn en BC dont les OPI Echélonnés sur 23 périodes")
                        ->setDescription("Export en excel les états quotidiens d'expression des BAn en Bons de Consommation (BC) dont les OPI Echélonnés sur 23 périodes")
                        ->setKeywords("")
                        ->setCategory("");

            $objPHPExcel->setActiveSheetIndex(0);                                         

            $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
            $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(24);
            $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(12);
            $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(24);
            $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(21);

            $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
            $objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens d'expression des BAn en Bons de Consommation (BC) dont les OPI Echélonnés sur 23 périodes de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
            $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

            $objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
            $objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
            $objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
            $objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'expression");
            $objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant BAn en BC");

            $objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

            $y = 3;
            foreach($entries as $entry):
    
                $euban = new Application_Model_DbTable_EuBonNeutre();
                $select = $euban->select();
                $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                $select->limit(1);
                $rowseuban = $euban->fetchRow($select);
                       
                $euband = new Application_Model_DbTable_EuBonNeutreDetail();
                $select = $euband->select();
                $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                $select->limit(1);
                $rowseuband = $euband->fetchRow($select);

                $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($rowseuban->bon_neutre_date));
                $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $rowseuban->bon_neutre_code);
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));
                $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->bon_neutre_utilise_montant);

                $y++;   
            endforeach;

            $objPHPExcel->getActiveSheet()->setTitle("BAn en BC");
            $objPHPExcel->setActiveSheetIndex(0);


            $callStartTime = microtime(true);

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
            $callEndTime = microtime(true);
            $callTime = $callEndTime - $callStartTime;

            ////////////////////////////////////////////////////////////////////////////

            $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

            if(!is_dir("../../webfiles/excel_exports/BAn_BC/")) {
                mkdir("../../webfiles/excel_exports/BAn_BC/", 0777);
            }/**/
            /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

            $newfile = "../../webfiles/excel_exports/BAn_BC/BAn_BC_".$date_debut."_".$date_fin."_.xlsx";
            $newnom = "BAn_BC_".$date_debut."_".$date_fin."_";
            $newchemin = "../../webfiles/excel_exports/BAn_BC/";

            copy($file, $newfile);

            unlink($file);

            $file = $newchemin.$newnom.'.xlsx';
            $filena = $newnom.'.xlsx';
            /**/

            $domaine = Util_Utils::getParamEsmc(9);
            /*
            if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
            } else {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
            }*/
            return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}



    public static function genererExcelBAnBCTiersDetails($date_debut, $date_fin) {

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        ini_set('memory_limit', '512M');    
        //include("Transfert.php");
        
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        //$date_debut = $request->getParam("date_debut");
        //$date_fin = $request->getParam("date_fin");

        $t_bon_neutre_utilise = new Application_Model_DbTable_EuBonNeutreUtilise();
        $select = $t_bon_neutre_utilise->select();
           
        $select->where("bon_neutre_utilise_libelle like ?" ,"BC");
	    
           
            /*if (!empty($date_debut) && !empty($date_fin)) {
               $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin);  
            } elseif(!empty($date_debut)) {
               $select->where('bon_neutre_utilise_date >= ?',$date_debut);
            } elseif(!empty($date_fin)) {
               $select->where('bon_neutre_utilise_date <= ?',$date_fin);
            }
            $select->order('bon_neutre_utilise_date desc');
			*/
			
			if (!empty($date_debut) && !empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
		       $select->where('(bon_neutre_utilise_date >= ?',$date_debut)->where('bon_neutre_utilise_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		    } elseif(!empty($date_debut)) {
			   $select->where('bon_neutre_utilise_date >= ?',$date_debut);
			} elseif(!empty($date_fin)) {
			   $date_fin = new Zend_Date($date_fin);
		       $date_fin->addDay(1);
			   $select->where('bon_neutre_utilise_date <= ?',$date_fin->toString('yyyy-MM-dd'));
			}
			$select->order('bon_neutre_utilise_date desc');
			
            $entries = $t_bon_neutre_utilise->fetchAll($select);

            require_once 'PHPExcel/PHPExcel.php';
        
            //////////////////////////////

            $objPHPExcel = new PHPExcel();

            $objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Details - Etats quotidiens des BAn en BC dont les OPI Echélonnés sur 23 périodes")
                             ->setDescription("Export en excel les états quotidiens d'expression des BAn en Bons de Consommation (BC) dont les OPI Echélonnés sur 23 périodes et détails")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(40);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(15);/**/

$objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens d'expression des BAn en Bons de Consommation (BC) dont les OPI Echélonnés sur 23 périodes de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." et détails");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

/*$objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'expression");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant BAn en BC");*/

$objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):

$id = $entry->bon_neutre_id;

$ban = new Application_Model_EuBonNeutre();
        $m_ban  = new Application_Model_EuBonNeutreMapper();
        $findban = $m_ban->find($id,$ban);
        
        $t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();   
        $select = $t_bon_neutre_detail->select();    
        $select->where('bon_neutre_id = ?',$id);
        $select->where('bon_neutre_appro_id is null');
        $select->order('bon_neutre_detail_date desc');
        $entriesdetail = $t_bon_neutre_detail->fetchAll($select);
        
        $t_bon_neutre_appro_detail = new Application_Model_DbTable_EuBonNeutreApproDetail();
        $selection = $t_bon_neutre_appro_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $selection->setIntegrityCheck(false);
        //$selection->from('eu_bon_neutre_appro_detail',array('bon_neutre_appro_id','bon_neutre_detail_id'));
        $selection->join(array('d' => 'eu_bon_neutre_detail'), 'eu_bon_neutre_appro_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_id','bon_neutre_appro_id'));
        $selection->where('d.bon_neutre_id = ?',$id);
        $approlignes = $t_bon_neutre_appro_detail->fetchAll($selection);
		
		
		//$t_bon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
        //$selection = $t_bon_neutre_detail->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        //$selection->setIntegrityCheck(false);
        //$selection->from('eu_bon_neutre_appro_detail',array('bon_neutre_appro_id','bon_neutre_detail_id'));
        //$selection->join(array('d' => 'eu_bon_neutre_appro_detail'), 'eu_bon_neutre_detail.bon_neutre_appro_id = d.bon_neutre_appro_id',array('bon_neutre_detail_id','bon_neutre_appro_id',
		//'bon_neutre_appro_detail_date','bon_neutre_appro_detail_banque'));
        //$selection->where('eu_bon_neutre_detail.bon_neutre_id = ?',$id);
        //$approlignes = $t_bon_neutre_detail->fetchAll($selection);
        
        


    
                       $euban = new Application_Model_DbTable_EuBonNeutre();
                    $select = $euban->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuban = $euban->fetchRow($select);
                       
                    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
                    $select = $euband->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuband = $euband->fetchRow($select);

/*$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($rowseuban->bon_neutre_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $rowseuban->bon_neutre_code);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->bon_neutre_utilise_montant);*/
$styleThinBlackBorderOutline = array(
    'borders' => array(
        'outline' => array(
            'style' => PHPExcel_Style_Border::BORDER_THIN,
            'color' => array('argb' => 'FF000000'),
        ),
    ),
);

$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', "Détails BAn Numéro ".$rowseuban->bon_neutre_code." du Membre ".$rowseuban->bon_neutre_nom." ".$rowseuban->bon_neutre_prenom);
//$objPHPExcel->getActiveSheet()->mergeCells('A'.$y.':E'.$y.'');
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_JUSTIFY);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

$w=$y;
//$x = $y+2;
$x=0;
if (count($entriesdetail)>0) {
    $x=count($entriesdetail) + 2;
//$y++;
$i=$y;

$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Détail BAn venant directement des banques");
$objPHPExcel->getActiveSheet()->mergeCells('B'.($y).':F'.($y).'');
$y++;
$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Date opération");
$objPHPExcel->getActiveSheet()->setCellValue('C'.($y).'', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('D'.($y).'', "Référence Versement");
$objPHPExcel->getActiveSheet()->setCellValue('E'.($y).'', "Montant Versé");
$objPHPExcel->getActiveSheet()->setCellValue('F'.($y).'', "Date versement");
$y++;
foreach ($entriesdetail as $entrydetail){
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entrydetail->bon_neutre_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entrydetail->bon_neutre_detail_banque);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entrydetail->bon_neutre_detail_numero);
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entrydetail->bon_neutre_detail_montant);
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($entrydetail->bon_neutre_detail_date_numero));
$y++;
}
$objPHPExcel->getActiveSheet()->getStyle('B'.($i).':F'.($y-1).'')->applyFromArray($styleThinBlackBorderOutline);
}

//$z = $x+2;
$z=0;
if (count($approlignes)>0) {
    $z=count($approlignes) + 2;
//$y++;
$i=$y;

$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Détail BAn venant des approvisionnements");
$objPHPExcel->getActiveSheet()->mergeCells('B'.($y).':F'.($y).'');
$y++;
$objPHPExcel->getActiveSheet()->setCellValue('B'.($y).'', "Date approvisionnement");
$objPHPExcel->getActiveSheet()->setCellValue('C'.($y).'', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('D'.($y).'', "Référence Versement");
$objPHPExcel->getActiveSheet()->setCellValue('E'.($y).'', "Montant Versé");
$objPHPExcel->getActiveSheet()->setCellValue('F'.($y).'', "Date Versement");
$y++;

$t = 0;
foreach ($approlignes as $entryappro) {
	
     /*$euban = new Application_Model_DbTable_EuBonNeutre();
    $rowseuban;         
    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
    $select = $euband->select();
    $select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
    $select->limit(1);
    $rowseuband = $euband->fetchRow($select);
    if(count($rowseuband) > 0) {
      $select = $euban->select();
      $select->where("bon_neutre_id = ? ", $rowseuband->bon_neutre_id);
      $select->limit(1);
      $rowseuban = $euban->fetchRow($select);
    }*/
	
	$euban = new Application_Model_DbTable_EuBonNeutre();
    $rowseuban;             
    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
	$eubanapprod = new Application_Model_DbTable_EuBonNeutreApproDetail();
	$appro_id ="";
	
	if($entryappro->bon_neutre_appro_id == NULL || $entryappro->bon_neutre_appro_id == "") {
        $select = $euband->select();
        $select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
        $select->limit(1);
        $rowseuband = $euband->fetchRow($select);
        if(count($rowseuband) > 0) {
          $select = $euban->select();
          $select->where("bon_neutre_id = ? ", $rowseuband->bon_neutre_id);
          $select->limit(1);
          $rowseuban = $euban->fetchRow($select);
        }
	
	} else {
	    $appro_id = $entryappro->bon_neutre_appro_id;
		$table[$t] = $entryappro->bon_neutre_appro_id;
		$bon_neutre_detail_id = $entryappro->bon_neutre_detail_id;
		$v = 0;
	    while($appro_id > 0) {
            $selection = $eubanapprod->select();
            $selection->where("bon_neutre_appro_id = ? ", $appro_id);
			if($v == 0) {
			    $selection->where("bon_neutre_appro_detail_montant = ? ",$entryappro->bon_neutre_appro_detail_montant);
		    }
			if($t > 0) {
			if($table[$t-1] != $table[$t]) {
			   $selection->order("bon_neutre_appro_detail_montant DESC");
			} elseif($table[$t-1] == $table[$t]) { 
			   $selection->order("bon_neutre_appro_detail_montant ASC");
			}
			} else {
			  $selection->order("bon_neutre_appro_detail_montant DESC");
			}
            $selection->limit(1);
            $rowseubanapprod = $eubanapprod->fetchRow($selection);

            $select = $euband->select();
            $select->where("bon_neutre_detail_id = ? ", $rowseubanapprod->bon_neutre_detail_id);
			//$select->where("bon_neutre_detail_id = ? ", $entryappro->bon_neutre_detail_id);
			$select->order("bon_neutre_detail_montant DESC");
            $select->limit(1);
            $rowseuband = $euband->fetchRow($select);
            $appro_id = $rowseuband->bon_neutre_appro_id;
            $v++;			
        }
	}
	
	
	
	
	/*
	$euban = new Application_Model_DbTable_EuBonNeutre();
    $rowseuban;				
	$euband = new Application_Model_DbTable_EuBonNeutreDetail();
	$eubanapprod = new Application_Model_DbTable_EuBonNeutreApproDetail();
	$appro_id ="";
				
	$appro_id = $entryappro->bon_neutre_detail_id;
	while($appro_id > 0) {
       $selection = $eubanapprod->select();
       $selection->where("bon_neutre_appro_id = ? ", $entryappro->bon_neutre_detail_id);
	   $selection->order("bon_neutre_appro_detail_montant DESC");
       $selection->limit(1);
       $rowseubanapprod = $eubanapprod->fetchRow($selection);

       $select = $euband->select();
       $select->where("bon_neutre_detail_id = ? ", $rowseubanapprod->bon_neutre_detail_id);
	   $select->order("bon_neutre_detail_montant DESC");
       $select->limit(1);
       $rowseuband = $euband->fetchRow($select);
       $appro_id = $rowseuband->bon_neutre_appro_id;						   
    }*/
	
	
if($t > 0)  {
				    $ref[$t] = $rowseuband->bon_neutre_detail_numero;
				    if($ref[$t-1] != $ref[$t]) {	
	
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entryappro->bon_neutre_appro_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entryappro->bon_neutre_appro_detail_banque);
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $rowseuband->bon_neutre_detail_numero);
}
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $rowseuband->bon_neutre_detail_montant);
}
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($rowseuband->bon_neutre_detail_date_numero));
}

}} else {
	
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entryappro->bon_neutre_appro_detail_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entryappro->bon_neutre_appro_detail_banque);
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $rowseuband->bon_neutre_detail_numero);
}
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $rowseuband->bon_neutre_detail_montant);
}
if(count($rowseuband) > 0) { 
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($rowseuband->bon_neutre_detail_date_numero));
}	
	
}

$y++;
$t++;

}
$objPHPExcel->getActiveSheet()->getStyle('B'.($i).':F'.($y-1).'')->applyFromArray($styleThinBlackBorderOutline);
}


$objPHPExcel->getActiveSheet()->mergeCells('A'.$w.':A'.($w + $x + $z - 1).'');
$objPHPExcel->getActiveSheet()->getStyle('A'.$w.':A'.($w + $x + $z - 1).'')->applyFromArray($styleThinBlackBorderOutline);



$y++;
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("Details - BAn en BC");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/BAn_BC/")) {
mkdir("../../webfiles/excel_exports/BAn_BC/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/BAn_BC/BAn_BC_Details_".$date_debut."_".$date_fin."_.xlsx";
$newnom = "BAn_BC_Details_".$date_debut."_".$date_fin."_";
$newchemin = "../../webfiles/excel_exports/BAn_BC/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}






public static function genererExcelBAnR($date_debut, $date_fin) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

            $t_bon_neutre = new Application_Model_DbTable_EuBonNeutre();
          $select = $t_bon_neutre->select();

          if (!empty($date_debut) && !empty($date_fin)) {
            $date_fin = new Zend_Date($date_fin);
            $date_fin->addDay(1);
            $select->where('(bon_neutre_date >= ?',$date_debut)->where('bon_neutre_date <= ?)',$date_fin->toString('yyyy-MM-dd'));  
          } elseif(!empty($date_debut)) {
            $select->where('bon_neutre_date >= ?',$date_debut);
          } elseif(!empty($date_fin)) {
            $date_fin = new Zend_Date($date_fin);
            $date_fin->addDay(1);
            $select->where('bon_neutre_date <= ?',$date_fin->toString('yyyy-MM-dd'));
          }
            
          $select->where('bon_neutre_montant_solde > ?',0); 
          $select->order('bon_neutre_date desc');
          $entries = $t_bon_neutre->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats quotidiens des BAn restants")
                             ->setDescription("Export en excel les états quotidiens des BAn restants non exprimés")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(24);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(24);
//$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(21);

$objPHPExcel->getActiveSheet()->getStyle('A1:D1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens des BAn restants non exprimés de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

$objPHPExcel->getActiveSheet()->setCellValue('A2', "Nom & Prénoms Client");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Code BAn");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Montant BAn Non Exprimés");
//$objPHPExcel->getActiveSheet()->setCellValue('E2', "Date d'expression");

$objPHPExcel->getActiveSheet()->getStyle('A2:D2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
    
                    $euband = new Application_Model_DbTable_EuBonNeutreDetail();
                    $select = $euband->select();
                    $select->where("bon_neutre_id = ? ", $entry->bon_neutre_id);
                    $select->limit(1);
                    $rowseuband = $euband->fetchRow($select);

if($entry->bon_neutre_nom != NULL)  { 
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $entry->bon_neutre_nom." ".$entry->bon_neutre_prenom);
} else {
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $entry->bon_neutre_raison);
}
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entry->bon_neutre_date));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->bon_neutre_code);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->bon_neutre_montant_solde);
//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', datejourfr2($entry->bon_neutre_utilise_date));

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("BAn restants");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/BAn_R/")) {
mkdir("../../webfiles/excel_exports/BAn_R/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/BAn_R/BAn_R_".$date_debut."_".$date_fin."_.xlsx";
$newnom = "BAn_R_".$date_debut."_".$date_fin."_";
$newchemin = "../../webfiles/excel_exports/BAn_R/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}



public static function genererExcelVGCp($date_op) {
    $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
    ini_set('memory_limit','1024M');

    $date_id = new Zend_Date(Zend_Date::ISO_8601);
	
	$t_gcp = new Application_Model_DbTable_EuGcp();
    $select = $t_gcp->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
    $select->setIntegrityCheck(false);
    $select->join('eu_tegc', 'eu_tegc.code_tegc = eu_gcp.code_tegc', array('nom_tegc'));
	
	if(!empty($date_op)) {
	   $date_gcp = new Zend_Date($date_op);
	   $date_gcp->addDay(1);
	   $select->where('eu_gcp.date_conso <= ?',$date_gcp->toString('yyyy-MM-dd'));
    }
	
	$select->order('eu_gcp.date_conso desc');
    $entries = $t_gcp->fetchAll($select);
	
	
	$t_traite = new Application_Model_DbTable_EuTraite();
	
	$select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
    $select->setIntegrityCheck(false);
    $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
		        
    if(!empty($date_op)) {
      $date_traite = new Zend_Date($date_op);
      $select->where('eu_traite.traite_date_fin <= ?',$date_traite->toString('yyyy-MM-dd'));
    }
				
    $select->where('eu_traite.traite_escompte_nature = ?',0);
    $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
    $select->where('eu_traite.traite_statut is null');
    $select->order('eu_traite.traite_date_fin desc');
    $reglements = $t_traite->fetchAll($select);
	
	
	require_once 'PHPExcel/PHPExcel.php';
	$objPHPExcel = new PHPExcel();
	$objPHPExcel->getProperties()->setCreator("ESMC")
                ->setLastModifiedBy($sessionutilisateur->login)
                ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                ->setSubject("Etats des ventes sur les TE GCp")
                ->setDescription("Export en excel les états des ventes effectuées sur les Terminaux d'Echanges (TE) du préfinancement des produits")
                ->setKeywords("")
                ->setCategory("");			
	$objPHPExcel->setActiveSheetIndex(0);                                         

    $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(22);
    $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(22);
    $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
    $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
    $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
	$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);

    $objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
    $objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des ventes effectuées sur les Terminaux d'Echanges (TE) du préfinancement des produits de ".datejourfr2($date_op));
    $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

    $objPHPExcel->getActiveSheet()->setCellValue('A2', "Code Membre Acheteur");
    $objPHPExcel->getActiveSheet()->setCellValue('B2', "Code Membre Vendeur");
    $objPHPExcel->getActiveSheet()->setCellValue('C2', "Nom de Terminal de vente");
    $objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'Emission BL");
    $objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant BL");

    $objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

	$y = 3;
    foreach ($entries as $entry):
       $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', substr($entry->source,0,20));
       $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $entry->code_membre);
       $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->nom_tegc);
       $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->date_conso));
       $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->mont_gcp);
    $y++;   
    endforeach;
	
	$y = $y + 3;
	$x = $y + 1;
	
	$objPHPExcel->getActiveSheet()->getStyle("A$y:E$y")->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
    $objPHPExcel->getActiveSheet()->setCellValue("A$y", "Etats des reglements  du".datejourfr2($date_op));
    $objPHPExcel->getActiveSheet()->getStyle("A$y")->applyFromArray(array('font' => array('bold' => true)));

    $objPHPExcel->getActiveSheet()->setCellValue("A$x", "F/sseurs ou Prestataire");
    $objPHPExcel->getActiveSheet()->setCellValue("B$x", "Banque");
    $objPHPExcel->getActiveSheet()->setCellValue("C$x", "Numero OPI");
    $objPHPExcel->getActiveSheet()->setCellValue("D$x", "Montant OPI");
    $objPHPExcel->getActiveSheet()->setCellValue("E$x", "Date debut");
	$objPHPExcel->getActiveSheet()->setCellValue("F$x", "Date fin");

    $objPHPExcel->getActiveSheet()->getStyle("A$x:F$x")->applyFromArray(array('font' => array('bold' => true)));

	$y = $x+1;
    foreach($reglements as $reglement):
	
	   $eutpagcpd = new Application_Model_DbTable_EuDetailTpagcp();
	   $select = $eutpagcpd->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
       $select->setIntegrityCheck(false);
	   $select->join('eu_tegc', 'eu_tegc.code_tegc = eu_detail_tpagcp.code_tegc');
	   $select->where('eu_detail_tpagcp.id_tpagcp = ?',$reglement->id_tpagcp);
				
	   $select->limit(1);
       $rowseu = $eutpagcpd->fetchRow($select);
	
       $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseu->nom_tegc);
       $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $reglement->traite_code_banque);
       $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $reglement->traite_numero);
       $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $reglement->mont_tranche);
       $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', datejourfr2($reglement->traite_date_debut));
	   $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datejourfr2($reglement->traite_date_fin));
       $y++;   
    endforeach;
	
	
	$db_gcp = new Application_Model_DbTable_EuGcp();
    $select_gcp = $db_gcp->select();
    $select_gcp->from($db_gcp,array('SUM(mont_gcp) as somme_gcp'));
	if(!empty($date_op)) {
	   $date_v = new Zend_Date($date_op);
	   $date_v->addDay(1);
	   $select_gcp->where('eu_gcp.date_conso <= ?',$date_v->toString('yyyy-MM-dd'));
    }
				
    $result_gcp = $db_gcp->fetchAll($select_gcp);
    $row_gcp = $result_gcp->current();
    $gcp = $row_gcp['somme_gcp'];
	
	
	$db_tpagcp = new Application_Model_DbTable_EuTpagcp();
	$select_tpagcp = $db_tpagcp->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
	$select_tpagcp->setIntegrityCheck(false);
    $select_tpagcp->join('eu_traite', 'eu_traite.traite_tegcp = eu_tpagcp.id_tpagcp');
    $select_tpagcp->where('eu_traite.traite_escompte_nature = ?',0);
    $select_tpagcp->where('eu_tpagcp.mode_reglement like ?',"OPI");
    $select_tpagcp->where('eu_traite.traite_statut is null');
    $select_tpagcp->order('eu_traite.traite_date_fin desc');
				
    if(!empty($date_op)) {
      $date_traite = new Zend_Date($date_op);
      //$date_op->addDay(1);
      $select_tpagcp->where('eu_traite.traite_date_fin <= ?',$date_traite->toString('yyyy-MM-dd'));
    }
				
	$reglement = 0;
	$result_tpagcp = $db_tpagcp->fetchAll($select_tpagcp);
	if(count($result_tpagcp) >= 1)  {
	  for($i = 0; $i < count($result_tpagcp); $i++) {
         $value = $result_tpagcp[$i];
	     $reglement = $value->mont_tranche + $reglement; 
      }
    }
				
	$solde = $gcp - $reglement;
	
	
	$y = $y + 3;
	$x = $y + 1;
	
	$objPHPExcel->getActiveSheet()->getStyle("A$y:C$y")->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
    $objPHPExcel->getActiveSheet()->setCellValue("A$y", "Recapitulatif  du ".datejourfr2($date_op));
    $objPHPExcel->getActiveSheet()->getStyle("A$y")->applyFromArray(array('font' => array('bold' => true)));

    $objPHPExcel->getActiveSheet()->setCellValue("A$x", "Total Recette");
    $objPHPExcel->getActiveSheet()->setCellValue("B$x", "Total Reglement");
    $objPHPExcel->getActiveSheet()->setCellValue("C$x", "Solde");
    

    $objPHPExcel->getActiveSheet()->getStyle("A$x:C$x")->applyFromArray(array('font' => array('bold' => true)));

	$y = $x+1;
    
    $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $gcp);
    $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $reglement);
    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $solde);

    $objPHPExcel->getActiveSheet()->setTitle("Ventes TE GCp");
    $objPHPExcel->setActiveSheetIndex(0);

    $callStartTime = microtime(true);

    $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
    $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
    $callEndTime = microtime(true);
    $callTime = $callEndTime - $callStartTime;

    ////////////////////////////////////////////////////////////////////////////	
	
	$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/V_GCp/")) {
mkdir("../../webfiles/excel_exports/V_GCp/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/V_GCp/V_GCp_".$date_debut."_.xlsx";
$newnom = "V_GCp_".$date_debut."_";
$newchemin = "../../webfiles/excel_exports/V_GCp/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/


$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

	/*
    $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

    if(!is_dir("../../webfiles/excel_exports/V_GCp/")) {
       mkdir("../../webfiles/excel_exports/V_GCp/", 0777);
    }

    $newfile = "../../webfiles/excel_exports/V_GCp/V_GCp_".$date_op."_.xlsx";
    $newnom = "V_GCp_".$date_op."_";
    $newchemin = "../../webfiles/excel_exports/V_GCp/";

    copy($file, $newfile);

    unlink($file);

    $file = $newchemin.$newnom.'.xlsx';
    $filena = $newnom.'.xlsx';
	
	if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "https://webfiles.".$domaine."/", $file);
		*/ /**/


}




public static function genererExcelVGCpold($date_debut, $date_fin, $code_tegc) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

           //include("Transfert.php");
        
           $date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

                //$code_tegc = $request->getParam("code_tegc");
                $t_gcp = new Application_Model_DbTable_EuGcp();
                //$select = $t_gcp->select();
                $select = $t_gcp->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join('eu_tegc', 'eu_tegc.code_tegc = eu_gcp.code_tegc', array('nom_tegc'));
              
			    if(!empty($date_debut) && !empty($date_fin) && !empty($code_tegc)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_gcp.date_conso >= ?',$date_debut)
				         ->where('eu_gcp.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));
                  $select->where('eu_gcp.code_tegc like ?',$code_tegc);				  
		        } else if(!empty($date_debut) && !empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_gcp.date_conso >= ?',$date_debut)
				         ->where('eu_gcp.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));			  
		        } 
				
				elseif(!empty($date_debut)  && !empty($code_tegc)) {
                  $select->where('eu_gcp.date_conso >= ?',$date_debut);
				  $select->where('eu_gcp.code_tegc like ?',$code_tegc);
                } elseif(!empty($date_fin)  && !empty($code_tegc)) {
                  $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_gcp.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
				  $select->where('eu_gcp.code_tegc like ?',$code_tegc);
                }				
				elseif(!empty($date_debut)) {
			      $select->where('eu_gcp.date_conso >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_gcp.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
		        } elseif(!empty($code_tegc)) {
				  $select->where('eu_gcp.code_tegc like ?',$code_tegc);
				}
			  
			  
			  /*
                if(!empty($date_debut) && !empty($date_fin)) {
                  $date_fin = new Zend_Date($date_fin);
                  $date_fin->addDay(1);
                  $select->where('(eu_gcp.date_conso >= ?',$date_debut)->where('eu_gcp.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                } elseif(!empty($date_debut)) {
                  $select->where('eu_gcp.date_conso >= ?',$date_debut);
                } elseif(!empty($date_fin)) {
                  $date_fin = new Zend_Date($date_fin);
                  $date_fin->addDay(1);
                  $select->where('eu_gcp.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
                } elseif(!empty($code_tegc)) {
                  $select->where('eu_gcp.code_tegc like ?',$code_tegc);
                } */
              
                $select->order('eu_gcp.date_conso desc');
                $entries = $t_gcp->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats des ventes sur les TE GCp")
                             ->setDescription("Export en excel les états des ventes effectuées sur les Terminaux d'Echanges (TE) du préfinancement des produits")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(22);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(22);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(25);

$objPHPExcel->getActiveSheet()->getStyle('A1:G1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des ventes effectuées sur les Terminaux d'Echanges (TE) du préfinancement des produits de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


$objPHPExcel->getActiveSheet()->setCellValue('A2', "Code Membre Acheteur");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Code Membre Vendeur");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Nom de Terminal de vente");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'Emission du BL");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant du Bon Livraison");
$objPHPExcel->getActiveSheet()->setCellValue('F2', "Montant Bon Livraison utilisé");
$objPHPExcel->getActiveSheet()->setCellValue('G2', "Montant Bon Livraison restant");

$objPHPExcel->getActiveSheet()->getStyle('A2:G2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', substr($entry->source,0,20));
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $entry->code_membre);
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->nom_tegc);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->date_conso));
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->mont_gcp);
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $entry->mont_preleve);
$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $entry->reste);

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("Ventes TE GCp");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/V_GCp/")) {
mkdir("../../webfiles/excel_exports/V_GCp/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/V_GCp/V_GCp_".$date_debut."_".$date_fin."_".$code_tegc."_.xlsx";
$newnom = "V_GCp_".$date_debut."_".$date_fin."_".$code_tegc."_";
$newchemin = "../../webfiles/excel_exports/V_GCp/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/


$domaine = Util_Utils::getParamEsmc(9);

/*


if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}







public static function genererExcelVGCsc($date_debut, $date_fin, $code_tegc) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");

                //$code_tegc = $request->getParam("code_tegc");
                $t_gcsc = new Application_Model_DbTable_EuGcsc();
                //$select = $t_gcp->select();
                $select = $t_gcsc->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join('eu_tegc', 'eu_tegc.code_tegc = eu_gcsc.code_tegc', array('nom_tegc'));
                $select->join('eu_detail_gcsc', 'eu_detail_gcsc.id_gcsc = eu_gcsc.id_gcsc', array('*'));
              
			    if(!empty($date_debut) && !empty($date_fin) && !empty($code_tegc)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_detail_gcsc.date_conso >= ?',$date_debut)->where('eu_detail_gcsc.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));
                  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
				  
		        } if(!empty($date_debut) && !empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
		          $select->where('(eu_detail_gcsc.date_conso >= ?',$date_debut)
				         ->where('eu_detail_gcsc.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));
		        } 
				elseif(!empty($date_debut) && !empty($code_tegc)) {
                  $select->where('eu_detail_gcsc.date_conso >= ?',$date_debut);
				  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
				  
                } elseif(!empty($date_fin) && !empty($code_tegc)) {
                  $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_detail_gcsc.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
				  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
                }				
				elseif(!empty($date_debut)) {
			      $select->where('eu_detail_gcsc.date_conso >= ?',$date_debut);
		        } elseif(!empty($date_fin)) {
		          $date_fin = new Zend_Date($date_fin);
		          $date_fin->addDay(1);
			      $select->where('eu_detail_gcsc.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
		        } elseif(!empty($code_tegc)) {
				  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
				}
			  
			    /*
                if(!empty($date_debut) && !empty($date_fin)) {
                  $date_fin = new Zend_Date($date_fin);
                  $date_fin->addDay(1);
                  $select->where('(eu_detail_gcsc.date_conso >= ?',$date_debut)->where('eu_detail_gcsc.date_conso <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                } elseif(!empty($date_debut)) {
                  $select->where('eu_detail_gcsc.date_conso >= ?',$date_debut);
                } elseif(!empty($date_fin)) {
                  $date_fin = new Zend_Date($date_fin);
                  $date_fin->addDay(1);
                  $select->where('eu_detail_gcsc.date_conso <= ?',$date_fin->toString('yyyy-MM-dd'));
                } elseif(!empty($code_tegc)) {
                  $select->where('eu_gcsc.code_tegc like ?',$code_tegc);
                }
				
				*/
              
                $select->order('eu_detail_gcsc.date_conso desc');
                $entries = $t_gcsc->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats des ventes sur les TE GCsc")
                             ->setDescription("Export en excel les états des ventes effectuées sur les Terminaux d'Echanges (TE) de subvention des produits")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(22);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(22);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
//$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
//$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);

$objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats des ventes effectuées sur les Terminaux d'Echanges (TE) de subvention des produits de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


$objPHPExcel->getActiveSheet()->setCellValue('A2', "Code Membre Acheteur");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Code Membre Vendeur");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Nom de Terminal de vente");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Date d'Emission du Bon");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Montant Bon de Livraison");
//$objPHPExcel->getActiveSheet()->setCellValue('F2', "Montant utilisé");
//$objPHPExcel->getActiveSheet()->setCellValue('G2', "Montant restant");

$objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', substr($entry->source,0,20));
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $entry->code_membre);
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->nom_tegc);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', datejourfr2($entry->date_conso));
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->mont_gcsc);
//$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $entry->mont_preleve);
//$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $entry->reste);

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("Ventes TE GCsc");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/V_GCsc/")) {
mkdir("../../webfiles/excel_exports/V_GCsc/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/V_GCsc/V_GCsc_".$date_debut."_".$date_fin."_".$code_tegc."_.xlsx";
$newnom = "V_GCsc_".$date_debut."_".$date_fin."_".$code_tegc."_";
$newchemin = "../../webfiles/excel_exports/V_GCsc/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

  */
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}






public static function genererExcelFGFN($date_debut, $date_fin, $code_banque) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");
                //$code_banque = $request->getParam("code_banque");

            $t_dfgfn = new Application_Model_DbTable_EuDetailFgfn();
                
            $select = $t_dfgfn->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join('eu_banque', 'eu_banque.code_banque = eu_detail_fgfn.code_banque');
                
            if(!empty($date_debut) && !empty($date_fin)) {
                $date_fin = new Zend_Date($date_fin);
                $date_fin->addDay(1);
                $select->where('(eu_detail_fgfn.date_fgfn >= ?',$date_debut)->where('eu_detail_fgfn.date_fgfn <= ?)',$date_fin->toString('yyyy-MM-dd'));  
            } elseif(!empty($date_debut)) {
                $select->where('eu_detail_fgfn.date_fgfn >= ?',$date_debut);
            } elseif(!empty($date_fin)) {
                $date_fin = new Zend_Date($date_fin);
                $date_fin->addDay(1);
                $select->where('eu_detail_fgfn.date_fgfn  <= ?',$date_fin->toString('yyyy-MM-dd'));
            }
            
            if(!empty($code_banque)) {
              $select->where('eu_detail_fgfn.code_banque like ?',$code_banque); 
            }
            
            $select->order('eu_detail_fgfn.date_fgfn asc');
            $entries = $t_dfgfn->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Etats quotidiens du FGFN des Banques")
                             ->setDescription("Export en excel les états quotidiens du niveau de visibilité du FGFN des Banques")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);

$objPHPExcel->getActiveSheet()->getStyle('A1:E1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Etats quotidiens du niveau de visibilité du FGFN des Banques de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." de ".$code_banque."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


$objPHPExcel->getActiveSheet()->setCellValue('A2', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Date");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Montant FGFN");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Montant FGFN utilisé");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Solde FGFN");

$objPHPExcel->getActiveSheet()->getStyle('A2:E2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $entry->code_banque);
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', datejourfr2($entry->date_fgfn));
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->mont_fgfn);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->mont_preleve);
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $entry->solde_fgfn);

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("FGFN des Banques");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/FGFN/")) {
mkdir("../../webfiles/excel_exports/FGFN/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/FGFN/FGFN_".$date_debut."_".$date_fin."_".$code_banque."_.xlsx";
$newnom = "FGFN_".$date_debut."_".$date_fin."_".$code_banque."_";
$newchemin = "../../webfiles/excel_exports/FGFN/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

    }



    public static function genererExcelOPI($date_debut, $date_fin, $code_banque) {
        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        ini_set('memory_limit', '5129999999999M');    
        //include("Transfert.php");
        
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        //$date_debut = $request->getParam("date_debut");
        //$date_fin = $request->getParam("date_fin");
        //$code_tegc = $request->getParam("code_tegc");

        $t_traite = new Application_Model_DbTable_EuTraite();
                
        $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
        $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
		$select->where('eu_tpagcp.ntf = ?',12);
		
		if(!empty($date_debut) && !empty($date_fin) && !empty($code_banque)) {
				  //$date_debut = new Zend_Date($date_debut);
				  //$date_fin->addDay(1);
				  $date_fin = new Zend_Date($date_fin);
		          $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		          $select->where('eu_traite.mode_paiement like ?',$code_banque);
				
		} elseif(!empty($date_debut) && !empty($date_fin)) {
				  $date_fin = new Zend_Date($date_fin);
                  $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                
	    } elseif(!empty($date_debut) && !empty($code_banque)) {
                  $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
				  $select->where('eu_traite.mode_paiement like ?',$code_banque);
                
		} elseif(!empty($date_fin) && !empty($code_banque)) {
				  $date_fin = new Zend_Date($date_fin);
                  $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
				  $select->where('eu_traite.mode_paiement like ?',$code_banque);
                
		} elseif(!empty($code_banque)) {
                  $select->where('eu_traite.mode_paiement like ?',$code_banque);
		} elseif(!empty($date_debut)) {
			      $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
		} elseif(!empty($date_fin)) {
		          //$date_fin->addDay(1);
				  $date_fin = new Zend_Date($date_fin);
			      $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		}
		
        /*        
        if(!empty($date_debut) && !empty($date_fin)) {
            $date_fin = new Zend_Date($date_fin);
            //$date_fin->addDay(1);
            $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
        } elseif(!empty($date_debut)) {
            $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
        } elseif(!empty($date_fin)) {
            $date_fin = new Zend_Date($date_fin);
            //$date_fin->addDay(1);
            $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
        } 
		*/
        
        $select->where('eu_traite.traite_disponible = ?',1);
        $select->where('eu_traite.traite_imprimer <> ?',2);		
        $select->where('eu_traite.traite_escompte_nature = ?',0);
        $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
        $select->where('eu_traite.traite_statut is null');
        $select->order('eu_traite.traite_date_fin asc');
        $entries = $t_traite->fetchAll($select);

        require_once 'PHPExcel/PHPExcel.php';
        
        //////////////////////////////

        $objPHPExcel = new PHPExcel();

        $objPHPExcel->getProperties()->setCreator("ESMC")
                    ->setLastModifiedBy($sessionutilisateur->login)
                    ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                    ->setSubject("Echéancier de paiements des OPI Echélonnés sur 12 Périodes")
                    ->setDescription("Export en excel de Tableau d'Echéancier de paiements des OPI Echélonnés sur 12 Périodes")
                    ->setKeywords("")
                    ->setCategory("");

        $objPHPExcel->setActiveSheetIndex(0);                                         

        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(70);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
		//$objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);

        $objPHPExcel->getActiveSheet()->getStyle('A1:G1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $objPHPExcel->getActiveSheet()->setCellValue('A1', "Tableau d'Echéancier de paiements des OPI Echélonnés sur 12 Périodes de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." de ".$code_tegc."");
        $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


        $objPHPExcel->getActiveSheet()->setCellValue('A2', "O.P.I n°");
        $objPHPExcel->getActiveSheet()->setCellValue('B2', "ECHEANCE");
		$objPHPExcel->getActiveSheet()->setCellValue('C2', "BENEFICIAIRE");
        $objPHPExcel->getActiveSheet()->setCellValue('D2', "CONTACT");
        $objPHPExcel->getActiveSheet()->setCellValue('E2', "BANQUE");
        $objPHPExcel->getActiveSheet()->setCellValue('F2', "COMPTE BANCAIRE");
        $objPHPExcel->getActiveSheet()->setCellValue('G2', "MONTANT");
        //$objPHPExcel->getActiveSheet()->setCellValue('H2', "Statut");

        $objPHPExcel->getActiveSheet()->getStyle('A2:G2')->applyFromArray(array('font' => array('bold' => true)));
        $total_montant = 0;
        $y = 3;
        foreach($entries as $entry):
            
			/*
			$eutpagcpd = new Application_Model_DbTable_EuDetailTpagcp();
            $select = $eutpagcpd->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join('eu_tegc', 'eu_tegc.code_tegc = eu_detail_tpagcp.code_tegc');
            $select->where('eu_detail_tpagcp.id_tpagcp = ?',$entry->id_tpagcp);
            $select->limit(1);
            $rowseu = $eutpagcpd->fetchRow($select);
			*/
			
			$numero_opi = "";
			if($entry->mode_paiement == "FAIP") {
			    $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id;
		    } else {
				$numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id."/".Util_Utils::ajoute1zero($entry->traiter)."-".$entry->ntf."/".
				            substr($entry->date_deb, 8, 2)."-".substr($entry->date_deb, 5, 2)."-".substr($entry->date_deb, 0, 4);
			}
				
            $designation_membre = "";				
			if(substr($entry->code_membre, -1) == "P") {
                $membre = new Application_Model_EuMembre();
                $membreM = new Application_Model_EuMembreMapper();
                $membreM->find($entry->code_membre, $membre);
                $designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
            } else if (substr($entry->code_membre, -1) == "M") {
                $membre = new Application_Model_EuMembreMorale();
                $membreM = new Application_Model_EuMembreMoraleMapper();
                $membreM->find($entry->code_membre, $membre);
                $designation_membre = $membre->raison_sociale;
            }
				
				
			$telephoneM = new Application_Model_EuTelephoneMapper();
            $telephone = $telephoneM->fetchAllByCodeMembre($entry->code_membre);
            $portable_membre = "";
            if(count($telephone) > 0) {
                foreach ($telephone as $telephonevalue) {
                    $portable_membre .= $telephonevalue->numero_telephone." / ";
                }
                $portable_membre = substr($portable_membre, 0, -3);
            }
			
            $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi, PHPExcel_Cell_DataType::TYPE_STRING);
			$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', ($entry->traite_date_fin), PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $designation_membre, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', $portable_membre, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $entry->mode_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.$y.'', $entry->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('F'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.$y.'', $entry->traite_montant, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('G'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
            
            $total_montant += $entry->traite_montant;
            $y++;   
            endforeach;
			
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.($y+1).'', "Total", PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('F'.($y+1).'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

            $objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.($y+1).'', $total_montant, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('G'.($y+1).'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

            $objPHPExcel->getActiveSheet()->setTitle("Echéancier des OPI");
            $objPHPExcel->setActiveSheetIndex(0);

            $callStartTime = microtime(true);

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
            $callEndTime = microtime(true);
            $callTime = $callEndTime - $callStartTime;

            ////////////////////////////////////////////////////////////////////////////

            $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

            if(!is_dir("../../webfiles/excel_exports/OPI/")) {

                mkdir("../../webfiles/excel_exports/OPI/", 0777);

            } /**/
            /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

            $newfile = "../../webfiles/excel_exports/OPI/OPI_".$date_debut."_".$date_fin."_".$code_tegc."_.xlsx";
            $newnom = "OPI_".$date_debut."_".$date_fin."_".$code_tegc."_";
            $newchemin = "../../webfiles/excel_exports/OPI/";

            copy($file, $newfile);

            unlink($file);

            $file = $newchemin.$newnom.'.xlsx';
            $filena = $newnom.'.xlsx';
            /**/

    $domaine = Util_Utils::getParamEsmc(9);

    /*

            if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
            } else {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
            }
    */
            return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

    }
	
	
	public static function genererExcelOPITiers($date_debut, $date_fin, $code_banque) {

        $sessionutilisateur = new Zend_Session_Namespace('utilisateur');
        ini_set('memory_limit', '51299999999999999M');    

        //include("Transfert.php");
        
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        //$date_debut = $request->getParam("date_debut");
        //$date_fin = $request->getParam("date_fin");
        //$code_tegc = $request->getParam("code_tegc");

        $t_traite = new Application_Model_DbTable_EuTraite();
                
        $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
        $select->setIntegrityCheck(false);
        $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
		$select->where('eu_tpagcp.ntf = ?',23);
         
		if(!empty($date_debut) && !empty($date_fin) && !empty($code_banque)) {
		     //$date_debut = new Zend_Date($date_debut);
			 //$date_fin->addDay(1);
			 $date_fin = new Zend_Date($date_fin);
		     $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
		     $select->where('eu_traite.mode_paiement like ?',$code_banque);
				
		} elseif(!empty($date_debut) && !empty($date_fin)) {
			 $date_fin = new Zend_Date($date_fin);
             $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                
		} elseif(!empty($date_debut) && !empty($code_banque)) {
             $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
			 $select->where('eu_traite.mode_paiement like ?',$code_banque);
                
	    } elseif(!empty($date_fin) && !empty($code_banque)) {
		    $date_fin = new Zend_Date($date_fin);
            $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		    $select->where('eu_traite.mode_paiement like ?',$code_banque);
                
		 } elseif(!empty($code_banque)) {
            $select->where('eu_traite.mode_paiement like ?',$code_banque);
		 } elseif(!empty($date_debut)) {
			$select->where('eu_traite.traite_date_fin >= ?',$date_debut);
		 } elseif(!empty($date_fin)) {
		    //$date_fin->addDay(1);
		    $date_fin = new Zend_Date($date_fin);
			$select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
		 }
		 
        /*		 
        if(!empty($date_debut) && !empty($date_fin)) {
            $date_fin = new Zend_Date($date_fin);
            //$date_fin->addDay(1);
            $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
        } elseif(!empty($date_debut)) {
            $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
        } elseif(!empty($date_fin)) {
            $date_fin = new Zend_Date($date_fin);
            //$date_fin->addDay(1);
            $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
        }
		
		*/
		
        $select->where('eu_traite.traite_disponible = ?',1);
        $select->where('eu_traite.traite_imprimer <> ?',2);		 
        $select->where('eu_traite.traite_escompte_nature = ?',0);
        $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
        $select->where('eu_traite.traite_statut is null');
        $select->order('eu_traite.traite_date_fin asc');
        $entries = $t_traite->fetchAll($select);

        require_once 'PHPExcel/PHPExcel.php';
        
        //////////////////////////////

        $objPHPExcel = new PHPExcel();

        $objPHPExcel->getProperties()->setCreator("ESMC")
                    ->setLastModifiedBy($sessionutilisateur->login)
                    ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                    ->setSubject("Echéancier de paiements des OPI Echélonnés sur 23 Périodes")
                    ->setDescription("Export en excel de Tableau d'Echéancier de paiements des OPI Echélonnés sur 23 Périodes")
                    ->setKeywords("")
                    ->setCategory("");

        $objPHPExcel->setActiveSheetIndex(0);                                         

        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(70);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
		//$objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);

        $objPHPExcel->getActiveSheet()->getStyle('A1:G1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $objPHPExcel->getActiveSheet()->setCellValue('A1', "Tableau d'Echéancier de paiements des OPI Echélonnés sur 23 Périodes de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." de ".$code_tegc."");
        $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));

        $objPHPExcel->getActiveSheet()->setCellValue('A2', "O.P.I n°");
        $objPHPExcel->getActiveSheet()->setCellValue('B2', "ECHEANCE");
		$objPHPExcel->getActiveSheet()->setCellValue('C2', "BENEFICIAIRE");
        $objPHPExcel->getActiveSheet()->setCellValue('D2', "CONTACT");
        $objPHPExcel->getActiveSheet()->setCellValue('E2', "BANQUE");
        $objPHPExcel->getActiveSheet()->setCellValue('F2', "COMPTE BANCAIRE");
        $objPHPExcel->getActiveSheet()->setCellValue('G2', "MONTANT");

        $objPHPExcel->getActiveSheet()->getStyle('A2:G2')->applyFromArray(array('font' => array('bold' => true)));

		$total_montant = 0;
        $y = 3;
        foreach($entries as $entry):
            /*
			$eutpagcpd = new Application_Model_DbTable_EuDetailTpagcp();
            $select = $eutpagcpd->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
            $select->setIntegrityCheck(false);
            $select->join('eu_tegc', 'eu_tegc.code_tegc = eu_detail_tpagcp.code_tegc');
            $select->where('eu_detail_tpagcp.id_tpagcp = ?',$entry->id_tpagcp);
            $select->limit(1);
            $rowseu = $eutpagcpd->fetchRow($select);
			*/

            $numero_opi = "";
			if($entry->mode_paiement == "FAIP") {
			    $numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id;
		    } else {
				$numero_opi = substr($entry->code_membre, 9, -1).$entry->traite_id."/".Util_Utils::ajoute1zero($entry->traiter)."-".$entry->ntf."/".
				            substr($entry->date_deb, 8, 2)."-".substr($entry->date_deb, 5, 2)."-".substr($entry->date_deb, 0, 4);
			}
				
            $designation_membre = "";				
			if(substr($entry->code_membre, -1) == "P") {
                $membre = new Application_Model_EuMembre();
                $membreM = new Application_Model_EuMembreMapper();
                $membreM->find($entry->code_membre, $membre);
                $designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
            } else if (substr($entry->code_membre, -1) == "M") {
                $membre = new Application_Model_EuMembreMorale();
                $membreM = new Application_Model_EuMembreMoraleMapper();
                $membreM->find($entry->code_membre, $membre);
                $designation_membre = $membre->raison_sociale;
            }
				
				
			$telephoneM = new Application_Model_EuTelephoneMapper();
            $telephone = $telephoneM->fetchAllByCodeMembre($entry->code_membre);
            $portable_membre = "";
            if(count($telephone) > 0) {
                foreach ($telephone as $telephonevalue) {
                    $portable_membre .= $telephonevalue->numero_telephone." / ";
                }
                $portable_membre = substr($portable_membre, 0, -3);
            }
			
            $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi, PHPExcel_Cell_DataType::TYPE_STRING);
			$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', ($entry->traite_date_fin), PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $designation_membre, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', $portable_membre, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $entry->mode_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.$y.'', $entry->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('F'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			$objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.$y.'', $entry->traite_montant, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('G'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
            
            $total_montant += $entry->traite_montant;

            $y++;   
            endforeach;

			$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.($y+1).'', "Total", PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('F'.($y+1).'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

            $objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.($y+1).'', $total_montant, PHPExcel_Cell_DataType::TYPE_STRING);
            $objPHPExcel->getActiveSheet()->getStyle('G'.($y+1).'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
			
            $objPHPExcel->getActiveSheet()->setTitle("Echéancier des OPI");
            $objPHPExcel->setActiveSheetIndex(0);

            $callStartTime = microtime(true);

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
            $callEndTime = microtime(true);
            $callTime = $callEndTime - $callStartTime;

            ////////////////////////////////////////////////////////////////////////////

            $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

            if(!is_dir("../../webfiles/excel_exports/OPI/")) {
                mkdir("../../webfiles/excel_exports/OPI/", 0777);
            } /**/
            /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

            $newfile = "../../webfiles/excel_exports/OPI/OPI_".$date_debut."_".$date_fin."_".$code_tegc."_.xlsx";
            $newnom = "OPI_".$date_debut."_".$date_fin."_".$code_tegc."_";
            $newchemin = "../../webfiles/excel_exports/OPI/";

            copy($file, $newfile);
            unlink($file);

            $file = $newchemin.$newnom.'.xlsx';
            $filena = $newnom.'.xlsx';
            /**/

/*

            if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
            } else {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
            }

  */
            return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

    }
	
	
	
	
	
	






public static function genererExcelOPIBAn($date_debut, $date_fin, $code_tegc) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");
                //$code_tegc = $request->getParam("code_tegc");

                $t_traite = new Application_Model_DbTable_EuTraite();
                
                $date_id = new Zend_Date(Zend_Date::ISO_8601);

                $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
                
                if(!empty($date_debut) && !empty($date_fin)) {
                  $date_fin = new Zend_Date($date_fin);
                  $date_fin->addDay(1);
                  $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                } elseif(!empty($date_debut)) {
                  $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
                } elseif(!empty($date_fin)) {
                  $date_fin = new Zend_Date($date_fin);
                  $date_fin->addDay(1);
                  $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
                } 
              
                $select->where('eu_traite.traite_escompte_nature = ?',0);
                $select->where('eu_traite.traite_disponible = ?',1);
                $select->where('eu_traite.traite_date_fin <= ?',$date_id->toString('yyyy-MM-dd'));
                $select->where('eu_traite.traite_statut like ?',"BAn");
                $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
                $select->order('eu_traite.traite_date_fin asc');
                $entries = $t_traite->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Tableau des OPI matures passés au BAn")
                             ->setDescription("Export en excel du Tableau des OPI matures utilisés pour faire des Bons d'Achat neutre (BAn)")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
//$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);

$objPHPExcel->getActiveSheet()->getStyle('A1:F1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Tableau des OPI matures passés au BAn de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." de ".$code_tegc."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


$objPHPExcel->getActiveSheet()->setCellValue('A2', "Fournisseurs ou Prestataires");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Numéro OPI");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Montant OPI");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Date début");
$objPHPExcel->getActiveSheet()->setCellValue('F2', "Date fin");
//$objPHPExcel->getActiveSheet()->setCellValue('G2', "Statut");

$objPHPExcel->getActiveSheet()->getStyle('A2:F2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
                $eutpagcpd = new Application_Model_DbTable_EuDetailTpagcp();
                $select = $eutpagcpd->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join('eu_tegc', 'eu_tegc.code_tegc = eu_detail_tpagcp.code_tegc');
                $select->where('eu_detail_tpagcp.id_tpagcp = ?',$entry->id_tpagcp);
                $select->limit(1);
                $rowseu = $eutpagcpd->fetchRow($select);

if(count($rowseu) > 0){
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseu->nom_tegc);
}else{
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', "");
}
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $entry->traite_code_banque);
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->traite_numero);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->mont_tranche);
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', datefr4($entry->traite_date_debut));
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($entry->traite_date_fin));
/*if($entry->traite_payer == 1) {
$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', "Encaissé");
} else {
$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', "Non encaissé");
}*/

$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("OPI matures passés au BAn");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/OPI_BAn/")) {
mkdir("../../webfiles/excel_exports/OPI_BAn/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/OPI_BAn/OPI_BAn_".$date_debut."_".$date_fin."_".$code_tegc."_.xlsx";
$newnom = "OPI_BAn_".$date_debut."_".$date_fin."_".$code_tegc."_";
$newchemin = "../../webfiles/excel_exports/OPI_BAn/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/

$domaine = Util_Utils::getParamEsmc(9);


if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}






public static function genererExcelOPIBC($date_debut, $date_fin, $code_tegc) {

$sessionutilisateur = new Zend_Session_Namespace('utilisateur');
           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);

           //$date_debut = $request->getParam("date_debut");
           //$date_fin = $request->getParam("date_fin");
                //$code_tegc = $request->getParam("code_tegc");

            $t_traite = new Application_Model_DbTable_EuTraite();

                $date_id = new Zend_Date(Zend_Date::ISO_8601);              

                $select = $t_traite->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join('eu_tpagcp', 'eu_tpagcp.id_tpagcp = eu_traite.traite_tegcp');
                
                if(!empty($date_debut) && !empty($date_fin)) {
                  $date_fin = new Zend_Date($date_fin);
                  $date_fin->addDay(1);
                  $select->where('(eu_traite.traite_date_fin >= ?',$date_debut)->where('eu_traite.traite_date_fin <= ?)',$date_fin->toString('yyyy-MM-dd'));  
                } elseif(!empty($date_debut)) {
                  $select->where('eu_traite.traite_date_fin >= ?',$date_debut);
                } elseif(!empty($date_fin)) {
                  $date_fin = new Zend_Date($date_fin);
                  $date_fin->addDay(1);
                  $select->where('eu_traite.traite_date_fin <= ?',$date_fin->toString('yyyy-MM-dd'));
                } 
              
                $select->where('eu_traite.traite_escompte_nature = ?',1);
                $select->where('eu_traite.traite_disponible = ?',0);
                $select->where('eu_traite.traite_date_fin > ?',$date_id->toString('yyyy-MM-dd'));
                $select->where('eu_traite.traite_statut like ?',"BC");
                $select->where('eu_tpagcp.mode_reglement like ?',"OPI");
                $select->order('eu_traite.traite_date_fin asc');
                $entries = $t_traite->fetchAll($select);

require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionutilisateur->login)
                             ->setTitle($sessionutilisateur->nom_utilisateur." ".$sessionutilisateur->prenom_utilisateur)
                             ->setSubject("Tableau des OPI non matures passés au Bon Commande")
                             ->setDescription("Export en excel de Tableau des OPI utilisés pour faire des Bons de Commande (BC)")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
//$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);

$objPHPExcel->getActiveSheet()->getStyle('A1:F1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
$objPHPExcel->getActiveSheet()->setCellValue('A1', "Tableau des OPI utilisés pour faire des Bons de Commande (BC) de ".datejourfr2($date_debut)." à ".datejourfr2($date_fin)." de ".$code_tegc."");
$objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


$objPHPExcel->getActiveSheet()->setCellValue('A2', "Fournisseurs ou Prestataires");
$objPHPExcel->getActiveSheet()->setCellValue('B2', "Banque");
$objPHPExcel->getActiveSheet()->setCellValue('C2', "Numéro OPI");
$objPHPExcel->getActiveSheet()->setCellValue('D2', "Montant OPI");
$objPHPExcel->getActiveSheet()->setCellValue('E2', "Date début");
$objPHPExcel->getActiveSheet()->setCellValue('F2', "Date fin");
//$objPHPExcel->getActiveSheet()->setCellValue('G2', "Statut");

$objPHPExcel->getActiveSheet()->getStyle('A2:F2')->applyFromArray(array('font' => array('bold' => true)));

$y = 3;
foreach ($entries as $entry):
                $eutpagcpd = new Application_Model_DbTable_EuDetailTpagcp();
                $select = $eutpagcpd->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
                $select->setIntegrityCheck(false);
                $select->join('eu_tegc', 'eu_tegc.code_tegc = eu_detail_tpagcp.code_tegc');
                $select->where('eu_detail_tpagcp.id_tpagcp = ?',$entry->id_tpagcp);  
                $select->limit(1);
                $rowseu = $eutpagcpd->fetchRow($select);

if(count($rowseu) > 0){
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $rowseu->nom_tegc);
}else{
$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', "");
}
$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $entry->traite_code_banque);
$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $entry->traite_numero);
$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->mont_tranche);
$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', datefr4($entry->traite_date_debut));
$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', datefr4($entry->traite_date_fin));


$y++;   
endforeach;

$objPHPExcel->getActiveSheet()->setTitle("OPI passés au Bon Commande");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

if (!is_dir("../../webfiles/excel_exports/OPI_BC/")) {
mkdir("../../webfiles/excel_exports/OPI_BC/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/excel_exports/OPI_BC/OPI_BC_".$date_debut."_".$date_fin."_".$code_tegc."_.xlsx";
$newnom = "OPI_BC_".$date_debut."_".$date_fin."_".$code_tegc."_";
$newchemin = "../../webfiles/excel_exports/OPI_BC/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/



if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}










public static function genererPdfContratLivraisonIrrevocable($id_contrat) {

   ini_set('memory_limit', '512M');

   $contrat = new Application_Model_EuContratLivraisonIrrevocable();
   $contratM = new Application_Model_EuContratLivraisonIrrevocableMapper();
   $contratM->find($id_contrat, $contrat);

                    if (substr($contrat->code_membre, -1) == "P") {
   $membre = new Application_Model_EuMembre();
   $membreM = new Application_Model_EuMembreMapper();
   $membreM->find($contrat->code_membre, $membre);
   $numero_membre = $membre->code_membre;
   $nom_membre = $membre->nom_membre." ".$membre->prenom_membre;
                    } else if (substr($contrat->code_membre, -1) == "M") {
   $membre = new Application_Model_EuMembreMorale();
   $membreM = new Application_Model_EuMembreMoraleMapper();
   $membreM->find($contrat->code_membre, $membre);
   $numero_membre = $membre->code_membre_morale;
   $nom_membre = $membre->raison_sociale;

   $representationM = new Application_Model_EuRepresentationMapper();
   $representation = $representationM->findbyrep($numero_membre);

   $membre2 = new Application_Model_EuMembre();
   $membre2M = new Application_Model_EuMembreMapper();
   $membre2M->find($representation->code_membre, $membre2);
   //$nom_membre .= "(".$membre2->nom_membre." ".$membre2->prenom_membre.")";
                    }

        $detail = new Application_Model_EuDetailContratLivraisonIrrevocableMapper();
        $montant_produits = $detail->fetchAllByContratCumul($contrat->id_contrat);

        $detaillibelle = new Application_Model_EuDetailContratLivraisonIrrevocableMapper();
        $libelles = $detaillibelle->fetchAllByContrat1($contrat->id_contrat);

$libelle_produits = "";
foreach ($libelles as $libelle){
$libelle_produits .= $libelle->libelle_produit." - ";
}

$libelle_produits = substr($libelle_produits, 0, -3);

$date_id = new Zend_Date(Zend_Date::ISO_8601);

$htmlpdf = "";
/**/
// backimgw="100%" backimgh="100%"
$htmlpdf .= '
    <page backtop="10mm" backleft="10mm" backright="20mm" backbottom="10mm" backimgx="center" backimgy="top"  backimg="'.Util_Utils::getParamEsmc(2).'images/CLI3.gif">
    ';

/*$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';*/
$htmlpdf .= '
<div align="justify">
<p align="center"><strong><u>CONTRAT DE LIVRAISON IRREVOCABLE CONTRE OPI</u></strong></p>
<p>&nbsp;</p>
<p>Entre  les soussignées&nbsp;:</p>
';

if($contrat->type_validateur == "personne_physique"){
$htmlpdf .= '
<p ><span >
'.$contrat->civilite.' '.$contrat->nom.'
</span>
<br /><span >
Demeurant  à  '.$contrat->demeure.'  '.$contrat->libelle_demeure.'  
(Quartier)  '.$contrat->quartier.'</span><br /><span >
(BP)  '.$contrat->boite_postale.' 
(Tél) '.$contrat->telephone.'</span></p>


';

}else if($contrat->type_validateur == "etablissement"){
$htmlpdf .= '


<p ><span >
Etablissement '.$contrat->nom.'
</span>
<br /><span >
Situé  (e) à 
'.$contrat->libelle_situation.'</span><br /><span >
Rue  '.$contrat->rue.'</span><br /><span >
Représentée  par '.$contrat->civilite_representant.' 
'.$contrat->nom_representant.'</span><br /><span >
(Quartier)  '.$contrat->quartier.'</span><br /><span >
(BP)  '.$contrat->boite_postale.' 
(Tél) '.$contrat->telephone.'</span><br /><span >
Numéro de la carte d’Opérateur Economique  '.$contrat->carte_operateur.'</span></p>


';

}else if($contrat->type_validateur == "maison"){
$htmlpdf .= '


<p ><span >
'.$contrat->type_maison.' 
'.$contrat->nom.'
</span>
<br /><span >
Situé  (e) à 
'.$contrat->libelle_situation.'  
(Quartier)  '.$contrat->quartier_maison.'</span><br /><span >
Rue  '.$contrat->rue.'</span><br /><span >
Représentée  par '.$contrat->civilite_representant.' 
'.$contrat->nom_representant.'</span><br /><span >
Demeurant  à  '.$contrat->demeure.'  
'.$contrat->libelle_demeure.'  
(Quartier)  '.$contrat->quartier.'</span><br /><span >
(BP)  '.$contrat->boite_postale.' 
(Tél) '.$contrat->telephone.'</span></p>


';

}else if($contrat->type_validateur == "collectivite"){
$htmlpdf .= '


<p ><span >
Collectivité '.$contrat->nom.'
</span>
<br /><span >
Représentée  par '.$contrat->civilite_representant.' 
'.$contrat->nom_representant.'</span><br /><span >
Demeurant  à  '.$contrat->demeure.'  
'.$contrat->libelle_demeure.'  
(Quartier)  '.$contrat->quartier.'</span><br /><span >
(BP)  '.$contrat->boite_postale.' 
(Tél) '.$contrat->telephone.'</span></p>



';
}else if($contrat->type_validateur == "association"){
$htmlpdf .= '


<p ><span >
L’Association '.$contrat->nom.'
</span>
</p>


';
}else if($contrat->type_validateur == "ong"){
$htmlpdf .= '


<p ><span >
L’ONG '.$contrat->nom.'
</span>
</p>


';
}else if($contrat->type_validateur == "groupement"){
$htmlpdf .= '


<p ><span >
Le Groupement '.$contrat->nom.'
</span>
</p>


';
}else if($contrat->type_validateur == "cooperative"){
$htmlpdf .= '


<p ><span >
La Coopérative '.$contrat->nom.'
</span>
</p>


';
}else if($contrat->type_validateur == "union"){
$htmlpdf .= '


<p ><span >
L’Union '.$contrat->nom.'
</span>
</p>


';
}else if($contrat->type_validateur == "federation"){
$htmlpdf .= '


<p ><span >
La Fédération '.$contrat->nom.'
</span>
</p>


';
}else if($contrat->type_validateur == "confederation"){
$htmlpdf .= '


<p ><span >
La Confédération '.$contrat->nom.'
</span>
</p>


';
}else if($contrat->type_validateur == "reseau"){
$htmlpdf .= '


<p ><span >
Le Réseau '.$contrat->nom.'
</span>
</p>


';
}else if($contrat->type_validateur == "faitiere"){
$htmlpdf .= '


<p ><span >
La Faitière '.$contrat->nom.'
</span>
<br /><span >
Ayant pour numéro du  récépissé/d\'enregistrement/du registre des coopératives '.$contrat->numero_recipice.' ,</span><br /><span >
dont  le siège social est '.$contrat->siege.',</span><br /><span >
Représentée  par '.$contrat->civilite_representant.' 
'.$contrat->nom_representant.'</span></p>


';

}else if($contrat->type_validateur == "confession_religieuse"){
$htmlpdf .= '


<p ><span >
Confession religieuse '.$contrat->nom.'
</span>
<br /><span >
Représentée  par '.$contrat->civilite_representant.' 
'.$contrat->nom_representant.'</span><br /><span >
Demeurant  à  '.$contrat->demeure.'  
'.$contrat->libelle_demeure.'  
(Quartier)  '.$contrat->quartier.'</span><br /><span >
(BP)  '.$contrat->boite_postale.' 
(Tél) '.$contrat->telephone.'</span></p>


';

}else if($contrat->type_validateur == "ets_public_administratif"){
$htmlpdf .= '


<p ><span >
L\'Etablissement Public Administratif '.$contrat->nom.'
</span>
<br /><span >
(BP)  '.$contrat->boite_postale.' 
(Tél) '.$contrat->telephone.'</span></p>


';

}else if($contrat->type_validateur == "ets_public_industriel_commercial"){
$htmlpdf .= '


<p ><span >
L\'Etablissement Public Industriel Commercial '.$contrat->nom.'
</span>
<br /><span >
(BP)  '.$contrat->boite_postale.' 
(Tél) '.$contrat->telephone.'</span></p>


';

}else if($contrat->type_validateur == "organisation_internationale"){
$htmlpdf .= '


<p ><span >
L\'Organisation Internationale '.$contrat->nom.'
</span>
<br /><span >
(BP)  '.$contrat->boite_postale.' 
(Tél) '.$contrat->telephone.'</span></p>


';

}else if($contrat->type_validateur == "societe"){
$htmlpdf .= '


<p ><span >
La Société '.$contrat->nom.'
</span>
</p>



<p  style="margin-left:-14.2pt;text-indent:14.2pt;"><span >
Immatriculée au RCCM sous le numéro '.$contrat->matricule_rccm.' ,</span><br /><span >
dont  le siège social est '.$contrat->siege.',</span><br /><span >
Représentée  par '.$contrat->civilite_representant.'
'.$contrat->nom_representant.'</span></p>


';

}

$htmlpdf .= '
<p>Ci-après  dénommé (e) le <strong>«&nbsp;VENDEUR&nbsp;»</strong>,</p>
<p>D&rsquo;une  part</p>
<p>Et   </p>
<p align="justify">ESMC (Entreprise Sociale  de Marché Commun) société à responsabilité limitée unipersonnelle au capital social  de 1 000 000 de francs CFA dont le siège social est sis à Wuiti-Atchati, Angle  rue Sagouda &amp; Kiyéou, BP : 30038 Lomé-Togo ; Tél : + 228 22 19 32 71 / 22  26 60 09, Immatriculée au registre du Commerce et du Crédit Mobilier de Lomé  sous le numéro : TG-LOM 2014 B 514, représentée par son Gérant, Monsieur SAMA  Essohamlon.</p>
<p>Ci-après  dénommée l&rsquo;<strong>«&nbsp;ESMC&nbsp;SARLU »</strong> ou l&rsquo;<strong>«&nbsp;ACQUEREUR&nbsp;»</strong> ou  l&rsquo;&nbsp;<strong>«&nbsp;ACHETEUR&nbsp;»</strong>.</p>
<p>D&rsquo;autre  part</p>
<p>Il  a été convenu et arrêté ce qui suit&nbsp;:<strong></strong></p>
<p><strong><u>Article 1 - Objet du Contrat</u></strong></p>
<p align="justify">Le  présent contrat intervient dans le cadre de l&rsquo;exécution de la &rsquo;&rsquo;Convention de  collaboration entre l&rsquo;ESMC et les Fournisseurs de biens, produits et services :  Utilisateurs, Fournisseurs Spécifiques et Fournisseurs Externes pour la  réalisation par le marché des 17 Objectifs de Développement Durable&lsquo;&rsquo;.</p>
<p>Il  a pour objet de définir les modalités d\'acquisition des produits vendus par le VENDEUR. </p>
<p>Le  VENDEUR vend à l\'ACQUEREUR qui l\'accepte, <strong>'.$libelle_produits.'</strong><br></p>
<p><strong><u>Article 2 - Prix de vente</u></strong></p>
<p>Les  biens sont vendus hors taxe au prix de <strong>'.$montant_produits.' FCFA</strong><br></p>
<p><strong><u>Article 3 - Paiement </u></strong></p>
<p>Le  montant convenu sera payé au VENDEUR par l&rsquo;ACHETEUR suivant douze (12) ordres  de prélèvement irrévocables (OPI) minimum, selon qu&rsquo;il s&rsquo;agit&nbsp;des produits  ordinaires ou des produits dont la mise en valeur s&rsquo;effectue à moyen et à long  terme tels que&nbsp;: les immeubles, les matériels industriels, les équipements  industriels, de l&rsquo;infrastructure et de la logistique …  </p>
<p>Le  VENDEUR fera usage des OPI selon les quatre (04) modes prévues à l&rsquo;article  5.2.6 de la convention de collaboration sus visée. </p>
<p>L&rsquo;émission  anticipée des OPI exclut aussi bien à l&rsquo;ACHETEUR qu&rsquo;au VENDEUR, toute exigence  d&rsquo;aval d&rsquo;escompte, de gage ou d&rsquo;autres garanties. </p>
<p><strong><u>Article 4 - La délivrance du &lsquo;&rsquo;BON DE  LIVRAISON IRREVOCABLE&rsquo;&rsquo;</u></strong></p>
<p>Contre  les OPI reçus, le VENDEUR est tenu de mettre à la disposition de l&rsquo;ACHETEUR le  document intitulé &lsquo;&rsquo;BON DE LIVRAISON IRREVOCABLE&rsquo;&rsquo;.  <strong></strong></p>
<p><strong><u>Article 5 - La livraison des produits</u></strong><br>
  <strong>            <u>5.1 - La livraison des produits à  l&rsquo;ACHETEUR</u></strong></p>
<p>Selon  la volonté exprimée par l&rsquo;ACHETEUR, la livraison peut s&rsquo;effectuer dans  l&rsquo;immédiat ou par échelonnement.</p>
<p>L&rsquo;ACHETEUR  s\'engage à prendre livraison des produits vendus dans la période convenue. </p>
<p>L&rsquo;ACHETEUR  prendra livraison des produits dans les magasins du VENDEUR situés sur toute  l&rsquo;étendue du territoire togolais. </p>
<p>Le  VENDEUR s\'engage à livrer les produits vendus à l\'ACQUEREUR, à la date (ou aux  dates) de livraison convenue (s).</p>
<p>Tout  enlèvement de produit par l&rsquo;ACHETEUR est subordonné à la présentation d&rsquo;une  copie du &lsquo;&rsquo;BON DE LIVRAISON IRREVOCABLE&rsquo;&rsquo; et d&rsquo;une reconnaissance de la  quantité enlevée.  </p>
<p><strong>            <u>5.2 - La livraison des produits  aux clients du VENDEUR</u></strong></p>
<p>L&rsquo;ACHETEUR  peut décider que tous les produits (ou une quantité) soient enlevés par ses  clients. Le cas échéant, le VENDEUR est tenu de livrer les produits auxdits clients,  pourvu qu&rsquo;ils lui présentent un &lsquo;&rsquo;BON DE LIVRAISON&rsquo;&rsquo; émanant de l&rsquo;ESMC, spécifiant  la quantité à leur livrer.   </p>
<p>Le  VENDEUR gardera une copie du &lsquo;&rsquo;BON DE LIVRAISON&rsquo;&rsquo; déchargée par le client, contre  livraison de la quantité correspondante.</p>
<p><strong><u>Article 6 - La garde des produits</u></strong></p>
<p>Les  produits vendus seront sous la garde du VENDEUR jusqu&rsquo;à livraison entière.</p>
<p>Sous  réserve de l&rsquo;entente entre le VENDEUR et l&rsquo;ACHETEUR, les produits ne peuvent  être gardés au-delà de la période de <strong>'.$contrat->periode_garde.' mois</strong>. </p>
<p>Les  produits livrés sur commande ne sont pas frappés par ce délai.</p>
<p>Si  l&rsquo;ACHETEUR n&rsquo;enlève pas ou ne fait pas enlever les produits dans le délai et  les modalités prévus par le présent contrat, deux situations peuvent se  présenter&nbsp;: <br>
<ul>
<li>Au cas où le VENDEUR n&rsquo;a utilisé qu&rsquo;une partie des  OPI, il est en droit de procéder à la résiliation du présent contrat dans les  proportions de son utilisation des OPI objets de la vente.</li>
<li>Au cas où le VENDEUR a déjà utilisé tous les OPI, il  doit mettre en demeure l&rsquo;ACHETEUR d&rsquo;enlever les produits dans un délai d&rsquo;un  (01) mois, à défaut il sera contraint de les revendre à l&rsquo;effet de verser leur  prix à l&rsquo;ACHETEUR, après avoir déduit les frais occasionnés par lesdites  ventes. La vente doit s&rsquo;effectuer au vu et au su de l&rsquo;ACHETEUR ou de son  représentant. La mise en demeure peut se faire par acte d&rsquo;huissier, par lettre  recommandée avec accusé de réception ou par simple lettre.</li>
</ul>
</p>
<p>En  cas de difficultés à remplir son obligation de livraison des produits de façon  autonome, conformément à l&rsquo;article 7.3 alinéa 5 de la convention de  collaboration sus visée, le VENDEUR peut recourir à la Production Commune sur  la plateforme ESMC. En tout état de cause, aussi  longtemps que le VENDEUR aura la capacité de remplir ses engagements en nature,  l&rsquo;ACHETEUR ne pourra exiger sa créance en espèce. </p>
<p>Si  à la demande de l&rsquo;ACHETEUR ou de ses clients, le VENDEUR qui n&rsquo;est pas en  mesure de livrer les produits, refuse de recourir à l&rsquo;alternative prévue à cet  effet par l&rsquo;alinéa précédent, l&rsquo;ACHETEUR est en droit de déclencher des  poursuites pénales contre lui. </p>
<p>Le  VENDEUR s&rsquo;expose aux poursuites pénales s&rsquo;il se dépossède des produits sans  l&rsquo;accord de l&rsquo;ACHETEUR. </p>
<p><strong><u>Article 7 – La couverture des  produits d&rsquo;une assurance</u></strong></p>
<p>En  couverture des produits dont le stock est connu, le VENDEUR souscrira à une police  d&rsquo;assurance multirisque, aux frais de l&rsquo;ACHETEUR. <strong></strong></p>
<p><strong><u>Article 8 - Le chargement des  produits</u></strong></p>
';

if($contrat->chargement_produit == "VENDEUR"){
$htmlpdf .= '
<p>Le  chargement sera assuré par le VENDEUR à ses frais et sous sa responsabilité <!--<img width="32" height="20" src="file:///C|/wamp/www/mcnp/clip_image005.png">--></p>
<p>Au  cas où le chargement des produits est assuré par le VENDEUR, les frais seront  incorporés au prix de vente.</p>
';

}else if($contrat->chargement_produit == "ACHETEUR"){
$htmlpdf .= '
<p><!--<img width="32" height="20" src="file:///C|/wamp/www/mcnp/clip_image006.png">-->Le chargement sera assuré par l&rsquo;ACHETEUR (ou ses clients) à ses (leur) frais et sous sa (ou  leur) responsabilité <strong></strong></p>
';
}

$htmlpdf .= '
<!--<p>Au  cas où le chargement des produits est assuré par le VENDEUR, les frais seront  incorporés au prix de vente.</p>-->
<p><strong><u>Article 9 – L&rsquo;enregistrement</u></strong></p>
<p>Le  présent contrat sera enregistré aux frais de l&rsquo;ACQUEREUR.  </p>
<p>Tous  pouvoirs sont conférés au porteur d&rsquo;un original ou d&rsquo;une copie du présent  contrat afin d&rsquo;accomplir la formalité d&rsquo;enregistrement.</p>
<p><strong><u>Article 10 – L&rsquo;entrée en vigueur</u></strong></p>
<p>Le  présent contrat prend effet à compter de la date de sa validation sur le site  internet de l&rsquo;ESMC ou de sa signature en cas  de besoin.</p>
';
$htmlpdf .= '
</div>
</page>
';

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/contrats.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_contrat/")) {
mkdir("../../webfiles/pdf_contrat/", 0777);
}
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "../../webfiles/pdf_contrat/CONTRAT_LIVRAISON_IRREVOCABLE_".$id_contrat."_.html";
$newnom = "CONTRAT_LIVRAISON_IRREVOCABLE_".$id_contrat."_";
$newchemin = "../../webfiles/pdf_contrat/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';
$filena = $newnom.'.pdf';

unlink($newfile);

$domaine = Util_Utils::getParamEsmc(9);

/*

if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }

*/
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}














  public static function genererPdfTraiteBanque1($entries1, $code_banque) {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

         $banque = new Application_Model_EuBanque();
         $banqueMapper = new Application_Model_EuBanqueMapper();
         $banqueMapper->find($code_banque, $banque);

$htmlpdf = "";
/**/
//backimgw="100%" backimgh="100%" backimg="'.Util_Utils::getParamEsmc(2).'images/OPI3.gif"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top" backbottom="10mm" >
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="5"><img src="https://esmcgie.com/sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="5" align="left"><strong><u>SECTION INTENDANCE & FINANCE</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"><div style="text-align: center; border: solid 2px #000000; width:175px; margin: 3px;"><strong>'.$banque->libelle_banque.'</strong></div></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5">Messieurs, <br />
    Par le débit de notre compte '.$banque->compte_banque.' en vos livres veuillez effectuer les prélèvements irrévocables ci-après aux bénéficiaires suivant les références des OPI à date de valeur « '.datefr($date_id->toString('yyyy-MM-dd')).' »</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
        <tr>
                <td align="center" style="border:#000 1px solid;"><strong>N°</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>O.P.I. n°</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>ECHEANCE</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>BENEFICIAIRE - CONTACT - CPTE BANCAIRE</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>MONTANT</strong></td>
        </tr>';
$total_montant = 0;
$i = 0;
foreach ($entries1 as $entry):

$i++;
         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);






/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        $traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);


    


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }

if ($traite->traite_imprimer == 2) {

$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($tpagcp->code_membre);
$portable_membre = "";
if(count($telephone) > 0){
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);
}

$htmlpdf .= '
        <tr>
                <td align="right" style="border:#000 1px solid;">'.$i.'</td>
                <td align="left" style="border:#000 1px solid;">'.$numero_opi2.'</td>
                <td align="center" style="border:#000 1px solid;">'.datefr($traite->traite_date_fin).'</td>
                <td align="left" style="border:#000 1px solid;">'.$designation_membre.'<br />'.$traite->mode_paiement.':'.$traite->reference_paiement.' - Cel.:'.$portable_membre.'</td>
                <td align="right" style="border:#000 1px solid;">'.number_format($traite->traite_montant,0,',',' ').'</td>
        </tr>';
$total_montant += $traite->traite_montant;
}
endforeach;
$htmlpdf .= '
        <tr>
                <td align="right" colspan="4" style="border:#000 1px solid;">Total</td>
                <td align="right" style="border:#000 1px solid;">'.number_format($total_montant,0,',',' ').'</td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="4">Arrêté le présent bordereau à la somme de ('.number_format($total_montant,0,',',' ').' FCFA) '.Util_Utils::lettre($total_montant, 0).' CFA</td>
    <td align="right">Signature du donneur d\'ordre <br />
    <img src="https://esmcgie.com/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>
';
$htmlpdf .= '
  <tr>
    <td colspan="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
';


/*  <tr>
    <td colspan="5" align="right">Signature du donneur d\'ordre <br />
    <img src="https://esmcgie.com/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>

$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';

copy('/var/www/html/mcnp/public/traite.html', '/var/www/html/mcnp/public/traite'.$code_banque.'.html');
////////////////////////////////////////////////////////////////////////////////
$filename = '/var/www/html/mcnp/public/traite'.$code_banque.'.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("/var/www/html/webfiles/pdf_traite/")) {
mkdir("/var/www/html/webfiles/pdf_traite/", 0777);
}

$newfile = "/var/www/html/webfiles/pdf_traite/ETAT_OPI_1_".$code_banque."_".$date_id->toString('dd-MM-yyyy').".html";
$newnom = "ETAT_OPI_1_".$code_banque."_".$date_id->toString('dd-MM-yyyy');
$newchemin = "/var/www/html/webfiles/pdf_traite/";

copy($file, $newfile);

    ob_start();
    include($newfile);//dirname(__FILE__).'/'.
    $content = ob_get_clean();

    // convert to PDF
    require_once('/var/www/html/mcnp/public/html2pdf/html2pdf.class.php');//dirname(__FILE__).
    try
    {
        $html2pdf = new HTML2PDF('L', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        /*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/


}
















  public static function genererPdfTraiteBanque2($entries1, $code_banque) {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

         $banque = new Application_Model_EuBanque();
         $banqueMapper = new Application_Model_EuBanqueMapper();
         $banqueMapper->find($code_banque, $banque);

$htmlpdf = "";
/**/
//backimgw="100%" backimgh="100%" backimg="'.Util_Utils::getParamEsmc(2).'images/OPI3.gif"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top" backbottom="10mm" >
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="5"><img src="https://esmcgie.com/sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="5" align="left"><strong><u>SECTION INTENDANCE & FINANCE</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"><div style="text-align: center; border: solid 2px #000000; width:175px; margin: 3px;"><strong>'.$banque->libelle_banque.'</strong></div></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5">Messieurs, <br />
    Par le débit de notre compte '.$banque->compte_banque.' en vos livres veuillez effectuer les prélèvements irrévocables ci-après aux bénéficiaires suivant les références des OPI à date de valeur « '.datefr($date_id->toString('yyyy-MM-dd')).' » à <strong> vos confères</strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
        <tr>
                <td align="center" style="border:#000 1px solid;"><strong>N°</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>O.P.I. n°</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>ECHEANCE</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>BENEFICIAIRE - CONTACT - CPTE BANCAIRE</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>MONTANT</strong></td>
        </tr>';
$total_montant = 0;
$i = 0;
foreach ($entries1 as $entry):

$i++;
         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);






/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        $traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);


    


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }

if ($traite->traite_imprimer == 2) {

$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($tpagcp->code_membre);
$portable_membre = "";
if(count($telephone) > 0){
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);
}

$htmlpdf .= '
        <tr>
                <td align="right" style="border:#000 1px solid;">'.$i.'</td>
                <td align="left" style="border:#000 1px solid;">'.$numero_opi2.'</td>
                <td align="center" style="border:#000 1px solid;">'.datefr($traite->traite_date_fin).'</td>
                <td align="left" style="border:#000 1px solid;">'.$designation_membre.'<br />'.$traite->mode_paiement.':'.$traite->reference_paiement.' - Cel.:'.$portable_membre.'</td>
                <td align="right" style="border:#000 1px solid;">'.number_format($traite->traite_montant,0,',',' ').'</td>
        </tr>';
$total_montant += $traite->traite_montant;
}
endforeach;
$htmlpdf .= '
        <tr>
                <td align="right" colspan="4" style="border:#000 1px solid;">Total</td>
                <td align="right" style="border:#000 1px solid;">'.number_format($total_montant,0,',',' ').'</td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="4">Arrêté le présent bordereau à la somme de ('.number_format($total_montant,0,',',' ').' FCFA) '.Util_Utils::lettre($total_montant, 0).' CFA</td>
    <td align="right">Signature du donneur d\'ordre <br />
    <img src="https://esmcgie.com/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>
';
$htmlpdf .= '
  <tr>
    <td colspan="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  
';


/*<tr>
    <td colspan="5" align="right">Signature du donneur d\'ordre <br />
    <img src="https://esmcgie.com/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>

  $htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';

copy('/var/www/html/mcnp/public/traite.html', '/var/www/html/mcnp/public/traite'.$code_banque.'2.html');
////////////////////////////////////////////////////////////////////////////////
$filename = '/var/www/html/mcnp/public/traite'.$code_banque.'2.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("/var/www/html/webfiles/pdf_traite/")) {
mkdir("/var/www/html/webfiles/pdf_traite/", 0777);
}

$newfile = "/var/www/html/webfiles/pdf_traite/ETAT_OPI_2_".$code_banque."_".$date_id->toString('dd-MM-yyyy').".html";
$newnom = "ETAT_OPI_2_".$code_banque."_".$date_id->toString('dd-MM-yyyy');
$newchemin = "/var/www/html/webfiles/pdf_traite/";

copy($file, $newfile);

    ob_start();
    include($newfile);//dirname(__FILE__).'/'.
    $content = ob_get_clean();

    // convert to PDF
    require_once('/var/www/html/mcnp/public/html2pdf/html2pdf.class.php');//dirname(__FILE__).
    try
    {
        $html2pdf = new HTML2PDF('L', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        /*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/


}






public static function genererExcelTraite($entries3) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setDescription("Export en excel les états quotidiens des OPI émis le ".(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(37);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(10);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
$objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(12);

$objPHPExcel->getActiveSheet()->setCellValue('A1', "SECTION INTENDANCE & FINANCE");

$objPHPExcel->getActiveSheet()->setCellValue('A3', "BORDEREAU DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."");

$objPHPExcel->getActiveSheet()->setCellValue('A6', "O.P.I. n°");
$objPHPExcel->getActiveSheet()->setCellValue('B6', "ECHEANCE");
$objPHPExcel->getActiveSheet()->setCellValue('C6', "BANQUE E.");
$objPHPExcel->getActiveSheet()->setCellValue('D6', "COMPTE BANCAIRE E.");
$objPHPExcel->getActiveSheet()->setCellValue('E6', "BENEFICIAIRE");
$objPHPExcel->getActiveSheet()->setCellValue('F6', "CONTACT");
$objPHPExcel->getActiveSheet()->setCellValue('G6', "BANQUE R.");
$objPHPExcel->getActiveSheet()->setCellValue('H6', "COMPTE BANCAIRE R.");
$objPHPExcel->getActiveSheet()->setCellValue('I6', "MONTANT");


$y = 7;
$total_montant = 0;    
foreach ($entries3 as $entry):

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);


         $detail_tpagcpM = new Application_Model_EuDetailTpagcpMapper();
         $detail_tpagcp = $detail_tpagcpM->findDetailTpagcpTpagcp($id_tpagcp);

    


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }


/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        //$traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(1);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        //$tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        //$tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    //$tpagcpM->update($tpagcp);


if ($traite->traite_imprimer == 1) {

$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($tpagcp->code_membre);
$portable_membre = "";
if(count($telephone) > 0){
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);
}

if($traite->mode_paiement == "WARI"){
        $traite_date_fin_1 = new Zend_Date($traite->traite_date_fin);
        //$traite_date_fin_1->add('1', Zend_Date::DAY_SHORT);
        //$traite_date_fin_1->addDay(1);

//$messageopi = "Votre OPI No ".substr($numero_opi, 2, (strlen($numero_opi) - 2))." est echu. Merci de vous presenter à un poste WARI le jour suivant. ESMC";//après ".$traite_date_fin_1->toString('dd-MM-yyyy')."
$messageopi = "Votre OPI No ".$numero_opi2." est echu. Merci d'attendre le message de sa disponibilité. ESMC";
//$messageopi = "Votre OPI No ".substr($numero_opi, 2, (strlen($numero_opi) - 2))." est echu. Merci d'attendre le message de sa disponibilité. ESMC";//après ".$traite_date_fin_1->toString('dd-MM-yyyy')."
}else if($traite->mode_paiement == "FAIP"){
//$messageopi = "Votre OPI No ".$numero_opi2." est echu. Merci de verifier le virement sur votre compte FAIP-TOGO. ESMC";
$messageopi = "Votre OPI No ".$numero_opi2." est echu. Merci d'attendre le message de sa disponibilité. ESMC";
}else{
//$messageopi = "Votre OPI No ".$numero_opi2." est echu. Merci d'attendre le message de virement sur votre compte. ESMC";
$messageopi = "Votre OPI No ".$numero_opi2." est echu. Merci d'attendre le message de sa disponibilité. ESMC";
}
$telephone2M = new Application_Model_EuTelephoneMapper();
$telephone2 = $telephone2M->findByCodeMembre($tpagcp->code_membre);
if($telephone2 > 0){
    
if($traite->mode_paiement == "WARI"){
$phone = $traite->reference_paiement;
}else{
$phone = $telephone2->numero_telephone;
}

$compteur = Util_Utils::findConuter() + 1;
//Util_Utils::addSms($compteur, $telephone2->numero_telephone, $messageopi);
////Util_Utils::addSms3Easys($compteur, $phone, $messageopi);
}
/*if($telephone2->compagnie_telephone == "TOGOCEL"){
Util_Utils::addSms4($compteur, $telephone2->numero_telephone, $messageopi);
}else if($telephone2->compagnie_telephone == "MOOV"){
Util_Utils::addSmsMoov($compteur, $telephone2->numero_telephone, $messageopi);
}*/




$banque = new Application_Model_EuBanque();
$banqueM = new Application_Model_EuBanqueMapper();
$banqueM->find($traite->traite_code_banque, $banque);


//$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi2);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', $numero_opi2, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', ($traite->traite_date_fin));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', ($traite->traite_date_fin), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $traite->traite_code_banque);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $traite->traite_code_banque, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $banque->compte_banque);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', $banque->compte_banque, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $designation_membre);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $designation_membre, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
if($portable_membre != ""){
//$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $portable_membre);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.$y.'', $portable_membre, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('F'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
}
//$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $traite->mode_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.$y.'', $traite->mode_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('G'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $traite->reference_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('H'.$y.'', $traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('H'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $traite->traite_montant);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('I'.$y.'', $traite->traite_montant, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('I'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$total_montant += $traite->traite_montant;
}
$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('D'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('E'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('F'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('G'.($y+1).'', "");

//$objPHPExcel->getActiveSheet()->setCellValue('H'.($y+1).'', "Total");
$objPHPExcel->getActiveSheet()->setCellValueExplicit('H'.($y+1).'', "Total", PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('H'.($y+1).'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('I'.($y+1).'', $total_montant);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('I'.($y+1).'', $total_montant, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('I'.($y+1).'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setTitle("ETATS OPI");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xlsx";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/OPI_".$date_id->toString('dd-MM-yyyy')."_.xlsx";
$newnom = "OPI_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/



/*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}









public static function genererExcelTraiteWari($entries2) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

/*$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setDescription("Export en excel les états quotidiens des OPI émis le ".(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setKeywords("")
                             ->setCategory("");*/

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(9);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(9);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(9);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(9);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(9);


$objPHPExcel->getActiveSheet()->setCellValue('A1', "MATRICULE");
$objPHPExcel->getActiveSheet()->setCellValue('B1', "AMOUNT");
$objPHPExcel->getActiveSheet()->setCellValue('C1', "TELEPHONE");
$objPHPExcel->getActiveSheet()->setCellValue('D1', "NOM");
$objPHPExcel->getActiveSheet()->setCellValue('E1', "PRENOM");


$y = 2;
$total_montant = 0;    
foreach ($entries2 as $entry):

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->nom_membre;
$designation_prenom = $membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->raison_sociale;
$designation_prenom = "";
  }




/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        $traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);



if ($traite->traite_imprimer == 2) {

/////////////////////////tarif wari/////////////
        $tarif_M = new Application_Model_EuTarifMapper();
        $tarif = $tarif_M->fetchAllByMontantTarifMode($tpagcp->mont_tranche, "WARI");
        $montant_wari = $tpagcp->mont_tranche - $tarif->montant_tarif;





//$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', substr($numero_opi, 2, (strlen($numero_opi) - 2)));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', substr($numero_opi, 2, (strlen($numero_opi) - 2)), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $montant_wari);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', $montant_wari, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', '+'.$traite->reference_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', '+'.$traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $designation_nom);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', $designation_nom, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $designation_prenom);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $designation_prenom, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);



$total_montant += $tpagcp->mont_tranche;
}
$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "Total");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', number_format($total_montant,0,',',' '));

$objPHPExcel->getActiveSheet()->setTitle("Wari");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
$objWriter->save(str_replace('.php', '.xls', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xls";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/Marchand_DEC_362437_".$date_id->toString('dd-MM-yyyy')."_.xls";
$newnom = "Marchand_DEC_362437_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xls';
$filena = $newnom.'.xls';
/**/



/*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}






public static function genererExcelTraiteFAIP($entries2) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

/*$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setDescription("Export en excel les états quotidiens des OPI émis le ".(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setKeywords("")
                             ->setCategory("");*/

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(19);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(11);


$objPHPExcel->getActiveSheet()->setCellValue('A1', "NUM_LIGNE");
$objPHPExcel->getActiveSheet()->setCellValue('B1', "NUM_COMPTE");
$objPHPExcel->getActiveSheet()->setCellValue('C1', "DESCRIPTION LIGNE");
$objPHPExcel->getActiveSheet()->setCellValue('D1', "MTT_DEB");
$objPHPExcel->getActiveSheet()->setCellValue('E1', "MTT_CRD");

$i = 0;
$y = 2;
$total_montant = 0;    
foreach ($entries2 as $entry):
$i++;

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->nom_membre;
$designation_prenom = $membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->raison_sociale;
$designation_prenom = "";
  }




/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        $traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);



if ($traite->traite_imprimer == 2) {


$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $i);
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', $i, PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $traite->reference_paiement);
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', $traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $numero_opi." - ".$designation_nom." ".$designation_prenom);
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $numero_opi." - ".$designation_nom." ".$designation_prenom, PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', '');
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', '', PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $tpagcp->mont_tranche);
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $tpagcp->mont_tranche, PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);



$total_montant += $tpagcp->mont_tranche;
}
$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "Total");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', number_format($total_montant,0,',',' '));

$objPHPExcel->getActiveSheet()->setTitle("FAIP");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
$objWriter->save(str_replace('.php', '.xls', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xls";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/FAIP_TOGO_".$date_id->toString('dd-MM-yyyy')."_.xls";
$newnom = "FAIP_TOGO_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xls';
$filena = $newnom.'.xls';
/**/



/*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}






public static function genererExcelTraiteFLOOZ($entries2) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

/*$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setDescription("Export en excel les états quotidiens des OPI émis le ".(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setKeywords("")
                             ->setCategory("");*/

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(19);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(19);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(11);


$objPHPExcel->getActiveSheet()->setCellValue('A1', "NUMERO OPI");
$objPHPExcel->getActiveSheet()->setCellValue('B1', "CODE MEMBRE");
$objPHPExcel->getActiveSheet()->setCellValue('C1', "NOM & PRENOM(S) / RAISON SOCIALE");
$objPHPExcel->getActiveSheet()->setCellValue('D1', "ECHEANCE");
$objPHPExcel->getActiveSheet()->setCellValue('E1', "NUMERO DE TELEPHONE");
$objPHPExcel->getActiveSheet()->setCellValue('F1', "MONTANT");
$objPHPExcel->getActiveSheet()->setCellValue('G1', "DATE DEBUT");

$i = 0;
$y = 2;
$total_montant = 0;    
foreach ($entries2 as $entry):
$i++;

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->nom_membre;
$designation_prenom = $membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->raison_sociale;
$designation_prenom = "";
  }




/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        $traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);



if ($traite->traite_imprimer == 2) {


//$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', $numero_opi, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $tpagcp->code_membre);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', $tpagcp->code_membre, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $designation_nom." ".$designation_prenom);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $designation_nom." ".$designation_prenom, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', substr($traite->traite_date_fin, 8, 2)."-".substr($traite->traite_date_fin, 5, 2)."-".substr($traite->traite_date_fin, 0, 4));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', substr($traite->traite_date_fin, 8, 2)."-".substr($traite->traite_date_fin, 5, 2)."-".substr($traite->traite_date_fin, 0, 4), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $traite->reference_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $traite->traite_montant);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.$y.'', $traite->traite_montant, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('F'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.$y.'', substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('G'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);



$total_montant += $tpagcp->mont_tranche;
}
$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "Total");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', number_format($total_montant,0,',',' '));

$objPHPExcel->getActiveSheet()->setTitle("FLOOZ");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
$objWriter->save(str_replace('.php', '.xls', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xls";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/FLOOZ_".$date_id->toString('dd-MM-yyyy')."_.xls";
$newnom = "FLOOZ_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xls';
$filena = $newnom.'.xls';
/**/



/*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}







public static function genererExcelTraiteTMONEY($entries2) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

/*$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setDescription("Export en excel les états quotidiens des OPI émis le ".(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setKeywords("")
                             ->setCategory("");*/

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(19);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(19);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(11);


$objPHPExcel->getActiveSheet()->setCellValue('A1', "NUMERO OPI");
$objPHPExcel->getActiveSheet()->setCellValue('B1', "CODE MEMBRE");
$objPHPExcel->getActiveSheet()->setCellValue('C1', "NOM & PRENOM(S) / RAISON SOCIALE");
$objPHPExcel->getActiveSheet()->setCellValue('D1', "ECHEANCE");
$objPHPExcel->getActiveSheet()->setCellValue('E1', "NUMERO DE TELEPHONE");
$objPHPExcel->getActiveSheet()->setCellValue('F1', "MONTANT");
$objPHPExcel->getActiveSheet()->setCellValue('G1', "DATE DEBUT");

$i = 0;
$y = 2;
$total_montant = 0;    
foreach ($entries2 as $entry):
$i++;

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->nom_membre;
$designation_prenom = $membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->raison_sociale;
$designation_prenom = "";
  }




/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        $traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    $tpagcpM->update($tpagcp);



if ($traite->traite_imprimer == 2) {


//$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', $numero_opi, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $tpagcp->code_membre);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', $tpagcp->code_membre, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $designation_nom." ".$designation_prenom);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $designation_nom." ".$designation_prenom, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', substr($traite->traite_date_fin, 8, 2)."-".substr($traite->traite_date_fin, 5, 2)."-".substr($traite->traite_date_fin, 0, 4));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', substr($traite->traite_date_fin, 8, 2)."-".substr($traite->traite_date_fin, 5, 2)."-".substr($traite->traite_date_fin, 0, 4), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $traite->reference_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $traite->traite_montant);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.$y.'', $traite->traite_montant, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('F'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

//$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.$y.'', substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('G'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);



$total_montant += $tpagcp->mont_tranche;
}
$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "Total");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', number_format($total_montant,0,',',' '));

$objPHPExcel->getActiveSheet()->setTitle("TMONEY");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
$objWriter->save(str_replace('.php', '.xls', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xls";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/TMONEY_".$date_id->toString('dd-MM-yyyy')."_.xls";
$newnom = "TMONEY_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xls';
$filena = $newnom.'.xls';
/**/



/*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}









  public static function genererPdfTraiteBanque1_jour($entries1, $code_banque, $datejour) {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date($datejour);

         $banque = new Application_Model_EuBanque();
         $banqueMapper = new Application_Model_EuBanqueMapper();
         $banqueMapper->find($code_banque, $banque);

$htmlpdf = "";
/**/
//backimgw="100%" backimgh="100%" backimg="'.Util_Utils::getParamEsmc(2).'images/OPI3.gif"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top" backbottom="10mm" >
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="5"><img src="https://esmcgie.com/sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="5" align="left"><strong><u>SECTION INTENDANCE & FINANCE</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"><div style="text-align: center; border: solid 2px #000000; width:175px; margin: 3px;"><strong>'.$banque->libelle_banque.'</strong></div></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5">Messieurs, <br />
    Par le débit de notre compte '.$banque->compte_banque.' en vos livres veuillez effectuer les prélèvements irrévocables ci-après aux bénéficiaires suivant les références des OPI à date de valeur « '.datefr($date_id->toString('yyyy-MM-dd')).' »</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
        <tr>
                <td align="center" style="border:#000 1px solid;"><strong>N°</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>O.P.I. n°</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>ECHEANCE</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>BENEFICIAIRE - CONTACT - CPTE BANCAIRE</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>MONTANT</strong></td>
        </tr>';
$total_montant = 0;
$i = 0;
foreach ($entries1 as $entry):

$i++;
         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);






/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        ////$traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    //$tpagcpM->update($tpagcp);


    


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }

if ($traite->traite_imprimer == 2) {

$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($tpagcp->code_membre);
$portable_membre = "";
if(count($telephone) > 0){
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);
}

$htmlpdf .= '
        <tr>
                <td align="right" style="border:#000 1px solid;">'.$i.'</td>
                <td align="left" style="border:#000 1px solid;">'.$numero_opi2.'</td>
                <td align="center" style="border:#000 1px solid;">'.datefr($traite->traite_date_fin).'</td>
                <td align="left" style="border:#000 1px solid;">'.$designation_membre.'<br />'.$traite->mode_paiement.':'.$traite->reference_paiement.' - Cel.:'.$portable_membre.'</td>
                <td align="right" style="border:#000 1px solid;">'.number_format($traite->traite_montant,0,',',' ').'</td>
        </tr>';
$total_montant += $traite->traite_montant;
}
endforeach;
$htmlpdf .= '
        <tr>
                <td align="right" colspan="4" style="border:#000 1px solid;">Total</td>
                <td align="right" style="border:#000 1px solid;">'.number_format($total_montant,0,',',' ').'</td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="4">Arrêté le présent bordereau à la somme de ('.number_format($total_montant,0,',',' ').' FCFA) '.Util_Utils::lettre($total_montant, 0).' CFA</td>
    <td align="right">Signature du donneur d\'ordre <br />
    <img src="https://esmcgie.com/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>
';
$htmlpdf .= '
  <tr>
    <td colspan="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
';


/*  <tr>
    <td colspan="5" align="right">Signature du donneur d\'ordre <br />
    <img src="https://esmcgie.com/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>

$htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';

copy('/var/www/html/mcnp/public/traite.html', '/var/www/html/mcnp/public/traite'.$code_banque.'.html');
////////////////////////////////////////////////////////////////////////////////
$filename = '/var/www/html/mcnp/public/traite'.$code_banque.'.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("/var/www/html/webfiles/pdf_traite/")) {
mkdir("/var/www/html/webfiles/pdf_traite/", 0777);
}

$newfile = "/var/www/html/webfiles/pdf_traite/ETAT_OPI_JOUR_1_".$code_banque."_".$date_id->toString('dd-MM-yyyy').".html";
$newnom = "ETAT_OPI_JOUR_1_".$code_banque."_".$date_id->toString('dd-MM-yyyy');
$newchemin = "/var/www/html/webfiles/pdf_traite/";

copy($file, $newfile);

    ob_start();
    include($newfile);//dirname(__FILE__).'/'.
    $content = ob_get_clean();

    // convert to PDF
    require_once('/var/www/html/mcnp/public/html2pdf/html2pdf.class.php');//dirname(__FILE__).
    try
    {
        $html2pdf = new HTML2PDF('L', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        /*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        //return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/


}
















  public static function genererPdfTraiteBanque2_jour($entries1, $code_banque, $datejour) {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date($datejour);

         $banque = new Application_Model_EuBanque();
         $banqueMapper = new Application_Model_EuBanqueMapper();
         $banqueMapper->find($code_banque, $banque);

$htmlpdf = "";
/**/
//backimgw="100%" backimgh="100%" backimg="'.Util_Utils::getParamEsmc(2).'images/OPI3.gif"
$htmlpdf .= '
    <page  backimgx="center" backimgy="top" backbottom="10mm" >
    ';

$htmlpdf .= '
<page_footer>
<table>
    <tr>
        <td align="center">
            <hr>
            <strong>Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO</strong><br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <strong>Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com</strong>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        </td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="738" border="0">
<tbody>
  <tr>
    <td colspan="5"><img src="https://esmcgie.com/sm_images/Entete-de-page-SM.png" width="738" height="105" /></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="5" align="left"><strong><u>SECTION INTENDANCE & FINANCE</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"><div style="text-align: center; border: solid 2px #000000; width:175px; margin: 3px;"><strong>'.$banque->libelle_banque.'</strong></div></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5">Messieurs, <br />
    Par le débit de notre compte '.$banque->compte_banque.' en vos livres veuillez effectuer les prélèvements irrévocables ci-après aux bénéficiaires suivant les références des OPI à date de valeur « '.datefr($date_id->toString('yyyy-MM-dd')).' » à <strong> vos confères</strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
        <tr>
                <td align="center" style="border:#000 1px solid;"><strong>N°</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>O.P.I. n°</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>ECHEANCE</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>BENEFICIAIRE - CONTACT - CPTE BANCAIRE</strong></td>
                <td align="center" style="border:#000 1px solid;"><strong>MONTANT</strong></td>
        </tr>';
$total_montant = 0;
$i = 0;
foreach ($entries1 as $entry):

$i++;
         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);






/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        ////$traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    //$tpagcpM->update($tpagcp);


    


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }

if ($traite->traite_imprimer == 2) {

$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($tpagcp->code_membre);
$portable_membre = "";
if(count($telephone) > 0){
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);
}

$htmlpdf .= '
        <tr>
                <td align="right" style="border:#000 1px solid;">'.$i.'</td>
                <td align="left" style="border:#000 1px solid;">'.$numero_opi2.'</td>
                <td align="center" style="border:#000 1px solid;">'.datefr($traite->traite_date_fin).'</td>
                <td align="left" style="border:#000 1px solid;">'.$designation_membre.'<br />'.$traite->mode_paiement.':'.$traite->reference_paiement.' - Cel.:'.$portable_membre.'</td>
                <td align="right" style="border:#000 1px solid;">'.number_format($traite->traite_montant,0,',',' ').'</td>
        </tr>';
$total_montant += $traite->traite_montant;
}
endforeach;
$htmlpdf .= '
        <tr>
                <td align="right" colspan="4" style="border:#000 1px solid;">Total</td>
                <td align="right" style="border:#000 1px solid;">'.number_format($total_montant,0,',',' ').'</td>
        </tr>';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="4">Arrêté le présent bordereau à la somme de ('.number_format($total_montant,0,',',' ').' FCFA) '.Util_Utils::lettre($total_montant, 0).' CFA</td>
    <td align="right">Signature du donneur d\'ordre <br />
    <img src="https://esmcgie.com/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>
';
$htmlpdf .= '
  <tr>
    <td colspan="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  
';


/*<tr>
    <td colspan="5" align="right">Signature du donneur d\'ordre <br />
    <img src="https://esmcgie.com/sm_images/Logo-signature.png" width="150" height="88" /><br />
<em><u>Date </u>: </em> &nbsp;&nbsp;&nbsp;&nbsp; <strong><em>'.datefr($date_id->toString('yyyy-MM-dd')).'</em></strong></td>
  </tr>

  $htmlpdf .= '
  <tr>
    <td align="center" colspan="4">
    <hr>
    Siège : Angle rues, Sagouda, Kiyéou et Bandjéli, Wuiti-Atsati  03 B.P. :30038 LOME-TOGO<br />
Tél. : +(228) 22 26 60 09 / E-mail : esmc@esmcgie.com / Site Web : www.esmcgie.com
</td>
  </tr>
';*/

$htmlpdf .= '
</tbody>
</table>
</page>
';

copy('/var/www/html/mcnp/public/traite.html', '/var/www/html/mcnp/public/traite'.$code_banque.'2.html');
////////////////////////////////////////////////////////////////////////////////
$filename = '/var/www/html/mcnp/public/traite'.$code_banque.'2.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("/var/www/html/webfiles/pdf_traite/")) {
mkdir("/var/www/html/webfiles/pdf_traite/", 0777);
}

$newfile = "/var/www/html/webfiles/pdf_traite/ETAT_OPI_JOUR_2_".$code_banque."_".$date_id->toString('dd-MM-yyyy').".html";
$newnom = "ETAT_OPI_JOUR_2_".$code_banque."_".$date_id->toString('dd-MM-yyyy');
$newchemin = "/var/www/html/webfiles/pdf_traite/";

copy($file, $newfile);

    ob_start();
    include($newfile);//dirname(__FILE__).'/'.
    $content = ob_get_clean();

    // convert to PDF
    require_once('/var/www/html/mcnp/public/html2pdf/html2pdf.class.php');//dirname(__FILE__).
    try
    {
        $html2pdf = new HTML2PDF('L', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        /*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        //return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/


}






public static function genererExcelTraite_jour($entries3, $datejour) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date($datejour);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setDescription("Export en excel les états quotidiens des OPI émis le ".(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(37);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(10);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
$objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
$objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(12);

$objPHPExcel->getActiveSheet()->setCellValue('A1', "SECTION INTENDANCE & FINANCE");

$objPHPExcel->getActiveSheet()->setCellValue('A3', "BORDEREAU DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."");

$objPHPExcel->getActiveSheet()->setCellValue('A6', "O.P.I. n°");
$objPHPExcel->getActiveSheet()->setCellValue('B6', "ECHEANCE");
$objPHPExcel->getActiveSheet()->setCellValue('C6', "BANQUE E.");
$objPHPExcel->getActiveSheet()->setCellValue('D6', "COMPTE BANCAIRE E.");
$objPHPExcel->getActiveSheet()->setCellValue('E6', "BENEFICIAIRE");
$objPHPExcel->getActiveSheet()->setCellValue('F6', "CONTACT");
$objPHPExcel->getActiveSheet()->setCellValue('G6', "BANQUE R.");
$objPHPExcel->getActiveSheet()->setCellValue('H6', "COMPTE BANCAIRE R.");
$objPHPExcel->getActiveSheet()->setCellValue('I6', "MONTANT");


$y = 7;
$total_montant = 0;    
foreach ($entries3 as $entry):

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);


         $detail_tpagcpM = new Application_Model_EuDetailTpagcpMapper();
         $detail_tpagcp = $detail_tpagcpM->findDetailTpagcpTpagcp($id_tpagcp);

    


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }


/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        //$traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(1);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        //$tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        //$tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    //$tpagcpM->update($tpagcp);


if ($traite->traite_imprimer == 1) {

$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($tpagcp->code_membre);
$portable_membre = "";
if(count($telephone) > 0){
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);
}

if($traite->mode_paiement == "WARI"){
        $traite_date_fin_1 = new Zend_Date($traite->traite_date_fin);
        //$traite_date_fin_1->add('1', Zend_Date::DAY_SHORT);
        //$traite_date_fin_1->addDay(1);

//$messageopi = "Votre OPI No ".substr($numero_opi, 2, (strlen($numero_opi) - 2))." est echu. Merci de vous presenter à un poste WARI le jour suivant. ESMC";//après ".$traite_date_fin_1->toString('dd-MM-yyyy')."
$messageopi = "Votre OPI No ".$numero_opi2." est echu. Merci d'attendre le message de sa disponibilité. ESMC";
//$messageopi = "Votre OPI No ".substr($numero_opi, 2, (strlen($numero_opi) - 2))." est echu. Merci d'attendre le message de sa disponibilité. ESMC";//après ".$traite_date_fin_1->toString('dd-MM-yyyy')."
}else if($traite->mode_paiement == "FAIP"){
$messageopi = "Votre OPI No ".$numero_opi." est echu. Merci de verifier le virement sur votre compte FAIP-TOGO. ESMC";
}else{
//$messageopi = "Votre OPI No ".$numero_opi2." est echu. Merci d'attendre le message de virement sur votre compte. ESMC";
$messageopi = "Votre OPI No ".$numero_opi2." est echu. Merci d'attendre le message de sa disponibilité. ESMC";
}
$telephone2M = new Application_Model_EuTelephoneMapper();
$telephone2 = $telephone2M->findByCodeMembre($tpagcp->code_membre);
if($telephone2 > 0){
    
if($traite->mode_paiement == "WARI"){
$phone = $traite->reference_paiement;
}else{
$phone = $telephone2->numero_telephone;
}

$compteur = Util_Utils::findConuter() + 1;
/////Util_Utils::addSms2($compteur, $phone, $messageopi);
//Util_Utils::addSms3Easys($compteur, $phone, $messageopi);
}
/*if($telephone2->compagnie_telephone == "TOGOCEL"){
Util_Utils::addSms4($compteur, $telephone2->numero_telephone, $messageopi);
}else if($telephone2->compagnie_telephone == "MOOV"){
Util_Utils::addSmsMoov($compteur, $telephone2->numero_telephone, $messageopi);
}*/




$banque = new Application_Model_EuBanque();
$banqueM = new Application_Model_EuBanqueMapper();
$banqueM->find($traite->traite_code_banque, $banque);


//$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi2);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', $numero_opi2, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', ($traite->traite_date_fin));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', ($traite->traite_date_fin), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $traite->traite_code_banque);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $traite->traite_code_banque, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $banque->compte_banque);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', $banque->compte_banque, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $designation_membre);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $designation_membre, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
if($portable_membre != ""){
//$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $portable_membre);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.$y.'', $portable_membre, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('F'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
}
//$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $traite->mode_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.$y.'', $traite->mode_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('G'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', $traite->reference_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('H'.$y.'', $traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('H'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', $traite->traite_montant);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('I'.$y.'', $traite->traite_montant, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('I'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$total_montant += $traite->traite_montant;
}
$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('D'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('E'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('F'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('G'.($y+1).'', "");

//$objPHPExcel->getActiveSheet()->setCellValue('H'.($y+1).'', "Total");
$objPHPExcel->getActiveSheet()->setCellValueExplicit('H'.($y+1).'', "Total", PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('H'.($y+1).'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('I'.($y+1).'', $total_montant);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('I'.($y+1).'', $total_montant, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('I'.($y+1).'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setTitle("ETATS OPI");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xlsx";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/OPI_JOUR_".$date_id->toString('dd-MM-yyyy')."_.xlsx";
$newnom = "OPI_JOUR_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/



/*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}









public static function genererExcelTraiteWari_jour($entries2, $datejour) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date($datejour);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

/*$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setDescription("Export en excel les états quotidiens des OPI émis le ".(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setKeywords("")
                             ->setCategory("");*/

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(9);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(9);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(9);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(9);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(9);


$objPHPExcel->getActiveSheet()->setCellValue('A1', "MATRICULE");
$objPHPExcel->getActiveSheet()->setCellValue('B1', "AMOUNT");
$objPHPExcel->getActiveSheet()->setCellValue('C1', "TELEPHONE");
$objPHPExcel->getActiveSheet()->setCellValue('D1', "NOM");
$objPHPExcel->getActiveSheet()->setCellValue('E1', "PRENOM");


$y = 2;
$total_montant = 0;    
foreach ($entries2 as $entry):

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->nom_membre;
$designation_prenom = $membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->raison_sociale;
$designation_prenom = "";
  }




/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        ////$traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    //$tpagcpM->update($tpagcp);



if ($traite->traite_imprimer == 2) {

/////////////////////////tarif wari/////////////
        $tarif_M = new Application_Model_EuTarifMapper();
        $tarif = $tarif_M->fetchAllByMontantTarifMode($tpagcp->mont_tranche, "WARI");
        $montant_wari = $tpagcp->mont_tranche - $tarif->montant_tarif;





//$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', substr($numero_opi, 2, (strlen($numero_opi) - 2)));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', substr($numero_opi, 2, (strlen($numero_opi) - 2)), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $montant_wari);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', $montant_wari, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', '+'.$traite->reference_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', '+'.$traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $designation_nom);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', $designation_nom, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $designation_prenom);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $designation_prenom, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);



$total_montant += $tpagcp->mont_tranche;
}
$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "Total");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', number_format($total_montant,0,',',' '));

$objPHPExcel->getActiveSheet()->setTitle("Wari");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
$objWriter->save(str_replace('.php', '.xls', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xls";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/Marchand_DEC_362437_JOUR_".$date_id->toString('dd-MM-yyyy')."_.xls";
$newnom = "Marchand_DEC_362437_JOUR_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xls';
$filena = $newnom.'.xls';
/**/



/*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}









public static function genererExcelTraiteFAIP_jour($entries2, $datejour) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date($datejour);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

/*$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setDescription("Export en excel les états quotidiens des OPI émis le ".(datefr($date_id->toString('yyyy-MM-dd')))."")
                             ->setKeywords("")
                             ->setCategory("");*/

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(19);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(11);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(11);


$objPHPExcel->getActiveSheet()->setCellValue('A1', "NUM_LIGNE");
$objPHPExcel->getActiveSheet()->setCellValue('B1', "NUM_COMPTE");
$objPHPExcel->getActiveSheet()->setCellValue('C1', "DESCRIPTION LIGNE");
$objPHPExcel->getActiveSheet()->setCellValue('D1', "MTT_DEB");
$objPHPExcel->getActiveSheet()->setCellValue('E1', "MTT_CRD");

$i = 0;
$y = 2;
$total_montant = 0;    
foreach ($entries2 as $entry):
$i++;

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi = substr($tpagcp->code_membre, 9, -1).$traite->traite_id;
    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->nom_membre;
$designation_prenom = $membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_nom = $membre->raison_sociale;
$designation_prenom = "";
  }




/*$traite = new Application_Model_EuTraite();
        $traiteM = new Application_Model_EuTraiteMapper();
        $traiteM->find($id, $traite);*/

        //$traite->setMode_paiement($code_banque);
        //$traite->setReference_paiement($num_compte_bancaire);
        ////$traite->setTraite_numero($numero_opi);
        $traite->setTraite_imprimer(2);
    $traiteM->update($traite);

/*$tpagcp = new Application_Model_EuTpagcp();
        $tpagcpM = new Application_Model_EuTpagcpMapper();
        $tpagcpM->find($traite->traite_tegcp, $tpagcp);*/

        $tpagcp->setReste_ntf($tpagcp->getReste_ntf() - 1);
        $tpagcp->setSolde($tpagcp->getSolde() - $tpagcp->getMont_tranche());
    //$tpagcpM->update($tpagcp);



if ($traite->traite_imprimer == 2) {


$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $i);
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', $i, PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $traite->reference_paiement);
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', $traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $numero_opi." - ".$designation_nom." ".$designation_prenom);
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $numero_opi." - ".$designation_nom." ".$designation_prenom, PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', '');
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', '', PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $tpagcp->mont_tranche);
//$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $tpagcp->mont_tranche, PHPExcel_Cell_DataType::TYPE_STRING);
//$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);



$total_montant += $tpagcp->mont_tranche;
}
$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "Total");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', number_format($total_montant,0,',',' '));

$objPHPExcel->getActiveSheet()->setTitle("FAIP");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
$objWriter->save(str_replace('.php', '.xls', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xls";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/FAIP_TOGO_JOUR_".$date_id->toString('dd-MM-yyyy')."_.xls";
$newnom = "FAIP_TOGO_JOUR_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xls';
$filena = $newnom.'.xls';
/**/



/*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

}


















public static function genererExcelTraiteListe($entries3) {

           ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
$date_id = new Zend_Date(Zend_Date::ISO_8601);


require_once 'PHPExcel/PHPExcel.php';
        
//////////////////////////////

$objPHPExcel = new PHPExcel();

$objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy("ESMC")
                             ->setTitle("SECTION INTENDANCE & FINANCE")
                             ->setSubject("ETAT DES OPI EMIS")
                             ->setDescription("Export en excel les états quotidiens des OPI émis")
                             ->setKeywords("")
                             ->setCategory("");

$objPHPExcel->setActiveSheetIndex(0);                                         

$objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(37);
$objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(12);
$objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(50);
$objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(25);
$objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(10);
$objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(15);
$objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(15);

$objPHPExcel->getActiveSheet()->setCellValue('A1', "SECTION INTENDANCE & FINANCE");

$objPHPExcel->getActiveSheet()->setCellValue('A3', "BORDEREAU DES OPI EMIS LE ".strtoupper(datefr($date_id->toString('yyyy-MM-dd')))."");

$objPHPExcel->getActiveSheet()->setCellValue('A6', "O.P.I. n°");
$objPHPExcel->getActiveSheet()->setCellValue('B6', "ECHEANCE");
$objPHPExcel->getActiveSheet()->setCellValue('C6', "BENEFICIAIRE");
$objPHPExcel->getActiveSheet()->setCellValue('D6', "CONTACT");
$objPHPExcel->getActiveSheet()->setCellValue('E6', "BANQUE");
$objPHPExcel->getActiveSheet()->setCellValue('F6', "CPTE BANCAIRE");
$objPHPExcel->getActiveSheet()->setCellValue('G6', "MONTANT");

$y = 7;
$total_montant = 0;    
foreach ($entries3 as $entry):

         $traite = new Application_Model_EuTraite();
         $traiteM = new Application_Model_EuTraiteMapper();
         $traiteM->find($entry->traite_id, $traite);

         $id_tpagcp = $traite->traite_tegcp;

         $tpagcp = new Application_Model_EuTpagcp();
         $tpagcpM = new Application_Model_EuTpagcpMapper();
         $tpagcpM->find($id_tpagcp, $tpagcp);


    $numero_opi2 = substr($tpagcp->code_membre, 9, -1).$traite->traite_id."/".Util_Utils::ajoute1zero($traite->traiter)."-".$tpagcp->ntf."/".substr($tpagcp->date_deb, 8, 2)."-".substr($tpagcp->date_deb, 5, 2)."-".substr($tpagcp->date_deb, 0, 4);
    


  if (substr($tpagcp->code_membre, -1) == "P") {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->nom_membre." ".$membre->prenom_membre;
  } else if (substr($tpagcp->code_membre, -1) == "M") {
$membre = new Application_Model_EuMembreMorale();
$membreM = new Application_Model_EuMembreMoraleMapper();
$membreM->find($tpagcp->code_membre, $membre);
$designation_membre = $membre->raison_sociale;
  }


$telephoneM = new Application_Model_EuTelephoneMapper();
$telephone = $telephoneM->fetchAllByCodeMembre($tpagcp->code_membre);
$portable_membre = "";
if(count($telephone) > 0){
foreach ($telephone as $telephonevalue) {
$portable_membre .= $telephonevalue->numero_telephone." / ";
}
$portable_membre = substr($portable_membre, 0, -3);
}



$banque = new Application_Model_EuBanque();
$banqueM = new Application_Model_EuBanqueMapper();
$banqueM->find($traite->traite_code_banque, $banque);


//$objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $numero_opi2);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('A'.$y.'', $numero_opi2, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('A'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', ($traite->traite_date_fin));
$objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$y.'', ($traite->traite_date_fin), PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('B'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $designation_membre);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('C'.$y.'', $designation_membre, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('C'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $portable_membre);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('D'.$y.'', $portable_membre, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('D'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
//$objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', $traite->mode_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('E'.$y.'', $traite->mode_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('E'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
if($portable_membre != ""){
//$objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', $traite->reference_paiement);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('F'.$y.'', $traite->reference_paiement, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('F'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);
}
//$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', $traite->traite_montant);
$objPHPExcel->getActiveSheet()->setCellValueExplicit('G'.$y.'', $traite->traite_montant, PHPExcel_Cell_DataType::TYPE_STRING);
$objPHPExcel->getActiveSheet()->getStyle('G'.$y.'')->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_TEXT);

$total_montant += $traite->traite_montant;

$y++;   
endforeach;

//$objPHPExcel->getActiveSheet()->setCellValue('A'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('B'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('C'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('D'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('E'.($y+1).'', "");
//$objPHPExcel->getActiveSheet()->setCellValue('F'.($y+1).'', "Total");
//$objPHPExcel->getActiveSheet()->setCellValue('G'.($y+1).'', $total_montant);

$objPHPExcel->getActiveSheet()->setTitle("ETATS OPI");
$objPHPExcel->setActiveSheetIndex(0);


$callStartTime = microtime(true);

$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
$objWriter->save(str_replace('.php', '.xlsx', __FILE__));
$callEndTime = microtime(true);
$callTime = $callEndTime - $callStartTime;

////////////////////////////////////////////////////////////////////////////

$file = "/var/www/html/mcnp/application/util/Utils.xlsx";

if (!is_dir("/var/www/html/webfiles/excel_exports/OPI/")) {
mkdir("/var/www/html/webfiles/excel_exports/OPI/", 0777);
}/**/
/*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

$newfile = "/var/www/html/webfiles/excel_exports/OPI/OPI_EXPORT_".$date_id->toString('dd-MM-yyyy')."_.xlsx";
$newnom = "OPI_EXPORT_".$date_id->toString('dd-MM-yyyy')."_";
$newchemin = "/var/www/html/webfiles/excel_exports/OPI/";

copy($file, $newfile);

unlink($file);

$file = $newchemin.$newnom.'.xlsx';
$filena = $newnom.'.xlsx';
/**/



    /*if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }*/
        return str_replace("/var/www/html/webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

   }



    public static function genererExcelCommandeToday($code_membre_vendeur,$code_tegc,$date_debut,$date_fin,$commander)  {
		$sessionmembre = new Zend_Session_Namespace('membre');
        ini_set('memory_limit', '512M');
		
		$t_commande = new Application_Model_DbTable_EuDetailCommande();
        $select = $t_commande->select();
		
		if($code_membre_vendeur != "") {
           $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE code_membre_vendeur LIKE '".$code_membre_vendeur."')");
        }
        if($code_tegc != "") {
           $select->where("reference IN (SELECT reference FROM eu_article_stockes WHERE categorie LIKE '".$code_tegc."')");
        }
		
		$select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande >= '".$date_debut."')");
		$select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande <= '".$date_fin."')");
		
		$select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE executer = 1)");
        if($commander == "") {
			
        } else if($commander == 0) {
           $select->where("commander = ".$commander."");
        } else if($commander > 0) {
           $select->where("commander >= ".$commander."");        
        }
		
		
        $entries = $t_commande->fetchAll($select);

        $entries2 = $entries;

        require_once 'PHPExcel/PHPExcel.php';
        
        //////////////////////////////

        $objPHPExcel = new PHPExcel();

        $objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionmembre->code_membre)
                             ->setTitle($sessionmembre->nom_membre." ".$sessionmembre->prenom_membre)
                             ->setSubject("Liste des articles commandés journalièrement")
                             ->setDescription("Export en excel de la liste des articles commandés journalièrement")
                             ->setKeywords("")
                             ->setCategory("");

        $objPHPExcel->setActiveSheetIndex(0);                                         

        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

        $objPHPExcel->getActiveSheet()->getStyle('A1:F1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $objPHPExcel->getActiveSheet()->setCellValue('A1', "Liste des commandes du ".datefr5($date_debut)." à ".datefr5($date_fin)." de ".$designation."");
        $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


        $objPHPExcel->getActiveSheet()->setCellValue('A2', "Date");
        $objPHPExcel->getActiveSheet()->setCellValue('B2', "Code Membre");
        $objPHPExcel->getActiveSheet()->setCellValue('C2', "Nom & prenom(s) / Raison sociale");
        $objPHPExcel->getActiveSheet()->setCellValue('D2', "Désignation");
        $objPHPExcel->getActiveSheet()->setCellValue('E2', "Quantité");
        $objPHPExcel->getActiveSheet()->setCellValue('F2', "Prix");
        //$objPHPExcel->getActiveSheet()->setCellValue('G2', "Commander");
        $objPHPExcel->getActiveSheet()->setCellValue('H2', "Complement");

        $objPHPExcel->getActiveSheet()->getStyle('A2:F2')->applyFromArray(array('font' => array('bold' => true)));

        $alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $j = 7;

        $y = 3;
        if(count($entries) > 0)  {
            foreach($entries as $entry):
                $commandeM = new Application_Model_EuCommandeMapper();
                $commande = new Application_Model_EuCommande();
                $commandeM->find($entry->code_commande, $commande);

                $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $commande->date_commande);
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $commande->code_membre_acheteur);
                if(substr($commande->code_membre_acheteur, -1) == "P") {
                    $membreM = new Application_Model_EuMembreMapper();
                    $membre = new Application_Model_EuMembre();
                    $membreM->find($commande->code_membre_acheteur, $membre);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $membre->nom_membre." ".$membre->prenom_membre);
                    $email = $membre->email_membre;
                } else {
                    $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                    $membremorale = new Application_Model_EuMembreMorale();
                    $membremoraleM->find($commande->code_membre_acheteur, $membremorale);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $membremorale->raison_sociale);
                    $email = $membremorale->email_membre;
                }
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->designation);

                $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', ($entry->qte));
                $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', ($entry->qte * $entry->prix_unitaire));

                //$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', ($entry->commander + 1)." fois");


                $detail_commande_additif = new Application_Model_EuDetailCommandeAdditifMapper();
                $entries3 = $detail_commande_additif->fetchAllByDetailCommande($entry->id_detail_commande);
                if(count($entries3) > 0) {
                      $reference_additif_texte = "";
                    foreach($entries3 as $entry3){
                        $article_stockes_additif = new Application_Model_EuArticleStockesAdditif();
                        $m_article_stockes_additif = new Application_Model_EuArticleStockesAdditifMapper();
                        $m_article_stockes_additif->find($entry3->id_article_stockes_additif, $article_stockes_additif);

                      $reference_additif_texte .= $article_stockes_additif->nom_article_stockes_additif." : ".$entry3->reference_additif."\n";
                        //$j++;
                    }
                        $objPHPExcel->getActiveSheet()->getColumnDimension(''.$alphabet[$j].'')->setWidth(20);
                        $objPHPExcel->getActiveSheet()->setCellValue(''.$alphabet[$j].''.$y.'', $reference_additif_texte);
                }

                $detailcommandeM = new Application_Model_EuDetailCommandeMapper();
                $detailcommande = new Application_Model_EuDetailCommande();
                $detailcommandeM->find($entry->id_detail_commande, $detailcommande);

                $detailcommande->setCommander($detailcommande->commander + 1);
                $detailcommandeM->update($detailcommande);

                $y++;   
                endforeach;
            }
			
            $objPHPExcel->getActiveSheet()->setTitle("Liste des commandes");
            $objPHPExcel->setActiveSheetIndex(0);
            
            $callStartTime = microtime(true);

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
            $callEndTime = microtime(true);
            $callTime = $callEndTime - $callStartTime;

            ////////////////////////////////////////////////////////////////////////////

            $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

            if(!is_dir("../../webfiles/excel_exports/ARTICLES_COMMANDES/")) {
                mkdir("../../webfiles/excel_exports/ARTICLES_COMMANDES/", 0777);
            }
			
			/**/
            /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

            $newfile = "../../webfiles/excel_exports/ARTICLES_COMMANDES/ARTICLES_COMMANDES_".$date_debut."_".$code_membre_vendeur."_".$designation."_.xlsx";
            $newnom = "ARTICLES_COMMANDES_".$date_debut."_".$code_membre_vendeur."_".$designation."_";
            $newchemin = "../../webfiles/excel_exports/ARTICLES_COMMANDES/";

            copy($file, $newfile);

            unlink($file);

            $file = $newchemin.$newnom.'.xlsx';
            $filena = $newnom.'.xlsx';
			
            /**/

            if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
            } else {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
            }
            return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/
		
	}



    public static function genererExcelCommande($code_membre_vendeur, $date_debut, $date_fin, $code_tegc, $commander) {

        $sessionmembre = new Zend_Session_Namespace('membre');
        ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        //$date_debut = $request->getParam("date_debut");
        //$date_fin = $request->getParam("date_fin");

        //$date_id = new Zend_Date(Zend_Date::ISO_8601);
        //$date_fin = new Zend_Date($date_fin);
        //$date_fin->addDay(1);
        /*
        $t_commande = new Application_Model_DbTable_EuDetailCommande();
        $select = $t_commande->select();
        if($code_membre_vendeur != "") {
           $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE code_membre_vendeur LIKE '".$code_membre_vendeur."')");
        }
		$select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE type_bon LIKE 'BAN')");
		
        if($code_tegc != ""){
           //$select->where("reference IN (SELECT reference FROM eu_article_stockes WHERE categorie LIKE '".$code_tegc."')");
        }
        if($date_debut != "") {
            //$select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande BETWEEN '".$date_debut."' AND '".$date_fin."')");
            $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande >= '".$date_debut."')");
		    $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande <= '".$date_fin->toString('yyyy-MM-dd')."')");
		}
        $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE executer = 1)");
        */
		/*
		if($commander == "") {
        } else if($commander == 0) {
          $select->where("commander = ".$commander."");
        } else if($commander > 0) {
          $select->where("commander >= ".$commander."");        
        }
		*/
		
		//$select->where("livrer = ?",0);
		
		
		$date_fin = new Zend_Date($date_fin);
		$date_op = $date_fin;
		$date_fin->addDay(1);
		
		$t_commande = new Application_Model_DbTable_EuDetailCommande();
		$select = $t_commande->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		$select->setIntegrityCheck(false);
		$select->join('eu_commande', 'eu_commande.code_commande = eu_detail_commande.code_commande');
		
		if($code_membre_vendeur != "")  {
			$select->where('eu_commande.code_membre_vendeur like ?',$code_membre_vendeur);
		}
		$select->where('eu_commande.type_bon like ?',"BAN");
		
		if($code_tegc != "") {
			
		}
		$select->where('(eu_commande.date_commande >= ?',$date_debut)
		       ->where('eu_commande.date_commande <= ?)',$date_fin->toString('yyyy-MM-dd'));
		$select->where('eu_commande.executer = ?',1);
		$select->where("eu_detail_commande.livrer = ?",0);
		
        $entries = $t_commande->fetchAll($select);

        $entries2 = $entries;

        require_once 'PHPExcel/PHPExcel.php';
        
        //////////////////////////////

        $objPHPExcel = new PHPExcel();

        $objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionmembre->code_membre)
                             ->setTitle($sessionmembre->nom_membre." ".$sessionmembre->prenom_membre)
                             ->setSubject("Liste des articles commandés")
                             ->setDescription("Export en excel de la liste des articles commandés")
                             ->setKeywords("")
                             ->setCategory("");

        $objPHPExcel->setActiveSheetIndex(0);                                         

        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

        $objPHPExcel->getActiveSheet()->getStyle('A1:F1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $objPHPExcel->getActiveSheet()->setCellValue('A1', "Liste des commandes du ".datefr5($date_debut)." à ".datefr5($date_fin)." de ".$designation."");
        $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


        $objPHPExcel->getActiveSheet()->setCellValue('A2', "Date");
        $objPHPExcel->getActiveSheet()->setCellValue('B2', "Code Membre");
        $objPHPExcel->getActiveSheet()->setCellValue('C2', "Nom & prenom(s) / Raison sociale");
        $objPHPExcel->getActiveSheet()->setCellValue('D2', "Désignation");
        $objPHPExcel->getActiveSheet()->setCellValue('E2', "Quantité");
        $objPHPExcel->getActiveSheet()->setCellValue('F2', "Montant Commandé");
        $objPHPExcel->getActiveSheet()->setCellValue('G2', "Numéro Carte");
        //$objPHPExcel->getActiveSheet()->setCellValue('H2', "Complement");

        $objPHPExcel->getActiveSheet()->getStyle('A2:G2')->applyFromArray(array('font' => array('bold' => true)));

        $alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $j = 7;

        $y = 3;
		$montanttotal = 0;
		if(count($entries) > 0) {
			foreach($entries as $entry) :
			   $articleM = new Application_Model_EuArticleStockesMapper();
               $articlefound = $articleM->fectchByReference(trim($entry->reference)) ;
			   if(($articlefound != NULL) && ($articlefound->categorie == $code_tegc)) {
			     $montanttotal = $montanttotal + ($entry->qte * $entry->prix_unitaire);
			   }
			endforeach;
		}
		
        if(count($entries) > 0)  {
            foreach($entries as $entry):
			  $articleM = new Application_Model_EuArticleStockesMapper();
              $articlefound = $articleM->fectchByReference(trim($entry->reference)) ;
			  if(($articlefound != NULL) && ($articlefound->categorie == $code_tegc)) {
                $commandeM = new Application_Model_EuCommandeMapper();
                $commande = new Application_Model_EuCommande();
                $commandeM->find($entry->code_commande, $commande);

                $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $commande->date_commande);
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $commande->code_membre_acheteur);
                if(substr($commande->code_membre_acheteur, -1) == "P") {
                    $membreM = new Application_Model_EuMembreMapper();
                    $membre = new Application_Model_EuMembre();
                    $membreM->find($commande->code_membre_acheteur, $membre);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $membre->nom_membre." ".$membre->prenom_membre);
                    $email = $membre->email_membre;
                } else {
                    $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                    $membremorale = new Application_Model_EuMembreMorale();
                    $membremoraleM->find($commande->code_membre_acheteur, $membremorale);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $membremorale->raison_sociale);
                    $email = $membremorale->email_membre;
                }
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->designation);

                $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', ($entry->qte));
                $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', ($entry->qte * $entry->prix_unitaire));

                //$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', ($entry->commander + 1)." fois");


                $detail_commande_additif = new Application_Model_EuDetailCommandeAdditifMapper();
                $entries3 = $detail_commande_additif->fetchAllByDetailCommande($entry->id_detail_commande);
                if(count($entries3) > 0) {
                      $reference_additif_texte = "";
                    foreach($entries3 as $entry3){
                        $article_stockes_additif = new Application_Model_EuArticleStockesAdditif();
                        $m_article_stockes_additif = new Application_Model_EuArticleStockesAdditifMapper();
                        $m_article_stockes_additif->find($entry3->id_article_stockes_additif, $article_stockes_additif);

                      $reference_additif_texte .= $article_stockes_additif->nom_article_stockes_additif." : ".$entry3->reference_additif."\n";
                        //$j++;
                    }
                        //$objPHPExcel->getActiveSheet()->getColumnDimension(''.$alphabet[$j].'')->setWidth(20);
                        //$objPHPExcel->getActiveSheet()->setCellValue(''.$alphabet[$j].''.$y.'', $reference_additif_texte);
						$objPHPExcel->getActiveSheet()->getColumnDimension('G'.$y)->setWidth(20);
						$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',$reference_additif_texte);
                }


                $detailcommandeM = new Application_Model_EuDetailCommandeMapper();
                $detailcommande = new Application_Model_EuDetailCommande();
                $detailcommandeM->find($entry->id_detail_commande, $detailcommande);

                $detailcommande->setCommander($detailcommande->commander + 1);
                $detailcommandeM->update($detailcommande);
              
                $y++;
			  }				
                endforeach;
            }
			$n = $y + 2;
			$objPHPExcel->getActiveSheet()->getStyle('E'.$n)->applyFromArray(array('font' => array('bold' => true)));
			$objPHPExcel->getActiveSheet()->getStyle('F'.$n)->applyFromArray(array('font' => array('bold' => true)));
			$objPHPExcel->getActiveSheet()->setCellValue('E'.$n.'',"MONTANT TOTAL");
			$objPHPExcel->getActiveSheet()->setCellValue('F'.$n.'',($montanttotal));
			
            $objPHPExcel->getActiveSheet()->setTitle("Liste des commandes");
            $objPHPExcel->setActiveSheetIndex(0);

            $callStartTime = microtime(true);

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
            $callEndTime = microtime(true);
            $callTime = $callEndTime - $callStartTime;

            ////////////////////////////////////////////////////////////////////////////

            $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

            if(!is_dir("../../webfiles/excel_exports/ARTICLES_COMMANDES/")) {
                mkdir("../../webfiles/excel_exports/ARTICLES_COMMANDES/", 0777);
            }/**/
            /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

            $newfile = "../../webfiles/excel_exports/ARTICLES_COMMANDES/ARTICLES_COMMANDES_".$date_debut."_".$date_fin."_".$code_membre_vendeur."_".$designation."_.xlsx";
            $newnom = "ARTICLES_COMMANDES_".$date_debut."_".$date_fin."_".$code_membre_vendeur."_".$designation."_";
            $newchemin = "../../webfiles/excel_exports/ARTICLES_COMMANDES/";

            copy($file, $newfile);

            unlink($file);

            $file = $newchemin.$newnom.'.xlsx';
            $filena = $newnom.'.xlsx';
			
            /**/

            if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
            } else {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
            }
            return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

    }
	
	
	public static function genererExcelCommandemail($code_membre_vendeur, $date_debut, $date_fin, $code_tegc, $commander) {

        $sessionmembre = new Zend_Session_Namespace('membre');
        ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        //$date_debut = $request->getParam("date_debut");
        //$date_fin = $request->getParam("date_fin");

        //$date_id = new Zend_Date(Zend_Date::ISO_8601);
        //$date_fin = new Zend_Date($date_fin);
        //$date_fin->addDay(1);

		/*
        $t_commande = new Application_Model_DbTable_EuDetailCommande();
        $select = $t_commande->select();
        if($code_membre_vendeur != "") {
           $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE code_membre_vendeur LIKE '".$code_membre_vendeur."')");
        }
		//$select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE type_bon LIKE 'BAN')");
		*/
        /*if($code_tegc != ""){
           $select->where("reference IN (SELECT reference FROM eu_article_stockes WHERE categorie LIKE '".$code_tegc."')");
        }
		*/
		/*
        if($date_debut != "") {
            //$select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande BETWEEN '".$date_debut."' AND '".$date_fin."')");
            $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande >= '".$date_debut."')");
		    $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande <= '".$date_fin."')");
		}
        $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE executer = 1)");
        */
		/*
		if($commander == "") {
        } else if($commander == 0) {
          $select->where("commander = ".$commander."");
        } else if($commander > 0) {
          $select->where("commander >= ".$commander."");        
        }
		*/
		
		//$select->where("livrer = ?",0);
		
		$date_fin = new Zend_Date($date_fin);
		$date_op = $date_fin;
		$date_fin->addDay(1);
		
		$t_commande = new Application_Model_DbTable_EuDetailCommande();
		$select = $t_commande->select(Zend_Db_Table::SELECT_WITH_FROM_PART);
		$select->setIntegrityCheck(false);
		$select->join('eu_commande', 'eu_commande.code_commande = eu_detail_commande.code_commande');
		
		if($code_membre_vendeur != "")  {
			$select->where('eu_commande.code_membre_vendeur like ?',$code_membre_vendeur);
		}
		//$select->where('eu_commande.type_bon like ?',"BAN");
		
		if($code_tegc != "") {
			
		}
		$select->where('(eu_commande.date_commande >= ?',$date_debut)
		       ->where('eu_commande.date_commande <= ?)',$date_fin->toString('yyyy-MM-dd'));
		$select->where('eu_commande.executer = ?',1);
		$select->where("eu_detail_commande.livrer = ?",0);
		
        $entries = $t_commande->fetchAll($select);

        $entries2 = $entries;

        require_once 'PHPExcel/PHPExcel.php';
        
        //////////////////////////////////////////////////////////////////////////////////////////////////////////

        $objPHPExcel = new PHPExcel();

        $objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionmembre->code_membre)
                             ->setTitle($sessionmembre->nom_membre." ".$sessionmembre->prenom_membre)
                             ->setSubject("Liste des articles commandés")
                             ->setDescription("Export en excel de la liste des articles commandés")
                             ->setKeywords("")
                             ->setCategory("");

        $objPHPExcel->setActiveSheetIndex(0);                                         

        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

        $objPHPExcel->getActiveSheet()->getStyle('A1:F1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $objPHPExcel->getActiveSheet()->setCellValue('A1', "Liste des commandes du ".datefr5($date_debut)." à ".datefr5($date_fin)." de ".$designation."");
        $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


        $objPHPExcel->getActiveSheet()->setCellValue('A2', "Date");
        $objPHPExcel->getActiveSheet()->setCellValue('B2', "Code Membre");
        $objPHPExcel->getActiveSheet()->setCellValue('C2', "Nom & prenom(s) / Raison sociale");
        $objPHPExcel->getActiveSheet()->setCellValue('D2', "Désignation");
        $objPHPExcel->getActiveSheet()->setCellValue('E2', "Quantité");
        $objPHPExcel->getActiveSheet()->setCellValue('F2', "Prix");
        $objPHPExcel->getActiveSheet()->setCellValue('G2', "Numéro Carte");
        //$objPHPExcel->getActiveSheet()->setCellValue('H2', "Complement");

        $objPHPExcel->getActiveSheet()->getStyle('A2:G2')->applyFromArray(array('font' => array('bold' => true)));

        $alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $j = 7;
        $y = 3;
		$montanttotal = 0;
		
		if(count($entries) > 0)  {
			foreach($entries as $entry) :
			  $articleM = new Application_Model_EuArticleStockesMapper();
              $articlefound = $articleM->fectchByReference(trim($entry->reference)) ;
			  if(($articlefound != NULL) && ($articlefound->categorie == $code_tegc)) {
			     $montanttotal = $montanttotal + ($entry->qte * $entry->prix_unitaire);
			  }
			 endforeach;
		 }
			
		
		
        if(count($entries) > 0)  {
            foreach($entries as $entry):
			  $articleM = new Application_Model_EuArticleStockesMapper();
              $articlefound = $articleM->fectchByReference(trim($entry->reference)) ;
			  if(($articlefound != NULL) && ($articlefound->categorie == $code_tegc)) {
			   
                $commandeM = new Application_Model_EuCommandeMapper();
                $commande = new Application_Model_EuCommande();
                $commandeM->find($entry->code_commande, $commande);

                $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $commande->date_commande);
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $commande->code_membre_acheteur);
                if(substr($commande->code_membre_acheteur, -1) == "P") {
                    $membreM = new Application_Model_EuMembreMapper();
                    $membre = new Application_Model_EuMembre();
                    $membreM->find($commande->code_membre_acheteur, $membre);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $membre->nom_membre." ".$membre->prenom_membre);
                    $email = $membre->email_membre;
                } else {
                    $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                    $membremorale = new Application_Model_EuMembreMorale();
                    $membremoraleM->find($commande->code_membre_acheteur, $membremorale);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $membremorale->raison_sociale);
                    $email = $membremorale->email_membre;
                }
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->designation);

                $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', ($entry->qte));
                $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', ($entry->qte * $entry->prix_unitaire));

                //$objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', ($entry->commander + 1)." fois");


                $detail_commande_additif = new Application_Model_EuDetailCommandeAdditifMapper();
                $entries3 = $detail_commande_additif->fetchAllByDetailCommande($entry->id_detail_commande);
                if(count($entries3) > 0) {
                      $reference_additif_texte = "";
                    foreach($entries3 as $entry3){
                        $article_stockes_additif = new Application_Model_EuArticleStockesAdditif();
                        $m_article_stockes_additif = new Application_Model_EuArticleStockesAdditifMapper();
                        $m_article_stockes_additif->find($entry3->id_article_stockes_additif, $article_stockes_additif);

                      $reference_additif_texte .= $article_stockes_additif->nom_article_stockes_additif." : ".$entry3->reference_additif."\n";
                        //$j++;
                    }
                       // $objPHPExcel->getActiveSheet()->getColumnDimension(''.$alphabet[$j].'')->setWidth(20);
                      //$objPHPExcel->getActiveSheet()->setCellValue(''.$alphabet[$j].''.$y.'', $reference_additif_texte);
						
						$objPHPExcel->getActiveSheet()->getColumnDimension('G'.$y)->setWidth(50);
                        $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'',$reference_additif_texte);
                }

                $detailcommandeM = new Application_Model_EuDetailCommandeMapper();
                $detailcommande = new Application_Model_EuDetailCommande();
                $detailcommandeM->find($entry->id_detail_commande, $detailcommande);

				$detailcommande->setLivrer(1);
                $detailcommande->setCommander($detailcommande->commander + 1);
                $detailcommandeM->update($detailcommande);

                $y++;
			  }				
              endforeach;
            }
			
			$n = $y + 2;
			$objPHPExcel->getActiveSheet()->getStyle('E'.$n)->applyFromArray(array('font' => array('bold' => true)));
			$objPHPExcel->getActiveSheet()->getStyle('F'.$n)->applyFromArray(array('font' => array('bold' => true)));
			
			$objPHPExcel->getActiveSheet()->setCellValue('E'.$n.'',"MONTANT TOTAL");
			$objPHPExcel->getActiveSheet()->setCellValue('F'.$n.'', ($montanttotal));
			
            $objPHPExcel->getActiveSheet()->setTitle("Liste des commandes");
            $objPHPExcel->setActiveSheetIndex(0);

            $callStartTime = microtime(true);

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
            $callEndTime = microtime(true);
            $callTime = $callEndTime - $callStartTime;

            ////////////////////////////////////////////////////////////////////////////

            $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

            if(!is_dir("../../webfiles/excel_exports/ARTICLES_COMMANDES/")) {
                mkdir("../../webfiles/excel_exports/ARTICLES_COMMANDES/", 0777);
            }/**/
            /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

            $newfile = "../../webfiles/excel_exports/ARTICLES_COMMANDES/ARTICLES_COMMANDES_".$date_debut."_".$date_fin."_".$code_membre_vendeur."_".$designation."_.xlsx";
            $newnom = "ARTICLES_COMMANDES_".$date_debut."_".$date_fin."_".$code_membre_vendeur."_".$designation."_";
            $newchemin = "../../webfiles/excel_exports/ARTICLES_COMMANDES/";

            copy($file, $newfile);

            unlink($file);

            $file = $newchemin.$newnom.'.xlsx';
            $filena = $newnom.'.xlsx';
			
			$date_id = new Zend_Date(Zend_Date::ISO_8601);
			
			
			$config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(3),'password' => Util_Utils::getParamEsmc(4));
			$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(5), $config);
            Zend_Mail::setDefaultTransport($tr);
            $mail = new Zend_Mail();
			
			
			if($code_tegc == "TEGCP60010010010010000003M00145") {
			    // MAIL TOTAL 
			    $mail->setBodyHtml("");
                $mail->setFrom("total@esmcgie.com","ESMC");
                $mail->addTo("totalcartes@totaltogo.com");
                $mail->setSubject('BON DE COMMANDE DU : '.$date_id->toString('dd-MM-yyyy HH:mm'));
			
			    $monImage = file_get_contents($file);
                $finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
                $at = new Zend_Mime_Part($monImage);
                $at->type        = finfo_file($finfo, $file);
                $at->disposition = Zend_Mime::DISPOSITION_INLINE;
                $at->encoding    = Zend_Mime::ENCODING_BASE64;
                $at->filename    = $filena;
                $mail->addAttachment($at);
			
                $mail->send($tr);
				 
			} else if($code_tegc == "TEGCP60010010010010000003M00142") {
			   // MAIL CAP
			   $mail->setBodyHtml("");
               $mail->setFrom("admin@esmcgie.com","ESMC");
               $mail->addTo("captogosa@yahoo.fr");
               $mail->setSubject('BON DE COMMANDE DU : '.$date_id->toString('dd-MM-yyyy HH:mm'));
			
			   $monImage = file_get_contents($file);
               $finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
               $at = new Zend_Mime_Part($monImage);
               $at->type        = finfo_file($finfo, $file);
               $at->disposition = Zend_Mime::DISPOSITION_INLINE;
               $at->encoding    = Zend_Mime::ENCODING_BASE64;
               $at->filename    = $filena;
               $mail->addAttachment($at);
			
               $mail->send($tr);
			}
			
			// MAIL ESMC
			$config = array('auth' => 'login','username' => Util_Utils::getParamEsmc(6),'password' => Util_Utils::getParamEsmc(7));
			$tr = new Zend_Mail_Transport_Smtp(Util_Utils::getParamEsmc(8), $config);
            Zend_Mail::setDefaultTransport($tr);
            $mailesmc = new Zend_Mail();

			$mailesmc->setBodyHtml("");
            $mailesmc->setFrom("admin@esmcgie.com","ESMC");
            $mailesmc->addTo("total@esmcgie.com");
			//$mailesmc->addTo("bikor@gacsource.com");
            $mailesmc->setSubject('BON DE COMMANDE DU : '.$date_id->toString('dd-MM-yyyy HH:mm'));
			
			$monImage = file_get_contents($file);
            $finfo = finfo_open(FILEINFO_MIME_TYPE); // Retourne le type mime à la extension mimetype
            $at = new Zend_Mime_Part($monImage);
            $at->type        = finfo_file($finfo, $file);
            $at->disposition = Zend_Mime::DISPOSITION_INLINE;
            $at->encoding    = Zend_Mime::ENCODING_BASE64;
            $at->filename    = $filena;
            $mailesmc->addAttachment($at);
            $mailesmc->send($tr);

    }
	
	




    public static function genererExcelCommandeold($code_membre_vendeur, $date_debut, $date_fin, $designation, $commander) {

        $sessionmembre = new Zend_Session_Namespace('membre');
        ini_set('memory_limit', '512M');    

        //include("Transfert.php");
        
        $date_id = new Zend_Date(Zend_Date::ISO_8601);

        //$date_debut = $request->getParam("date_debut");
        //$date_fin = $request->getParam("date_fin");
        //$designation = $request->getParam("destination");

        $date_id = new Zend_Date(Zend_Date::ISO_8601);
        //$date_fin = new Zend_Date($date_fin);
        //$date_fin->addDay(1);

        $t_commande = new Application_Model_DbTable_EuDetailCommande();
        $select = $t_commande->select();
        if($code_membre_vendeur != ""){
            $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE code_membre_vendeur LIKE '".$code_membre_vendeur."')");
        }
        if($designation != "") {
            $select->where("reference LIKE '%".$designation."%'");
        }
        if($date_debut != ""){
            $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE date_commande BETWEEN '".$date_debut."' AND '".$date_fin."')");
        }
        $select->where("code_commande IN (SELECT code_commande FROM eu_commande WHERE executer = 1)");
        if($commander == 0){
            $select->where("commander = ".$commander."");
        } else {
            $select->where("commander >= ".$commander."");        
        }
        $entries = $t_commande->fetchAll($select);

        $entries2 = $entries;

        require_once 'PHPExcel/PHPExcel.php';
        
        //////////////////////////////

        $objPHPExcel = new PHPExcel();

        $objPHPExcel->getProperties()->setCreator("ESMC")
                             ->setLastModifiedBy($sessionmembre->code_membre)
                             ->setTitle($sessionmembre->nom_membre." ".$sessionmembre->prenom_membre)
                             ->setSubject("Liste des articles commandés")
                             ->setDescription("Export en excel de la liste des articles commandés")
                             ->setKeywords("")
                             ->setCategory("");

        $objPHPExcel->setActiveSheetIndex(0);                                         

        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(30);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(20);

        $objPHPExcel->getActiveSheet()->getStyle('A1:F1')->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $objPHPExcel->getActiveSheet()->setCellValue('A1', "Liste des articles commandés du ".datefr5($date_debut)." à ".datefr5($date_fin)." de ".$designation."");
        $objPHPExcel->getActiveSheet()->getStyle('A1')->applyFromArray(array('font' => array('bold' => true)));


        $objPHPExcel->getActiveSheet()->setCellValue('A2', "Date");
        $objPHPExcel->getActiveSheet()->setCellValue('B2', "Code Membre");
        $objPHPExcel->getActiveSheet()->setCellValue('C2', "Nom & prenom(s) / Raison sociale");
        $objPHPExcel->getActiveSheet()->setCellValue('D2', "Désignation");
        $objPHPExcel->getActiveSheet()->setCellValue('E2', "Quantité");
        $objPHPExcel->getActiveSheet()->setCellValue('F2', "Prix");
        $objPHPExcel->getActiveSheet()->setCellValue('G2', "Commander");
        $objPHPExcel->getActiveSheet()->setCellValue('H2', "Telephone");
        $objPHPExcel->getActiveSheet()->setCellValue('I2', "E-mail");

        $objPHPExcel->getActiveSheet()->getStyle('A2:F2')->applyFromArray(array('font' => array('bold' => true)));

        $alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $j = 9;
        if(count($entries2) > 0) {
            foreach($entries2 as $entry2) {

                $detail_commande_additif = new Application_Model_EuDetailCommandeAdditifMapper();
                $entries3 = $detail_commande_additif->fetchAllByDetailCommande($entry2->id_detail_commande);
                if(count($entries3) > 0) {
                    foreach($entries3 as $entry3) {
                        $article_stockes_additif = new Application_Model_EuArticleStockesAdditif();
                        $m_article_stockes_additif = new Application_Model_EuArticleStockesAdditifMapper();
                        $m_article_stockes_additif->find($entry3->id_article_stockes_additif, $article_stockes_additif);

                        $objPHPExcel->getActiveSheet()->getColumnDimension(''.$alphabet[$j].'')->setWidth(20);
                        $objPHPExcel->getActiveSheet()->setCellValue(''.$alphabet[$j].'2', $article_stockes_additif->nom_article_stockes_additif);
                        $j++;
                    }
                }

            }
        }

        $alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        $j = 9;

        $y = 3;
        if(count($entries) > 0)  {
            foreach($entries as $entry):
                $commandeM = new Application_Model_EuCommandeMapper();
                $commande = new Application_Model_EuCommande();
                $commandeM->find($entry->code_commande, $commande);

                $objPHPExcel->getActiveSheet()->setCellValue('A'.$y.'', $commande->date_commande);
                $objPHPExcel->getActiveSheet()->setCellValue('B'.$y.'', $commande->code_membre_acheteur);
                if(substr($commande->code_membre_acheteur, -1) == "P") {
                    $membreM = new Application_Model_EuMembreMapper();
                    $membre = new Application_Model_EuMembre();
                    $membreM->find($commande->code_membre_acheteur, $membre);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $membre->nom_membre." ".$membre->prenom_membre);
                    $email = $membre->email_membre;
                } else {
                    $membremoraleM = new Application_Model_EuMembreMoraleMapper();
                    $membremorale = new Application_Model_EuMembreMorale();
                    $membremoraleM->find($commande->code_membre_acheteur, $membremorale);
                    $objPHPExcel->getActiveSheet()->setCellValue('C'.$y.'', $membremorale->raison_sociale);
                    $email = $membremorale->email_membre;
                }
                $objPHPExcel->getActiveSheet()->setCellValue('D'.$y.'', $entry->designation);

                $objPHPExcel->getActiveSheet()->setCellValue('E'.$y.'', ($entry->qte));
                $objPHPExcel->getActiveSheet()->setCellValue('F'.$y.'', ($entry->qte * $entry->prix_unitaire));

                $objPHPExcel->getActiveSheet()->setCellValue('G'.$y.'', ($entry->commander + 1)." fois");

                $telephoneM = new Application_Model_EuTelephoneMapper();
                $telephone = $telephoneM->fetchAllByCodeMembre($commande->code_membre_acheteur);
                $portable_membre = "";
                foreach ($telephone as $telephonevalue) {
                    $portable_membre .= $telephonevalue->numero_telephone." / ";
                }
                
                $portable_membre = substr($portable_membre, 0, -3);
                $objPHPExcel->getActiveSheet()->setCellValue('H'.$y.'', ($portable_membre));
                $objPHPExcel->getActiveSheet()->setCellValue('I'.$y.'', ($email));

                $detail_commande_additif = new Application_Model_EuDetailCommandeAdditifMapper();
                $entries3 = $detail_commande_additif->fetchAllByDetailCommande($entry->id_detail_commande);
                if(count($entries3) > 0) {
                    foreach($entries3 as $entry3){
                        $objPHPExcel->getActiveSheet()->getColumnDimension(''.$alphabet[$j].'')->setWidth(20);
                        $objPHPExcel->getActiveSheet()->setCellValue(''.$alphabet[$j].''.$y.'', $entry3->reference_additif);
                        $j++;
                    }
                }
                $detailcommandeM = new Application_Model_EuDetailCommandeMapper();
                $detailcommande = new Application_Model_EuDetailCommande();
                $detailcommandeM->find($entry->id_detail_commande, $detailcommande);

                $detailcommande->setCommander($detailcommande->commander + 1);
                $detailcommandeM->update($detailcommande);

                $y++;   
                endforeach;
            }
            $objPHPExcel->getActiveSheet()->setTitle("Liste articles commandés");
            $objPHPExcel->setActiveSheetIndex(0);

            $callStartTime = microtime(true);

            $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
            $objWriter->save(str_replace('.php', '.xlsx', __FILE__));
            $callEndTime = microtime(true);
            $callTime = $callEndTime - $callStartTime;

            ////////////////////////////////////////////////////////////////////////////

            $file = "".Util_Utils::getParamEsmc(1)."/../application/util/Utils.xlsx";

            if(!is_dir("../../webfiles/excel_exports/ARTICLES_COMMANDES/")) {
                mkdir("../../webfiles/excel_exports/ARTICLES_COMMANDES/", 0777);
            }/**/
            /*".str_replace("/", "_", mettreaccents($date_id->toString('ddMMyyyyHHmmss')))."*/

            $newfile = "../../webfiles/excel_exports/ARTICLES_COMMANDES/ARTICLES_COMMANDES_".$date_debut."_".$date_fin."_".$code_membre_vendeur."_".$designation."_.xlsx";
            $newnom = "ARTICLES_COMMANDES_".$date_debut."_".$date_fin."_".$code_membre_vendeur."_".$designation."_";
            $newchemin = "../../webfiles/excel_exports/ARTICLES_COMMANDES/";

            copy($file, $newfile);

            unlink($file);

            $file = $newchemin.$newnom.'.xlsx';
            $filena = $newnom.'.xlsx';
            /**/

            if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
            } else {
                $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
            }
            return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);/**/

        }




    public static function approBAn($bon_neutre_appro_apporteur, $bon_neutre_appro_montant, $bon_neutre_appro_beneficiaire) {
        $sessionmembre = new Zend_Session_Namespace('membre');


        if (isset($bon_neutre_appro_beneficiaire) && $bon_neutre_appro_beneficiaire!="" && isset($bon_neutre_appro_montant) && $bon_neutre_appro_montant!="") {

                    //$db = Zend_Db_Table::getDefaultAdapter();
                    //$db->beginTransaction();
                    try {
                            $date_id = Zend_Date::now();




if($bon_neutre_appro_beneficiaire == $bon_neutre_appro_apporteur) {
                                    //$db->rollback();
                                    $return_error = "Le Code Membre du bénéficiaire doit etre different du Code Membre de l'apporteur. Merci...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return $return_error;
}
/////////////////////////////////////controle code membre
if(strlen($bon_neutre_appro_beneficiaire) != 20) {
                                    //$db->rollback();
                                    $return_error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return $return_error;
}else{
if(substr($bon_neutre_appro_beneficiaire, -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                if($membre_mapper->find($bon_neutre_appro_beneficiaire, $membre)){
                                }else{
                                    //$db->rollback();
                                    $return_error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return $return_error;
                                }
                $canton = $membre->id_canton;
                $nom = $membre->nom_membre;
                $prenom = $membre->prenom_membre;
                $email = $membre->email_membre;
                $mobile = $membre->portable_membre;
                $raison = "";
    } else if(substr($bon_neutre_appro_beneficiaire, -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                if($membremorale_mapper->find($bon_neutre_appro_beneficiaire, $membremorale)){
                                }else{
                                  //$db->rollback();
                                    $return_error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return $return_error;
                                }
                $canton = $membremorale->id_canton;
                $nom = "";
                $prenom = "";
                $email = $membremorale->email_membre;
                $mobile = $membremorale->portable_membre;
                $raison = $membremorale->raison_sociale;
    }else{
      //$db->rollback();
                                    $return_error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre...";
                                    //$this->_redirect('/souscriptionbon/addbanappro');
                                    return $return_error;
    }
}



                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($bon_neutre_appro_apporteur);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);


if($bon_neutre_appro_montant <= 0){
  //$db->rollback();
                $return_error = "Le montant à allouer doit etre supérieur à 0...";
  //$this->_redirect('/souscriptionbon/addbanappro');
  return $return_error;

}

if($bon_neutre_appro_montant > $bon_neutre->getBon_neutre_montant_solde()){
  //$db->rollback();
                $return_error = "Le montant à allouer est supérieur au solde de votre BAn...";
  //$this->_redirect('/souscriptionbon/addbanappro');
  return $return_error;

}








                //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                do{
                                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                }while(count($bon_neutre_detail2) > 0);




$bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
$bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

$compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
$bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro->setBon_neutre_appro_beneficiaire(strtoupper($bon_neutre_appro_beneficiaire));
$bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro->setBon_neutre_appro_montant($bon_neutre_appro_montant);
$bon_neutre_appro->setBon_neutre_appro_apporteur($bon_neutre_appro_apporteur);
$bon_neutre_appro_mapper->save($bon_neutre_appro);





                                //$bon_neutre->setBon_neutre_code($code_BAn);
                                //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $bon_neutre_appro_montant);
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $bon_neutre_appro_montant);
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;



                                /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_appro_montant);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/

///////////////////////////////////////////////////////////////////////////

$mont = $bon_neutre_appro_montant;

                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                   
                    $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
                    foreach ($bon_neutre_detail as $detail){
                                $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                                $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL){
$appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
$appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
$code_banque = $appro_detail->bon_neutre_appro_detail_banque;
}else{
$code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
}

                        if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont){
$mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_detail2M->update($bon_neutre_detail2);
                                


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                }else{

$bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
$bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

$bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
$bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
$bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
$bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque);
$bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                                $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                                $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                                $bon_neutre_detail2M->update($bon_neutre_detail2);


                                $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                                $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                                $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                                $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                                $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                                $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                                $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                                $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                                $bon_neutre_utilise2M->save($bon_neutre_utilise2);

                                break;
                                }


                        }
                            


///////////////////////////////////////////////////////////////////////////

                $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre(strtoupper($bon_neutre_appro_beneficiaire));
                if(count($bon_neutre3) > 0){
                  $bon_neutre31 = new Application_Model_EuBonNeutre();
                                $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                                $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                                $bon_neutre31->setBon_neutre_code($code_BAn);
                                $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $bon_neutre_appro_montant);
                  $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $bon_neutre_appro_montant);
                                $bon_neutre31M->update($bon_neutre31);


                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                                $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                                $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                                $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                $bon_neutre_detail->setId_canton($canton);
                                $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                $bon_neutre_detail_mapper->save($bon_neutre_detail);


                  }else{

                                              $bon_neutre = new Application_Model_EuBonNeutre();
                                  $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                                  $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                                  $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre->setBon_neutre_type("BAn");
                                  $bon_neutre->setBon_neutre_code($code_BAn);
                                  $bon_neutre->setBon_neutre_code_membre(strtoupper($bon_neutre_appro_beneficiaire));
                                  $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre->setBon_neutre_montant($bon_neutre_appro_montant);
                                  $bon_neutre->setBon_neutre_montant_utilise(0);
                                  $bon_neutre->setBon_neutre_montant_solde($bon_neutre_appro_montant);
                                  $bon_neutre->setBon_neutre_nom($nom);
                                  $bon_neutre->setBon_neutre_prenom($prenom);
                                  $bon_neutre->setBon_neutre_raison($raison);
                                  $bon_neutre->setBon_neutre_email($email);
                                  $bon_neutre->setBon_neutre_mobile($mobile);
                                  $bon_neutre_mapper->save($bon_neutre);




                                $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                                  $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                                  $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                                  $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                                  $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                                  $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                                  $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                                  $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                                  $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                                  $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                                  $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                                  $bon_neutre_detail->setId_canton($canton);
                                  $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                                  $bon_neutre_detail_mapper->save($bon_neutre_detail);


                    }


                            ///////////////////////////////////////////////////////////////////////////////////////

                            //$db->commit();
                            $return_error = "Opération bien effectuée. <br />
Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";
                            $sessionmembre->code_BAn = $code_BAn;

$sessionmembre->bon_neutre_appro_apporteur = "";
$sessionmembre->bon_neutre_appro_beneficiaire = "";
$sessionmembre->bon_neutre_appro_montant = "";
$sessionmembre->confirmation_envoi = "";

                            //$this->_redirect('/souscriptionbon/addbanappro');
                            return $return_error;

}   else {
                            //$db->rollback();
                                          $return_error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                            //$this->_redirect('/souscriptionbon/addbanappro');
                            return $return_error;
}




                    }  catch (Exception $exc) {
                        $return_error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        //$db->rollback();
                        //$this->_redirect('/souscriptionbon/addbanappro');
                        return $return_error;
                    }
                  }   else {  $return_error = "Champs * obligatoire ..."; return $return_error; }


        }


    public static function approBC($code_apporteur, $montant_bc, $code_benef, $cat_produit, $id_canton) {
        $sessionmembre = new Zend_Session_Namespace('membre');


      
        $date_id = Zend_Date::now();
        $date_fin = new Zend_Date(Zend_Date::ISO_8601);
        $periode = Util_Utils::getParametre('periode','valeur');
        $date_fin->addDay($periode);
      
        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
      
      
        //$request = $this->getRequest ();
        //if($request->isPost ()) {
            //$db = Zend_Db_Table::getDefaultAdapter();
            //$db->beginTransaction();
            try {
                $compte = new Application_Model_EuCompte();
                $compte_mapper =  new Application_Model_EuCompteMapper();
             
                $echange = new Application_Model_EuEchange();
                $echange_mapper =  new Application_Model_EuEchangeMapper();
             
                $cnp = new Application_Model_EuCnp();
                $cnp_mapper = new Application_Model_EuCnpMapper();
             
                $cc_mapper =  new Application_Model_EuCompteCreditMapper();
                $cc = new Application_Model_EuCompteCredit();
             
                $place = new Application_Model_EuOperation();
                $place_mapper = new Application_Model_EuOperationMapper();
             
                $capa = new Application_Model_EuCapa();
                $capa_mapper = new Application_Model_EuCapaMapper();
             
                $membre = new Application_Model_EuMembre();
                $membre_mapper =  new Application_Model_EuMembreMapper();
             
                $membremorale = new Application_Model_EuMembreMorale();
                $membremorale_mapper =  new Application_Model_EuMembreMoraleMapper();
             
                $approvisionnement = new Application_Model_EuApprovisionnement();
                $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
             
                $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
                $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
             
                $tcnp = new Application_Model_DbTable_EuCnpEntree();
             
                $apporteur = $code_apporteur;
                $beneficiaire = $code_benef;
                $montant = $montant_bc;
                $type_ressource  = "";
                $type_ressource1 = "";
                $code_cat  = "";
                $code_cat1 = "";
                $produit = "";
                $produit1 = "";
                $cat_produit = $cat_produit;
                //$cat_bps = $request->getParam("cat_bps");
                $cat_echange = "";
                $id_canton = $id_canton;
             
                if(substr($apporteur,-1,1) == 'P')  {
                    if($cat_produit == "nr") {
                        $produit = "RPGnr";
                    }
                
                    if($cat_produit == "r") {
                        $produit = "RPGr";
                    }
                
                    $type_ressource = "NB";
                    $code_cat = "TPAGCRPG";
                    $cat_echange = "RPG";
                    
                } else {
                    if($cat_produit == "nr") {
                        $produit = "Inr";
                    }
                    if($cat_produit == "r") {
                        $produit = "Ir";
                    }
             
                    $type_ressource = "NB";
                    $code_cat = "TPAGCI";
                    $cat_echange = "I";
                }
                
                $retour = false;
                if(substr($apporteur,-1,1) == 'P')  {
                    $findapporteur = $membre_mapper->find($apporteur,$membre);
                    if($membre->desactiver == 1)  {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bc = $montant;
                        $return_error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
                        return $return_error;
                    }
                } else  {
                    $findapporteur = $membremorale_mapper->find($apporteur,$membremorale);
                    if($membremorale->desactiver == 1)  {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bc = $montant;
                        $return_error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
                        return $return_error;
                    }
                }
                
                if(strlen($beneficiaire) != 20) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bc = $montant;
                    $return_error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                    return $return_error;
                }                       
             
                if(substr($beneficiaire,-1,1) == 'P') {
                    $retour = $membre_mapper->find($beneficiaire,$membre);
                } else {
                    $retour = $membremorale_mapper->find($beneficiaire,$membremorale); 
                }
             
                if(!$retour) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bc = $montant;
                    $return_error = "Le code membre du membre bénéficiaire est inexistant ...";
                    return $return_error;
                }
                
                if(substr($beneficiaire,-1,1) == 'P') {
                    if($membre->desactiver == 1)  {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bc = $montant;
                        $return_error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                        return $return_error;
                    }
                } else {
                    if($membremorale->desactiver == 1)  {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bc = $montant;
                        $return_error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                        return $return_error;
                    }
                }
                
             
                if($beneficiaire == $apporteur) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bc = $montant;
                    $return_error = "Vous ne pouvez pas approvisionner les bon de consommation à vous même";
                    return $return_error;
                }
             
                if(substr($beneficiaire,-1,1) == 'P')  {
                    $type_ressource1 = "NB";
                    $code_cat1 = "TPAGCRPG";
                } else {
                    $type_ressource1 = "NB";
                    $code_cat1 = "TPAGCI";
                }
             
                $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
                $code_compte_beneficiaire = $type_ressource1."-".$code_cat1."-".$beneficiaire;
             
                $t_produit = new Application_Model_DbTable_EuCompteCredit();
                $select = $t_produit->select();
                $select->from($t_produit, array('sum(montant_credit) as somme'));
                $select->where('code_membre = ?', $apporteur);
                $select->where('code_compte like ?', $code_compte_apporteur);
             
                if($cat_produit != "") {
                    $select->where('code_produit like ?', $produit);
                }
             
             /*
             if($cat_bps != "") {
               $select->where('type_produit like ?', $cat_bps);   
             }
             */
             
                $result = $t_produit->fetchAll($select);
                $row = $result->current();
                $somme = $row['somme'];
                if($somme == null) {
                    $somme = 0;
                }
             
                $ret = $compte_mapper->find($code_compte_apporteur,$compte);
             
                if($compte->getSolde() < $montant) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bc = $montant;
                    $return_error = "Le solde de votre compte de bon de consommation est insuffisant pour effectuer cet approvisionnement ...";
                    return $return_error;             
                }
             
                if($somme < $montant) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bc = $montant;
                    $return_error = "Votre bon de consommation de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ...";
                    return $return_error;
                }
                
                    

                    
                        //insertion dans la table eu_operation
                        $compteur = $place_mapper->findConuter() + 1;
                        $place->setId_operation($compteur)
                              ->setDate_op($date_id->toString('yyyy-MM-dd'))
                              ->setHeure_op($date_id->toString('HH:mm:ss'))
                              ->setId_utilisateur(null)
                              ->setMontant_op($montant)
                              ->setCode_produit($produit)
                              ->setLib_op("Approvisionnement du BC")
                              ->setType_op('APPRO')
                              ->setCode_cat($code_cat1);
                   
                        if(substr($beneficiaire,-1,1) == 'P') {  
                            $place->setCode_membre($beneficiaire);
                        } else {
                            $place->setCode_membre_morale($beneficiaire);
                        }
                        
                        $place_mapper->save($place);
                        $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
                        $compte->setSolde($compte->getSolde() + $montant);
                        $compte_mapper->update($compte);
                        
                        $cpte_origine = new Application_Model_EuCompte();
                        $res = $compte_mapper->find($code_compte_apporteur,$cpte_origine);
                        $cpte_origine->setSolde($cpte_origine->getSolde() - $montant);
                        $compte_mapper->update($cpte_origine);
              
                        //Enrégistrement dans la table eu_approvisionnement
                        $count_appro = $approvisionnement_mapper->findConuter() + 1;
              
                        $approvisionnement->setId_approvisionnement($count_appro);
                        $approvisionnement->setCode_membre_apporteur($apporteur);
                        $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
                        $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $approvisionnement->setType_approvisionnement("APPRO_BC");
                        $approvisionnement->setMontant_approvisionnement($montant);
                        $approvisionnement->setId_canton($id_canton);
                        $approvisionnement_mapper->save($approvisionnement);
              
                        $credits = $cc_mapper->fetchAllCreditByCompte($apporteur,$code_compte_apporteur,$produit);
                        if($credits != NULL) {
                            $j = 0;
                            $reste = $montant;
                            $nbre_credit = count($credits);
                            while($reste > 0 && $j < $nbre_credit)  {
                                $credit = $credits[$j];
                                $id = $credit->getId_credit();
                                $source_credit = $credit->getSource();
                                if($reste > $credit->getMontant_credit()) {
                                    //Enrégistrement dans la table eu_detail_approvisionnement
                                    $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
                                    $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
                                    $detailapprovisionnement->setId_approvisionnement($count_appro);
                                    $detailapprovisionnement->setId_credit($id);
                                    $detailapprovisionnement->setCode_compte($code_compte_apporteur);
                                    $detailapprovisionnement->setMontant_detail_approvisionnement($credit->getMontant_credit());
                                    $detailapprovisionnement_mapper->save($detailapprovisionnement);
                   
                                    //Enregistrement dans la table eu_compte_credit du bénéficiaire
                                    if(substr($beneficiaire,-1,1) == 'P')  {
                                        if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
                                            $produit1 = "RPGnr";
                                        } else {
                                            $produit1 = "RPGr";
                                        }
                                    } else {
                                        if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
                                            $produit1 = "Inr";
                                        } else {
                                            $produit1 = "Ir";
                                        }
                                    }

                                    $maxcc = $cc_mapper->findConuter() + 1;
                                    $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
                                    $cc->setId_credit($maxcc)
                                       ->setCode_produit($produit1)
                                       ->setMontant_place($montant)
                                       ->setDatedeb($credit->getDatedeb())
                                       ->setDatefin($credit->getDatefin())
                                       ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                       ->setSource($source)
                                       ->setCode_compte($code_compte_beneficiaire)
                                       ->setId_operation($compteur)
                                       ->setBnp($credit->getBnp())
                                       ->setCode_type_credit($credit->getCode_type_credit())
                                       ->setPrk($credit->getPrk())
                                       ->setCompte_source($code_compte_apporteur)
                                       ->setMontant_credit($credit->getMontant_credit())
                                       ->setRenouveller($credit->getRenouveller())
                                       ->setDomicilier($credit->getDomicilier())
                                       ->setAffecter($credit->getAffecter())
                                       ->setKrr($credit->getKrr())
                                       ->setType_produit($credit->getType_produit())
                                       ->setCode_bnp($credit->getCode_bnp())
                                       ->setNbre_renouvel($credit->getNbre_renouvel())
                                       ->setType_recurrent($credit->getType_recurrent())
                                       ->setDuree($credit->getDuree())
                                       ->setId_bps($credit->getId_bps())
                                       ->setFrequence_cumul($credit->getFrequence_cumul())
                                       ->setCode_membre($beneficiaire);
                                    $cc_mapper->save($cc);
                       
                                    //Enregistrement dans la table eu_cnp du beneficiaire
                                    $maxcnp = $cnp_mapper->findConuter() + 1;
                                    $cnp->setId_cnp($maxcnp)
                                        ->setId_credit($maxcc)
                                        ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                                        ->setMont_debit($credit->getMontant_credit())
                                        ->setMont_credit(0)
                                        ->setSolde_cnp($credit->getMontant_credit())
                                        ->setType_cnp($produit1)
                                        ->setSource_credit($source)
                                        ->setCode_capa(null)
                                        ->setTransfert_gcp(0)
                                        ->setId_gcp(null)
                                        ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit1);
                                    $cnp_mapper->save($cnp);
                        
                        
                                    //Mise à jour de la table eu_cnp apporteur
                                    $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
                                    if($cnp_credit != null) {
                                        $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);            
                                        //Mise à jour du cnp
                                        $cnp->setMont_credit($cnp->getMont_credit() + $credit->getMontant_credit())
                                            ->setSolde_cnp($cnp->getSolde_cnp() - $credit->getMontant_credit());
                                        $cnp_mapper->update($cnp);
                           
                                        $ecnp = new Application_Model_EuCnpEntree();
                                        $select_cnpe = $tcnp->select();
                                        $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                                        $result_cnpe = $tcnp->fetchAll($select_cnpe);
                                        $row_cnpe = $result_cnpe->current();
                                        
                                        $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
                                             ->setId_cnp($cnp->getId_cnp())
                                             ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                             ->setMont_cnp_entree($credit->getMontant_credit())
                                             ->setType_cnp_entree($credit->getCode_produit());
                                        $tcnp->insert($ecnp->toArray());
                                
                                    } else {
                                        //$db->rollback();
                                        $this->view->code_benef = $beneficiaire;
                                        $this->view->montant_bc = $montant;
                                        $return_error = "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit;
                                        return $return_error;
                                    }
                        
                                    //Mise à jour du compte crédit apporteur
                                    $reste = $reste - $credit->getMontant_credit();
                                    $credit->setMontant_credit(0);
                                    $cc_mapper->update($credit);
                                   
                                }  else  {
                                    //Enrégistrement dans la table eu_detail_approvisionnement
                                    $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
                                    $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
                                    $detailapprovisionnement->setId_approvisionnement($count_appro);
                                    $detailapprovisionnement->setId_credit($id);
                                    $detailapprovisionnement->setCode_compte($code_compte_apporteur);
                                    $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
                                    $detailapprovisionnement_mapper->save($detailapprovisionnement);
                   
                                    //Enregistrement dans la table eu_compte_credit du bénéficiaire
                                    if(substr($beneficiaire,-1,1) == 'P')  {
                                        if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
                                            $produit1 = "RPGnr";
                                        } else {
                                            $produit1 = "RPGr";
                                        }
                                    } else {
                                        if($credit->getCode_produit() == "RPGnr" || $credit->getCode_produit() == "Inr") {
                                            $produit1 = "Inr";
                                        } else {
                                            $produit1 = "Ir";
                                        }
                                    }
                        
                                    $maxcc = $cc_mapper->findConuter() + 1;
                                    $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
                                    $cc->setId_credit($maxcc)
                                       ->setCode_produit($produit1)
                                       ->setMontant_place($montant)
                                       ->setDatedeb($credit->getDatedeb())
                                       ->setDatefin($credit->getDatefin())
                                       ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                       ->setSource($source)
                                       ->setCode_compte($code_compte_beneficiaire)
                                       ->setId_operation($compteur)
                                       ->setBnp($credit->getBnp())
                                       ->setCode_type_credit($credit->getCode_type_credit())
                                       ->setPrk($credit->getPrk())
                                       ->setCompte_source($code_compte_apporteur)
                                       ->setMontant_credit($reste)
                                       ->setRenouveller($credit->getRenouveller())
                                       ->setDomicilier($credit->getDomicilier())
                                       ->setAffecter($credit->getAffecter())
                                       ->setKrr($credit->getKrr())
                                       ->setType_produit($credit->getType_produit())
                                       ->setCode_bnp($credit->getCode_bnp())
                                       ->setNbre_renouvel($credit->getNbre_renouvel())
                                       ->setType_recurrent($credit->getType_recurrent())
                                       ->setDuree($credit->getDuree())
                                       ->setId_bps($credit->getId_bps())
                                       ->setFrequence_cumul($credit->getFrequence_cumul())
                                       ->setCode_membre($beneficiaire);
                                    $cc_mapper->save($cc);
                       
                                    //Enregistrement dans la table eu_cnp du beneficiaire
                                    $maxcnp = $cnp_mapper->findConuter() + 1;
                                    $cnp->setId_cnp($maxcnp)
                                        ->setId_credit($maxcc)
                                        ->setDate_cnp($date_id->toString('yyyy-MM-dd'))
                                        ->setMont_debit($reste)
                                        ->setMont_credit(0)
                                        ->setSolde_cnp($reste)
                                        ->setType_cnp($produit1)
                                        ->setSource_credit($source)
                                        ->setCode_capa(null)
                                        ->setTransfert_gcp(0)
                                        ->setId_gcp(null)
                                        ->setOrigine_cnp("E".$credit->getCode_produit()."-".$produit1);
                                    $cnp_mapper->save($cnp);
                        
                                    //Mise à jour de la table eu_cnp apporteur
                                    $cnp_credit = $cnp_mapper->findCnpByCreditSource($id,$source_credit);
                                    if($cnp_credit != NULL) {
                                        $findcnp = $cnp_mapper->find($cnp_credit->getId_cnp(),$cnp);            
                                        //Mise à jour du cnp
                                        $cnp->setMont_credit($cnp->getMont_credit() + $reste)
                                            ->setSolde_cnp($cnp->getSolde_cnp() - $reste);
                                        $cnp_mapper->update($cnp);
                           
                                        $ecnp = new Application_Model_EuCnpEntree();
                                        $select_cnpe = $tcnp->select();
                                        $select_cnpe->from($tcnp, array('MAX(id_cnp_entree) as count'));
                                        $result_cnpe = $tcnp->fetchAll($select_cnpe);
                                        $row_cnpe = $result_cnpe->current();
                                        
                                        $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
                                             ->setId_cnp($cnp->getId_cnp())
                                             ->setDate_entree($date_id->toString('yyyy-MM-dd'))
                                             ->setMont_cnp_entree($reste)
                                             ->setType_cnp_entree($credit->getCode_produit());
                                        $tcnp->insert($ecnp->toArray());
                           
                                    } else {
                                        //$db->rollback();
                                        $this->view->code_benef = $beneficiaire;
                                        $this->view->montant_bc = $montant;
                                        $return_error = "Il n'y a pas de cnp correspondant à ce bon de consommation ".$id."  ".$source_credit;
                                        return $return_error;
                                    }                     
                                    //Mise à jour du compte crédit apporteur
                                    $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                                    $cc_mapper->update($credit);
                                    $reste = 0;
                                }                  
                                $j++;
                            } 
                 
                        } else {
                            //$db->rollback();
                            $this->view->code_benef = $beneficiaire;
                            $this->view->montant_bc = $montant;
                            $return_error = "Il n'y a pas de bon de consommation correspondant à ce compte " . $produit;
                            return $return_error;
                        }
                        //$db->commit();              
                        $return_error = "Opération  bien  effectuée ...";
                        //$this->_redirect('/souscriptionbon/addbcappro');
                    return $return_error;
                    
        
            } catch(Exception $exc) {
                $return_error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                //$db->rollback();
                return $return_error;
            }
        //}


        }





    public static function approBL($code_apporteur, $montant_bl, $code_benef, $code_tegc, $code_tegcbenef, $id_canton) {
        $sessionmembre = new Zend_Session_Namespace('membre');


       
        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
       
        $t_tegc = new Application_Model_DbTable_EuTegc();
        $selection = $t_tegc->select();
        $selection->where('nom_tegc is not null');
        if(substr($code_apporteur,19,1) == "M") {
            $selection->where('code_membre like ?',$code_apporteur);
        } else {
            $selection->where('code_membre_physique like ?',$code_apporteur);
        }
       
        $selection->order('nom_tegc asc');
        $tes = $t_tegc->fetchAll($selection);
        $this->view->tes = $tes;
       
        //$request = $this->getRequest();
        //if($request->isPost ()) {
            //$db = Zend_Db_Table::getDefaultAdapter();
            //$db->beginTransaction();
            try {
                $echange   = new Application_Model_EuEchange();
                $m_echange = new Application_Model_EuEchangeMapper();
               
                $credit_conso   = new Application_Model_EuCreditConsommer();
                $m_credit_conso = new Application_Model_EuCreditConsommerMapper();
               
                $compte   = new Application_Model_EuCompte();
                $m_compte = new Application_Model_EuCompteMapper();
               
                $approvisionnement = new Application_Model_EuApprovisionnement();
                $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
             
                $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
                $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
               
                $operation   = new Application_Model_EuOperation();
                $m_operation = new Application_Model_EuOperationMapper();
               
                $bon   = new Application_Model_EuBon();
                $m_bon = new Application_Model_EuBonMapper();
               
                $cnp   = new Application_Model_EuCnp();
                $m_cnp = new Application_Model_EuCnpMapper();
               
                $tcnp = new Application_Model_DbTable_EuCnpEntree();
               
                $gcp   = new Application_Model_EuGcp();
                $m_gcp = new Application_Model_EuGcpMapper();
               
                $tegc   = new Application_Model_EuTegc();
                $m_tegc = new Application_Model_EuTegcMapper();
               
                $cc   = new Application_Model_EuCompteCredit();
                $m_cc = new Application_Model_EuCompteCreditMapper();
               
                $ccts   = new Application_Model_EuCompteCreditTs();
                $m_ccts = new Application_Model_EuCompteCreditTsMapper();
               
                $smc   = new Application_Model_EuSmc();
                $m_smc = new Application_Model_EuSmcMapper();
               
                $membre = new Application_Model_EuMembre();
                $m_membre  = new Application_Model_EuMembreMapper();
                $membremorale = new Application_Model_EuMembreMorale();
                $m_membremorale  = new Application_Model_EuMembreMoraleMapper();
               
                $vendeur = $code_apporteur;
                $beneficiaire = $code_benef;
                $code_tegc  = $code_tegc;
                $code_tegcbenef  = $code_tegcbenef;
                $montant = $montant_bl;
                $id_canton = $montant_bl;
                $code_produit = "";
                $compte_bc = "";
                $comptets_bc = "";
               
                $date_all = new Zend_Date(Zend_Date::ISO_8601);
                $date_alloc = clone $date_all;
                $date_debut = new Zend_Date(Zend_Date::ISO_8601);
                $date_deb = clone $date_debut;
               
                $date_fin = $date_deb;
                $date_fin->addDay(30);
               
                $compte_gcp_vendeur = 'NB-TPAGCP-'.$vendeur;
                $compte_gcp_beneficiaire = 'NB-TPAGCP-'.$beneficiaire;
              
                if(substr($vendeur,19,1) == "P") {
                    $compte_bc =  "NB-TPAGCRPG-".$vendeur;
                    $comptets_bc =  "NB-TSRPG-".$vendeur;
                    $code_produit = "RPGnr";                 
                } else {
                    $comptets_bc =  "NB-TSGCI-".$vendeur;
                    $compte_bc =  "NB-TPAGCI-".$vendeur;
                    $code_produit = "Inr";
                }
                
                if(substr($vendeur,19,1) == 'P')  {
                    $findvendeur = $m_membre->find($vendeur,$membre);
                    if($membre->desactiver == 1)  {
                        //$db->rollback();
                        $return_error = "Ce membre dont le code membre  ".$vendeur."  n'est pas autoriser à effectuer de cette opération  ...";
                        return $return_error;
                    }
                }  else {
                    $findvendeur = $m_membremorale->find($vendeur,$membremorale);
                    if($membremorale->desactiver == 1)  {
                        //$db->rollback();
                        $return_error = "Ce membre dont le code membre  ".$vendeur."  n'est pas autoriser à effectuer de cette opération  ...";
                        return $return_error;
                    }
                    
                }
               
                if(substr($beneficiaire,19,1) == 'P')  {
                    $findmembre = $m_membre->find($beneficiaire,$membre);
                    if($findmembre == false) {
                        //$db->rollback();
                        $return_error = "Le code membre du bénéficiaire  ".$beneficiaire."  est introuvable ...";
                        return $return_error;
                    }

                    if($membre->desactiver == 1)  {
                        //$db->rollback();
                        $return_error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                        return $return_error;
                    }
                    
                } else {
                    $findmembre = $m_membremorale->find($beneficiaire,$membremorale);
                    if($findmembre == false) {
                        //$db->rollback();
                        $return_error = "Le code membre du bénéficiaire  ".$beneficiaire."  est introuvable ...";
                        return $return_error;
                    }
                    
                    if($membremorale->desactiver == 1)  {
                        //$db->rollback();
                        $return_error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                        return $return_error;
                    }

                }
               
                if($code_tegc == $code_tegcbenef) {
                    //$db->rollback();
                    $return_error = "Impossible de faire l'approvisionnement à vous-même ...";
                    return $return_error;
                }
               
                $res = $m_compte->find($compte_gcp_vendeur,$compte);
                $rep = $m_tegc->find($code_tegc,$tegc);
               
               
                if(($compte->getSolde() < $montant) ||  ($tegc->getSolde_tegc() < $montant)) {
                    //$db->rollback();
                    $return_error = "Le solde du Terminal d'Echange du membre apporteur est insuffisant pour effectuer cette operation ...";
                    return $return_error;       
                }
                

                        //Enregistrement dans la table eu_echange
                        $count_ech = $m_echange->findConuter() + 1;
               
                        $echange->setId_echange($count_ech);
                        if(substr($vendeur,19,1) == "P") {
                            $echange->setCode_membre($vendeur);
                        $echange->setCode_membre_morale(Null);
                    } else {
                        $echange->setCode_membre_morale($vendeur);
                        $echange->setCode_membre(Null);
                    }
               
                    $echange->setMontant($montant)
                            ->setDate_echange($date_alloc->toString('yyyy-MM-dd'))
                            ->setId_utilisateur(Null)
                            ->setType_echange('NB/NB')
                            ->setCat_echange('GCP')
                            ->setAgio(0)
                            ->setCompenser(0)
                            ->setCode_produit($code_produit)
                            ->setMontant_echange($montant)
                            ->setCode_compte_obt($compte_bc);
                    $m_echange->save($echange);
                
                    // Mise à jour du compte gcp vendeur ou prestataire
                    $compte->setSolde($compte->getSolde() - $montant);
                    $m_compte->update($compte);

                    // Mise à jour du Terminal d'Echange vendeur ou prestataire
                    $tegc->setMontant_utilise($tegc->getMontant_utilise() + $montant);
                    $tegc->setSolde_tegc($tegc->getSolde_tegc() - $montant);
                    $m_tegc->update($tegc);
                
                    //Enrégistrement dans la table eu_approvisionnement
                    $count_appro = $approvisionnement_mapper->findConuter() + 1;
                    $approvisionnement->setId_approvisionnement($count_appro);
                    $approvisionnement->setCode_membre_apporteur($vendeur);
                    $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
                    $approvisionnement->setDate_approvisionnement($date_alloc->toString('yyyy-MM-dd HH:mm:ss'));
                    $approvisionnement->setType_approvisionnement("APPRO_BL");
                    $approvisionnement->setMontant_approvisionnement($montant);
                    $approvisionnement->setId_canton($id_canton);
                    $approvisionnement_mapper->save($approvisionnement);
                
                    //Mise à jour des GCP Vendeur ou Prestataire
                    $gcps = $m_gcp->findGcpByTegcp($code_tegc);
                    $reste = $montant;
                    if(count($gcps) > 0 && $gcps != false) {
                        $j = 0;
                        while($reste > 0 && $j < count($gcps)) {
                            $rowgcp = $gcps[$j];
                            if($rowgcp->getReste() < $reste) {
                                //Enrégistrement dans la table eu_detail_approvisionnement
                                $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
                                $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
                                $detailapprovisionnement->setId_approvisionnement($count_appro);
                                $detailapprovisionnement->setId_credit($rowgcp->getId_credit());
                                $detailapprovisionnement->setCode_compte($compte_gcp_vendeur);
                                $detailapprovisionnement->setMontant_detail_approvisionnement($rowgcp->getReste());
                                $detailapprovisionnement_mapper->save($detailapprovisionnement);
                                
                                $reste = $reste - $rowgcp->getReste();                       
                                //Mise à jour des GCP
                                $rowgcp->setMont_preleve($rowgcp->getMont_preleve() + $rowgcp->getReste());
                                $rowgcp->setReste(0);
                                $m_gcp->update($rowgcp);
                                $j = $j + 1;
                          
                            } else {
                                //Enrégistrement dans la table eu_detail_approvisionnement
                                $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
                                $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
                                $detailapprovisionnement->setId_approvisionnement($count_appro);
                                $detailapprovisionnement->setId_credit($rowgcp->getId_credit());
                                $detailapprovisionnement->setCode_compte($compte_gcp_vendeur);
                                $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
                                $detailapprovisionnement_mapper->save($detailapprovisionnement);
                                
                                // Mise à jour des GCP
                                $rowgcp->setMont_preleve($rowgcp->getMont_preleve() + $reste);
                                $rowgcp->setReste($rowgcp->getReste() - $reste);
                                $m_gcp->update($rowgcp);
                          
                                $reste = 0;
                                $j = $j + 1;                            
                            }                        
                        }
                    }  else  {
                        //$db->rollback();
                        $return_error = "Le solde des details de GCP  est vide ...";
                        return $return_error;
                    }
                
                    //Enrégistrement dans la table eu_operation
                    //$countop = $m_operation->findConuter() + 1;
                    //$operation->setId_operation($countop)
                    
                    $operation->setDate_op($date_alloc->toString('yyyy-MM-dd'))
                            ->setHeure_op($date_alloc->toString('hh:mm:ss'))
                            ->setId_utilisateur(Null)
                            ->setMontant_op($montant)
                            ->setCode_produit('GCP')
                            ->setLib_op('APPROVISIONNEMENT DU GCP')
                            ->setType_op('APPROVISIONNEMENT')
                            ->setCode_cat('TPAGCP');
                    if(substr($vendeur,19,1) == "P") {
                        $operation->setCode_membre($vendeur);
                    } else {
                        $operation->setCode_membre_morale($vendeur);
                    }
                    $m_operation->save($operation);
                    //$countop = $db->lastInsertId();
                    $countop = $m_operation->findConuter();
                
                    // Enregistrement dans la table eu_compte_credit
                    $maxcc = $m_cc->findConuter() + 1;
                    $source = $vendeur.$date_alloc->toString('yyyyMMddHHmmss');
                    $cc->setId_credit($maxcc)
                       ->setCode_produit($code_produit)
                       ->setMontant_place($montant)
                       ->setDatedeb($date_deb->toString('yyyy-MM-dd'))
                       ->setDatefin($date_fin->toString('yyyy-MM-dd'))
                       ->setDate_octroi($date_alloc->toString('yyyy-MM-dd'))
                       ->setSource($source)
                       ->setCode_compte($compte_bc)
                       ->setId_operation($countop)
                       ->setBnp(0)
                       ->setCode_type_credit(NULL)
                       ->setPrk(0)
                       ->setCompte_source($compte_gcp_vendeur)
                       ->setMontant_credit(0)
                       ->setRenouveller('N')
                       ->setDomicilier(0)
                       ->setAffecter(0)
                       ->setKrr('N')
                       ->setCode_membre($vendeur);
                    $m_cc->save($cc);
                    
                    //Enregistrement dans la table eu_cnp
                    $maxcnp = $m_cnp->findConuter() + 1;
                    $cnp->setId_cnp($maxcnp)
                        ->setId_credit($maxcc)
                        ->setDate_cnp($date_alloc->toString('yyyy-MM-dd'))
                        ->setMont_debit($montant)
                        ->setMont_credit($montant)
                        ->setSolde_cnp(0)
                        ->setType_cnp($code_produit)
                        ->setSource_credit($source)
                        ->setCode_capa(null)
                        ->setTransfert_gcp(0)
                        ->setId_gcp(null)
                        ->setOrigine_cnp('FG'.$code_produit);
                    $m_cnp->save($cnp);

                    //Enrégistrement dans la table eu_cnp_entree
                    $ecnp = new Application_Model_EuCnpEntree();
                    $select_cnpe = $tcnp->select();
                    $select_cnpe->from($tcnp,array('MAX(id_cnp_entree) as count'));
                    $result_cnpe = $tcnp->fetchAll($select_cnpe);
                    $row_cnpe = $result_cnpe->current();
                                
                    $ecnp->setId_cnp_entree($row_cnpe['count'] + 1)
                            ->setId_cnp($maxcnp)
                            ->setDate_entree($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setMont_cnp_entree($montant)
                            ->setType_cnp_entree('GCP');
                    $tcnp->insert($ecnp->toArray());
                       
                    //Enrégistrement dans la table eu_smc
                    $maxsmc = $m_smc->findConuter() + 1;
                    $smc->setId_smc($maxsmc)
                            ->setDate_smc($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                            ->setMontant($montant)
                            ->setEntree(0)
                            ->setSortie(0)
                            ->setSolde(0)
                            ->setId_credit($maxcc)
                            ->setSource_credit($source)
                            ->setMontant_solde($montant)
                               ->setOrigine_smc(0);
                            $smc->setType_smc('CNCSnr');
                            $smc->setCode_smcipn(null);
                            $smc->setCode_smcipnp(null);
                            $smc->setCode_capa(null);
                            $smc->setCode_domicilier(null);
                            $m_smc->save($smc);
                            
                            // Enrégistrement dans la table eu_gcp du bénéficiaire
                            $maxgcp = $m_gcp->findConuter() + 1;
                            $gcp->setId_gcp($maxgcp)
                                ->setId_credit($maxcc)
                                ->setCode_tegc($code_tegcbenef)
                                ->setSource($source)
                                ->setDate_conso($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                                ->setCode_membre($beneficiaire)
                                ->setCode_cat("TPAGCP")
                                ->setMont_gcp($montant)
                                ->setMont_preleve(0)
                                ->setReste($montant)
                                ->setBon_id(NULL)
                                ->setType_gcp(NULL);
                            $m_gcp->save($gcp);
                             
                            // Enrégistrement dans la table eu_cnp pour le gcp
                            $maxcnpgcp = $m_cnp->findConuter() + 1;
                            $sourcegcp = $beneficiaire.$date_alloc->toString('yyyyMMddHHmmss');
                            $cnp->setId_cnp($maxcnpgcp)
                                ->setId_credit(NULL)
                                 ->setDate_cnp($date_alloc->toString('yyyy-MM-dd HH:mm:ss'))
                                 ->setMont_debit($montant)
                                 ->setMont_credit(0)
                                 ->setSolde_cnp($montant)
                                 ->setType_cnp($code_produit)
                                 ->setSource_credit($sourcegcp)
                                 ->setCode_capa(null)
                                 ->setTransfert_gcp(0)
                                 ->setId_gcp($maxgcp)
                                 ->setOrigine_cnp($code_produit);
                            $m_cnp->save($cnp);
                            
                            // Enrégistrement dans la table eu_credit_consommer
                            $maxconso = $m_credit_conso->findConuter() + 1;
                            $credit_conso->setId_consommation($maxconso)
                                         ->setId_operation($countop)
                                         ->setCode_produit($code_produit)
                                         ->setCode_compte($compte_bc)
                                         ->setCode_membre_dist($beneficiaire)
                                         ->setMont_consommation($montant)
                                         ->setDate_consommation($date_alloc->toString('yyyy-MM-dd'))
                                         ->setHeure_consommation($date_alloc->toString('HH:mm:ss'))
                                         ->setId_credit(NULL)
                                         ->setBon_id(NULL)
                                         ->setType_produit(NULL)
                                         ->setCode_type_credit(NULL);
                                                 
                            if(substr($vendeur,19,1) == "P") {           
                              $credit_conso->setCode_membre($vendeur);           
                            } else {
                              $credit_conso->setCode_membre_morale($vendeur);
                            }
                            $m_credit_conso->save($credit_conso);
                            
                            $res1 = $m_compte->find($compte_gcp_beneficiaire,$compte);
                            $rep1 = $m_tegc->find($code_tegcbenef,$tegc);
                            
                            //Mise à jour du compte gcp bénéficiaire
                            $compte->setSolde($compte->getSolde() + $montant);
                            $m_compte->update($compte);

                            //Mise à jour du Terminal d'Echange bénéficiaire
                            $tegc->setMontant($tegc->getMontant() + $montant);
                            $tegc->setSolde_tegc($tegc->getSolde_tegc() + $montant);
                            $m_tegc->update($tegc);
                            
                            //$db->commit();
                            $return_error = "Operation  bien  effectuee ...";
                            //$this->_redirect('/souscriptionbon/addblappro');
                            return $return_error;
                            
                                        
            } catch(Exception $exc) {
                $return_error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                //$db->rollback();
                return $return_error;
            }
        //}

}




    public static function approBS($code_apporteur, $montant_bs, $code_benef, $type_compte, $id_canton) {
        $sessionmembre = new Zend_Session_Namespace('membre');

       
        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
      
        $date_id = Zend_Date::now();
        $date_fin = new Zend_Date(Zend_Date::ISO_8601);
        $periode = Util_Utils::getParametre('periode','valeur');
        $date_fin->addDay($periode);
       
        //$request = $this->getRequest ();
        //if($request->isPost()) {
            //$db = Zend_Db_Table::getDefaultAdapter();
            //$db->beginTransaction();
            try {
                $compte = new Application_Model_EuCompte();
                $compte_mapper =  new Application_Model_EuCompteMapper();
             
                $cc_mapper =  new Application_Model_EuCompteCreditMapper();
                $cc = new Application_Model_EuCompteCredit();
             
                $place = new Application_Model_EuOperation();
                $place_mapper = new Application_Model_EuOperationMapper();
             
                $membre = new Application_Model_EuMembre();
                $membre_mapper =  new Application_Model_EuMembreMapper();
             
                $approvisionnement = new Application_Model_EuApprovisionnement();
                $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
             
                $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
                $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
             
                $apporteur = $code_apporteur;
                $beneficiaire = $code_benef;
                $montant = $montant_bs;
                $type_compte = $type_compte;
                $id_canton = $id_canton;
              
                $type_ressource = "NR";
                if($type_compte == "TCNCS") {
                    $code_cat = "TCNCS";
                }
              
                if($type_compte == "TPN") {
                    $code_cat = "TPN";
                }
              
                $produit = "CNCSnr";
              
                $retour = false;
                $findapporteur = $membre_mapper->find($apporteur,$membre);
                if($membre->desactiver == 1)  {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bs = $montant;
                    $return_error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
                    return $return_error;
                }
                
                if(strlen($beneficiaire) != 20) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bs = $montant;
                    $return_error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                    return $return_error;
                }                       
             
                $retour = $membre_mapper->find($beneficiaire,$membre);
                if(!$retour) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bs = $montant;
                    $return_error = "Le code membre du membre bénéficiaire est inexistant ...";
                    return $return_error;
                }
                
                if($membre->desactiver == 1)  {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bs = $montant;
                    $return_error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                    return $return_error;
                }
             
                if($beneficiaire == $apporteur) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bs = $montant;
                    $return_error = "Vous ne pouvez pas approvisionner les bon de salaire à vous même";
                    return $return_error;
                }
              
                $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
                $code_compte_beneficiaire = $type_ressource."-".$code_cat."-".$beneficiaire;
              
                $t_produit = new Application_Model_DbTable_EuCompteCredit();
                $select = $t_produit->select();
                $select->from($t_produit, array('sum(montant_credit) as somme'));
                $select->where('code_membre = ?', $apporteur);
                $select->where('code_compte like ?', $code_compte_apporteur);
             
                $result = $t_produit->fetchAll($select);
                $row = $result->current();
                $somme = $row['somme'];
                if($somme == null) {
                    $somme = 0;
                }
             
                $ret = $compte_mapper->find($code_compte_apporteur,$compte);
             
                if($compte->getSolde() < $montant) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bs = $montant;
                    $return_error = "Le solde de votre compte de bon de salaire est insuffisant pour effectuer cet approvisionnement ...";
                    return $return_error;             
                }
             
                if($somme < $montant) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bs = $montant;
                    $return_error = "Votre bon de salaire de  " . $somme . " XOF est insuffisant pour effectuer cet approvisionnement ...";
                    return $return_error;
                }
                
                
                
                        
                        //insertion dans la table eu_operation
                        $compteur = $place_mapper->findConuter() + 1;
                        $place->setId_operation($compteur)
                              ->setDate_op($date_id->toString('yyyy-MM-dd'))
                              ->setHeure_op($date_id->toString('HH:mm:ss'))
                              ->setId_utilisateur(null)
                              ->setMontant_op($montant)
                              ->setCode_produit($produit)
                              ->setLib_op("Approvisionnement du ".$produit)
                              ->setType_op('APPRO_BS')
                              ->setCode_cat($code_cat);
                   
                        if(substr($beneficiaire,-1,1) == 'P') {  
                            $place->setCode_membre($beneficiaire);
                        } else {
                            $place->setCode_membre_morale($beneficiaire);
                        }
                        $place_mapper->save($place);
               
                        $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
                        $compte->setSolde($compte->getSolde() + $montant);
                        $compte_mapper->update($compte);
                        
                        $cpte_origine = new Application_Model_EuCompte();
                        $res = $compte_mapper->find($code_compte_apporteur,$cpte_origine);
                        $cpte_origine->setSolde($cpte_origine->getSolde() - $montant);
                        $compte_mapper->update($cpte_origine);
              
                        //Enrégistrement dans la table eu_approvisionnement
                        $count_appro = $approvisionnement_mapper->findConuter() + 1;
              
                        $approvisionnement->setId_approvisionnement($count_appro);
                        $approvisionnement->setCode_membre_apporteur($apporteur);
                        $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
                        $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $approvisionnement->setType_approvisionnement("APPRO_BS");
                        $approvisionnement->setMontant_approvisionnement($montant);
                        $approvisionnement->setId_canton($id_canton);
                        $approvisionnement_mapper->save($approvisionnement);
               
                        $credits = $cc_mapper->findByCompte($code_compte_apporteur);
                        if($credits != false) {
                            $j = 0;
                            $reste = $montant;
                            $nbre_credit = count($credits);
                            while($reste > 0 && $j < $nbre_credit)  {
                                $credit = $credits[$j];
                                $id = $credit->getId_credit();
                                if($reste > $credit->getMontant_credit()) {
                                    //Enrégistrement dans la table eu_detail_approvisionnement
                                    $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
                                    $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
                                    $detailapprovisionnement->setId_approvisionnement($count_appro);
                                    $detailapprovisionnement->setId_credit($id);
                                    $detailapprovisionnement->setCode_compte($code_compte_apporteur);
                                    $detailapprovisionnement->setMontant_detail_approvisionnement($credit->getMontant_credit());
                                    $detailapprovisionnement_mapper->save($detailapprovisionnement);
                       
                                    //Enregistrement dans la table eu_compte_credit du bénéficiaire
                                    $maxcc = $cc_mapper->findConuter() + 1;
                                    $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
                                    $cc->setId_credit($maxcc)
                                       ->setCode_produit($credit->getCode_produit())
                                       ->setMontant_place($montant)
                                       ->setDatedeb($credit->getDatedeb())
                                       ->setDatefin($credit->getDatefin())
                                       ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                       ->setSource($source)
                                       ->setCode_compte($code_compte_beneficiaire)
                                       ->setId_operation($compteur)
                                       ->setBnp($credit->getBnp())
                                       ->setCode_type_credit($credit->getCode_type_credit())
                                       ->setPrk($credit->getPrk())
                                       ->setCompte_source($code_compte_apporteur)
                                       ->setMontant_credit($credit->getMontant_credit())
                                       ->setRenouveller($credit->getRenouveller())
                                       ->setDomicilier($credit->getDomicilier())
                                       ->setAffecter($credit->getAffecter())
                                       ->setKrr($credit->getKrr())
                                       ->setType_produit($credit->getType_produit())
                                       ->setCode_bnp($credit->getCode_bnp())
                                       ->setNbre_renouvel($credit->getNbre_renouvel())
                                       ->setType_recurrent($credit->getType_recurrent())
                                       ->setDuree($credit->getDuree())
                                       ->setId_bps($credit->getId_bps())
                                       ->setCode_membre($beneficiaire);
                                    $cc_mapper->save($cc);
                       
                                    //Mise à jour du compte crédit cncs apporteur
                                    $reste = $reste - $credit->getMontant_credit();
                                    $credit->setMontant_credit(0);
                                    $cc_mapper->update($credit);
                       
                                } else {
                                    //Enrégistrement dans la table eu_detail_approvisionnement
                                    $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
                                    $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
                                    $detailapprovisionnement->setId_approvisionnement($count_appro);
                                    $detailapprovisionnement->setId_credit($id);
                                    $detailapprovisionnement->setCode_compte($code_compte_apporteur);
                                    $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
                                    $detailapprovisionnement_mapper->save($detailapprovisionnement);    
                       
                                    //Enregistrement dans la table eu_compte_credit du bénéficiaire
                                    $maxcc = $cc_mapper->findConuter() + 1;
                                    $source = $beneficiaire.$date_id->toString('yyyyMMddHHmmss');
                       
                                    $cc->setId_credit($maxcc)
                                       ->setCode_produit($credit->getCode_produit())
                                       ->setMontant_place($montant)
                                       ->setDatedeb($credit->getDatedeb())
                                       ->setDatefin($credit->getDatefin())
                                       ->setDate_octroi($date_id->toString('yyyy-MM-dd'))
                                       ->setSource($source)
                                       ->setCode_compte($code_compte_beneficiaire)
                                       ->setId_operation($compteur)
                                       ->setBnp($credit->getBnp())
                                       ->setCode_type_credit($credit->getCode_type_credit())
                                       ->setPrk($credit->getPrk())
                                       ->setCompte_source($code_compte_apporteur)
                                       ->setMontant_credit($reste)
                                       ->setRenouveller($credit->getRenouveller())
                                       ->setDomicilier($credit->getDomicilier())
                                       ->setAffecter($credit->getAffecter())
                                       ->setKrr($credit->getKrr())
                                       ->setType_produit($credit->getType_produit())
                                       ->setCode_bnp($credit->getCode_bnp())
                                       ->setNbre_renouvel($credit->getNbre_renouvel())
                                       ->setType_recurrent($credit->getType_recurrent())
                                       ->setDuree($credit->getDuree())
                                       ->setId_bps($credit->getId_bps())
                                       ->setCode_membre($beneficiaire);
                                    $cc_mapper->save($cc);

                                    //Mise à jour du compte crédit apporteur
                                    $credit->setMontant_credit($credit->getMontant_credit() - $reste);
                                    $cc_mapper->update($credit);
                                    $reste = 0;                    
                                }                   
                                $j++;
                            }
               
                        } else {
                            //$db->rollback();
                            $this->view->code_benef = $beneficiaire;
                            $this->view->montant_bs = $montant;
                            $return_error = "Il n'y a pas de bon de salaire correspondant à ce compte " . $produit;
                            return $return_error;   
                        }
               
                        //$db->commit();              
                        $return_error = "Opération  bien  effectuée ...";
                        //$this->_redirect('/souscriptionbon/addbsappro');
                        return $return_error;
               
                    
                 
            } catch (Exception $exc) {
                $return_error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                //$db->rollback();
                return $return_error;
            }
      
        //}

        }




    public static function approBAi($code_apporteur, $montant_bai, $code_benef, $cat_compte, $id_canton) {
        $sessionmembre = new Zend_Session_Namespace('membre');


        
        $t_zone = new Application_Model_DbTable_EuZone();
        $zones = $t_zone->fetchAll();
        $this->view->zones = $zones;
        $t_pays = new Application_Model_DbTable_EuPays();
        $pays = $t_pays->fetchAll();
        $this->view->pays = $pays;
        $t_region = new Application_Model_DbTable_EuRegion();
        $regions = $t_region->fetchAll();
        $this->view->regions = $regions;
        $t_prefecture = new Application_Model_DbTable_EuPrefecture();
        $prefectures = $t_prefecture->fetchAll();
        $this->view->prefectures = $prefectures;
        $t_canton = new Application_Model_DbTable_EuCanton();
        $cantons = $t_canton->fetchAll();
        $this->view->cantons = $cantons;
        
        $date_id = Zend_Date::now();
        $date_fin = new Zend_Date(Zend_Date::ISO_8601);
        $periode = Util_Utils::getParametre('periode','valeur');
        $date_fin->addDay($periode);
         
        //$request = $this->getRequest();
        //if($request->isPost())  {
            //$db = Zend_Db_Table::getDefaultAdapter();
            //$db->beginTransaction();
            try {
                $compte = new Application_Model_EuCompte();
                $compte_mapper =  new Application_Model_EuCompteMapper();
                
                $capa = new Application_Model_EuCapa();
                $capa_mapper =  new Application_Model_EuCapaMapper();
             
                $place = new Application_Model_EuOperation();
                $place_mapper = new Application_Model_EuOperationMapper();
             
                $cnp = new Application_Model_EuCnp();
                $cnp_mapper = new Application_Model_EuCnpMapper();
             
                $cc_mapper =  new Application_Model_EuCompteCreditMapper();
                $cc = new Application_Model_EuCompteCredit();
                
                $membre = new Application_Model_EuMembre();
                $membre_mapper =  new Application_Model_EuMembreMapper();
              
                $membremorale = new Application_Model_EuMembreMorale();
                $membremorale_mapper =  new Application_Model_EuMembreMoraleMapper();
             
                $approvisionnement = new Application_Model_EuApprovisionnement();
                $approvisionnement_mapper =  new Application_Model_EuApprovisionnementMapper();
             
                $detailapprovisionnement = new Application_Model_EuDetailApprovisionnement();
                $detailapprovisionnement_mapper =  new Application_Model_EuDetailApprovisionnementMapper();
                
                $tcnp = new Application_Model_DbTable_EuCnpEntree();
             
                $type_ressource = "";
                $code_cat = "";
                $code_cat1 = "";
                $produit = "";
                
                $apporteur = $code_apporteur;
                $beneficiaire = $code_benef;
                $montant = $montant_bai;
                $cat_compte = $cat_compte;
                $id_canton = $id_canton;

                if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
                    $type_ressource = "NN";
                    $code_cat = "CAPA";
                    $code_cat1 = "CAPA";
                    $cumul = $capa_mapper->CumulBAiByMembre($apporteur,$cat_compte);                  
                } elseif($cat_compte == "BC") {
                    $type_ressource = "NB";
                    $code_cat = "TFS";
                    $code_cat1 = "TFS";
                    $produit = "FS";
                }
                
                if(substr($apporteur,-1,1) == 'P')  {
                    $findapporteur = $membre_mapper->find($apporteur,$membre);
                    if($membre->desactiver == 1)  {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bai = $montant;
                        $return_error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
                        return $return_error;
                    }
                } else  {
                    $findapporteur = $membremorale_mapper->find($apporteur,$membremorale);
                    if($membremorale->desactiver == 1)  {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bai = $montant;
                        $return_error = "Ce membre dont le code membre  ".$apporteur."  n'est pas autoriser à effectuer de cette opération  ...";
                        return $return_error;
                    }
                }
                
                $retour = false;
                if(strlen($beneficiaire) != 20) {
                   //$db->rollback();
                   $this->view->code_benef = $beneficiaire;
                   $this->view->montant_bai = $montant;
                   $return_error = "Le Code Membre est errone. Verifiez bien le nombre de caracteres du Code Membre. Merci...";
                   return $return_error;
                }
              
                if(substr($beneficiaire,-1,1) == 'P') {
                   $retour = $membre_mapper->find($beneficiaire,$membre);
                } else {
                   $retour = $membremorale_mapper->find($beneficiaire,$membremorale); 
                }
              
                if(!$retour)  {
                  //$db->rollback();
                  $this->view->code_benef = $beneficiaire;
                  $this->view->montant_bai = $montant;
                  $return_error = "Le code membre du  beneficiaire est inexistant ...";
                  return $return_error;
                }
                
                if(substr($beneficiaire,-1,1) == 'P') {
                    if($membre->desactiver == 1)  {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bai = $montant;
                        $return_error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                        return $return_error;
                    }
                } else {
                    if($membremorale->desactiver == 1)  {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bai = $montant;
                        $return_error = "Ce membre dont le code membre  ".$beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                        return $return_error;
                    }
                }
                
                
              
                if($beneficiaire == $apporteur) {
                   //$db->rollback();
                   $this->view->code_benef = $beneficiaire;
                   $this->view->montant_bai = $montant;
                   $return_error = "Vous ne pouvez pas approvisionner les bons d'achat interne à vous meme ...";
                   return $return_error;
                }
               
                /*if($cat_compte == "CNCS" && substr($beneficiaire,-1,1) == 'M')  {
                   //$db->rollback();
                   $this->view->code_benef = $beneficiaire;
                   $this->view->montant_bai = $montant;
                   $return_error = "Seules les membres personnes physiques disposent de compte salaire ...";
                   return $return_error;
                }*/
                
                $code_compte_apporteur = $type_ressource."-".$code_cat."-".$apporteur;
                $code_compte_beneficiaire = $type_ressource."-".$code_cat1."-".$beneficiaire;
                
                $ret = $compte_mapper->find($code_compte_apporteur,$compte);
                
                if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
                   
                    if($cumul < $montant) {
                        //$db->rollback();
                        $this->view->code_benef = $beneficiaire;
                        $this->view->montant_bai = $montant;
                        $return_error = "Le cumul des montants de votre compte de bon d'achat interne est insuffisant ...";
                        return $return_error;
                    }
                   
                } 
                
                if($compte->getSolde() == 0) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bai = $montant;
                    $return_error = "Le solde de votre compte de bon d'achat interne est egale a 0 ...";
                    return $return_error;             
                }
                
                
                if($compte->getSolde() < $montant) {
                    //$db->rollback();
                    $this->view->code_benef = $beneficiaire;
                    $this->view->montant_bai = $montant;
                    $return_error = "Le solde de votre compte de bon d'achat interne est insuffisant pour effectuer cet approvisionnement ...";
                    return $return_error;             
                }
                
                    
                        if(!$ret) {
                            $compte->setSolde($compte->getSolde() - $montant);
                            $compte_mapper->update($compte);
                        }
                
                        $result = $compte_mapper->find($code_compte_beneficiaire,$compte);
                        if(!$result) {
                            $compte->setCode_cat($code_cat1)
                               ->setCode_compte($code_compte_beneficiaire)
                               ->setCode_type_compte($type_ressource)
                               ->setDate_alloc($date_id->toString('yyyy-MM-dd'))
                               ->setDesactiver(0)
                               ->setLib_compte($code_cat1)
                               ->setSolde($montant);
                         
                            if(substr($beneficiaire,-1,1) == 'M') {  
                                $compte->setCode_membre(NULL);
                                $compte->setCode_membre_morale($code);
                            } else {
                                $compte->setCode_membre($code);
                                $compte->setCode_membre_morale(null);
                            }                    
                            $compte_mapper->save($compte);
                  
                        } else {
                            $compte->setSolde($compte->getSolde() + $montant);
                            $compte_mapper->update($compte);
                        }
                
                        //Enrégistrement dans la table eu_approvisionnement
                        $count_appro = $approvisionnement_mapper->findConuter() + 1;
              
                        $approvisionnement->setId_approvisionnement($count_appro);
                        $approvisionnement->setCode_membre_apporteur($apporteur);
                        $approvisionnement->setCode_membre_beneficiaire($beneficiaire);
                        $approvisionnement->setDate_approvisionnement($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                        $approvisionnement->setType_approvisionnement("APPRO_BAI");
                        $approvisionnement->setMontant_approvisionnement($montant);
                        $approvisionnement->setId_canton($id_canton);
                        $approvisionnement_mapper->save($approvisionnement);
                
                        if($cat_compte == "CNCS" || $cat_compte == "GCP" || $cat_compte == "MF11000" || $cat_compte == "MF107" || $cat_compte == "RPG" || $cat_compte == "I")  {
                            $creditcapas = $capa_mapper->fetchAllBAiByMembre($apporteur,$cat_compte);
                            if($creditcapas != NULL) {
                                $j = 0;
                                $reste = $montant;
                                $nbre_capa = count($creditcapas);
                                while($reste > 0 && $j < $nbre_capa)  {
                                    $creditcapa = $creditcapas[$j];
                                    $id = $creditcapa->getCode_capa();
                                    if($reste > $creditcapa->getMontant_solde()) {
                                        //Enrégistrement dans la table eu_detail_approvisionnement
                                        $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
                                        $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
                                        $detailapprovisionnement->setId_approvisionnement($count_appro);
                                        $detailapprovisionnement->setId_credit(null);
                                        $detailapprovisionnement->setCode_capa($id);
                                        $detailapprovisionnement->setCode_compte($code_compte_apporteur);
                                        $detailapprovisionnement->setMontant_detail_approvisionnement($creditcapa->getMontant_solde());
                                        $detailapprovisionnement_mapper->save($detailapprovisionnement);
                           
                                        //Mise à jour du compte crédit apporteur
                                        $reste = $reste - $creditcapa->getMontant_solde();
                                        $creditcapa->setMontant_utiliser($creditcapa->getMontant_utiliser() + $creditcapa->getMontant_solde());
                                        $creditcapa->setMontant_solde(0);
                                        $capa_mapper->update($creditcapa);
                           
                                    } else {
                                        //Enrégistrement dans la table eu_detail_approvisionnement
                                        $maxdappro = $detailapprovisionnement_mapper->findConuter() + 1;
                                        $detailapprovisionnement->setId_detail_approvisionnement($maxdappro);
                                        $detailapprovisionnement->setId_approvisionnement($count_appro);
                                        $detailapprovisionnement->setId_credit(null);
                                        $detailapprovisionnement->setCode_capa($id);
                                        $detailapprovisionnement->setCode_compte($code_compte_apporteur);
                                        $detailapprovisionnement->setMontant_detail_approvisionnement($reste);
                                        $detailapprovisionnement_mapper->save($detailapprovisionnement);
                        
                                        //Mise à jour du compte crédit apporteur
                                        $creditcapa->setMontant_utiliser($creditcapa->getMontant_utiliser() + $reste);
                                        $creditcapa->setMontant_solde($creditcapa->getMontant_solde() - $reste);
                                        $capa_mapper->update($credit);
                                        $reste = 0;
                                    }
                                    $j++;  
                                }
                     
                                //Creation du capa du beneficiaire
                                $code_capa = 'CAPA' .$date_id->toString('yyyyMMddHHmmss');
                                $capa->setCode_capa($code_capa)
                                     ->setCode_compte($code_compte_beneficiaire)
                                     ->setDate_capa($date_id->toString('yyyy-MM-dd'))
                                     ->setHeure_capa($date_id->toString('HH:mm:ss'))
                                     ->setCode_membre($beneficiaire)
                                     ->setMontant_capa($montant)
                                     ->setMontant_utiliser(0)
                                     ->setMontant_solde($montant)
                                     ->setId_operation(null)
                                     ->setType_capa($cat_compte)
                                     ->setEtat_capa('Actif')
                                     ->setCode_produit($cat_compte)
                                     ->setOrigine_capa("BAI");
                                $capa_mapper->save($capa); 
                            }
                  
                        } 
                
                        
                
                            //$db->commit();              
                            $return_error = "Operation  bien  effectuee ...";
                            //$this->_redirect('/souscriptionbon/addintappro');
                            return $return_error;
                    
            
            } catch (Exception $exc) {
              $return_error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
              //$db->rollback();
              return $return_error;
            }
     
        //}
     

        }
 





    public static function addBAn($code_membre_ban, $detail_numero, $detail_date, $detail_montant, $detail_libelle, $code_banque_faip_togo) {

//$detail_numero = $numero;
//$detail_date = $date; 
//$detail_montant = $montant; 
$detail_montant = str_replace(" ", "", $detail_montant);
//$detail_montant = str_replace(".", "", $detail_montant);
//$detail_montant = str_replace(",", "", $detail_montant);
//$detail_libelle = $libelle;
//$code_banque_faip_togo = "FAIP";

$date_id = new Zend_Date(Zend_Date::ISO_8601);

$code_membre_ban = trim($code_membre_ban);
$ok = 0;
if($code_membre_ban != ""){


                        /////////////////controle numero de banque
                        $eubon_neutre_detail = new Application_Model_DbTable_EuBonNeutreDetail();
                        $select = $eubon_neutre_detail->select()
                                                ->where('bon_neutre_detail_banque = ?',$code_banque_faip_togo)
                                                ->where('bon_neutre_detail_numero = ?',$detail_numero)
                                                ->where('bon_neutre_detail_date_numero = ?',$detail_date)
                                                ;
                        if ($rowseubon_neutre_detail = $eubon_neutre_detail->fetchRow($select)) {
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($rowseubon_neutre_detail->bon_neutre_id, $bon_neutre);

                                $code_BAn = $bon_neutre->bon_neutre_code;

                            //$db->rollback();
                            ////echo $this->view->message = "Numéro de banque déjà utilisé ...";
            $ok = 0;
                            //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            //return;
                        }else{

                        /////////////////controle email
                        
                            ////echo $this->view->message = $code_membre_ban;

                        /////////////////controle montant
                        




//$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);


/////////////////////////////////////controle code membre
if(strlen($code_membre_ban) != 20) {
                                    //$db->rollback();
                                    ////echo $this->view->message = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
            $ok = 0;
                                    //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    //return;
}
if(substr($code_membre_ban, -1, 1) == 'P'){
                                $membre = new Application_Model_EuMembre();
                                $membre_mapper = new Application_Model_EuMembreMapper();
                                $membre_mapper->find($code_membre_ban, $membre);
                                if(count($membre) == 0){
                                    //$db->rollback();
                                    ////echo $this->view->message = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
             $ok = 0;
                                   //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    //return;
                                }else{
                                $nom_membre = $membre->nom_membre;
                                $prenom_membre = $membre->prenom_membre;
                                $raison_sociale = "";
                                $email_membre = $membre->email_membre;
                                $portable_membre = $membre->portable_membre;
                                $id_canton = $membre->id_canton;

$libelle = str_ireplace(" ", "", $nom_membre.$prenom_membre);
$libelle2 = str_ireplace(" ", "", $detail_libelle);
$pos1 = stripos($libelle2, $libelle);
if ($pos1 === false) {
            $ok = 0;
}else{
            $ok = 1;
}
                            }
}
if(substr($code_membre_ban, -1, 1) == 'M'){
                                $membremorale = new Application_Model_EuMembreMorale();
                                $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                                $membremorale_mapper->find($code_membre_ban, $membremorale);
                                if(count($membremorale) == 0){
                                    //$db->rollback();
                                    ////echo $this->view->message = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
            $ok = 0;
                                    //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                                    //return;
                                }else{
                                $nom_membre = "";
                                $prenom_membre = "";
                                $raison_sociale = $membremorale->raison_sociale;
                                $email_membre = $membremorale->email_membre;
                                $portable_membre = $membremorale->portable_membre;
                                $id_canton = $membremorale->id_canton;

$libelle = str_ireplace(" ", "", $raison_sociale);
$libelle2 = str_ireplace(" ", "", $detail_libelle);
$pos1 = stripos($libelle2, $libelle);
if ($pos1 === false) {
            $ok = 0;
}else{
            $ok = 1;
}
                            }
}


    
if($ok == 1){

                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($code_membre_ban);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $detail_montant);
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $detail_montant);
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($code_membre_ban);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($detail_montant);
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($detail_montant);
                            $bon_neutre->setBon_neutre_nom($nom_membre);
                            $bon_neutre->setBon_neutre_prenom($prenom_membre);
                            $bon_neutre->setBon_neutre_raison($raison_sociale);
                            $bon_neutre->setBon_neutre_email($email_membre);
                            $bon_neutre->setBon_neutre_mobile($portable_membre);
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($detail_montant);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($detail_montant);
                            $bon_neutre_detail->setBon_neutre_detail_banque($code_banque_faip_togo);
                            $bon_neutre_detail->setBon_neutre_detail_numero($detail_numero);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($detail_date);
                            $bon_neutre_detail->setId_canton($id_canton);
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);



            $table2 = new Application_Model_DbTable_EuRelevebancairedetail();
            $select2 = $table2->select();
            $select2->where("relevebancairedetail_relevebancaire IN (SELECT relevebancaire_id FROM eu_relevebancaire WHERE relevebancaire_banque = '".$code_banque_faip_togo."')");
            $select2->where("relevebancairedetail_numero = '".$detail_numero."'");
            $resultSet2 = $table2->fetchRow($select2);



                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($resultSet2->relevebancairedetail_id, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);

                            ///////////////////////////////////////////////////////////////////////////////////////

                            //$db->commit();
                            ////echo $this->view->message = "Opération bien effectuée. <br />
////Vous venez de souscrire au Bon d'Achat neutre (BAn). <br />
////Utilisez ce BAn pour : <br />
////- votre propre Activation Personne Physique et/ou Personne Morale <br />
////- la souscription pour tiers (CMFH) de votre choix <br />
////<br />
////Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
                            //$sessionmembre->code_BAn = $code_BAn;
    ////echo $this->view->message .= "<strong>Veuillez bien noter votre code BAn. Il est très important.</strong>Le cas échéant, en cas de perte, reprenez l'opération.";
            $ok = 1;

                            //$this->_redirect('/souscriptionbon/addsouscriptionbanperso');
                            //return;
}else{
  $ok = 0;
}

                        } 
}else{
  $ok = 0;
}

return $ok;
    }

















public static function genererPdfFAIPPP($code_membre = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre != ""){

$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($code_membre, $membre);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">BULLETIN D\'ADHESION</td>
        <td align="center" width="338">FAIP TOGO</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';/**/
$htmlpdf .= '
  <tr>
    <td colspan="5" align="center"><strong><u>BULLETIN D\'ADHESION</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="4" style="width:75%; border-bottom:1px dotted #000000;">N° de compte : &nbsp; </td>
    <td rowspan="4" style="width:25%; border:1px solid #000000;">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Nom : &nbsp; <strong>'.$membre->nom_membre.'</strong></td>
    <!--<td>&nbsp;</td>-->
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Prénoms : &nbsp; <strong>'.$membre->prenom_membre.'</strong></td>
    <!--<td>&nbsp;</td>-->
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Sexe : &nbsp; <strong>'.$membre->sexe_membre.'</strong></td>
    <!--<td>&nbsp;</td>-->
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Epoux (se) : &nbsp; </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Date de naissance : &nbsp; <strong>'.datefr($membre->date_nais_membre).'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Lieu de naissance : &nbsp; <strong>'.$membre->lieu_nais_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Nom et prénoms du père : &nbsp; <strong>'.$membre->pere_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Nom et prénoms de la mère : &nbsp; <strong>'.$membre->mere_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Profession : &nbsp; <strong>'.$membre->profession_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  ';

$pays = new Application_Model_EuPays();
$paysM = new Application_Model_EuPaysMapper();
$paysM->find($membre->id_pays, $pays);

$htmlpdf .= '
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Nationalité : &nbsp; <strong>'.$pays->nationalite.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Adresse village/ville : &nbsp; <strong>'.$membre->quartier_membre.' - '.$membre->ville_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Tél/cel : &nbsp; <strong>'.$membre->tel_membre.' / '.$membre->portable_membre.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">BP : &nbsp; <strong>'.$membre->bp_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td style="border-bottom:1px dotted #000000;">DATE : &nbsp; <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td>Signature</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Dépot : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <!--<tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>-->
  <tr>
    <td colspan="5" align="center"><strong><u>BENEFICIAIRE EN CAS DE DECES</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Je soussigné(e) &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5">Déclare donner après ma mort le solde de mon avoir FAIT TOGO moins toute dette envers celle-ci aux personnes suivantes : </td>
  </tr>
  <tr>
    <td><strong><u>Nom et Prénoms</u></strong></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"><strong><u>parentés</u></strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">1. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">2. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">3. &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right">Pour FAIP TOGO</td>
  </tr>
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PP_FAIP_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PP_FAIP_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}







public static function genererPdfFAIPPM($code_membre_morale = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre_morale != ""){

$membre_morale = new Application_Model_EuMembreMorale();
$membre_moraleM = new Application_Model_EuMembreMoraleMapper();
$membre_moraleM->find($code_membre_morale, $membre_morale);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">BULLETIN D\'ADHESION</td>
        <td align="center" width="338">FAIP TOGO</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
  <tr>
    <td style="width:25%; height:100px; border:1px solid #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td style="width:13%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td style="width:25%; border:1px solid #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td style="width:12%;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td style="width:25%; border:1px solid #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <!--<tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>-->
  ';/**/
$htmlpdf .= '
  <tr>
    <td colspan="5" align="center"><strong><u>BULLETIN D\'ADHESION</u></strong></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5" style="width:75%; border-bottom:1px dotted #000000;">N° de compte : &nbsp; </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Raison sociale : &nbsp; <strong>'.$membre_morale->raison_sociale.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="5"><strong>LES MANDATAIRES</strong></td>
  </tr>
  ';

$representationM = new Application_Model_EuRepresentationMapper();
$representation = $representationM->fetchAllByMembreMorale($code_membre_morale);
$i = 1;
foreach ($representation as $value) {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($value->code_membre, $membre);
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">'.$i.'. <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong> &nbsp;</td>
  </tr>
  ';
$i++;
}
for($j = $i; $j <= 3; $j++){
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">'.$j.'. &nbsp;</td>
  </tr>
  ';    
}
$htmlpdf .= '
  <!--<tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>-->
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Adresse Village/ville : &nbsp; <strong>'.$membre_morale->ville_membre.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Quartier : &nbsp; <strong>'.$membre_morale->quartier_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Tél : &nbsp; <strong>'.$membre_morale->tel_membre.'</strong></td>
    <td colspan="1" style="border-bottom:1px dotted #000000;">BP : &nbsp; <strong>'.$membre_morale->bp_membre.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Cel : &nbsp; <strong>'.$membre_morale->portable_membre.'</strong></td>
  </tr>
  ';


$htmlpdf .= '
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Date : &nbsp; <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Signature : &nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Dépot : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <!--<tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>-->
  <tr>
    <td colspan="5" align="center"><strong><u>Bénéficiaires en cas de décès</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Nous soussignés(es) &nbsp;</td>
  </tr>
  ';
$representationM = new Application_Model_EuRepresentationMapper();
$representation = $representationM->fetchAllByMembreMorale($code_membre_morale);
$i = 1;
foreach ($representation as $value) {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($value->code_membre, $membre);
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">'.$i.'. <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong> &nbsp;</td>
  </tr>
  ';
$i++;
}
for($j = $i; $j <= 3; $j++){
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">'.$j.'. &nbsp;</td>
  </tr>
  ';    
}
$htmlpdf .= '
  <tr>
    <td colspan="5">Déclarons donner après dissolution, le solde de notre avoir FAIT TOGO moins toute dette envers celle-ci aux personnes suivantes : </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">1. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">2. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">3. &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right">Pour FAIP TOGO</td>
  </tr>
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PM_FAIP_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PM_FAIP_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}
















public static function genererPdfCECLPP($code_membre = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre != ""){

$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($code_membre, $membre);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';/**/
$htmlpdf .= '
  <tr>
    <td colspan="5" align="center"><strong><u>BULLETIN D\'ADHESION / PERSONNE PHYSIQUE</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="4" style="width:75%; border-bottom:1px dotted #000000;">N° de compte : &nbsp; </td>
    <td rowspan="4" style="width:25%; border:1px solid #000000;">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Nom : &nbsp; <strong>'.$membre->nom_membre.'</strong></td>
    <!--<td>&nbsp;</td>-->
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Prénoms : &nbsp; <strong>'.$membre->prenom_membre.'</strong></td>
    <!--<td>&nbsp;</td>-->
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Sexe : &nbsp; <strong>'.$membre->sexe_membre.'</strong></td>
    <!--<td>&nbsp;</td>-->
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Epoux (se) : &nbsp; </td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Date de naissance : &nbsp; <strong>'.datefr($membre->date_nais_membre).'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Lieu de naissance : &nbsp; <strong>'.$membre->lieu_nais_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Nom et prénoms du père : &nbsp; <strong>'.$membre->pere_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Nom et prénoms de la mère : &nbsp; <strong>'.$membre->mere_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Profession : &nbsp; <strong>'.$membre->profession_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  ';

$pays = new Application_Model_EuPays();
$paysM = new Application_Model_EuPaysMapper();
$paysM->find($membre->id_pays, $pays);

$htmlpdf .= '
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Nationalité : &nbsp; <strong>'.$pays->nationalite.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="4" style="border-bottom:1px dotted #000000;">Adresse ville/village : &nbsp; <strong>'.$membre->quartier_membre.' - '.$membre->ville_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Tél/cel : &nbsp; <strong>'.$membre->tel_membre.' / '.$membre->portable_membre.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">BP : &nbsp; <strong>'.$membre->bp_membre.'</strong></td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td style="border-bottom:1px dotted #000000;">DATE : &nbsp; <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td>Signature</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Dépot : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <!--<tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>-->
  <tr>
    <td colspan="5" align="center"><strong><u>BENEFICIAIRE EN CAS DE DECES</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Je soussigné(e) &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5">Déclare donner après ma mort le solde de mon avoir CEC-L moins toute dette envers celle-ci aux personnes suivantes : </td>
  </tr>
  <tr>
    <td><strong><u>Nom, prénoms e lien de parentés</u></strong></td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">1. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">2. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">3. &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PP_CECL_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PP_CECL_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}







public static function genererPdfCECLPM($code_membre_morale = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre_morale != ""){

$membre_morale = new Application_Model_EuMembreMorale();
$membre_moraleM = new Application_Model_EuMembreMoraleMapper();
$membre_moraleM->find($code_membre_morale, $membre_morale);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
    <tr>
    <td colspan="5" align="center"><strong><u>BULLETIN D\'ADHESION / PERSONNE MORALE</u></strong></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5" style="width:75%; border-bottom:1px dotted #000000;">N° de compte : &nbsp; </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Raison sociale : &nbsp; <strong>'.$membre_morale->raison_sociale.'</strong></td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Agrément N°: &nbsp; <strong>'.$membre_morale->num_registre_membre.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">du &nbsp; </td>

  </tr>
  ';

$representationM = new Application_Model_EuRepresentationMapper();
if($representation = $representationM->findbyrep($code_membre_morale)){
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($representation->code_membre, $membre);
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Nom du responsable: &nbsp;  <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong> &nbsp;</td>
  </tr>
  ';
}
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Activite : &nbsp; <strong>'.$membre_morale->domaine_activite.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Adresse : &nbsp; <strong>'.$membre_morale->quartier_membre.' '.$membre_morale->ville_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Tél/cel : &nbsp; <strong>'.$membre_morale->tel_membre.' / '.$membre_morale->portable_membre.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">BP : &nbsp; <strong>'.$membre_morale->bp_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Email : &nbsp; <strong>'.$membre_morale->email_membre.'</strong></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Date : &nbsp; <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="2">Signature : &nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Dépot : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr><!---->
  <tr>
    <td colspan="5" align="center"><strong><u>REPRESENTANTS</u></strong></td>
  </tr>
  ';
$representationM = new Application_Model_EuRepresentationMapper();
$representation = $representationM->fetchAllByMembreMorale($code_membre_morale);
$htmlpdf .= '
  <tr>
    <td colspan="5">
<table width="100%">
<!--<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td> 
</tr>-->
    <tr>
  ';
$i = 1;
if(count($representation) > 0){
foreach ($representation as $value) {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($value->code_membre, $membre);
$htmlpdf .= '
        <td width="33%">
            <table width="100%" border="1" cellpadding="0" cellspacing="0">
                <tr>
                    <td style="height:150px; border-bottom:1px solid #000000;border-right:1px solid #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px solid #000000;border-right:1px solid #000000;">Nom et Prénoms <br /><br /><strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong> &nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px solid #000000;border-right:1px solid #000000;">Signature <br /><br /> &nbsp;</td>
                </tr>
            </table>
        </td>
  ';
$i++;
}
}
for($j = $i; $j <= 3; $j++){
$htmlpdf .= '
        <td width="33%">
            <table width="100%" border="1" cellpadding="0" cellspacing="0">
                <tr>
                    <td style="height:150px; border-bottom:1px solid #000000;border-right:1px solid #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px solid #000000;border-right:1px solid #000000;">Nom et Prénoms <br /><br /> &nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px solid #000000;border-right:1px solid #000000;">Signature <br /><br /> &nbsp;</td>
                </tr>
            </table>
        </td>
  ';    
}
$htmlpdf .= '
    </tr>
</table>
</td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PM_CECL_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PM_CECL_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}












public static function genererPdfMECITPP($code_membre = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre != ""){

$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($code_membre, $membre);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';/**/
$htmlpdf .= '
  <tr>
    <td colspan="5" align="center"><strong><u>FICHE D\'ADHESION / PERSONNE PHYSIQUE</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="4">&nbsp; </td>
    <td style="border-bottom:1px dotted #000000;">COMPTE N° : &nbsp; </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Je soussigné(e) : &nbsp; <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Profession : &nbsp; <strong>'.$membre->profession_membre.'</strong></td>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Adresse : &nbsp; <strong>BP : '.$membre->bp_membre.' - '.$membre->quartier_membre.' - '.$membre->ville_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Date et lieu de naissance : &nbsp; <strong>'.datefr($membre->date_nais_membre).' '.$membre->lieu_nais_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Fils ou fille de (nom du père) : &nbsp; <strong>'.$membre->pere_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Et de (nom de la mère) : &nbsp; <strong>'.$membre->mere_membre.'</strong></td>
  </tr>
  ';

$sitfam_membre = "";
if($membre->sitfam_membre == "C"){
$sitfam_membre = "Célibataire";
}else if($membre->sitfam_membre == "D"){
$sitfam_membre = "Divorcé(e)";
}else if($membre->sitfam_membre == "M"){
$sitfam_membre = "Marié(e)";
}else if($membre->sitfam_membre == "V"){
$sitfam_membre = "Veuf(ve)";
}

$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Etat civil : &nbsp; <strong>'.$sitfam_membre.'</strong></td>
  </tr>
  ';

$pays = new Application_Model_EuPays();
$paysM = new Application_Model_EuPaysMapper();
$paysM->find($membre->id_pays, $pays);

$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Nationalité : &nbsp; <strong>'.$pays->nationalite.'</strong></td>
  </tr>
  <tr>
    <td style="border-bottom:1px dotted #000000;">CIN &nbsp; </td>
    <td style="border-bottom:1px dotted #000000;">Passeport &nbsp; </td>
    <td style="border-bottom:1px dotted #000000;">Permis de conduire &nbsp; </td>
    <td style="border-bottom:1px dotted #000000;">Carte d\'électeur &nbsp; </td>
    <td style="border-bottom:1px dotted #000000;">Acte de naissance &nbsp; </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">N° de la pièce d\'identité : &nbsp; </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Sexe : &nbsp; <strong>'.$membre->sexe_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5">sollicite mon adhésion à la MECIT</td>
  </tr>
  <tr>
    <td colspan="5"><strong>Je m\'engage à respecter ses statuts et ses règlements. </strong></td>
  </tr>
  <tr>
    <td colspan="5" align="center"><strong><u>VERSEMENTS INITIAUX</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Achat de livret individuel : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Dépot initial: &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" align="center"><strong><u>HERITIER(E) DESIGNE(E)</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">En cas de décès, j\'ordonne que mon avoir soit verser à Mr/Mme : </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="5">Je pourrais changer le bénéficiaire en tout temps par avis adressé à la MECIT. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="3">&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Fait à Lomé, le <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
  </tr>
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr><!---->
  <tr>
    <td colspan="3" align="center">Signature du Responsable de MECIT</td>
    <td colspan="2" align="center">Signature du membre</td>
  </tr>
  <!--<tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>-->
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PP_MECIT_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PP_MECIT_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}







public static function genererPdfMECITPM($code_membre_morale = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre_morale != ""){

$membre_morale = new Application_Model_EuMembreMorale();
$membre_moraleM = new Application_Model_EuMembreMoraleMapper();
$membre_moraleM->find($code_membre_morale, $membre_morale);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
    <tr>
    <td colspan="5" align="center"><strong><u>FICHE D\'ADHESION / PERSONNE MORALE</u></strong></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Je soussigné(e) : &nbsp; <strong>'.$membre_morale->raison_sociale.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Adresse : &nbsp; <strong>BP : '.$membre_morale->bp_membre.' - '.$membre_morale->quartier_membre.' - '.$membre_morale->ville_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Activite principale : &nbsp; <strong>'.$membre_morale->domaine_activite.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">N° d\'immatriculation/Récépissé : &nbsp; <strong>'.$membre_morale->num_registre_membre.'</strong></td>
  </tr>
  ';

$representationM = new Application_Model_EuRepresentationMapper();
if($representation = $representationM->findbyrep($code_membre_morale)){
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($representation->code_membre, $membre);
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Représentée par : &nbsp;  <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong> &nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Fonction : &nbsp; <strong>'.$membre->profession_membre.'</strong></td>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Adresse : &nbsp; <strong>BP : '.$membre->bp_membre.' - '.$membre->quartier_membre.' - '.$membre->ville_membre.'</strong></td>
  </tr>
  ';
}
$htmlpdf .= '
  <tr>
    <td colspan="5">sollicite mon adhésion à la MECIT</td>
  </tr>
  <tr>
    <td colspan="5"><strong>Je m\'engage à respecter ses statuts et ses règlements. </strong></td>
  </tr>
  <tr>
    <td colspan="5" align="center"><strong><u>VERSEMENTS INITIAUX</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Achat de livret individuel : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Dépot initial: &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr><!---->
  ';
$representationM = new Application_Model_EuRepresentationMapper();
$representation = $representationM->fetchAllByMembreMorale2($code_membre_morale);
$htmlpdf .= '
  <tr>
    <td colspan="5">
<table width="100%" border="0" cellpadding="0" cellspacing="0">
<!--<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td> 
</tr>-->
    <tr>
  ';
$i = 2;
if(count($representation) > 0){
foreach ($representation as $value) {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($value->code_membre, $membre);
$htmlpdf .= '
        <td width="50%">
            <table width="100%" border="0" cellpadding="18" cellspacing="18">
                <tr>
                    <td align="center" style="width:300px;"><strong><u>'.$i.'ème Représentant</u></strong></td>
                </tr>
                <tr>
                    <td style="border-bottom:1px dotted #000000;">Nom et Prénoms : <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong> &nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px dotted #000000;">Fonction : <strong>'.$membre->profession_membre.'</strong> &nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px dotted #000000;">Signature : &nbsp;</td>
                </tr>
            </table>
        </td>
  ';
$i++;
}
}
for($j = $i; $j <= 3; $j++){
$htmlpdf .= '
        <td width="50%">
            <table width="100%" border="0" cellpadding="18" cellspacing="18">
                <tr>
                    <td align="center" style="width:300px;"><strong><u>'.$j.'ème Représentant</u></strong></td>
                </tr>
                <tr>
                    <td style="border-bottom:1px dotted #000000;">Nom et Prénoms : &nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px dotted #000000;">Fonction : &nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px dotted #000000;">Signature : &nbsp;</td>
                </tr>
            </table>
        </td>
  ';    
}
$htmlpdf .= '
    </tr>
</table>
</td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="3">&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Fait à Lomé, le <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
  </tr>
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr><!---->
  <tr>
    <td colspan="3" align="center">Signature du Responsable de MECIT</td>
    <td colspan="2" align="center">Signature du 1er Représentant</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PM_MECIT_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PM_MECIT_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}










public static function genererPdfMECIPP($code_membre = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre != ""){

$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($code_membre, $membre);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';/**/
$htmlpdf .= '
  <tr>
    <td style="height:150px; border:1px solid #000000;">&nbsp;</td>
    <td colspan="4">&nbsp;</td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="5" align="center"><strong><u>FICHE D\'ADHESION</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Je soussigné(e) : &nbsp; <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Fonction : &nbsp; <strong>'.$membre->profession_membre.'</strong></td>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Adresse : &nbsp; <strong>BP : '.$membre->bp_membre.' - '.$membre->quartier_membre.' - '.$membre->ville_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Date et lieu de naissance : &nbsp; <strong>'.datefr($membre->date_nais_membre).' '.$membre->lieu_nais_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Fils ou fille de (père) : &nbsp; <strong>'.$membre->pere_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Et de mère : &nbsp; <strong>'.$membre->mere_membre.'</strong></td>
  </tr>
  ';

$sitfam_membre = "";
if($membre->sitfam_membre == "C"){
$sitfam_membre = "Célibataire";
}else if($membre->sitfam_membre == "D"){
$sitfam_membre = "Divorcé(e)";
}else if($membre->sitfam_membre == "M"){
$sitfam_membre = "Marié(e)";
}else if($membre->sitfam_membre == "V"){
$sitfam_membre = "Veuf(ve)";
}

$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Etat civil : &nbsp; <strong>'.$sitfam_membre.'</strong></td>
  </tr>
  ';

$pays = new Application_Model_EuPays();
$paysM = new Application_Model_EuPaysMapper();
$paysM->find($membre->id_pays, $pays);

$htmlpdf .= '
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Nationalité : &nbsp; <strong>'.$pays->nationalite.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Sexe : &nbsp; <strong>'.$membre->sexe_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Personne à prévenir : &nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Tél : &nbsp; <strong>'.$membre->tel_membre.' / '.$membre->portable_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5">Sollicite mon adhésion à la <strong>MECI</strong></td>
  </tr>
  <tr>
    <td colspan="5">Je m\'engage à respecter ses règlements et ses statuts.</td>
  </tr>
  <tr>
    <td colspan="5" align="center"><strong><u>VERSEMENTS INITIAUX</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Dépot initial: &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" align="center"><strong><u>HERITIER DESIGNE</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">En cas de décès, j\'ordonne que mon avoir soit verser à Mr/Mme : </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="5">Je pourrais changer le bénéficiaire en tout temps par avis adressé à la mutuelle. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="3">&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Fait à Lomé, le <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
  </tr>
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr><!---->
  <tr>
    <td colspan="3" align="center">Signature du Responsable de MECI</td>
    <td colspan="2" align="center">Signature du membre</td>
  </tr>
  <!--<tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>-->
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PP_MECI_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PP_MECI_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}







public static function genererPdfMECIPM($code_membre_morale = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre_morale != ""){

$membre_morale = new Application_Model_EuMembreMorale();
$membre_moraleM = new Application_Model_EuMembreMoraleMapper();
$membre_moraleM->find($code_membre_morale, $membre_morale);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="5mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td style="height:150px; border:1px solid #000000;">&nbsp;</td>
    <td>&nbsp;</td>
    <td style="height:150px; border:1px solid #000000;">&nbsp;</td>
    <td>&nbsp;</td>
    <td style="height:150px; border:1px solid #000000;">&nbsp;</td>
  </tr><!---->
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
    <tr>
    <td colspan="5" align="center"><strong><u>BULLETIN D\'ADHESION PERSONNE MORALE</u></strong></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">RAISON SOCIALE : &nbsp; <strong>'.$membre_morale->raison_sociale.'</strong></td>
  </tr>
  ';

$statutjuridique = new Application_Model_EuStatutJuridique();
$statutjuridiqueM = new Application_Model_EuStatutJuridiqueMapper();
$statutjuridiqueM->find($membre_morale->code_statut, $statutjuridique);

$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">STATUT JURIDIQUE : &nbsp; <strong>'.$statutjuridique->libelle_statut.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">N° D\'AUTORISATION / AGREMENT : &nbsp; <strong>'.$membre_morale->num_registre_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">SIEGE SOCIALE : &nbsp; <strong>'.$membre_morale->quartier_membre.' - '.$membre_morale->ville_membre.'</strong></td>
    <td style="border-bottom:1px dotted #000000;">TEL : &nbsp; <strong>'.$membre_morale->tel_membre.' / '.$membre_morale->portable_membre.'</strong></td>
    <td style="border-bottom:1px dotted #000000;">BP : &nbsp; <strong>'.$membre_morale->bp_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">DATE DE CREATION : &nbsp; </td>
  </tr>
  ';

$representationM = new Application_Model_EuRepresentationMapper();
if($representation = $representationM->findbyrep($code_membre_morale)){
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($representation->code_membre, $membre);
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">NOM ET PRENOM DU REPRESENTANT ou DU PRESISENT : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;"><strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong> &nbsp;</td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">ADRESSE : &nbsp; <strong>BP : '.$membre->bp_membre.' - '.$membre->quartier_membre.' - '.$membre->ville_membre.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">CEL : &nbsp; <strong>'.$membre->portable_membre.'</strong></td>
  </tr>
  ';
}
$htmlpdf .= '
  <tr>
    <td colspan="5">Sollicitons notre adhésion à la MECI</td>
  </tr>
  <tr>
    <td colspan="5"><strong>Nous nous engageons à respecter ses règlements et ses statuts. </strong></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td colspan="5" align="center"><strong><u>VERSEMENTS INITIAUX</u></strong></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Dépot initial: &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
</tbody>
</table>
</page>
    <page backright="15mm" backleft="5mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
  <tr>
    <td colspan="5" align="center">Signature du compte</td>
  </tr>
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  ';
$representationM = new Application_Model_EuRepresentationMapper();
$representation = $representationM->fetchAllByMembreMorale($code_membre_morale);
$i = 1;
foreach ($representation as $value) {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($value->code_membre, $membre);
$htmlpdf .= '
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">'.$i.'- <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong> (1) &nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Signature &nbsp;</td>
  </tr>
  ';
$i++;
}
for($j = $i; $j <= 3; $j++){
$htmlpdf .= '
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">'.$j.'- Nom et prénoms &nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Signature &nbsp;</td>
  </tr>
  ';    
}
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td colspan="3">&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Fait à Lomé, le <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td colspan="3" align="left">Signature du Directeur MECI</td>
    <td colspan="2" align="right">Signature et nom du Représentant</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  <tr>
    <td colspan="2" align="left">(1) - Signature obligatoire</td>
    <td colspan="3" align="center">&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PM_MECI_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PM_MECI_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}









public static function genererPdfMUTUALPP($code_membre = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre != ""){

$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($code_membre, $membre);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  ';/**/
$htmlpdf .= '
  <tr>
    <td colspan="5" align="center"><strong><u>DEMANDE D\'ADHESION PERSONNE PHYSIQUE</u></strong></td>
  </tr>';
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">COMPTE N° : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Je soussigné(e) : &nbsp; <strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Né(e) le : &nbsp; <strong>'.datefr($membre->date_nais_membre).'</strong></td>
    <td colspan="3" style="border-bottom:1px dotted #000000;">à : &nbsp; <strong>'.$membre->lieu_nais_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Profession : &nbsp; <strong>'.$membre->profession_membre.'</strong></td>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Tél : &nbsp; <strong>'.$membre->tel_membre.' / '.$membre->portable_membre.'</strong></td>
  </tr>
  ';

$pays = new Application_Model_EuPays();
$paysM = new Application_Model_EuPaysMapper();
$paysM->find($membre->id_pays, $pays);

$htmlpdf .= '
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Nationalité : &nbsp; <strong>'.$pays->nationalite.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">BP : &nbsp; <strong>'.$membre->bp_membre.'</strong></td>
  </tr>
  ';

$sitfam_membre = "";
if($membre->sitfam_membre == "C"){
$sitfam_membre = "Célibataire";
}else if($membre->sitfam_membre == "D"){
$sitfam_membre = "Divorcé(e)";
}else if($membre->sitfam_membre == "M"){
$sitfam_membre = "Marié(e)";
}else if($membre->sitfam_membre == "V"){
$sitfam_membre = "Veuf(ve)";
}

$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Situation matrimoniale : &nbsp; <strong>'.$sitfam_membre.'</strong></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Personne à contacter : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Tél : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">N° de la pièce d\'identité : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Genre : &nbsp; <strong>'.$membre->sexe_membre.'</strong></td>
  </tr>
  <tr>
    <td colspan="5"><strong>Sollicite ma souscription au sein de la Mutuelle MUTUAL FINANCE</strong></td>
  </tr>
  <tr>
    <td colspan="5" align="center"><strong><u>VERSEMENTS INITIAUX</u></strong></td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Dépot : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Total : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5">HERITIER(S) DESIGNE(S)</td>
  </tr>
  <tr>
    <td colspan="5">En cas de décès ou d\'incapacité, je désigne : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="3"><strong><u>Nom et Prenom</u></strong></td>
    <td colspan="2"><strong><u>Lien de parenté</u></strong></td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">&nbsp;</td>
  </tr>
  <tr>
    <td colspan="5">Somme héritiers légal de mes biens et dettes auprès de la Mutuelle MUTUAL FINANCE. En cas de nécessité, je pourrais désigner l\'autre personne et les notifier à la Mutuelle MUTUAL FINANCE. &nbsp;</td>
  </tr>
  <tr>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Fait à &nbsp;</td>
    <td colspan="3" style="border-bottom:1px dotted #000000;">le <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
  </tr>
  <tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr><!---->
  <tr>
    <td colspan="5">Signature du souscripteur ou du tuteur (pour les mineurs) &nbsp;</td>
  </tr>
  <!--<tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>-->
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';

////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PP_MUTUAL_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PP_MUTUAL_".$code_membre."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}

}







public static function genererPdfMUTUALPM($code_membre_morale = "") {
         ini_set('memory_limit', '512M');

$date_id = new Zend_Date(Zend_Date::ISO_8601);

        if($code_membre_morale != ""){

$membre_morale = new Application_Model_EuMembreMorale();
$membre_moraleM = new Application_Model_EuMembreMoraleMapper();
$membre_moraleM->find($code_membre_morale, $membre_morale);



$htmlpdf = "";
/**/
//backbottom="10mm" backimgw="100%" backimgh="100%" backtop="10mm" backbottom="10mm"
$htmlpdf .= '
    <page backright="15mm" backleft="10mm">
    ';

$htmlpdf .= '
<page_footer>
<table width="100%" border="0" cellpadding="18" cellspacing="18">
    <tr>
        <td align="center" width="400">&nbsp;</td>
        <td align="center" width="338">&nbsp;</td>
    </tr>
</table>
</page_footer>
    ';
$htmlpdf .= '
<table width="100%" border="0" cellpadding="18" cellspacing="18">
<tbody>
';
$htmlpdf .= '
<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
    <tr>
    <td colspan="5" align="center"><strong><u>DEMANDE D\'ADHESION PERSONNE MORALE</u></strong></td>
  </tr>
  ';
$htmlpdf .= '
  <tr>
    <td colspan="3">&nbsp;</td>
    <td colspan="2" style="border:1px solid #000000;">Compte N° : &nbsp; </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Raison sociale : &nbsp; <strong>'.$membre_morale->raison_sociale.'</strong></td>
  </tr>
  <tr>
    <td colspan="3" style="border-bottom:1px dotted #000000;">Agrément N°: &nbsp; <strong>'.$membre_morale->num_registre_membre.'</strong></td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">du &nbsp; </td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Date de l\'AG constitutive : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Activités : &nbsp; <strong>'.$membre_morale->domaine_activite.'</strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Nom et Adresse du Président du Conseil d\'Administration : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">&nbsp;</td>
  </tr>
  ';
$representationM = new Application_Model_EuRepresentationMapper();
$representation = $representationM->fetchAllByMembreMorale($code_membre_morale);
$htmlpdf .= '
  <tr>
    <td colspan="5">
<table width="100%">
<!--<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td> 
</tr>-->
    <tr>
  ';
$i = 1;
if(count($representation) > 0){
foreach ($representation as $value) {
$membre = new Application_Model_EuMembre();
$membreM = new Application_Model_EuMembreMapper();
$membreM->find($value->code_membre, $membre);
$htmlpdf .= '
        <td width="33%">
            <table width="100%" border="1" cellpadding="0" cellspacing="0">
                <tr>
                    <td style="height:150px; border-bottom:1px solid #000000;border-right:1px solid #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px solid #000000;border-right:1px solid #000000;">Nom et Prénoms <br /><br /><strong>'.$membre->nom_membre.' '.$membre->prenom_membre.'</strong><br /><br />Tel. : <br /><br />Poste : <br />&nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px solid #000000;border-right:1px solid #000000;">Signature <br /> &nbsp;</td>
                </tr>
            </table>
        </td>
  ';
$i++;
}
}
for($j = $i; $j <= 3; $j++){
$htmlpdf .= '
        <td width="33%">
            <table width="100%" border="1" cellpadding="0" cellspacing="0">
                <tr>
                    <td style="height:150px; border-bottom:1px solid #000000;border-right:1px solid #000000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px solid #000000;border-right:1px solid #000000;">Nom et Prénoms <br /><br /><br /><br />Tel. : <br /><br />Poste : <br />&nbsp;</td>
                </tr>
                <tr>
                    <td style="border-bottom:1px solid #000000;border-right:1px solid #000000;">Signature <br /> &nbsp;</td>
                </tr>
            </table>
        </td>
  ';    
}
$htmlpdf .= '
    </tr>
</table>
</td>
  </tr>
  ';

$htmlpdf .= '
  <tr>
    <td colspan="3">&nbsp;</td>
    <td colspan="2" style="border-bottom:1px dotted #000000;">Date : &nbsp; <strong>'.datefr($date_id->toString('yyyy-MM-dd')).'</strong></td>
  </tr>
  <tr>
    <td colspan="5" align="center"><strong><u>VERSEMENTS INITIAUX</u></strong></td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Droit d\'adhésion : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Part sociale : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">Dépot : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="5" style="border-bottom:1px dotted #000000;">TOTAL : &nbsp;</td>
  </tr>
  <tr>
    <td colspan="3">&nbsp;</td>
    <td colspan="2"><strong>Certifié Sincère</strong> &nbsp;</td>
  </tr>
  <tr>
    <td style="border:2px solid #000000;">VISA : &nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
  </tr>
  <!--<tr>
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>

    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
    
    <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>-->
  ';
$htmlpdf .= '
  <tr>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td>&nbsp;</td>
    <td align="right"></td>
  </tr>
  ';



$htmlpdf .= '
</tbody>
</table>
</page>
';


////////////////////////////////////////////////////////////////////////////////
$filename = ''.Util_Utils::getParamEsmc(1).'/membrebanque.html';
$somecontent = $htmlpdf;

// Assurons nous que le fichier est accessible en écriture
if (is_writable($filename)) {

    // Dans notre exemple, nous ouvrons le fichier $filename en mode d'ajout
    // Le pointeur de fichier est placé à la fin du fichier
    // c'est là que $somecontent sera placé
    if (!$handle = fopen($filename, 'w+')) {
         echo "Impossible d'ouvrir le fichier ($filename)";
         exit;
    }

    // Ecrivons quelque chose dans notre fichier.
    if (fwrite($handle, $somecontent) === FALSE) {
       echo "Impossible d'écrire dans le fichier ($filename)";
       exit;
    }

    //echo "L'écriture de ($somecontent) dans le fichier ($filename) a réussi";

    fclose($handle);

} else {
    echo "Le fichier $filename n'est pas accessible en écriture.";
}

////////////////////////////////////////////////////////////////////////////
$file = $filename;
if (!is_dir("../../webfiles/pdf_banque/")) {
mkdir("../../webfiles/pdf_banque/", 0777);
}

$newfile = "../../webfiles/pdf_banque/FICHE_PM_MUTUAL_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss').".html";
$newnom = "FICHE_PM_MUTUAL_".$code_membre_morale."_".$date_id->toString('ddMMyyyyHHmmss');
$newchemin = "../../webfiles/pdf_banque/";

copy($file, $newfile);

    ob_start();
    include(dirname(__FILE__).'/../'.$newfile);
    $content = ob_get_clean();

    // convert to PDF
    require_once(dirname(__FILE__).'/../../public/html2pdf/html2pdf.class.php');
    try
    {
        $html2pdf = new HTML2PDF('P', 'A4', 'fr');
        $html2pdf->pdf->SetDisplayMode('fullpage');
        $html2pdf->writeHTML($content, isset($_GET['vuehtml']));
        //$html2pdf->writeHTML($content);
        $html2pdf->Output($newchemin.$newnom.'.pdf', "F");
    }
    catch(HTML2PDF_exception $e) {
        echo $e;
        exit;
    }

$file = $newchemin.$newnom.'.pdf';

unlink($newfile);

        if($_SERVER['SERVER_ADDR'] == Util_Utils::getParamEsmc(9)) {
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(9));
    }else{
      $domaine = str_replace("prod.", "", Util_Utils::getParamEsmcLib(10));
    }
        return str_replace("../../webfiles/", "http://webfiles.esmcgie.com/", $file);

}


}




    public static function addBAnAppro($code_membre, $bon_neutre_appro_beneficiaire, $bon_neutre_appro_montant) {



       $date_id = Zend_Date::now();
       //$request = $this->getRequest();
     
     //if($request->isPost()) {
      if(isset($code_membre) && $code_membre!="" && isset($bon_neutre_appro_beneficiaire) && $bon_neutre_appro_beneficiaire!="" && isset($bon_neutre_appro_montant) && $bon_neutre_appro_montant!="") {
          //$db = Zend_Db_Table::getDefaultAdapter();
              //$db->beginTransaction();
              try {
          $membreappro = new Application_Model_EuMembre();
                $m_membre  = new Application_Model_EuMembreMapper();
                  $membremoraleappro = new Application_Model_EuMembreMorale();
                $m_membremorale  = new Application_Model_EuMembreMoraleMapper(); 

                  if(substr($code_membre,19,1) == 'P')  {
                 $findappro = $m_membre->find($code_membre,$membreappro);
                 if($membreappro->desactiver != 0)  {
                  //$db->rollback();
                    $error = "Ce membre dont le code membre  ".$code_membre."  n'est pas autoriser à effectuer de cette opération  ...";
                  $ok = 0;
                 }
                }  else {
               $findappro = $m_membremorale->find($code_membre,$membremoraleappro);
               if($membremoraleappro->desactiver != 0)  {
               //$db->rollback();
                   $error = "Ce membre dont le code membre  ".$code_membre."  n'est pas autoriser à effectuer de cette opération  ...";
                 $ok = 0;
               }    
                }

                  if($bon_neutre_appro_beneficiaire == $code_membre) {
                     ////$db->rollback();
                     $error = "Le Code Membre du bénéficiaire doit etre different du Code Membre de l'apporteur. Merci...";
                     $ok = 0;
                  }
          
          /////////////////////////////////////controle code membre
                  if(strlen($bon_neutre_appro_beneficiaire) != 20) {
                     //$db->rollback();
                     $error = "Le Code Membre est erroné. Vérifiez bien le nombre de caractères du Code Membre. Merci...";
                     $ok = 0;
                  } else {
                     if(substr($bon_neutre_appro_beneficiaire, -1, 1) == 'P') {
                        $membre = new Application_Model_EuMembre();
                        $membre_mapper = new Application_Model_EuMembreMapper();
                        if(!($membre_mapper->find($bon_neutre_appro_beneficiaire,$membre))) {
              //$db->rollback();
                          $error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PP ...";
                          $ok = 0;
                        }
                
              if($membre->desactiver != 0) {
                //$db->rollback();
                        $error = "Ce membre dont le code membre  ".$bon_neutre_appro_beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                  $ok = 0;
              }
                    
                        $canton = $membre->id_canton;
                        $nom = $membre->nom_membre;
                        $prenom = $membre->prenom_membre;
                        $email = $membre->email_membre;
                        $mobile = $membre->portable_membre;
                        $raison = "";
            
                    } else if(substr($bon_neutre_appro_beneficiaire, -1, 1) == 'M') {
                        $membremorale = new Application_Model_EuMembreMorale();
                        $membremorale_mapper = new Application_Model_EuMembreMoraleMapper();
                        if(!($membremorale_mapper->find($bon_neutre_appro_beneficiaire, $membremorale))) {
                          //$db->rollback();
                          $error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre PM ...";
                          $ok = 0;
                        }
                
              if($membremorale->desactiver != 0)  {
              //$db->rollback();
                      $error = "Ce membre dont le code membre  ".$bon_neutre_appro_beneficiaire."  n'est pas autoriser à bénéficier de cette opération  ...";
                $ok = 0;
              }
                      
                        $canton = $membremorale->id_canton;
                        $nom = "";
                        $prenom = "";
                        $email = $membremorale->email_membre;
                        $mobile = $membremorale->portable_membre;
                        $raison = $membremorale->raison_sociale;
            
                        } else {
                            //$db->rollback();
                            $error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre...";
                            $ok = 0;
                        }
                     }
           
           $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                     $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($code_membre);
           
           if(count($bon_neutre2) == 0) {
              //$db->rollback();
                        $error = "Le Code Membre est erroné. Veuillez bien saisir le Code Membre ...";
                        $ok = 0; 
           }


          

                $ok_franchise_1 = 0;
                $ok_eli_anticipe_1 = 0;
                $ok_franchise_2 = 0;
                $ok_association_2 = 0;


                            $franchise = new Application_Model_EuFranchise();
                            $franchiseM = new Application_Model_EuFranchiseMapper();
                            $franchise2 = $franchiseM->fetchAllByMembreType($code_membre, "");
              if(count($franchise2) > 0){
                $ok_franchise_1 = 1;
              }
                    
                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($code_membre);
                    if(count($bon_neutre2) > 0){
                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
                    $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail_somme = $bon_neutre_detail_mapper->getSumByBonNeutreDetailBanque($bon_neutre->bon_neutre_id, "ELI");
                    if($bon_neutre_detail_somme > 0){
                $ok_eli_anticipe_1 = 1;
                    }
                  }


                            $franchise1 = new Application_Model_EuFranchise();
                            $franchise1M = new Application_Model_EuFranchiseMapper();
                            $franchise12 = $franchise1M->fetchAllByMembreType($bon_neutre_appro_beneficiaire, "");
              if(count($franchise12) > 0){
                $ok_franchise_2 = 1;
              }

                        $association1 = new Application_Model_EuAssociation();
                            $association1M = new Application_Model_EuAssociationMapper();
                            $association12 = $association1M->fetchAllByMembreGuichet($bon_neutre_appro_beneficiaire);
              if(count($association12) > 0){
                $ok_association_2 = 1;
              }

                    
/*if($ok_franchise_1 == 1 && $ok_eli_anticipe_1 == 1 && $ok_franchise_2 == 1 && $ok_association_2 == 1){
  $bon_neutre_appro_montant = $bon_neutre_appro_montant + ($bon_neutre_appro_montant * Util_Utils::getParamEsmc(19) / 100);
}else{
  $bon_neutre_appro_montant = $bon_neutre_appro_montant; 
}*/



          $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($code_membre);
                    if(count($bon_neutre2) > 0)  {
            if($ok_eli_anticipe_1 == 1){

            if($bon_neutre_appro_montant > $bon_neutre_detail_somme) {
                             //$db->rollback();
                             $error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             $ok = 0;
                        }
            }else{

            $bon_neutre = new Application_Model_EuBonNeutre();
                        $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                        $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);
            if($bon_neutre_appro_montant > $bon_neutre->getBon_neutre_montant_solde()) {
                             //$db->rollback();
                             $error = "Le montant à allouer est supérieur au solde de votre BAn...";
                             $ok = 0;
                        }
            }
            
          } else {
                        //$db->rollback();
                        $error = "Le membre apporteur ne dispose pas de BAn ...";
                        $ok = 0;
                    }
          

                    ////////////////////////////////////////
           
           //$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
                     do {
                        $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                        $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                        $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
                     } while(count($bon_neutre_detail2) > 0);
           
           $bon_neutre_appro = new Application_Model_EuBonNeutreAppro();
                     $bon_neutre_appro_mapper = new Application_Model_EuBonNeutreApproMapper();

                     $compteur_bon_neutre_appro = $bon_neutre_appro_mapper->findConuter() + 1;
                     $bon_neutre_appro->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                     $bon_neutre_appro->setBon_neutre_appro_beneficiaire(strtoupper($_POST['bon_neutre_appro_beneficiaire']));
                     $bon_neutre_appro->setBon_neutre_appro_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_appro->setBon_neutre_appro_montant($bon_neutre_appro_montant);
                     $bon_neutre_appro->setBon_neutre_appro_apporteur($code_membre);
                     $bon_neutre_appro_mapper->save($bon_neutre_appro);
           
           //$bon_neutre->setBon_neutre_code($code_BAn);
                     //$bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant());
                     $bon_neutre->setBon_neutre_montant_utilise($bon_neutre->getBon_neutre_montant_utilise() + $bon_neutre_appro_montant);
                     $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() - $bon_neutre_appro_montant);
                     $bon_neutreM->update($bon_neutre);

                     $bon_neutre_id = $bon_neutre->bon_neutre_id;
           
                      /*$bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                     $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                     $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                     $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                     $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                     $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_appro_montant);
                     $bon_neutre_utilise2M->save($bon_neutre_utilise2);*/
           
           ///////////////////////////////////////////////////////////////////////////

                     $mont = $bon_neutre_appro_montant;
                     $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();
                     $bon_neutre_detail = $bon_neutre_detail_mapper->fetchAllByBonNeutreValide($bon_neutre->bon_neutre_id);
           foreach($bon_neutre_detail as $detail) {
                       $bon_neutre_detail2 = new Application_Model_EuBonNeutreDetail();
                       $bon_neutre_detail2M = new Application_Model_EuBonNeutreDetailMapper();
                       $bon_neutre_detail2M->find($detail->bon_neutre_detail_id, $bon_neutre_detail2);

                       if($bon_neutre_detail2->getBon_neutre_detail_banque() == "" || $bon_neutre_detail2->getBon_neutre_detail_banque() == NULL) {
                          $appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();
                          $appro_detail = $appro_detail_mapper->fetchAllByBanque($detail->bon_neutre_appro_id);
                          $code_banque = $appro_detail->bon_neutre_appro_detail_banque;
                       } else {
                          $code_banque = $bon_neutre_detail2->getBon_neutre_detail_banque();
                       }

                       if($bon_neutre_detail2->getBon_neutre_detail_type() == "ELI"){
                        $code_banque2 = $bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else if($bon_neutre_detail2->getBon_neutre_detail_type() == "COM"){
                        $code_banque2 = "COM-".$bon_neutre_detail2->getBon_neutre_detail_numero();
                       }else{
                        $code_banque2 = $code_banque;
                       }


                       if($bon_neutre_detail2->getBon_neutre_detail_montant_solde() < $mont) {
                          $mont = $mont - $bon_neutre_detail2->getBon_neutre_detail_montant_solde();
                          $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                          $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                          $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                          $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                          $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                          $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                          $bon_neutre_detail2M->update($bon_neutre_detail2);
                                
           
                     $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                     $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                     $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                     $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                     $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                     $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_utilise2->setBon_neutre_utilise_montant($bon_neutre_detail2->getBon_neutre_detail_montant_solde());
                     $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                     $bon_neutre_utilise2M->save($bon_neutre_utilise2);
           
                        } else {
                          $bon_neutre_appro_detail = new Application_Model_EuBonNeutreApproDetail();
                          $bon_neutre_appro_detail_mapper = new Application_Model_EuBonNeutreApproDetailMapper();

                          $bon_neutre_appro_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                          $bon_neutre_appro_detail->setBon_neutre_detail_id($detail->bon_neutre_detail_id);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_montant($mont);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_mont_utilise(0);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_solde($mont);
                          $bon_neutre_appro_detail->setBon_neutre_appro_detail_banque($code_banque2);
                          $bon_neutre_appro_detail_mapper->save($bon_neutre_appro_detail);

                          $bon_neutre_detail2->setBon_neutre_detail_montant_utilise($bon_neutre_detail2->getBon_neutre_detail_montant_utilise() + $mont);
                          $bon_neutre_detail2->setBon_neutre_detail_montant_solde($bon_neutre_detail2->getBon_neutre_detail_montant_solde() - $mont);
                          $bon_neutre_detail2M->update($bon_neutre_detail2);
                                
           
                     $bon_neutre_utilise2 = new Application_Model_EuBonNeutreUtilise();
                     $bon_neutre_utilise2M = new Application_Model_EuBonNeutreUtiliseMapper();

                     $compteur_bon_neutre_utilise = $bon_neutre_utilise2M->findConuter() + 1;
                     $bon_neutre_utilise2->setBon_neutre_utilise_id($compteur_bon_neutre_utilise);
                     $bon_neutre_utilise2->setBon_neutre_id($bon_neutre->bon_neutre_id);
                     $bon_neutre_utilise2->setBon_neutre_utilise_type("P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_libelle("Approvisionnement de BAn de P".substr($bon_neutre_appro_beneficiaire, -1, 1));
                     $bon_neutre_utilise2->setBon_neutre_utilise_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                     $bon_neutre_utilise2->setBon_neutre_utilise_montant($mont);
                     $bon_neutre_utilise2->setBon_neutre_detail_id($bon_neutre_detail2->bon_neutre_detail_id);
                     $bon_neutre_utilise2M->save($bon_neutre_utilise2);
           
                          break;
                        }            
             }
           
           //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
           
           $bon_neutre3_mapper = new Application_Model_EuBonNeutreMapper();
                     $bon_neutre3 = $bon_neutre3_mapper->fetchAllByMembre(strtoupper($bon_neutre_appro_beneficiaire));
           
           if(count($bon_neutre3) > 0) {
               $bon_neutre31 = new Application_Model_EuBonNeutre();
                         $bon_neutre31M = new Application_Model_EuBonNeutreMapper();
                         $bon_neutre31M->find($bon_neutre3->bon_neutre_id, $bon_neutre31);

                         $bon_neutre31->setBon_neutre_code($code_BAn);
                         $bon_neutre31->setBon_neutre_montant($bon_neutre31->getBon_neutre_montant() + $bon_neutre_appro_montant);
                         $bon_neutre31->setBon_neutre_montant_solde($bon_neutre31->getBon_neutre_montant_solde() + $bon_neutre_appro_montant);
                         $bon_neutre31M->update($bon_neutre31);

                         $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                         $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                         $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                         $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                         $bon_neutre_detail->setBon_neutre_id($bon_neutre3->bon_neutre_id);
                         $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                         $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                         $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                         $bon_neutre_detail->setId_canton($canton);
                         $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                         $bon_neutre_detail_mapper->save($bon_neutre_detail);
                         
           } else {
                         $bon_neutre = new Application_Model_EuBonNeutre();
                         $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                         $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                         $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                         $bon_neutre->setBon_neutre_type("BAn");
                         $bon_neutre->setBon_neutre_code($code_BAn);
                         $bon_neutre->setBon_neutre_code_membre(strtoupper($bon_neutre_appro_beneficiaire));
                         $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $bon_neutre->setBon_neutre_montant($bon_neutre_appro_montant);
                         $bon_neutre->setBon_neutre_montant_utilise(0);
                         $bon_neutre->setBon_neutre_montant_solde($bon_neutre_appro_montant);
                         $bon_neutre->setBon_neutre_nom($nom);
                         $bon_neutre->setBon_neutre_prenom($prenom);
                         $bon_neutre->setBon_neutre_raison($raison);
                         $bon_neutre->setBon_neutre_email($email);
                         $bon_neutre->setBon_neutre_mobile($mobile);
                         $bon_neutre_mapper->save($bon_neutre);

                         $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                         $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                         $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                         $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                         $bon_neutre_detail->setBon_neutre_id($compteur_bon_neutre);
                         $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                         $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                         $bon_neutre_detail->setBon_neutre_detail_montant($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                         $bon_neutre_detail->setBon_neutre_detail_montant_solde($bon_neutre_appro_montant);
                         $bon_neutre_detail->setBon_neutre_detail_banque(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_numero(NULL);
                         $bon_neutre_detail->setBon_neutre_detail_date_numero(NULL);
                         $bon_neutre_detail->setId_canton($canton);
                         $bon_neutre_detail->setBon_neutre_appro_id($compteur_bon_neutre_appro);
                         $bon_neutre_detail_mapper->save($bon_neutre_detail);
                    }
          
          $ok = 1;
          ///////////////////////////////////////////////////////////////////////////////////////
                    //$db->commit();
                    $error = "Opération bien effectuée.";// <br />
                    //Vous venez de faire un approvisionnement de Bon d'Achat neutre (BAn). <br />
                    //Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong>";

                    //$sessionmembre->code_BAn = $code_BAn;
                    //$sessionmembre->bon_neutre_appro_apporteur = "";
                    //$sessionmembre->bon_neutre_appro_beneficiaire = "";
                    //$sessionmembre->bon_neutre_appro_montant = "";
                    //$sessionmembre->confirmation_envoi = "";
                    //$this->_redirect('/souscriptionbon/addbanappro');
          
        } catch(Exception $exc) {
                 $error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                 //$db->rollback();
                 $ok = 0;
              }
      } else {  $error = "Champs * obligatoire ..."; 
      $ok = 0;
    }
     //}

return $ok;
}







    public static function addBAnGrosFloozTmoney($code_banque, $code_membre_beneficiaire, $montant_beneficiaire, $numero_beneficiaire, $date_beneficiaire, $date_beneficiaire_valeur) {



       $date_id = Zend_Date::now();
       //$request = $this->getRequest();
     
     //if($request->isPost()) {
      if(isset($code_banque) && $code_banque!="" && isset($code_membre_beneficiaire) && $code_membre_beneficiaire!="" && isset($montant_beneficiaire) && $montant_beneficiaire!="" && isset($numero_beneficiaire) && $numero_beneficiaire!="" && isset($date_beneficiaire) && $date_beneficiaire!="") {
          //$db = Zend_Db_Table::getDefaultAdapter();
              //$db->beginTransaction();
                    try {
                            $date = Zend_Date::now();


                                $banque = new Application_Model_EuBanque();
                                $banqueM = new Application_Model_EuBanqueMapper();
                                $banqueM->find($code_banque, $banque);

                                $code_membre_banque = $banque->code_membre_morale;

                                
              if(substr($code_membre_beneficiaire, -1) == "P") {
              $m_membre = new Application_Model_EuMembreMapper();
              $membre = new Application_Model_EuMembre();
              $retour = $m_membre->find($code_membre_beneficiaire, $membre);
              $libelle = $membre->nom_membre." ".$membre->prenom_membre." #".$membre->code_membre;

                                $bon_neutre_nom = $membre->nom_membre;
                                $bon_neutre_prenom = $membre->prenom_membre;
                                $bon_neutre_raison = "";
                                $bon_neutre_code_membre = "";
                                $bon_neutre_email = $membre->email_membre;
                                $bon_neutre_mobile = $membre->portable_membre;
                                $id_canton = $membre->id_canton;
                     }else if (substr($code_membre_beneficiaire, -1) == "M") {
              $m_membre_morale = new Application_Model_EuMembreMoraleMapper();
              $membre_morale = new Application_Model_EuMembreMorale();
              $retour = $m_membre_morale->find($code_membre_beneficiaire, $membre_morale);
              $libelle = $membre_morale->raison_sociale." #".$membre_morale->code_membre_morale;

   $representationM = new Application_Model_EuRepresentationMapper();
   $representation = $representationM->findbyrep($membre_morale->code_membre_morale);

   $membre2 = new Application_Model_EuMembre();
   $membre2M = new Application_Model_EuMembreMapper();
   $membre2M->find($representation->code_membre, $membre2);

                                $bon_neutre_nom = $membre2->nom_membre;
                                $bon_neutre_prenom = $membre2->prenom_membre;
                                $bon_neutre_raison = $membre_morale->raison_sociale;
                                $bon_neutre_code_membre = $membre_morale->code_membre_morale;
                                $bon_neutre_email = $membre_morale->email_membre;
                                $bon_neutre_mobile = $membre_morale->portable_membre;
                                $id_canton = $membre_morale->id_canton;
               }

            $date_releve = $date_beneficiaire;
            $numero = $numero_beneficiaire;
            $montant = $montant_beneficiaire;
            $date_valeur = $date_beneficiaire_valeur;
            $relbancaire = new Application_Model_EuRelevebancaire ();
            $m_releve = new Application_Model_EuRelevebancaireMapper ();
            $m_detReleve = new Application_Model_EuRelevebancairedetailMapper ();
            $releves = $m_releve->fetchAllByDateFlooz ( $date->toString ( "yyyy-MM-dd" ), $code_banque);


////////////////////////////////////////////////////////////

                if (count ( $releves ) >= 1) {
                    $releve = $releves;// [0]
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $releve->getRelevebancaire_id () );
                    $detReleve->setPublier ( 0 );
                    $detReleve->setRelevebancairedetail_date ( $date_releve);
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_valeur);
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                } else {
                    $lastId = $m_releve->findConuter ();
                    if (isset ( $lastId )) {
                        $lastId ++;
                    } else {
                        $lastId = 1;
                    }
                    $relbancaire->setRelevebancaire_id ( $lastId );
                    $relbancaire->setPublier ( 1 );
                    $relbancaire->setRelevebancaire_banque ( $code_banque );
                    $relbancaire->setRelevebancaire_date ( $date->toString ( "yyyy-MM-dd" ) );
                    $relbancaire->setRelevebancaire_utilisateur ( 1 );
                    $m_releve->save ( $relbancaire );
                    
                    $lastDetId = $m_detReleve->findConuter ();
                    if (isset ( $lastDetId )) {
                        $lastDetId ++;
                    } else {
                        $lastDetId = 1;
                    }
                    $detReleve = new Application_Model_EuRelevebancairedetail ();
                    $detReleve->setRelevebancairedetail_id ( $lastDetId );
                    $detReleve->setRelevebancairedetail_relevebancaire ( $relbancaire->getRelevebancaire_id () );
                    $detReleve->setPublier ( 0 );
                    $detReleve->setRelevebancairedetail_date ( $date_releve );
                    $detReleve->setRelevebancairedetail_date_valeur ( $date_valeur );
                    $detReleve->setRelevebancairedetail_libelle ( $libelle );
                    $detReleve->setRelevebancairedetail_montant ( $montant );
                    $detReleve->setRelevebancairedetail_numero ( $numero );
                    $m_detReleve->save ( $detReleve );
                }




//$code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));/
do{
                    $code_BAn = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn);
}while(count($bon_neutre_detail2) > 0);

do{
                    $code_BAn2 = strtoupper(Util_Utils::genererCodeSMS(9));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn2);
}while(count($bon_neutre_detail2) > 0);

do{
                    $code_BAn3 = strtoupper(Util_Utils::genererCodeSMS(6));
                    $bon_neutre_detail2_mapper = new Application_Model_EuBonNeutreDetailMapper();
                    $bon_neutre_detail2 = $bon_neutre_detail2_mapper->fetchAllByCode($code_BAn3);
}while(count($bon_neutre_detail2) > 0);


///////////////////////////////////calcul commission banque//////////////////////////////
                            
    $montant_commission_banque = $montant_beneficiaire * Util_Utils::getParamEsmc(19) / 100;
    $bon_neutre_montant = $montant_beneficiaire;
    $montant_total = $montant_beneficiaire + $montant_commission_banque;


$bon_neutre_code_membre = $code_membre_beneficiaire;

/////////////////////////////////////controle code membre
//if(isset($bon_neutre_code_membre) && $bon_neutre_code_membre!=""){

//////////////////////////////////////////////
                                $ban2M = new Application_Model_EuBanMapper();
                                $ban2 = $ban2M->fetchAllOneMembre2($code_membre_banque);
                                if($ban2->solde >= $montant_total){ 

                                $ban = new Application_Model_EuBan();
                                $banM = new Application_Model_EuBanMapper();
                                $banM->find($ban2->id_ban, $ban);

                                $ban->setMont_vendu($ban->getMont_vendu() + ($montant_beneficiaire + $montant_commission_banque));
                                $ban->setSolde($ban->getSolde() - ($montant_beneficiaire + $montant_commission_banque));
                                $banM->update($ban);

                                $ban_id = $ban->id_ban;


                            $ban_vendu = new Application_Model_EuBanVendu();
                            $ban_vendu_mapper = new Application_Model_EuBanVenduMapper();

                            $compteur_ban_vendu = $ban_vendu_mapper->findConuter() + 1;
                            $ban_vendu->setId_ban_vendu($compteur_ban_vendu);
                            $ban_vendu->setId_ban($ban_id);
                            $ban_vendu->setDate_ban_vendu($date_id->toString('yyyy-MM-dd'));
                            $ban_vendu->setCode_membre($bon_neutre_code_membre);
                            $ban_vendu->setMont_vendu($montant_beneficiaire + $montant_commission_banque);
                            $ban_vendu->setNumero_recu($numero_beneficiaire);
                            $ban_vendu->setId_user(1);
                            $ban_vendu_mapper->save($ban_vendu);

//////////////////////////////////////////////

                    $bon_neutre2_mapper = new Application_Model_EuBonNeutreMapper();
                    $bon_neutre2 = $bon_neutre2_mapper->fetchAllByMembre($bon_neutre_code_membre);
                    if(count($bon_neutre2) > 0){

                                $bon_neutre = new Application_Model_EuBonNeutre();
                                $bon_neutreM = new Application_Model_EuBonNeutreMapper();
                                $bon_neutreM->find($bon_neutre2->bon_neutre_id, $bon_neutre);

                                $bon_neutre->setBon_neutre_code($code_BAn);
                                $bon_neutre->setBon_neutre_montant($bon_neutre->getBon_neutre_montant() + $montant_beneficiaire + $montant_commission_banque);
                                $bon_neutre->setBon_neutre_montant_solde($bon_neutre->getBon_neutre_montant_solde() + $montant_beneficiaire + $montant_commission_banque);
                                $bon_neutreM->update($bon_neutre);

                                $bon_neutre_id = $bon_neutre->bon_neutre_id;

                        }else{

                            $bon_neutre = new Application_Model_EuBonNeutre();
                            $bon_neutre_mapper = new Application_Model_EuBonNeutreMapper();

                            $compteur_bon_neutre = $bon_neutre_mapper->findConuter() + 1;
                            $bon_neutre->setBon_neutre_id($compteur_bon_neutre);
                            $bon_neutre->setBon_neutre_type("BAn");
                            $bon_neutre->setBon_neutre_code($code_BAn);
                            $bon_neutre->setBon_neutre_code_membre($bon_neutre_code_membre);
                            $bon_neutre->setBon_neutre_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre->setBon_neutre_montant($montant_beneficiaire + $montant_commission_banque);
                            $bon_neutre->setBon_neutre_montant_utilise(0);
                            $bon_neutre->setBon_neutre_montant_solde($montant_beneficiaire + $montant_commission_banque);
                            $bon_neutre->setBon_neutre_nom($bon_neutre_nom);
                            $bon_neutre->setBon_neutre_prenom($bon_neutre_prenom);
                            $bon_neutre->setBon_neutre_raison($bon_neutre_raison);
                            $bon_neutre->setBon_neutre_email($bon_neutre_email);
                            $bon_neutre->setBon_neutre_mobile($bon_neutre_mobile);
                            $bon_neutre_mapper->save($bon_neutre);

                                $bon_neutre_id = $compteur_bon_neutre;
                            }


                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($montant_beneficiaire);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($montant_beneficiaire);
                            $bon_neutre_detail->setBon_neutre_detail_banque($code_banque);
                            $bon_neutre_detail->setBon_neutre_detail_numero($numero_beneficiaire);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($date_beneficiaire);
                            $bon_neutre_detail->setId_canton($id_canton);
                            $bon_neutre_detail->setBon_neutre_detail_commission("AvecCommission");
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);



/////////////////////////////commission esmc banque
                            $bon_neutre_detail = new Application_Model_EuBonNeutreDetail();
                            $bon_neutre_detail_mapper = new Application_Model_EuBonNeutreDetailMapper();

                            $compteur_bon_neutre_detail = $bon_neutre_detail_mapper->findConuter() + 1;
                            $bon_neutre_detail->setBon_neutre_detail_id($compteur_bon_neutre_detail);
                            $bon_neutre_detail->setBon_neutre_id($bon_neutre_id);
                            $bon_neutre_detail->setBon_neutre_detail_code($code_BAn2);
                            $bon_neutre_detail->setBon_neutre_detail_date($date_id->toString('yyyy-MM-dd HH:mm:ss'));
                            $bon_neutre_detail->setBon_neutre_detail_montant($montant_commission_banque);
                            $bon_neutre_detail->setBon_neutre_detail_montant_utilise(0);
                            $bon_neutre_detail->setBon_neutre_detail_montant_solde($montant_commission_banque);
                            $bon_neutre_detail->setBon_neutre_detail_banque("CS-ESMC");
                            $bon_neutre_detail->setBon_neutre_detail_type("COM");
                            $bon_neutre_detail->setBon_neutre_detail_numero($code_BAn3);
                            $bon_neutre_detail->setBon_neutre_detail_date_numero($date_id->toString('yyyy-MM-dd'));
                            $bon_neutre_detail->setId_canton($id_canton);
                            $bon_neutre_detail->setBon_neutre_detail_commission("AvecCommission");
                            $bon_neutre_detail_mapper->save($bon_neutre_detail);


                                $relevebancairedetail2 = new Application_Model_EuRelevebancairedetail();
                                $relevebancairedetail2M = new Application_Model_EuRelevebancairedetailMapper();
                                $relevebancairedetail2M->find($lastDetId, $relevebancairedetail2);

                                $relevebancairedetail2->setPublier(1);
                                $relevebancairedetail2M->update($relevebancairedetail2);
        
                            ///////////////////////////////////////////////////////////////////////////////////////
                            //$db->commit();
$ok = 1;
                            //$sessionbanqueopi->code_BAn = $code_BAn;
                            //$sessionbanqueopi->membre_code = $bon_neutre->bon_neutre_code_membre;

                            /*$error = "Opération bien effectuée. <br />
Vous venez de souscrire au Bon d'Achat neutre (BAn) en gros. <br />
<br />
";*/
/*if($sessionbanqueopi->membre_code != "" && $sessionbanqueopi->membre_code != NULL){
   $sessionbanqueopi->error .= "Le code du Bon d'Achat neutre (BAn) se trouve dans le compte marchand du membre <strong>".$sessionbanqueopi->membre_code."</strong><br />";
   $sessionbanqueopi->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
} else {
    $sessionbanqueopi->error .= "Voici le code du Bon d'Achat neutre (BAn) : <strong>".$code_BAn."</strong><br />";
}*/
    /*$sessionbanqueopi->error .= "<strong>Veuillez bien noter votre code BAn. Il est très important. </strong>Le cas échéant, en cas de perte, reprenez l'opération.";*/

                            //$this->_redirect('/banqueopi/addbangros');
                            //return;
}
//    }

                    }  catch (Exception $exc) {
                        $error = $exc->getMessage() . ': ' . $exc->getTraceAsString();
                        //$db->rollback();
                        //$this->_redirect('/banqueopi/addbangros');
                        $ok = 0;
                        //return;
                    }

      } else {  $error = "Champs * obligatoire ..."; 
      $ok = 0;
    }
     //}

return $ok;
}












    }



?>
